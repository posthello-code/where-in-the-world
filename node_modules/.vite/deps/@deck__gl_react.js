import {
  require_react
} from "./chunk-TV3BLHMT.js";
import {
  __commonJS,
  __export,
  __publicField,
  __toESM
} from "./chunk-DC5AMYBS.js";

// browser-external:child_process
var require_child_process = __commonJS({
  "browser-external:child_process"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_3, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "child_process" has been externalized for browser compatibility. Cannot access "child_process.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// .yarn/__virtual__/@deck.gl-react-virtual-e01d66b29a/4/.yarn/berry/cache/@deck.gl-react-npm-9.1.14-4f5993c079-10c0.zip/node_modules/@deck.gl/react/dist/deckgl.js
var React2 = __toESM(require_react(), 1);
var import_react6 = __toESM(require_react(), 1);

// .yarn/__virtual__/@loaders.gl-loader-utils-virtual-64f25e84aa/4/.yarn/berry/cache/@loaders.gl-loader-utils-npm-4.3.4-25e8600919-10c0.zip/node_modules/@loaders.gl/loader-utils/dist/lib/env-utils/assert.js
function assert(condition, message2) {
  if (!condition) {
    throw new Error(message2 || "loader assertion failed.");
  }
}

// .yarn/__virtual__/@loaders.gl-loader-utils-virtual-64f25e84aa/4/.yarn/berry/cache/@loaders.gl-loader-utils-npm-4.3.4-25e8600919-10c0.zip/node_modules/@loaders.gl/loader-utils/dist/lib/env-utils/globals.js
var globals = {
  self: typeof self !== "undefined" && self,
  window: typeof window !== "undefined" && window,
  global: typeof global !== "undefined" && global,
  document: typeof document !== "undefined" && document
};
var self_ = globals.self || globals.window || globals.global || {};
var window_ = globals.window || globals.self || globals.global || {};
var global_ = globals.global || globals.self || globals.window || {};
var document_ = globals.document || {};
var isBrowser = (
  // @ts-ignore process does not exist on browser
  Boolean(typeof process !== "object" || String(process) !== "[object process]" || process.browser)
);
var matches = typeof process !== "undefined" && process.version && /v([0-9]*)/.exec(process.version);
var nodeVersion = matches && parseFloat(matches[1]) || 0;

// ../../../.yarn/berry/cache/@probe.gl-env-npm-4.1.0-c13e3e98de-10c0.zip/node_modules/@probe.gl/env/dist/lib/globals.js
var window_2 = globalThis;
var document_2 = globalThis.document || {};
var process_ = globalThis.process || {};
var console_ = globalThis.console;
var navigator_ = globalThis.navigator || {};

// ../../../.yarn/berry/cache/@probe.gl-env-npm-4.1.0-c13e3e98de-10c0.zip/node_modules/@probe.gl/env/dist/lib/is-electron.js
function isElectron(mockUserAgent) {
  var _a3, _b;
  if (typeof window !== "undefined" && ((_a3 = window.process) == null ? void 0 : _a3.type) === "renderer") {
    return true;
  }
  if (typeof process !== "undefined" && Boolean((_b = process.versions) == null ? void 0 : _b["electron"])) {
    return true;
  }
  const realUserAgent = typeof navigator !== "undefined" && navigator.userAgent;
  const userAgent2 = mockUserAgent || realUserAgent;
  return Boolean(userAgent2 && userAgent2.indexOf("Electron") >= 0);
}

// ../../../.yarn/berry/cache/@probe.gl-env-npm-4.1.0-c13e3e98de-10c0.zip/node_modules/@probe.gl/env/dist/lib/is-browser.js
function isBrowser2() {
  const isNode = (
    // @ts-expect-error
    typeof process === "object" && String(process) === "[object process]" && !(process == null ? void 0 : process.browser)
  );
  return !isNode || isElectron();
}

// ../../../.yarn/berry/cache/@probe.gl-env-npm-4.1.0-c13e3e98de-10c0.zip/node_modules/@probe.gl/env/dist/lib/get-browser.js
function getBrowser(mockUserAgent) {
  if (!mockUserAgent && !isBrowser2()) {
    return "Node";
  }
  if (isElectron(mockUserAgent)) {
    return "Electron";
  }
  const userAgent2 = mockUserAgent || navigator_.userAgent || "";
  if (userAgent2.indexOf("Edge") > -1) {
    return "Edge";
  }
  if (globalThis.chrome) {
    return "Chrome";
  }
  if (globalThis.safari) {
    return "Safari";
  }
  if (globalThis.mozInnerScreenX) {
    return "Firefox";
  }
  return "Unknown";
}

// ../../../.yarn/berry/cache/@probe.gl-env-npm-4.1.0-c13e3e98de-10c0.zip/node_modules/@probe.gl/env/dist/index.js
var VERSION = true ? "4.1.0" : "untranspiled source";

// ../../../.yarn/berry/cache/@probe.gl-log-npm-4.1.0-911d6afde2-10c0.zip/node_modules/@probe.gl/log/dist/utils/local-storage.js
function getStorage(type) {
  try {
    const storage = window[type];
    const x3 = "__storage_test__";
    storage.setItem(x3, x3);
    storage.removeItem(x3);
    return storage;
  } catch (e4) {
    return null;
  }
}
var LocalStorage = class {
  constructor(id, defaultConfig, type = "sessionStorage") {
    this.storage = getStorage(type);
    this.id = id;
    this.config = defaultConfig;
    this._loadConfiguration();
  }
  getConfiguration() {
    return this.config;
  }
  setConfiguration(configuration) {
    Object.assign(this.config, configuration);
    if (this.storage) {
      const serialized = JSON.stringify(this.config);
      this.storage.setItem(this.id, serialized);
    }
  }
  // Get config from persistent store, if available
  _loadConfiguration() {
    let configuration = {};
    if (this.storage) {
      const serializedConfiguration = this.storage.getItem(this.id);
      configuration = serializedConfiguration ? JSON.parse(serializedConfiguration) : {};
    }
    Object.assign(this.config, configuration);
    return this;
  }
};

// ../../../.yarn/berry/cache/@probe.gl-log-npm-4.1.0-911d6afde2-10c0.zip/node_modules/@probe.gl/log/dist/utils/formatters.js
function formatTime(ms) {
  let formatted;
  if (ms < 10) {
    formatted = `${ms.toFixed(2)}ms`;
  } else if (ms < 100) {
    formatted = `${ms.toFixed(1)}ms`;
  } else if (ms < 1e3) {
    formatted = `${ms.toFixed(0)}ms`;
  } else {
    formatted = `${(ms / 1e3).toFixed(2)}s`;
  }
  return formatted;
}
function leftPad(string, length5 = 8) {
  const padLength = Math.max(length5 - string.length, 0);
  return `${" ".repeat(padLength)}${string}`;
}

// ../../../.yarn/berry/cache/@probe.gl-log-npm-4.1.0-911d6afde2-10c0.zip/node_modules/@probe.gl/log/dist/utils/color.js
var COLOR;
(function(COLOR2) {
  COLOR2[COLOR2["BLACK"] = 30] = "BLACK";
  COLOR2[COLOR2["RED"] = 31] = "RED";
  COLOR2[COLOR2["GREEN"] = 32] = "GREEN";
  COLOR2[COLOR2["YELLOW"] = 33] = "YELLOW";
  COLOR2[COLOR2["BLUE"] = 34] = "BLUE";
  COLOR2[COLOR2["MAGENTA"] = 35] = "MAGENTA";
  COLOR2[COLOR2["CYAN"] = 36] = "CYAN";
  COLOR2[COLOR2["WHITE"] = 37] = "WHITE";
  COLOR2[COLOR2["BRIGHT_BLACK"] = 90] = "BRIGHT_BLACK";
  COLOR2[COLOR2["BRIGHT_RED"] = 91] = "BRIGHT_RED";
  COLOR2[COLOR2["BRIGHT_GREEN"] = 92] = "BRIGHT_GREEN";
  COLOR2[COLOR2["BRIGHT_YELLOW"] = 93] = "BRIGHT_YELLOW";
  COLOR2[COLOR2["BRIGHT_BLUE"] = 94] = "BRIGHT_BLUE";
  COLOR2[COLOR2["BRIGHT_MAGENTA"] = 95] = "BRIGHT_MAGENTA";
  COLOR2[COLOR2["BRIGHT_CYAN"] = 96] = "BRIGHT_CYAN";
  COLOR2[COLOR2["BRIGHT_WHITE"] = 97] = "BRIGHT_WHITE";
})(COLOR || (COLOR = {}));
var BACKGROUND_INCREMENT = 10;
function getColor(color) {
  if (typeof color !== "string") {
    return color;
  }
  color = color.toUpperCase();
  return COLOR[color] || COLOR.WHITE;
}
function addColor(string, color, background) {
  if (!isBrowser2 && typeof string === "string") {
    if (color) {
      const colorCode = getColor(color);
      string = `\x1B[${colorCode}m${string}\x1B[39m`;
    }
    if (background) {
      const colorCode = getColor(background);
      string = `\x1B[${colorCode + BACKGROUND_INCREMENT}m${string}\x1B[49m`;
    }
  }
  return string;
}

// ../../../.yarn/berry/cache/@probe.gl-log-npm-4.1.0-911d6afde2-10c0.zip/node_modules/@probe.gl/log/dist/utils/autobind.js
function autobind(obj, predefined = ["constructor"]) {
  const proto = Object.getPrototypeOf(obj);
  const propNames = Object.getOwnPropertyNames(proto);
  const object = obj;
  for (const key of propNames) {
    const value = object[key];
    if (typeof value === "function") {
      if (!predefined.find((name2) => key === name2)) {
        object[key] = value.bind(obj);
      }
    }
  }
}

// ../../../.yarn/berry/cache/@probe.gl-log-npm-4.1.0-911d6afde2-10c0.zip/node_modules/@probe.gl/log/dist/utils/assert.js
function assert3(condition, message2) {
  if (!condition) {
    throw new Error(message2 || "Assertion failed");
  }
}

// ../../../.yarn/berry/cache/@probe.gl-log-npm-4.1.0-911d6afde2-10c0.zip/node_modules/@probe.gl/log/dist/utils/hi-res-timestamp.js
function getHiResTimestamp() {
  var _a3, _b, _c, _d, _e2;
  let timestamp;
  if (isBrowser2() && window_2.performance) {
    timestamp = (_c = (_b = (_a3 = window_2) == null ? void 0 : _a3.performance) == null ? void 0 : _b.now) == null ? void 0 : _c.call(_b);
  } else if ("hrtime" in process_) {
    const timeParts = (_e2 = (_d = process_) == null ? void 0 : _d.hrtime) == null ? void 0 : _e2.call(_d);
    timestamp = timeParts[0] * 1e3 + timeParts[1] / 1e6;
  } else {
    timestamp = Date.now();
  }
  return timestamp;
}

// ../../../.yarn/berry/cache/@probe.gl-log-npm-4.1.0-911d6afde2-10c0.zip/node_modules/@probe.gl/log/dist/log.js
var originalConsole = {
  debug: isBrowser2() ? console.debug || console.log : console.log,
  log: console.log,
  info: console.info,
  warn: console.warn,
  error: console.error
};
var DEFAULT_LOG_CONFIGURATION = {
  enabled: true,
  level: 0
};
function noop() {
}
var cache = {};
var ONCE = { once: true };
var Log = class {
  constructor({ id } = { id: "" }) {
    this.VERSION = VERSION;
    this._startTs = getHiResTimestamp();
    this._deltaTs = getHiResTimestamp();
    this.userData = {};
    this.LOG_THROTTLE_TIMEOUT = 0;
    this.id = id;
    this.userData = {};
    this._storage = new LocalStorage(`__probe-${this.id}__`, DEFAULT_LOG_CONFIGURATION);
    this.timeStamp(`${this.id} started`);
    autobind(this);
    Object.seal(this);
  }
  set level(newLevel) {
    this.setLevel(newLevel);
  }
  get level() {
    return this.getLevel();
  }
  isEnabled() {
    return this._storage.config.enabled;
  }
  getLevel() {
    return this._storage.config.level;
  }
  /** @return milliseconds, with fractions */
  getTotal() {
    return Number((getHiResTimestamp() - this._startTs).toPrecision(10));
  }
  /** @return milliseconds, with fractions */
  getDelta() {
    return Number((getHiResTimestamp() - this._deltaTs).toPrecision(10));
  }
  /** @deprecated use logLevel */
  set priority(newPriority) {
    this.level = newPriority;
  }
  /** @deprecated use logLevel */
  get priority() {
    return this.level;
  }
  /** @deprecated use logLevel */
  getPriority() {
    return this.level;
  }
  // Configure
  enable(enabled = true) {
    this._storage.setConfiguration({ enabled });
    return this;
  }
  setLevel(level) {
    this._storage.setConfiguration({ level });
    return this;
  }
  /** return the current status of the setting */
  get(setting) {
    return this._storage.config[setting];
  }
  // update the status of the setting
  set(setting, value) {
    this._storage.setConfiguration({ [setting]: value });
  }
  /** Logs the current settings as a table */
  settings() {
    if (console.table) {
      console.table(this._storage.config);
    } else {
      console.log(this._storage.config);
    }
  }
  // Unconditional logging
  assert(condition, message2) {
    if (!condition) {
      throw new Error(message2 || "Assertion failed");
    }
  }
  warn(message2) {
    return this._getLogFunction(0, message2, originalConsole.warn, arguments, ONCE);
  }
  error(message2) {
    return this._getLogFunction(0, message2, originalConsole.error, arguments);
  }
  /** Print a deprecation warning */
  deprecated(oldUsage, newUsage) {
    return this.warn(`\`${oldUsage}\` is deprecated and will be removed in a later version. Use \`${newUsage}\` instead`);
  }
  /** Print a removal warning */
  removed(oldUsage, newUsage) {
    return this.error(`\`${oldUsage}\` has been removed. Use \`${newUsage}\` instead`);
  }
  probe(logLevel, message2) {
    return this._getLogFunction(logLevel, message2, originalConsole.log, arguments, {
      time: true,
      once: true
    });
  }
  log(logLevel, message2) {
    return this._getLogFunction(logLevel, message2, originalConsole.debug, arguments);
  }
  info(logLevel, message2) {
    return this._getLogFunction(logLevel, message2, console.info, arguments);
  }
  once(logLevel, message2) {
    return this._getLogFunction(logLevel, message2, originalConsole.debug || originalConsole.info, arguments, ONCE);
  }
  /** Logs an object as a table */
  table(logLevel, table, columns) {
    if (table) {
      return this._getLogFunction(logLevel, table, console.table || noop, columns && [columns], {
        tag: getTableHeader(table)
      });
    }
    return noop;
  }
  time(logLevel, message2) {
    return this._getLogFunction(logLevel, message2, console.time ? console.time : console.info);
  }
  timeEnd(logLevel, message2) {
    return this._getLogFunction(logLevel, message2, console.timeEnd ? console.timeEnd : console.info);
  }
  timeStamp(logLevel, message2) {
    return this._getLogFunction(logLevel, message2, console.timeStamp || noop);
  }
  group(logLevel, message2, opts = { collapsed: false }) {
    const options = normalizeArguments({ logLevel, message: message2, opts });
    const { collapsed } = opts;
    options.method = (collapsed ? console.groupCollapsed : console.group) || console.info;
    return this._getLogFunction(options);
  }
  groupCollapsed(logLevel, message2, opts = {}) {
    return this.group(logLevel, message2, Object.assign({}, opts, { collapsed: true }));
  }
  groupEnd(logLevel) {
    return this._getLogFunction(logLevel, "", console.groupEnd || noop);
  }
  // EXPERIMENTAL
  withGroup(logLevel, message2, func) {
    this.group(logLevel, message2)();
    try {
      func();
    } finally {
      this.groupEnd(logLevel)();
    }
  }
  trace() {
    if (console.trace) {
      console.trace();
    }
  }
  // PRIVATE METHODS
  /** Deduces log level from a variety of arguments */
  _shouldLog(logLevel) {
    return this.isEnabled() && this.getLevel() >= normalizeLogLevel(logLevel);
  }
  _getLogFunction(logLevel, message2, method, args, opts) {
    if (this._shouldLog(logLevel)) {
      opts = normalizeArguments({ logLevel, message: message2, args, opts });
      method = method || opts.method;
      assert3(method);
      opts.total = this.getTotal();
      opts.delta = this.getDelta();
      this._deltaTs = getHiResTimestamp();
      const tag = opts.tag || opts.message;
      if (opts.once && tag) {
        if (!cache[tag]) {
          cache[tag] = getHiResTimestamp();
        } else {
          return noop;
        }
      }
      message2 = decorateMessage(this.id, opts.message, opts);
      return method.bind(console, message2, ...opts.args);
    }
    return noop;
  }
};
Log.VERSION = VERSION;
function normalizeLogLevel(logLevel) {
  if (!logLevel) {
    return 0;
  }
  let resolvedLevel;
  switch (typeof logLevel) {
    case "number":
      resolvedLevel = logLevel;
      break;
    case "object":
      resolvedLevel = logLevel.logLevel || logLevel.priority || 0;
      break;
    default:
      return 0;
  }
  assert3(Number.isFinite(resolvedLevel) && resolvedLevel >= 0);
  return resolvedLevel;
}
function normalizeArguments(opts) {
  const { logLevel, message: message2 } = opts;
  opts.logLevel = normalizeLogLevel(logLevel);
  const args = opts.args ? Array.from(opts.args) : [];
  while (args.length && args.shift() !== message2) {
  }
  switch (typeof logLevel) {
    case "string":
    case "function":
      if (message2 !== void 0) {
        args.unshift(message2);
      }
      opts.message = logLevel;
      break;
    case "object":
      Object.assign(opts, logLevel);
      break;
    default:
  }
  if (typeof opts.message === "function") {
    opts.message = opts.message();
  }
  const messageType = typeof opts.message;
  assert3(messageType === "string" || messageType === "object");
  return Object.assign(opts, { args }, opts.opts);
}
function decorateMessage(id, message2, opts) {
  if (typeof message2 === "string") {
    const time = opts.time ? leftPad(formatTime(opts.total)) : "";
    message2 = opts.time ? `${id}: ${time}  ${message2}` : `${id}: ${message2}`;
    message2 = addColor(message2, opts.color, opts.background);
  }
  return message2;
}
function getTableHeader(table) {
  for (const key in table) {
    for (const title in table[key]) {
      return title || "untitled";
    }
  }
  return "empty";
}

// ../../../.yarn/berry/cache/@probe.gl-log-npm-4.1.0-911d6afde2-10c0.zip/node_modules/@probe.gl/log/dist/init.js
globalThis.probe = {};

// ../../../.yarn/berry/cache/@probe.gl-log-npm-4.1.0-911d6afde2-10c0.zip/node_modules/@probe.gl/log/dist/index.js
var dist_default = new Log({ id: "@probe.gl/log" });

// .yarn/__virtual__/@loaders.gl-loader-utils-virtual-64f25e84aa/4/.yarn/berry/cache/@loaders.gl-loader-utils-npm-4.3.4-25e8600919-10c0.zip/node_modules/@loaders.gl/loader-utils/dist/lib/log-utils/log.js
var VERSION2 = true ? "4.3.3" : "latest";
var version = VERSION2[0] >= "0" && VERSION2[0] <= "9" ? `v${VERSION2}` : "";
function createLog() {
  const log3 = new Log({ id: "loaders.gl" });
  globalThis.loaders = globalThis.loaders || {};
  globalThis.loaders.log = log3;
  globalThis.loaders.version = version;
  globalThis.probe = globalThis.probe || {};
  globalThis.probe.loaders = log3;
  return log3;
}
var log = createLog();

// .yarn/__virtual__/@loaders.gl-loader-utils-virtual-64f25e84aa/4/.yarn/berry/cache/@loaders.gl-loader-utils-npm-4.3.4-25e8600919-10c0.zip/node_modules/@loaders.gl/loader-utils/dist/lib/option-utils/merge-loader-options.js
function mergeLoaderOptions(baseOptions, newOptions) {
  return mergeOptionsRecursively(baseOptions || {}, newOptions);
}
function mergeOptionsRecursively(baseOptions, newOptions, level = 0) {
  if (level > 3) {
    return newOptions;
  }
  const options = { ...baseOptions };
  for (const [key, newValue] of Object.entries(newOptions)) {
    if (newValue && typeof newValue === "object" && !Array.isArray(newValue)) {
      options[key] = mergeOptionsRecursively(options[key] || {}, newOptions[key], level + 1);
    } else {
      options[key] = newOptions[key];
    }
  }
  return options;
}

// .yarn/__virtual__/@loaders.gl-worker-utils-virtual-66baeb0b73/4/.yarn/berry/cache/@loaders.gl-worker-utils-npm-4.3.4-5391e7da36-10c0.zip/node_modules/@loaders.gl/worker-utils/dist/lib/env-utils/version.js
var NPM_TAG = "latest";
function getVersion() {
  var _a3;
  if (!((_a3 = globalThis._loadersgl_) == null ? void 0 : _a3.version)) {
    globalThis._loadersgl_ = globalThis._loadersgl_ || {};
    if (false) {
      console.warn("loaders.gl: The __VERSION__ variable is not injected using babel plugin. Latest unstable workers would be fetched from the CDN.");
      globalThis._loadersgl_.version = NPM_TAG;
    } else {
      globalThis._loadersgl_.version = "4.3.3";
    }
  }
  return globalThis._loadersgl_.version;
}
var VERSION3 = getVersion();

// .yarn/__virtual__/@loaders.gl-worker-utils-virtual-66baeb0b73/4/.yarn/berry/cache/@loaders.gl-worker-utils-npm-4.3.4-5391e7da36-10c0.zip/node_modules/@loaders.gl/worker-utils/dist/lib/env-utils/assert.js
function assert4(condition, message2) {
  if (!condition) {
    throw new Error(message2 || "loaders.gl assertion failed.");
  }
}

// .yarn/__virtual__/@loaders.gl-worker-utils-virtual-66baeb0b73/4/.yarn/berry/cache/@loaders.gl-worker-utils-npm-4.3.4-5391e7da36-10c0.zip/node_modules/@loaders.gl/worker-utils/dist/lib/env-utils/globals.js
var globals2 = {
  self: typeof self !== "undefined" && self,
  window: typeof window !== "undefined" && window,
  global: typeof global !== "undefined" && global,
  document: typeof document !== "undefined" && document
};
var self_2 = globals2.self || globals2.window || globals2.global || {};
var window_3 = globals2.window || globals2.self || globals2.global || {};
var global_3 = globals2.global || globals2.self || globals2.window || {};
var document_3 = globals2.document || {};
var isBrowser3 = (
  // @ts-ignore process.browser
  typeof process !== "object" || String(process) !== "[object process]" || process.browser
);
var isMobile2 = typeof window !== "undefined" && typeof window.orientation !== "undefined";
var matches2 = typeof process !== "undefined" && process.version && /v([0-9]*)/.exec(process.version);
var nodeVersion2 = matches2 && parseFloat(matches2[1]) || 0;

// .yarn/__virtual__/@loaders.gl-worker-utils-virtual-66baeb0b73/4/.yarn/berry/cache/@loaders.gl-worker-utils-npm-4.3.4-5391e7da36-10c0.zip/node_modules/@loaders.gl/worker-utils/dist/lib/worker-farm/worker-job.js
var WorkerJob = class {
  constructor(jobName, workerThread) {
    __publicField(this, "name");
    __publicField(this, "workerThread");
    __publicField(this, "isRunning", true);
    /** Promise that resolves when Job is done */
    __publicField(this, "result");
    __publicField(this, "_resolve", () => {
    });
    __publicField(this, "_reject", () => {
    });
    this.name = jobName;
    this.workerThread = workerThread;
    this.result = new Promise((resolve2, reject) => {
      this._resolve = resolve2;
      this._reject = reject;
    });
  }
  /**
   * Send a message to the job's worker thread
   * @param data any data structure, ideally consisting mostly of transferrable objects
   */
  postMessage(type, payload) {
    this.workerThread.postMessage({
      source: "loaders.gl",
      // Lets worker ignore unrelated messages
      type,
      payload
    });
  }
  /**
   * Call to resolve the `result` Promise with the supplied value
   */
  done(value) {
    assert4(this.isRunning);
    this.isRunning = false;
    this._resolve(value);
  }
  /**
   * Call to reject the `result` Promise with the supplied error
   */
  error(error) {
    assert4(this.isRunning);
    this.isRunning = false;
    this._reject(error);
  }
};

// .yarn/__virtual__/@loaders.gl-worker-utils-virtual-66baeb0b73/4/.yarn/berry/cache/@loaders.gl-worker-utils-npm-4.3.4-5391e7da36-10c0.zip/node_modules/@loaders.gl/worker-utils/dist/lib/node/worker_threads-browser.js
var NodeWorker = class {
  terminate() {
  }
};

// .yarn/__virtual__/@loaders.gl-worker-utils-virtual-66baeb0b73/4/.yarn/berry/cache/@loaders.gl-worker-utils-npm-4.3.4-5391e7da36-10c0.zip/node_modules/@loaders.gl/worker-utils/dist/lib/worker-utils/get-loadable-worker-url.js
var workerURLCache = /* @__PURE__ */ new Map();
function getLoadableWorkerURL(props) {
  assert4(props.source && !props.url || !props.source && props.url);
  let workerURL = workerURLCache.get(props.source || props.url);
  if (!workerURL) {
    if (props.url) {
      workerURL = getLoadableWorkerURLFromURL(props.url);
      workerURLCache.set(props.url, workerURL);
    }
    if (props.source) {
      workerURL = getLoadableWorkerURLFromSource(props.source);
      workerURLCache.set(props.source, workerURL);
    }
  }
  assert4(workerURL);
  return workerURL;
}
function getLoadableWorkerURLFromURL(url) {
  if (!url.startsWith("http")) {
    return url;
  }
  const workerSource = buildScriptSource(url);
  return getLoadableWorkerURLFromSource(workerSource);
}
function getLoadableWorkerURLFromSource(workerSource) {
  const blob = new Blob([workerSource], { type: "application/javascript" });
  return URL.createObjectURL(blob);
}
function buildScriptSource(workerUrl) {
  return `try {
  importScripts('${workerUrl}');
} catch (error) {
  console.error(error);
  throw error;
}`;
}

// .yarn/__virtual__/@loaders.gl-worker-utils-virtual-66baeb0b73/4/.yarn/berry/cache/@loaders.gl-worker-utils-npm-4.3.4-5391e7da36-10c0.zip/node_modules/@loaders.gl/worker-utils/dist/lib/worker-utils/get-transfer-list.js
function getTransferList(object, recursive = true, transfers) {
  const transfersSet = transfers || /* @__PURE__ */ new Set();
  if (!object) {
  } else if (isTransferable(object)) {
    transfersSet.add(object);
  } else if (isTransferable(object.buffer)) {
    transfersSet.add(object.buffer);
  } else if (ArrayBuffer.isView(object)) {
  } else if (recursive && typeof object === "object") {
    for (const key in object) {
      getTransferList(object[key], recursive, transfersSet);
    }
  }
  return transfers === void 0 ? Array.from(transfersSet) : [];
}
function isTransferable(object) {
  if (!object) {
    return false;
  }
  if (object instanceof ArrayBuffer) {
    return true;
  }
  if (typeof MessagePort !== "undefined" && object instanceof MessagePort) {
    return true;
  }
  if (typeof ImageBitmap !== "undefined" && object instanceof ImageBitmap) {
    return true;
  }
  if (typeof OffscreenCanvas !== "undefined" && object instanceof OffscreenCanvas) {
    return true;
  }
  return false;
}

// .yarn/__virtual__/@loaders.gl-worker-utils-virtual-66baeb0b73/4/.yarn/berry/cache/@loaders.gl-worker-utils-npm-4.3.4-5391e7da36-10c0.zip/node_modules/@loaders.gl/worker-utils/dist/lib/worker-farm/worker-thread.js
var NOOP = () => {
};
var WorkerThread = class {
  constructor(props) {
    __publicField(this, "name");
    __publicField(this, "source");
    __publicField(this, "url");
    __publicField(this, "terminated", false);
    __publicField(this, "worker");
    __publicField(this, "onMessage");
    __publicField(this, "onError");
    __publicField(this, "_loadableURL", "");
    const { name: name2, source: source4, url } = props;
    assert4(source4 || url);
    this.name = name2;
    this.source = source4;
    this.url = url;
    this.onMessage = NOOP;
    this.onError = (error) => console.log(error);
    this.worker = isBrowser3 ? this._createBrowserWorker() : this._createNodeWorker();
  }
  /** Checks if workers are supported on this platform */
  static isSupported() {
    return typeof Worker !== "undefined" && isBrowser3 || typeof NodeWorker !== "undefined" && !isBrowser3;
  }
  /**
   * Terminate this worker thread
   * @note Can free up significant memory
   */
  destroy() {
    this.onMessage = NOOP;
    this.onError = NOOP;
    this.worker.terminate();
    this.terminated = true;
  }
  get isRunning() {
    return Boolean(this.onMessage);
  }
  /**
   * Send a message to this worker thread
   * @param data any data structure, ideally consisting mostly of transferrable objects
   * @param transferList If not supplied, calculated automatically by traversing data
   */
  postMessage(data, transferList) {
    transferList = transferList || getTransferList(data);
    this.worker.postMessage(data, transferList);
  }
  // PRIVATE
  /**
   * Generate a standard Error from an ErrorEvent
   * @param event
   */
  _getErrorFromErrorEvent(event) {
    let message2 = "Failed to load ";
    message2 += `worker ${this.name} from ${this.url}. `;
    if (event.message) {
      message2 += `${event.message} in `;
    }
    if (event.lineno) {
      message2 += `:${event.lineno}:${event.colno}`;
    }
    return new Error(message2);
  }
  /**
   * Creates a worker thread on the browser
   */
  _createBrowserWorker() {
    this._loadableURL = getLoadableWorkerURL({ source: this.source, url: this.url });
    const worker = new Worker(this._loadableURL, { name: this.name });
    worker.onmessage = (event) => {
      if (!event.data) {
        this.onError(new Error("No data received"));
      } else {
        this.onMessage(event.data);
      }
    };
    worker.onerror = (error) => {
      this.onError(this._getErrorFromErrorEvent(error));
      this.terminated = true;
    };
    worker.onmessageerror = (event) => console.error(event);
    return worker;
  }
  /**
   * Creates a worker thread in node.js
   * @todo https://nodejs.org/api/async_hooks.html#async-resource-worker-pool
   */
  _createNodeWorker() {
    let worker;
    if (this.url) {
      const absolute = this.url.includes(":/") || this.url.startsWith("/");
      const url = absolute ? this.url : `./${this.url}`;
      worker = new NodeWorker(url, { eval: false });
    } else if (this.source) {
      worker = new NodeWorker(this.source, { eval: true });
    } else {
      throw new Error("no worker");
    }
    worker.on("message", (data) => {
      this.onMessage(data);
    });
    worker.on("error", (error) => {
      this.onError(error);
    });
    worker.on("exit", (code) => {
    });
    return worker;
  }
};

// .yarn/__virtual__/@loaders.gl-worker-utils-virtual-66baeb0b73/4/.yarn/berry/cache/@loaders.gl-worker-utils-npm-4.3.4-5391e7da36-10c0.zip/node_modules/@loaders.gl/worker-utils/dist/lib/worker-farm/worker-pool.js
var WorkerPool = class {
  /**
   * @param processor - worker function
   * @param maxConcurrency - max count of workers
   */
  constructor(props) {
    __publicField(this, "name", "unnamed");
    __publicField(this, "source");
    // | Function;
    __publicField(this, "url");
    __publicField(this, "maxConcurrency", 1);
    __publicField(this, "maxMobileConcurrency", 1);
    __publicField(this, "onDebug", () => {
    });
    __publicField(this, "reuseWorkers", true);
    __publicField(this, "props", {});
    __publicField(this, "jobQueue", []);
    __publicField(this, "idleQueue", []);
    __publicField(this, "count", 0);
    __publicField(this, "isDestroyed", false);
    this.source = props.source;
    this.url = props.url;
    this.setProps(props);
  }
  /** Checks if workers are supported on this platform */
  static isSupported() {
    return WorkerThread.isSupported();
  }
  /**
   * Terminates all workers in the pool
   * @note Can free up significant memory
   */
  destroy() {
    this.idleQueue.forEach((worker) => worker.destroy());
    this.isDestroyed = true;
  }
  setProps(props) {
    this.props = { ...this.props, ...props };
    if (props.name !== void 0) {
      this.name = props.name;
    }
    if (props.maxConcurrency !== void 0) {
      this.maxConcurrency = props.maxConcurrency;
    }
    if (props.maxMobileConcurrency !== void 0) {
      this.maxMobileConcurrency = props.maxMobileConcurrency;
    }
    if (props.reuseWorkers !== void 0) {
      this.reuseWorkers = props.reuseWorkers;
    }
    if (props.onDebug !== void 0) {
      this.onDebug = props.onDebug;
    }
  }
  async startJob(name2, onMessage2 = (job, type, data) => job.done(data), onError = (job, error) => job.error(error)) {
    const startPromise = new Promise((onStart) => {
      this.jobQueue.push({ name: name2, onMessage: onMessage2, onError, onStart });
      return this;
    });
    this._startQueuedJob();
    return await startPromise;
  }
  // PRIVATE
  /**
   * Starts first queued job if worker is available or can be created
   * Called when job is started and whenever a worker returns to the idleQueue
   */
  async _startQueuedJob() {
    if (!this.jobQueue.length) {
      return;
    }
    const workerThread = this._getAvailableWorker();
    if (!workerThread) {
      return;
    }
    const queuedJob = this.jobQueue.shift();
    if (queuedJob) {
      this.onDebug({
        message: "Starting job",
        name: queuedJob.name,
        workerThread,
        backlog: this.jobQueue.length
      });
      const job = new WorkerJob(queuedJob.name, workerThread);
      workerThread.onMessage = (data) => queuedJob.onMessage(job, data.type, data.payload);
      workerThread.onError = (error) => queuedJob.onError(job, error);
      queuedJob.onStart(job);
      try {
        await job.result;
      } catch (error) {
        console.error(`Worker exception: ${error}`);
      } finally {
        this.returnWorkerToQueue(workerThread);
      }
    }
  }
  /**
   * Returns a worker to the idle queue
   * Destroys the worker if
   *  - pool is destroyed
   *  - if this pool doesn't reuse workers
   *  - if maxConcurrency has been lowered
   * @param worker
   */
  returnWorkerToQueue(worker) {
    const shouldDestroyWorker = (
      // Workers on Node.js prevent the process from exiting.
      // Until we figure out how to close them before exit, we always destroy them
      !isBrowser3 || // If the pool is destroyed, there is no reason to keep the worker around
      this.isDestroyed || // If the app has disabled worker reuse, any completed workers should be destroyed
      !this.reuseWorkers || // If concurrency has been lowered, this worker might be surplus to requirements
      this.count > this._getMaxConcurrency()
    );
    if (shouldDestroyWorker) {
      worker.destroy();
      this.count--;
    } else {
      this.idleQueue.push(worker);
    }
    if (!this.isDestroyed) {
      this._startQueuedJob();
    }
  }
  /**
   * Returns idle worker or creates new worker if maxConcurrency has not been reached
   */
  _getAvailableWorker() {
    if (this.idleQueue.length > 0) {
      return this.idleQueue.shift() || null;
    }
    if (this.count < this._getMaxConcurrency()) {
      this.count++;
      const name2 = `${this.name.toLowerCase()} (#${this.count} of ${this.maxConcurrency})`;
      return new WorkerThread({ name: name2, source: this.source, url: this.url });
    }
    return null;
  }
  _getMaxConcurrency() {
    return isMobile2 ? this.maxMobileConcurrency : this.maxConcurrency;
  }
};

// .yarn/__virtual__/@loaders.gl-worker-utils-virtual-66baeb0b73/4/.yarn/berry/cache/@loaders.gl-worker-utils-npm-4.3.4-5391e7da36-10c0.zip/node_modules/@loaders.gl/worker-utils/dist/lib/worker-farm/worker-farm.js
var DEFAULT_PROPS = {
  maxConcurrency: 3,
  maxMobileConcurrency: 1,
  reuseWorkers: true,
  onDebug: () => {
  }
};
var _WorkerFarm = class _WorkerFarm {
  /** get global instance with WorkerFarm.getWorkerFarm() */
  constructor(props) {
    __publicField(this, "props");
    __publicField(this, "workerPools", /* @__PURE__ */ new Map());
    this.props = { ...DEFAULT_PROPS };
    this.setProps(props);
    this.workerPools = /* @__PURE__ */ new Map();
  }
  /** Checks if workers are supported on this platform */
  static isSupported() {
    return WorkerThread.isSupported();
  }
  /** Get the singleton instance of the global worker farm */
  static getWorkerFarm(props = {}) {
    _WorkerFarm._workerFarm = _WorkerFarm._workerFarm || new _WorkerFarm({});
    _WorkerFarm._workerFarm.setProps(props);
    return _WorkerFarm._workerFarm;
  }
  /**
   * Terminate all workers in the farm
   * @note Can free up significant memory
   */
  destroy() {
    for (const workerPool of this.workerPools.values()) {
      workerPool.destroy();
    }
    this.workerPools = /* @__PURE__ */ new Map();
  }
  /**
   * Set props used when initializing worker pools
   * @param props
   */
  setProps(props) {
    this.props = { ...this.props, ...props };
    for (const workerPool of this.workerPools.values()) {
      workerPool.setProps(this._getWorkerPoolProps());
    }
  }
  /**
   * Returns a worker pool for the specified worker
   * @param options - only used first time for a specific worker name
   * @param options.name - the name of the worker - used to identify worker pool
   * @param options.url -
   * @param options.source -
   * @example
   *   const job = WorkerFarm.getWorkerFarm().getWorkerPool({name, url}).startJob(...);
   */
  getWorkerPool(options) {
    const { name: name2, source: source4, url } = options;
    let workerPool = this.workerPools.get(name2);
    if (!workerPool) {
      workerPool = new WorkerPool({
        name: name2,
        source: source4,
        url
      });
      workerPool.setProps(this._getWorkerPoolProps());
      this.workerPools.set(name2, workerPool);
    }
    return workerPool;
  }
  _getWorkerPoolProps() {
    return {
      maxConcurrency: this.props.maxConcurrency,
      maxMobileConcurrency: this.props.maxMobileConcurrency,
      reuseWorkers: this.props.reuseWorkers,
      onDebug: this.props.onDebug
    };
  }
};
// singleton
__publicField(_WorkerFarm, "_workerFarm");
var WorkerFarm = _WorkerFarm;

// .yarn/__virtual__/@loaders.gl-worker-utils-virtual-66baeb0b73/4/.yarn/berry/cache/@loaders.gl-worker-utils-npm-4.3.4-5391e7da36-10c0.zip/node_modules/@loaders.gl/worker-utils/dist/lib/worker-api/get-worker-url.js
function getWorkerURL(worker, options = {}) {
  const workerOptions = options[worker.id] || {};
  const workerFile = isBrowser3 ? `${worker.id}-worker.js` : `${worker.id}-worker-node.js`;
  let url = workerOptions.workerUrl;
  if (!url && worker.id === "compression") {
    url = options.workerUrl;
  }
  if (options._workerType === "test") {
    if (isBrowser3) {
      url = `modules/${worker.module}/dist/${workerFile}`;
    } else {
      url = `modules/${worker.module}/src/workers/${worker.id}-worker-node.ts`;
    }
  }
  if (!url) {
    let version2 = worker.version;
    if (version2 === "latest") {
      version2 = NPM_TAG;
    }
    const versionTag = version2 ? `@${version2}` : "";
    url = `https://unpkg.com/@loaders.gl/${worker.module}${versionTag}/dist/${workerFile}`;
  }
  assert4(url);
  return url;
}

// .yarn/__virtual__/@loaders.gl-worker-utils-virtual-66baeb0b73/4/.yarn/berry/cache/@loaders.gl-worker-utils-npm-4.3.4-5391e7da36-10c0.zip/node_modules/@loaders.gl/worker-utils/dist/lib/worker-api/validate-worker-version.js
function validateWorkerVersion(worker, coreVersion = VERSION3) {
  assert4(worker, "no worker provided");
  const workerVersion = worker.version;
  if (!coreVersion || !workerVersion) {
    return false;
  }
  return true;
}

// .yarn/__virtual__/@loaders.gl-worker-utils-virtual-66baeb0b73/4/.yarn/berry/cache/@loaders.gl-worker-utils-npm-4.3.4-5391e7da36-10c0.zip/node_modules/@loaders.gl/worker-utils/dist/lib/process-utils/child-process-proxy.js
var ChildProcess2 = __toESM(require_child_process(), 1);

// .yarn/__virtual__/@loaders.gl-worker-utils-virtual-66baeb0b73/4/.yarn/berry/cache/@loaders.gl-worker-utils-npm-4.3.4-5391e7da36-10c0.zip/node_modules/@loaders.gl/worker-utils/dist/lib/process-utils/process-utils.js
var import_child_process = __toESM(require_child_process(), 1);

// .yarn/__virtual__/@loaders.gl-loader-utils-virtual-64f25e84aa/4/.yarn/berry/cache/@loaders.gl-loader-utils-npm-4.3.4-25e8600919-10c0.zip/node_modules/@loaders.gl/loader-utils/dist/lib/worker-loader-utils/parse-with-worker.js
function canParseWithWorker(loader, options) {
  if (!WorkerFarm.isSupported()) {
    return false;
  }
  if (!isBrowser3 && !(options == null ? void 0 : options._nodeWorkers)) {
    return false;
  }
  return loader.worker && (options == null ? void 0 : options.worker);
}
async function parseWithWorker(loader, data, options, context, parseOnMainThread) {
  const name2 = loader.id;
  const url = getWorkerURL(loader, options);
  const workerFarm = WorkerFarm.getWorkerFarm(options);
  const workerPool = workerFarm.getWorkerPool({ name: name2, url });
  options = JSON.parse(JSON.stringify(options));
  context = JSON.parse(JSON.stringify(context || {}));
  const job = await workerPool.startJob(
    "process-on-worker",
    // @ts-expect-error
    onMessage.bind(null, parseOnMainThread)
    // eslint-disable-line @typescript-eslint/no-misused-promises
  );
  job.postMessage("process", {
    // @ts-ignore
    input: data,
    options,
    context
  });
  const result = await job.result;
  return await result.result;
}
async function onMessage(parseOnMainThread, job, type, payload) {
  switch (type) {
    case "done":
      job.done(payload);
      break;
    case "error":
      job.error(new Error(payload.error));
      break;
    case "process":
      const { id, input, options } = payload;
      try {
        const result = await parseOnMainThread(input, options);
        job.postMessage("done", { id, result });
      } catch (error) {
        const message2 = error instanceof Error ? error.message : "unknown error";
        job.postMessage("error", { id, error: message2 });
      }
      break;
    default:
      console.warn(`parse-with-worker unknown message ${type}`);
  }
}

// .yarn/__virtual__/@loaders.gl-loader-utils-virtual-64f25e84aa/4/.yarn/berry/cache/@loaders.gl-loader-utils-npm-4.3.4-25e8600919-10c0.zip/node_modules/@loaders.gl/loader-utils/dist/lib/binary-utils/array-buffer-utils.js
function compareArrayBuffers(arrayBuffer1, arrayBuffer2, byteLength) {
  byteLength = byteLength || arrayBuffer1.byteLength;
  if (arrayBuffer1.byteLength < byteLength || arrayBuffer2.byteLength < byteLength) {
    return false;
  }
  const array1 = new Uint8Array(arrayBuffer1);
  const array2 = new Uint8Array(arrayBuffer2);
  for (let i4 = 0; i4 < array1.length; ++i4) {
    if (array1[i4] !== array2[i4]) {
      return false;
    }
  }
  return true;
}
function concatenateArrayBuffers(...sources) {
  return concatenateArrayBuffersFromArray(sources);
}
function concatenateArrayBuffersFromArray(sources) {
  const sourceArrays = sources.map((source22) => source22 instanceof ArrayBuffer ? new Uint8Array(source22) : source22);
  const byteLength = sourceArrays.reduce((length5, typedArray) => length5 + typedArray.byteLength, 0);
  const result = new Uint8Array(byteLength);
  let offset = 0;
  for (const sourceArray of sourceArrays) {
    result.set(sourceArray, offset);
    offset += sourceArray.byteLength;
  }
  return result.buffer;
}

// .yarn/__virtual__/@loaders.gl-loader-utils-virtual-64f25e84aa/4/.yarn/berry/cache/@loaders.gl-loader-utils-npm-4.3.4-25e8600919-10c0.zip/node_modules/@loaders.gl/loader-utils/dist/lib/iterators/async-iteration.js
async function concatenateArrayBuffersAsync(asyncIterator) {
  const arrayBuffers = [];
  for await (const chunk of asyncIterator) {
    arrayBuffers.push(chunk);
  }
  return concatenateArrayBuffers(...arrayBuffers);
}

// ../../../.yarn/berry/cache/@probe.gl-stats-npm-4.1.0-c7769294f7-10c0.zip/node_modules/@probe.gl/stats/dist/utils/hi-res-timestamp.js
function getHiResTimestamp2() {
  let timestamp;
  if (typeof window !== "undefined" && window.performance) {
    timestamp = window.performance.now();
  } else if (typeof process !== "undefined" && process.hrtime) {
    const timeParts = process.hrtime();
    timestamp = timeParts[0] * 1e3 + timeParts[1] / 1e6;
  } else {
    timestamp = Date.now();
  }
  return timestamp;
}

// ../../../.yarn/berry/cache/@probe.gl-stats-npm-4.1.0-c7769294f7-10c0.zip/node_modules/@probe.gl/stats/dist/lib/stat.js
var Stat = class {
  constructor(name2, type) {
    this.sampleSize = 1;
    this.time = 0;
    this.count = 0;
    this.samples = 0;
    this.lastTiming = 0;
    this.lastSampleTime = 0;
    this.lastSampleCount = 0;
    this._count = 0;
    this._time = 0;
    this._samples = 0;
    this._startTime = 0;
    this._timerPending = false;
    this.name = name2;
    this.type = type;
    this.reset();
  }
  reset() {
    this.time = 0;
    this.count = 0;
    this.samples = 0;
    this.lastTiming = 0;
    this.lastSampleTime = 0;
    this.lastSampleCount = 0;
    this._count = 0;
    this._time = 0;
    this._samples = 0;
    this._startTime = 0;
    this._timerPending = false;
    return this;
  }
  setSampleSize(samples) {
    this.sampleSize = samples;
    return this;
  }
  /** Call to increment count (+1) */
  incrementCount() {
    this.addCount(1);
    return this;
  }
  /** Call to decrement count (-1) */
  decrementCount() {
    this.subtractCount(1);
    return this;
  }
  /** Increase count */
  addCount(value) {
    this._count += value;
    this._samples++;
    this._checkSampling();
    return this;
  }
  /** Decrease count */
  subtractCount(value) {
    this._count -= value;
    this._samples++;
    this._checkSampling();
    return this;
  }
  /** Add an arbitrary timing and bump the count */
  addTime(time) {
    this._time += time;
    this.lastTiming = time;
    this._samples++;
    this._checkSampling();
    return this;
  }
  /** Start a timer */
  timeStart() {
    this._startTime = getHiResTimestamp2();
    this._timerPending = true;
    return this;
  }
  /** End a timer. Adds to time and bumps the timing count. */
  timeEnd() {
    if (!this._timerPending) {
      return this;
    }
    this.addTime(getHiResTimestamp2() - this._startTime);
    this._timerPending = false;
    this._checkSampling();
    return this;
  }
  getSampleAverageCount() {
    return this.sampleSize > 0 ? this.lastSampleCount / this.sampleSize : 0;
  }
  /** Calculate average time / count for the previous window */
  getSampleAverageTime() {
    return this.sampleSize > 0 ? this.lastSampleTime / this.sampleSize : 0;
  }
  /** Calculate counts per second for the previous window */
  getSampleHz() {
    return this.lastSampleTime > 0 ? this.sampleSize / (this.lastSampleTime / 1e3) : 0;
  }
  getAverageCount() {
    return this.samples > 0 ? this.count / this.samples : 0;
  }
  /** Calculate average time / count */
  getAverageTime() {
    return this.samples > 0 ? this.time / this.samples : 0;
  }
  /** Calculate counts per second */
  getHz() {
    return this.time > 0 ? this.samples / (this.time / 1e3) : 0;
  }
  _checkSampling() {
    if (this._samples === this.sampleSize) {
      this.lastSampleTime = this._time;
      this.lastSampleCount = this._count;
      this.count += this._count;
      this.time += this._time;
      this.samples += this._samples;
      this._time = 0;
      this._count = 0;
      this._samples = 0;
    }
  }
};

// ../../../.yarn/berry/cache/@probe.gl-stats-npm-4.1.0-c7769294f7-10c0.zip/node_modules/@probe.gl/stats/dist/lib/stats.js
var Stats = class {
  constructor(options) {
    this.stats = {};
    this.id = options.id;
    this.stats = {};
    this._initializeStats(options.stats);
    Object.seal(this);
  }
  /** Acquire a stat. Create if it doesn't exist. */
  get(name2, type = "count") {
    return this._getOrCreate({ name: name2, type });
  }
  get size() {
    return Object.keys(this.stats).length;
  }
  /** Reset all stats */
  reset() {
    for (const stat of Object.values(this.stats)) {
      stat.reset();
    }
    return this;
  }
  forEach(fn) {
    for (const stat of Object.values(this.stats)) {
      fn(stat);
    }
  }
  getTable() {
    const table = {};
    this.forEach((stat) => {
      table[stat.name] = {
        time: stat.time || 0,
        count: stat.count || 0,
        average: stat.getAverageTime() || 0,
        hz: stat.getHz() || 0
      };
    });
    return table;
  }
  _initializeStats(stats = []) {
    stats.forEach((stat) => this._getOrCreate(stat));
  }
  _getOrCreate(stat) {
    const { name: name2, type } = stat;
    let result = this.stats[name2];
    if (!result) {
      if (stat instanceof Stat) {
        result = stat;
      } else {
        result = new Stat(name2, type);
      }
      this.stats[name2] = result;
    }
    return result;
  }
};

// .yarn/__virtual__/@loaders.gl-loader-utils-virtual-64f25e84aa/4/.yarn/berry/cache/@loaders.gl-loader-utils-npm-4.3.4-25e8600919-10c0.zip/node_modules/@loaders.gl/loader-utils/dist/lib/path-utils/file-aliases.js
var pathPrefix = "";
var fileAliases = {};
function resolvePath(filename2) {
  for (const alias in fileAliases) {
    if (filename2.startsWith(alias)) {
      const replacement = fileAliases[alias];
      filename2 = filename2.replace(alias, replacement);
    }
  }
  if (!filename2.startsWith("http://") && !filename2.startsWith("https://")) {
    filename2 = `${pathPrefix}${filename2}`;
  }
  return filename2;
}

// .yarn/__virtual__/@loaders.gl-loader-utils-virtual-64f25e84aa/4/.yarn/berry/cache/@loaders.gl-loader-utils-npm-4.3.4-25e8600919-10c0.zip/node_modules/@loaders.gl/loader-utils/dist/lib/node/buffer.browser.js
function toArrayBuffer(buffer2) {
  return buffer2;
}

// .yarn/__virtual__/@loaders.gl-loader-utils-virtual-64f25e84aa/4/.yarn/berry/cache/@loaders.gl-loader-utils-npm-4.3.4-25e8600919-10c0.zip/node_modules/@loaders.gl/loader-utils/dist/lib/binary-utils/memory-conversion-utils.js
function isBuffer(value) {
  return value && typeof value === "object" && value.isBuffer;
}
function toArrayBuffer2(data) {
  if (isBuffer(data)) {
    return toArrayBuffer(data);
  }
  if (data instanceof ArrayBuffer) {
    return data;
  }
  if (ArrayBuffer.isView(data)) {
    if (data.byteOffset === 0 && data.byteLength === data.buffer.byteLength) {
      return data.buffer;
    }
    return data.buffer.slice(data.byteOffset, data.byteOffset + data.byteLength);
  }
  if (typeof data === "string") {
    const text = data;
    const uint8Array = new TextEncoder().encode(text);
    return uint8Array.buffer;
  }
  if (data && typeof data === "object" && data._toArrayBuffer) {
    return data._toArrayBuffer();
  }
  throw new Error("toArrayBuffer");
}

// .yarn/__virtual__/@loaders.gl-loader-utils-virtual-64f25e84aa/4/.yarn/berry/cache/@loaders.gl-loader-utils-npm-4.3.4-25e8600919-10c0.zip/node_modules/@loaders.gl/loader-utils/dist/lib/path-utils/path.js
var path_exports = {};
__export(path_exports, {
  dirname: () => dirname,
  filename: () => filename,
  join: () => join,
  resolve: () => resolve
});

// .yarn/__virtual__/@loaders.gl-loader-utils-virtual-64f25e84aa/4/.yarn/berry/cache/@loaders.gl-loader-utils-npm-4.3.4-25e8600919-10c0.zip/node_modules/@loaders.gl/loader-utils/dist/lib/path-utils/get-cwd.js
function getCWD() {
  var _a3;
  if (typeof process !== "undefined" && typeof process.cwd !== "undefined") {
    return process.cwd();
  }
  const pathname = (_a3 = window.location) == null ? void 0 : _a3.pathname;
  return (pathname == null ? void 0 : pathname.slice(0, pathname.lastIndexOf("/") + 1)) || "";
}

// .yarn/__virtual__/@loaders.gl-loader-utils-virtual-64f25e84aa/4/.yarn/berry/cache/@loaders.gl-loader-utils-npm-4.3.4-25e8600919-10c0.zip/node_modules/@loaders.gl/loader-utils/dist/lib/path-utils/path.js
function filename(url) {
  const slashIndex = url ? url.lastIndexOf("/") : -1;
  return slashIndex >= 0 ? url.substr(slashIndex + 1) : "";
}
function dirname(url) {
  const slashIndex = url ? url.lastIndexOf("/") : -1;
  return slashIndex >= 0 ? url.substr(0, slashIndex) : "";
}
function join(...parts) {
  const separator = "/";
  parts = parts.map((part, index) => {
    if (index) {
      part = part.replace(new RegExp(`^${separator}`), "");
    }
    if (index !== parts.length - 1) {
      part = part.replace(new RegExp(`${separator}$`), "");
    }
    return part;
  });
  return parts.join(separator);
}
function resolve(...components) {
  const paths = [];
  for (let _i = 0; _i < components.length; _i++) {
    paths[_i] = components[_i];
  }
  let resolvedPath = "";
  let resolvedAbsolute = false;
  let cwd;
  for (let i4 = paths.length - 1; i4 >= -1 && !resolvedAbsolute; i4--) {
    let path;
    if (i4 >= 0) {
      path = paths[i4];
    } else {
      if (cwd === void 0) {
        cwd = getCWD();
      }
      path = cwd;
    }
    if (path.length === 0) {
      continue;
    }
    resolvedPath = `${path}/${resolvedPath}`;
    resolvedAbsolute = path.charCodeAt(0) === SLASH;
  }
  resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);
  if (resolvedAbsolute) {
    return `/${resolvedPath}`;
  } else if (resolvedPath.length > 0) {
    return resolvedPath;
  }
  return ".";
}
var SLASH = 47;
var DOT = 46;
function normalizeStringPosix(path, allowAboveRoot) {
  let res = "";
  let lastSlash = -1;
  let dots = 0;
  let code;
  let isAboveRoot = false;
  for (let i4 = 0; i4 <= path.length; ++i4) {
    if (i4 < path.length) {
      code = path.charCodeAt(i4);
    } else if (code === SLASH) {
      break;
    } else {
      code = SLASH;
    }
    if (code === SLASH) {
      if (lastSlash === i4 - 1 || dots === 1) {
      } else if (lastSlash !== i4 - 1 && dots === 2) {
        if (res.length < 2 || !isAboveRoot || res.charCodeAt(res.length - 1) !== DOT || res.charCodeAt(res.length - 2) !== DOT) {
          if (res.length > 2) {
            const start = res.length - 1;
            let j3 = start;
            for (; j3 >= 0; --j3) {
              if (res.charCodeAt(j3) === SLASH) {
                break;
              }
            }
            if (j3 !== start) {
              res = j3 === -1 ? "" : res.slice(0, j3);
              lastSlash = i4;
              dots = 0;
              isAboveRoot = false;
              continue;
            }
          } else if (res.length === 2 || res.length === 1) {
            res = "";
            lastSlash = i4;
            dots = 0;
            isAboveRoot = false;
            continue;
          }
        }
        if (allowAboveRoot) {
          if (res.length > 0) {
            res += "/..";
          } else {
            res = "..";
          }
          isAboveRoot = true;
        }
      } else {
        const slice = path.slice(lastSlash + 1, i4);
        if (res.length > 0) {
          res += `/${slice}`;
        } else {
          res = slice;
        }
        isAboveRoot = false;
      }
      lastSlash = i4;
      dots = 0;
    } else if (code === DOT && dots !== -1) {
      ++dots;
    } else {
      dots = -1;
    }
  }
  return res;
}

// .yarn/__virtual__/@loaders.gl-loader-utils-virtual-64f25e84aa/4/.yarn/berry/cache/@loaders.gl-loader-utils-npm-4.3.4-25e8600919-10c0.zip/node_modules/@loaders.gl/loader-utils/dist/lib/files/node-file-facade.js
var NOT_IMPLEMENTED = new Error("Not implemented");

// .yarn/__virtual__/@loaders.gl-loader-utils-virtual-64f25e84aa/4/.yarn/berry/cache/@loaders.gl-loader-utils-npm-4.3.4-25e8600919-10c0.zip/node_modules/@loaders.gl/loader-utils/dist/lib/filesystems/node-filesystem-facade.js
var NOT_IMPLEMENTED2 = new Error("Not implemented");

// ../../../.yarn/berry/cache/@loaders.gl-core-npm-4.3.4-aea5a727cf-10c0.zip/node_modules/@loaders.gl/core/dist/javascript-utils/is-type.js
var isBoolean = (x3) => typeof x3 === "boolean";
var isFunction = (x3) => typeof x3 === "function";
var isObject = (x3) => x3 !== null && typeof x3 === "object";
var isPureObject = (x3) => isObject(x3) && x3.constructor === {}.constructor;
var isIterable = (x3) => Boolean(x3) && typeof x3[Symbol.iterator] === "function";
var isAsyncIterable = (x3) => x3 && typeof x3[Symbol.asyncIterator] === "function";
var isResponse = (x3) => typeof Response !== "undefined" && x3 instanceof Response || x3 && x3.arrayBuffer && x3.text && x3.json;
var isBlob = (x3) => typeof Blob !== "undefined" && x3 instanceof Blob;
var isBuffer2 = (x3) => x3 && typeof x3 === "object" && x3.isBuffer;
var isReadableDOMStream = (x3) => typeof ReadableStream !== "undefined" && x3 instanceof ReadableStream || isObject(x3) && isFunction(x3.tee) && isFunction(x3.cancel) && isFunction(x3.getReader);
var isReadableNodeStream = (x3) => isObject(x3) && isFunction(x3.read) && isFunction(x3.pipe) && isBoolean(x3.readable);
var isReadableStream = (x3) => isReadableDOMStream(x3) || isReadableNodeStream(x3);

// ../../../.yarn/berry/cache/@loaders.gl-core-npm-4.3.4-aea5a727cf-10c0.zip/node_modules/@loaders.gl/core/dist/lib/fetch/fetch-error.js
var FetchError = class extends Error {
  constructor(message2, info) {
    super(message2);
    /** A best effort reason for why the fetch failed */
    __publicField(this, "reason");
    /** The URL that failed to load. Empty string if not available. */
    __publicField(this, "url");
    /** The Response object, if any. */
    __publicField(this, "response");
    this.reason = info.reason;
    this.url = info.url;
    this.response = info.response;
  }
};

// ../../../.yarn/berry/cache/@loaders.gl-core-npm-4.3.4-aea5a727cf-10c0.zip/node_modules/@loaders.gl/core/dist/lib/utils/mime-type-utils.js
var DATA_URL_PATTERN = /^data:([-\w.]+\/[-\w.+]+)(;|,)/;
var MIME_TYPE_PATTERN = /^([-\w.]+\/[-\w.+]+)/;
function compareMIMETypes(mimeType1, mimeType2) {
  if (mimeType1.toLowerCase() === mimeType2.toLowerCase()) {
    return true;
  }
  return false;
}
function parseMIMEType(mimeString) {
  const matches3 = MIME_TYPE_PATTERN.exec(mimeString);
  if (matches3) {
    return matches3[1];
  }
  return mimeString;
}
function parseMIMETypeFromURL(url) {
  const matches3 = DATA_URL_PATTERN.exec(url);
  if (matches3) {
    return matches3[1];
  }
  return "";
}

// ../../../.yarn/berry/cache/@loaders.gl-core-npm-4.3.4-aea5a727cf-10c0.zip/node_modules/@loaders.gl/core/dist/lib/utils/url-utils.js
var QUERY_STRING_PATTERN = /\?.*/;
function extractQueryString(url) {
  const matches3 = url.match(QUERY_STRING_PATTERN);
  return matches3 && matches3[0];
}
function stripQueryString(url) {
  return url.replace(QUERY_STRING_PATTERN, "");
}
function shortenUrlForDisplay(url) {
  if (url.length < 50) {
    return url;
  }
  const urlEnd = url.slice(url.length - 15);
  const urlStart = url.substr(0, 32);
  return `${urlStart}...${urlEnd}`;
}

// ../../../.yarn/berry/cache/@loaders.gl-core-npm-4.3.4-aea5a727cf-10c0.zip/node_modules/@loaders.gl/core/dist/lib/utils/resource-utils.js
function getResourceUrl(resource) {
  if (isResponse(resource)) {
    const response = resource;
    return response.url;
  }
  if (isBlob(resource)) {
    const blob = resource;
    return blob.name || "";
  }
  if (typeof resource === "string") {
    return resource;
  }
  return "";
}
function getResourceMIMEType(resource) {
  if (isResponse(resource)) {
    const response = resource;
    const contentTypeHeader = response.headers.get("content-type") || "";
    const noQueryUrl = stripQueryString(response.url);
    return parseMIMEType(contentTypeHeader) || parseMIMETypeFromURL(noQueryUrl);
  }
  if (isBlob(resource)) {
    const blob = resource;
    return blob.type || "";
  }
  if (typeof resource === "string") {
    return parseMIMETypeFromURL(resource);
  }
  return "";
}
function getResourceContentLength(resource) {
  if (isResponse(resource)) {
    const response = resource;
    return response.headers["content-length"] || -1;
  }
  if (isBlob(resource)) {
    const blob = resource;
    return blob.size;
  }
  if (typeof resource === "string") {
    return resource.length;
  }
  if (resource instanceof ArrayBuffer) {
    return resource.byteLength;
  }
  if (ArrayBuffer.isView(resource)) {
    return resource.byteLength;
  }
  return -1;
}

// ../../../.yarn/berry/cache/@loaders.gl-core-npm-4.3.4-aea5a727cf-10c0.zip/node_modules/@loaders.gl/core/dist/lib/utils/response-utils.js
async function makeResponse(resource) {
  if (isResponse(resource)) {
    return resource;
  }
  const headers = {};
  const contentLength = getResourceContentLength(resource);
  if (contentLength >= 0) {
    headers["content-length"] = String(contentLength);
  }
  const url = getResourceUrl(resource);
  const type = getResourceMIMEType(resource);
  if (type) {
    headers["content-type"] = type;
  }
  const initialDataUrl = await getInitialDataUrl(resource);
  if (initialDataUrl) {
    headers["x-first-bytes"] = initialDataUrl;
  }
  if (typeof resource === "string") {
    resource = new TextEncoder().encode(resource);
  }
  const response = new Response(resource, { headers });
  Object.defineProperty(response, "url", { value: url });
  return response;
}
async function checkResponse(response) {
  if (!response.ok) {
    const error = await getResponseError(response);
    throw error;
  }
}
async function getResponseError(response) {
  const shortUrl = shortenUrlForDisplay(response.url);
  let message2 = `Failed to fetch resource (${response.status}) ${response.statusText}: ${shortUrl}`;
  message2 = message2.length > 100 ? `${message2.slice(0, 100)}...` : message2;
  const info = {
    reason: response.statusText,
    url: response.url,
    response
  };
  try {
    const contentType = response.headers.get("Content-Type");
    info.reason = !response.bodyUsed && (contentType == null ? void 0 : contentType.includes("application/json")) ? await response.json() : await response.text();
  } catch (error) {
  }
  return new FetchError(message2, info);
}
async function getInitialDataUrl(resource) {
  const INITIAL_DATA_LENGTH = 5;
  if (typeof resource === "string") {
    return `data:,${resource.slice(0, INITIAL_DATA_LENGTH)}`;
  }
  if (resource instanceof Blob) {
    const blobSlice = resource.slice(0, 5);
    return await new Promise((resolve2) => {
      const reader = new FileReader();
      reader.onload = (event) => {
        var _a3;
        return resolve2((_a3 = event == null ? void 0 : event.target) == null ? void 0 : _a3.result);
      };
      reader.readAsDataURL(blobSlice);
    });
  }
  if (resource instanceof ArrayBuffer) {
    const slice = resource.slice(0, INITIAL_DATA_LENGTH);
    const base64 = arrayBufferToBase64(slice);
    return `data:base64,${base64}`;
  }
  return null;
}
function arrayBufferToBase64(buffer2) {
  let binary = "";
  const bytes = new Uint8Array(buffer2);
  for (let i4 = 0; i4 < bytes.byteLength; i4++) {
    binary += String.fromCharCode(bytes[i4]);
  }
  return btoa(binary);
}

// ../../../.yarn/berry/cache/@loaders.gl-core-npm-4.3.4-aea5a727cf-10c0.zip/node_modules/@loaders.gl/core/dist/lib/fetch/fetch-file.js
function isNodePath(url) {
  return !isRequestURL(url) && !isDataURL(url);
}
function isRequestURL(url) {
  return url.startsWith("http:") || url.startsWith("https:");
}
function isDataURL(url) {
  return url.startsWith("data:");
}
async function fetchFile(urlOrData, fetchOptions) {
  var _a3, _b;
  if (typeof urlOrData === "string") {
    const url = resolvePath(urlOrData);
    if (isNodePath(url)) {
      if ((_a3 = globalThis.loaders) == null ? void 0 : _a3.fetchNode) {
        return (_b = globalThis.loaders) == null ? void 0 : _b.fetchNode(url, fetchOptions);
      }
    }
    return await fetch(url, fetchOptions);
  }
  return await makeResponse(urlOrData);
}

// ../../../.yarn/berry/cache/@loaders.gl-core-npm-4.3.4-aea5a727cf-10c0.zip/node_modules/@loaders.gl/core/dist/lib/loader-utils/loggers.js
var probeLog = new Log({ id: "loaders.gl" });
var NullLog = class {
  log() {
    return () => {
    };
  }
  info() {
    return () => {
    };
  }
  warn() {
    return () => {
    };
  }
  error() {
    return () => {
    };
  }
};
var ConsoleLog = class {
  constructor() {
    __publicField(this, "console");
    this.console = console;
  }
  log(...args) {
    return this.console.log.bind(this.console, ...args);
  }
  info(...args) {
    return this.console.info.bind(this.console, ...args);
  }
  warn(...args) {
    return this.console.warn.bind(this.console, ...args);
  }
  error(...args) {
    return this.console.error.bind(this.console, ...args);
  }
};

// ../../../.yarn/berry/cache/@loaders.gl-core-npm-4.3.4-aea5a727cf-10c0.zip/node_modules/@loaders.gl/core/dist/lib/loader-utils/option-defaults.js
var DEFAULT_LOADER_OPTIONS = {
  // baseUri
  fetch: null,
  mimeType: void 0,
  nothrow: false,
  log: new ConsoleLog(),
  // A probe.gl compatible (`log.log()()` syntax) that just logs to console
  useLocalLibraries: false,
  CDN: "https://unpkg.com/@loaders.gl",
  worker: true,
  // By default, use worker if provided by loader.
  maxConcurrency: 3,
  // How many worker instances should be created for each loader.
  maxMobileConcurrency: 1,
  // How many worker instances should be created for each loader on mobile devices.
  reuseWorkers: isBrowser,
  // By default reuse workers in browser (Node.js refuses to terminate if browsers are running)
  _nodeWorkers: false,
  // By default do not support node workers
  _workerType: "",
  // 'test' to use locally generated workers
  limit: 0,
  _limitMB: 0,
  batchSize: "auto",
  batchDebounceMs: 0,
  metadata: false,
  // TODO - currently only implemented for parseInBatches, adds initial metadata batch,
  transforms: []
};
var REMOVED_LOADER_OPTIONS = {
  throws: "nothrow",
  dataType: "(no longer used)",
  uri: "baseUri",
  // Warn if fetch options are used on top-level
  method: "fetch.method",
  headers: "fetch.headers",
  body: "fetch.body",
  mode: "fetch.mode",
  credentials: "fetch.credentials",
  cache: "fetch.cache",
  redirect: "fetch.redirect",
  referrer: "fetch.referrer",
  referrerPolicy: "fetch.referrerPolicy",
  integrity: "fetch.integrity",
  keepalive: "fetch.keepalive",
  signal: "fetch.signal"
};

// ../../../.yarn/berry/cache/@loaders.gl-core-npm-4.3.4-aea5a727cf-10c0.zip/node_modules/@loaders.gl/core/dist/lib/loader-utils/option-utils.js
function getGlobalLoaderState() {
  globalThis.loaders = globalThis.loaders || {};
  const { loaders } = globalThis;
  if (!loaders._state) {
    loaders._state = {};
  }
  return loaders._state;
}
function getGlobalLoaderOptions() {
  const state = getGlobalLoaderState();
  state.globalOptions = state.globalOptions || { ...DEFAULT_LOADER_OPTIONS };
  return state.globalOptions;
}
function normalizeOptions(options, loader, loaders, url) {
  loaders = loaders || [];
  loaders = Array.isArray(loaders) ? loaders : [loaders];
  validateOptions(options, loaders);
  return normalizeOptionsInternal(loader, options, url);
}
function validateOptions(options, loaders) {
  validateOptionsObject(options, null, DEFAULT_LOADER_OPTIONS, REMOVED_LOADER_OPTIONS, loaders);
  for (const loader of loaders) {
    const idOptions = options && options[loader.id] || {};
    const loaderOptions = loader.options && loader.options[loader.id] || {};
    const deprecatedOptions = loader.deprecatedOptions && loader.deprecatedOptions[loader.id] || {};
    validateOptionsObject(idOptions, loader.id, loaderOptions, deprecatedOptions, loaders);
  }
}
function validateOptionsObject(options, id, defaultOptions2, deprecatedOptions, loaders) {
  const loaderName = id || "Top level";
  const prefix = id ? `${id}.` : "";
  for (const key in options) {
    const isSubOptions = !id && isObject(options[key]);
    const isBaseUriOption = key === "baseUri" && !id;
    const isWorkerUrlOption = key === "workerUrl" && id;
    if (!(key in defaultOptions2) && !isBaseUriOption && !isWorkerUrlOption) {
      if (key in deprecatedOptions) {
        probeLog.warn(`${loaderName} loader option '${prefix}${key}' no longer supported, use '${deprecatedOptions[key]}'`)();
      } else if (!isSubOptions) {
        const suggestion = findSimilarOption(key, loaders);
        probeLog.warn(`${loaderName} loader option '${prefix}${key}' not recognized. ${suggestion}`)();
      }
    }
  }
}
function findSimilarOption(optionKey, loaders) {
  const lowerCaseOptionKey = optionKey.toLowerCase();
  let bestSuggestion = "";
  for (const loader of loaders) {
    for (const key in loader.options) {
      if (optionKey === key) {
        return `Did you mean '${loader.id}.${key}'?`;
      }
      const lowerCaseKey = key.toLowerCase();
      const isPartialMatch = lowerCaseOptionKey.startsWith(lowerCaseKey) || lowerCaseKey.startsWith(lowerCaseOptionKey);
      if (isPartialMatch) {
        bestSuggestion = bestSuggestion || `Did you mean '${loader.id}.${key}'?`;
      }
    }
  }
  return bestSuggestion;
}
function normalizeOptionsInternal(loader, options, url) {
  const loaderDefaultOptions = loader.options || {};
  const mergedOptions = { ...loaderDefaultOptions };
  addUrlOptions(mergedOptions, url);
  if (mergedOptions.log === null) {
    mergedOptions.log = new NullLog();
  }
  mergeNestedFields(mergedOptions, getGlobalLoaderOptions());
  mergeNestedFields(mergedOptions, options);
  return mergedOptions;
}
function mergeNestedFields(mergedOptions, options) {
  for (const key in options) {
    if (key in options) {
      const value = options[key];
      if (isPureObject(value) && isPureObject(mergedOptions[key])) {
        mergedOptions[key] = {
          ...mergedOptions[key],
          ...options[key]
        };
      } else {
        mergedOptions[key] = options[key];
      }
    }
  }
}
function addUrlOptions(options, url) {
  if (url && !("baseUri" in options)) {
    options.baseUri = url;
  }
}

// ../../../.yarn/berry/cache/@loaders.gl-core-npm-4.3.4-aea5a727cf-10c0.zip/node_modules/@loaders.gl/core/dist/lib/loader-utils/normalize-loader.js
function isLoaderObject(loader) {
  if (!loader) {
    return false;
  }
  if (Array.isArray(loader)) {
    loader = loader[0];
  }
  const hasExtensions = Array.isArray(loader == null ? void 0 : loader.extensions);
  return hasExtensions;
}
function normalizeLoader(loader) {
  assert(loader, "null loader");
  assert(isLoaderObject(loader), "invalid loader");
  let options;
  if (Array.isArray(loader)) {
    options = loader[1];
    loader = loader[0];
    loader = {
      ...loader,
      options: { ...loader.options, ...options }
    };
  }
  if ((loader == null ? void 0 : loader.parseTextSync) || (loader == null ? void 0 : loader.parseText)) {
    loader.text = true;
  }
  if (!loader.text) {
    loader.binary = true;
  }
  return loader;
}

// ../../../.yarn/berry/cache/@loaders.gl-core-npm-4.3.4-aea5a727cf-10c0.zip/node_modules/@loaders.gl/core/dist/lib/api/register-loaders.js
var getGlobalLoaderRegistry = () => {
  const state = getGlobalLoaderState();
  state.loaderRegistry = state.loaderRegistry || [];
  return state.loaderRegistry;
};
function registerLoaders(loaders) {
  const loaderRegistry = getGlobalLoaderRegistry();
  loaders = Array.isArray(loaders) ? loaders : [loaders];
  for (const loader of loaders) {
    const normalizedLoader = normalizeLoader(loader);
    if (!loaderRegistry.find((registeredLoader) => normalizedLoader === registeredLoader)) {
      loaderRegistry.unshift(normalizedLoader);
    }
  }
}
function getRegisteredLoaders() {
  return getGlobalLoaderRegistry();
}

// ../../../.yarn/berry/cache/@loaders.gl-core-npm-4.3.4-aea5a727cf-10c0.zip/node_modules/@loaders.gl/core/dist/lib/api/select-loader.js
var EXT_PATTERN = /\.([^.]+)$/;
async function selectLoader(data, loaders = [], options, context) {
  if (!validHTTPResponse(data)) {
    return null;
  }
  let loader = selectLoaderSync(data, loaders, { ...options, nothrow: true }, context);
  if (loader) {
    return loader;
  }
  if (isBlob(data)) {
    data = await data.slice(0, 10).arrayBuffer();
    loader = selectLoaderSync(data, loaders, options, context);
  }
  if (!loader && !(options == null ? void 0 : options.nothrow)) {
    throw new Error(getNoValidLoaderMessage(data));
  }
  return loader;
}
function selectLoaderSync(data, loaders = [], options, context) {
  if (!validHTTPResponse(data)) {
    return null;
  }
  if (loaders && !Array.isArray(loaders)) {
    return normalizeLoader(loaders);
  }
  let candidateLoaders = [];
  if (loaders) {
    candidateLoaders = candidateLoaders.concat(loaders);
  }
  if (!(options == null ? void 0 : options.ignoreRegisteredLoaders)) {
    candidateLoaders.push(...getRegisteredLoaders());
  }
  normalizeLoaders(candidateLoaders);
  const loader = selectLoaderInternal(data, candidateLoaders, options, context);
  if (!loader && !(options == null ? void 0 : options.nothrow)) {
    throw new Error(getNoValidLoaderMessage(data));
  }
  return loader;
}
function selectLoaderInternal(data, loaders, options, context) {
  const url = getResourceUrl(data);
  const type = getResourceMIMEType(data);
  const testUrl = stripQueryString(url) || (context == null ? void 0 : context.url);
  let loader = null;
  let reason = "";
  if (options == null ? void 0 : options.mimeType) {
    loader = findLoaderByMIMEType(loaders, options == null ? void 0 : options.mimeType);
    reason = `match forced by supplied MIME type ${options == null ? void 0 : options.mimeType}`;
  }
  loader = loader || findLoaderByUrl(loaders, testUrl);
  reason = reason || (loader ? `matched url ${testUrl}` : "");
  loader = loader || findLoaderByMIMEType(loaders, type);
  reason = reason || (loader ? `matched MIME type ${type}` : "");
  loader = loader || findLoaderByInitialBytes(loaders, data);
  reason = reason || (loader ? `matched initial data ${getFirstCharacters2(data)}` : "");
  if (options == null ? void 0 : options.fallbackMimeType) {
    loader = loader || findLoaderByMIMEType(loaders, options == null ? void 0 : options.fallbackMimeType);
    reason = reason || (loader ? `matched fallback MIME type ${type}` : "");
  }
  if (reason) {
    log.log(1, `selectLoader selected ${loader == null ? void 0 : loader.name}: ${reason}.`);
  }
  return loader;
}
function validHTTPResponse(data) {
  if (data instanceof Response) {
    if (data.status === 204) {
      return false;
    }
  }
  return true;
}
function getNoValidLoaderMessage(data) {
  const url = getResourceUrl(data);
  const type = getResourceMIMEType(data);
  let message2 = "No valid loader found (";
  message2 += url ? `${path_exports.filename(url)}, ` : "no url provided, ";
  message2 += `MIME type: ${type ? `"${type}"` : "not provided"}, `;
  const firstCharacters = data ? getFirstCharacters2(data) : "";
  message2 += firstCharacters ? ` first bytes: "${firstCharacters}"` : "first bytes: not available";
  message2 += ")";
  return message2;
}
function normalizeLoaders(loaders) {
  for (const loader of loaders) {
    normalizeLoader(loader);
  }
}
function findLoaderByUrl(loaders, url) {
  const match = url && EXT_PATTERN.exec(url);
  const extension = match && match[1];
  return extension ? findLoaderByExtension(loaders, extension) : null;
}
function findLoaderByExtension(loaders, extension) {
  extension = extension.toLowerCase();
  for (const loader of loaders) {
    for (const loaderExtension of loader.extensions) {
      if (loaderExtension.toLowerCase() === extension) {
        return loader;
      }
    }
  }
  return null;
}
function findLoaderByMIMEType(loaders, mimeType) {
  var _a3;
  for (const loader of loaders) {
    if ((_a3 = loader.mimeTypes) == null ? void 0 : _a3.some((mimeType1) => compareMIMETypes(mimeType, mimeType1))) {
      return loader;
    }
    if (compareMIMETypes(mimeType, `application/x.${loader.id}`)) {
      return loader;
    }
  }
  return null;
}
function findLoaderByInitialBytes(loaders, data) {
  if (!data) {
    return null;
  }
  for (const loader of loaders) {
    if (typeof data === "string") {
      if (testDataAgainstText(data, loader)) {
        return loader;
      }
    } else if (ArrayBuffer.isView(data)) {
      if (testDataAgainstBinary(data.buffer, data.byteOffset, loader)) {
        return loader;
      }
    } else if (data instanceof ArrayBuffer) {
      const byteOffset = 0;
      if (testDataAgainstBinary(data, byteOffset, loader)) {
        return loader;
      }
    }
  }
  return null;
}
function testDataAgainstText(data, loader) {
  if (loader.testText) {
    return loader.testText(data);
  }
  const tests = Array.isArray(loader.tests) ? loader.tests : [loader.tests];
  return tests.some((test) => data.startsWith(test));
}
function testDataAgainstBinary(data, byteOffset, loader) {
  const tests = Array.isArray(loader.tests) ? loader.tests : [loader.tests];
  return tests.some((test) => testBinary(data, byteOffset, loader, test));
}
function testBinary(data, byteOffset, loader, test) {
  if (test instanceof ArrayBuffer) {
    return compareArrayBuffers(test, data, test.byteLength);
  }
  switch (typeof test) {
    case "function":
      return test(data);
    case "string":
      const magic = getMagicString2(data, byteOffset, test.length);
      return test === magic;
    default:
      return false;
  }
}
function getFirstCharacters2(data, length5 = 5) {
  if (typeof data === "string") {
    return data.slice(0, length5);
  } else if (ArrayBuffer.isView(data)) {
    return getMagicString2(data.buffer, data.byteOffset, length5);
  } else if (data instanceof ArrayBuffer) {
    const byteOffset = 0;
    return getMagicString2(data, byteOffset, length5);
  }
  return "";
}
function getMagicString2(arrayBuffer2, byteOffset, length5) {
  if (arrayBuffer2.byteLength < byteOffset + length5) {
    return "";
  }
  const dataView = new DataView(arrayBuffer2);
  let magic = "";
  for (let i4 = 0; i4 < length5; i4++) {
    magic += String.fromCharCode(dataView.getUint8(byteOffset + i4));
  }
  return magic;
}

// ../../../.yarn/berry/cache/@loaders.gl-core-npm-4.3.4-aea5a727cf-10c0.zip/node_modules/@loaders.gl/core/dist/iterators/make-iterator/make-string-iterator.js
var DEFAULT_CHUNK_SIZE = 256 * 1024;
function* makeStringIterator(string, options) {
  const chunkSize = (options == null ? void 0 : options.chunkSize) || DEFAULT_CHUNK_SIZE;
  let offset = 0;
  const textEncoder = new TextEncoder();
  while (offset < string.length) {
    const chunkLength = Math.min(string.length - offset, chunkSize);
    const chunk = string.slice(offset, offset + chunkLength);
    offset += chunkLength;
    yield textEncoder.encode(chunk);
  }
}

// ../../../.yarn/berry/cache/@loaders.gl-core-npm-4.3.4-aea5a727cf-10c0.zip/node_modules/@loaders.gl/core/dist/iterators/make-iterator/make-array-buffer-iterator.js
var DEFAULT_CHUNK_SIZE2 = 256 * 1024;
function* makeArrayBufferIterator(arrayBuffer2, options = {}) {
  const { chunkSize = DEFAULT_CHUNK_SIZE2 } = options;
  let byteOffset = 0;
  while (byteOffset < arrayBuffer2.byteLength) {
    const chunkByteLength = Math.min(arrayBuffer2.byteLength - byteOffset, chunkSize);
    const chunk = new ArrayBuffer(chunkByteLength);
    const sourceArray = new Uint8Array(arrayBuffer2, byteOffset, chunkByteLength);
    const chunkArray = new Uint8Array(chunk);
    chunkArray.set(sourceArray);
    byteOffset += chunkByteLength;
    yield chunk;
  }
}

// ../../../.yarn/berry/cache/@loaders.gl-core-npm-4.3.4-aea5a727cf-10c0.zip/node_modules/@loaders.gl/core/dist/iterators/make-iterator/make-blob-iterator.js
var DEFAULT_CHUNK_SIZE3 = 1024 * 1024;
async function* makeBlobIterator(blob, options) {
  const chunkSize = (options == null ? void 0 : options.chunkSize) || DEFAULT_CHUNK_SIZE3;
  let offset = 0;
  while (offset < blob.size) {
    const end = offset + chunkSize;
    const chunk = await blob.slice(offset, end).arrayBuffer();
    offset = end;
    yield chunk;
  }
}

// ../../../.yarn/berry/cache/@loaders.gl-core-npm-4.3.4-aea5a727cf-10c0.zip/node_modules/@loaders.gl/core/dist/iterators/make-iterator/make-stream-iterator.js
function makeStreamIterator(stream, options) {
  return isBrowser ? makeBrowserStreamIterator(stream, options) : makeNodeStreamIterator(stream, options);
}
async function* makeBrowserStreamIterator(stream, options) {
  const reader = stream.getReader();
  let nextBatchPromise;
  try {
    while (true) {
      const currentBatchPromise = nextBatchPromise || reader.read();
      if (options == null ? void 0 : options._streamReadAhead) {
        nextBatchPromise = reader.read();
      }
      const { done, value } = await currentBatchPromise;
      if (done) {
        return;
      }
      yield toArrayBuffer2(value);
    }
  } catch (error) {
    reader.releaseLock();
  }
}
async function* makeNodeStreamIterator(stream, options) {
  for await (const chunk of stream) {
    yield toArrayBuffer2(chunk);
  }
}

// ../../../.yarn/berry/cache/@loaders.gl-core-npm-4.3.4-aea5a727cf-10c0.zip/node_modules/@loaders.gl/core/dist/iterators/make-iterator/make-iterator.js
function makeIterator(data, options) {
  if (typeof data === "string") {
    return makeStringIterator(data, options);
  }
  if (data instanceof ArrayBuffer) {
    return makeArrayBufferIterator(data, options);
  }
  if (isBlob(data)) {
    return makeBlobIterator(data, options);
  }
  if (isReadableStream(data)) {
    return makeStreamIterator(data, options);
  }
  if (isResponse(data)) {
    const response = data;
    return makeStreamIterator(response.body, options);
  }
  throw new Error("makeIterator");
}

// ../../../.yarn/berry/cache/@loaders.gl-core-npm-4.3.4-aea5a727cf-10c0.zip/node_modules/@loaders.gl/core/dist/lib/loader-utils/get-data.js
var ERR_DATA = "Cannot convert supplied data type";
function getArrayBufferOrStringFromDataSync(data, loader, options) {
  if (loader.text && typeof data === "string") {
    return data;
  }
  if (isBuffer2(data)) {
    data = data.buffer;
  }
  if (data instanceof ArrayBuffer) {
    const arrayBuffer2 = data;
    if (loader.text && !loader.binary) {
      const textDecoder = new TextDecoder("utf8");
      return textDecoder.decode(arrayBuffer2);
    }
    return arrayBuffer2;
  }
  if (ArrayBuffer.isView(data)) {
    if (loader.text && !loader.binary) {
      const textDecoder = new TextDecoder("utf8");
      return textDecoder.decode(data);
    }
    let arrayBuffer2 = data.buffer;
    const byteLength = data.byteLength || data.length;
    if (data.byteOffset !== 0 || byteLength !== arrayBuffer2.byteLength) {
      arrayBuffer2 = arrayBuffer2.slice(data.byteOffset, data.byteOffset + byteLength);
    }
    return arrayBuffer2;
  }
  throw new Error(ERR_DATA);
}
async function getArrayBufferOrStringFromData(data, loader, options) {
  const isArrayBuffer = data instanceof ArrayBuffer || ArrayBuffer.isView(data);
  if (typeof data === "string" || isArrayBuffer) {
    return getArrayBufferOrStringFromDataSync(data, loader, options);
  }
  if (isBlob(data)) {
    data = await makeResponse(data);
  }
  if (isResponse(data)) {
    const response = data;
    await checkResponse(response);
    return loader.binary ? await response.arrayBuffer() : await response.text();
  }
  if (isReadableStream(data)) {
    data = makeIterator(data, options);
  }
  if (isIterable(data) || isAsyncIterable(data)) {
    return concatenateArrayBuffersAsync(data);
  }
  throw new Error(ERR_DATA);
}

// ../../../.yarn/berry/cache/@loaders.gl-core-npm-4.3.4-aea5a727cf-10c0.zip/node_modules/@loaders.gl/core/dist/lib/loader-utils/get-fetch-function.js
function getFetchFunction(options, context) {
  const globalOptions = getGlobalLoaderOptions();
  const loaderOptions = options || globalOptions;
  if (typeof loaderOptions.fetch === "function") {
    return loaderOptions.fetch;
  }
  if (isObject(loaderOptions.fetch)) {
    return (url) => fetchFile(url, loaderOptions.fetch);
  }
  if (context == null ? void 0 : context.fetch) {
    return context == null ? void 0 : context.fetch;
  }
  return fetchFile;
}

// ../../../.yarn/berry/cache/@loaders.gl-core-npm-4.3.4-aea5a727cf-10c0.zip/node_modules/@loaders.gl/core/dist/lib/loader-utils/loader-context.js
function getLoaderContext(context, options, parentContext) {
  if (parentContext) {
    return parentContext;
  }
  const newContext = {
    fetch: getFetchFunction(options, context),
    ...context
  };
  if (newContext.url) {
    const baseUrl = stripQueryString(newContext.url);
    newContext.baseUrl = baseUrl;
    newContext.queryString = extractQueryString(newContext.url);
    newContext.filename = path_exports.filename(baseUrl);
    newContext.baseUrl = path_exports.dirname(baseUrl);
  }
  if (!Array.isArray(newContext.loaders)) {
    newContext.loaders = null;
  }
  return newContext;
}
function getLoadersFromContext(loaders, context) {
  if (loaders && !Array.isArray(loaders)) {
    return loaders;
  }
  let candidateLoaders;
  if (loaders) {
    candidateLoaders = Array.isArray(loaders) ? loaders : [loaders];
  }
  if (context && context.loaders) {
    const contextLoaders = Array.isArray(context.loaders) ? context.loaders : [context.loaders];
    candidateLoaders = candidateLoaders ? [...candidateLoaders, ...contextLoaders] : contextLoaders;
  }
  return candidateLoaders && candidateLoaders.length ? candidateLoaders : void 0;
}

// ../../../.yarn/berry/cache/@loaders.gl-core-npm-4.3.4-aea5a727cf-10c0.zip/node_modules/@loaders.gl/core/dist/lib/api/parse.js
async function parse(data, loaders, options, context) {
  if (loaders && !Array.isArray(loaders) && !isLoaderObject(loaders)) {
    context = void 0;
    options = loaders;
    loaders = void 0;
  }
  data = await data;
  options = options || {};
  const url = getResourceUrl(data);
  const typedLoaders = loaders;
  const candidateLoaders = getLoadersFromContext(typedLoaders, context);
  const loader = await selectLoader(data, candidateLoaders, options);
  if (!loader) {
    return null;
  }
  options = normalizeOptions(options, loader, candidateLoaders, url);
  context = getLoaderContext(
    // @ts-expect-error
    { url, _parse: parse, loaders: candidateLoaders },
    options,
    context || null
  );
  return await parseWithLoader(loader, data, options, context);
}
async function parseWithLoader(loader, data, options, context) {
  validateWorkerVersion(loader);
  options = mergeLoaderOptions(loader.options, options);
  if (isResponse(data)) {
    const response = data;
    const { ok, redirected, status, statusText, type, url } = response;
    const headers = Object.fromEntries(response.headers.entries());
    context.response = { headers, ok, redirected, status, statusText, type, url };
  }
  data = await getArrayBufferOrStringFromData(data, loader, options);
  const loaderWithParser = loader;
  if (loaderWithParser.parseTextSync && typeof data === "string") {
    return loaderWithParser.parseTextSync(data, options, context);
  }
  if (canParseWithWorker(loader, options)) {
    return await parseWithWorker(loader, data, options, context, parse);
  }
  if (loaderWithParser.parseText && typeof data === "string") {
    return await loaderWithParser.parseText(data, options, context);
  }
  if (loaderWithParser.parse) {
    return await loaderWithParser.parse(data, options, context);
  }
  assert4(!loaderWithParser.parseSync);
  throw new Error(`${loader.id} loader - no parser found and worker is disabled`);
}

// .yarn/__virtual__/@loaders.gl-schema-virtual-0353755605/4/.yarn/berry/cache/@loaders.gl-schema-npm-4.3.4-7477932f21-10c0.zip/node_modules/@loaders.gl/schema/dist/lib/table/arrow-api/enum.js
var Type;
(function(Type2) {
  Type2[Type2["NONE"] = 0] = "NONE";
  Type2[Type2["Null"] = 1] = "Null";
  Type2[Type2["Int"] = 2] = "Int";
  Type2[Type2["Float"] = 3] = "Float";
  Type2[Type2["Binary"] = 4] = "Binary";
  Type2[Type2["Utf8"] = 5] = "Utf8";
  Type2[Type2["Bool"] = 6] = "Bool";
  Type2[Type2["Decimal"] = 7] = "Decimal";
  Type2[Type2["Date"] = 8] = "Date";
  Type2[Type2["Time"] = 9] = "Time";
  Type2[Type2["Timestamp"] = 10] = "Timestamp";
  Type2[Type2["Interval"] = 11] = "Interval";
  Type2[Type2["List"] = 12] = "List";
  Type2[Type2["Struct"] = 13] = "Struct";
  Type2[Type2["Union"] = 14] = "Union";
  Type2[Type2["FixedSizeBinary"] = 15] = "FixedSizeBinary";
  Type2[Type2["FixedSizeList"] = 16] = "FixedSizeList";
  Type2[Type2["Map"] = 17] = "Map";
  Type2[Type2["Dictionary"] = -1] = "Dictionary";
  Type2[Type2["Int8"] = -2] = "Int8";
  Type2[Type2["Int16"] = -3] = "Int16";
  Type2[Type2["Int32"] = -4] = "Int32";
  Type2[Type2["Int64"] = -5] = "Int64";
  Type2[Type2["Uint8"] = -6] = "Uint8";
  Type2[Type2["Uint16"] = -7] = "Uint16";
  Type2[Type2["Uint32"] = -8] = "Uint32";
  Type2[Type2["Uint64"] = -9] = "Uint64";
  Type2[Type2["Float16"] = -10] = "Float16";
  Type2[Type2["Float32"] = -11] = "Float32";
  Type2[Type2["Float64"] = -12] = "Float64";
  Type2[Type2["DateDay"] = -13] = "DateDay";
  Type2[Type2["DateMillisecond"] = -14] = "DateMillisecond";
  Type2[Type2["TimestampSecond"] = -15] = "TimestampSecond";
  Type2[Type2["TimestampMillisecond"] = -16] = "TimestampMillisecond";
  Type2[Type2["TimestampMicrosecond"] = -17] = "TimestampMicrosecond";
  Type2[Type2["TimestampNanosecond"] = -18] = "TimestampNanosecond";
  Type2[Type2["TimeSecond"] = -19] = "TimeSecond";
  Type2[Type2["TimeMillisecond"] = -20] = "TimeMillisecond";
  Type2[Type2["TimeMicrosecond"] = -21] = "TimeMicrosecond";
  Type2[Type2["TimeNanosecond"] = -22] = "TimeNanosecond";
  Type2[Type2["DenseUnion"] = -23] = "DenseUnion";
  Type2[Type2["SparseUnion"] = -24] = "SparseUnion";
  Type2[Type2["IntervalDayTime"] = -25] = "IntervalDayTime";
  Type2[Type2["IntervalYearMonth"] = -26] = "IntervalYearMonth";
})(Type || (Type = {}));

// ../../../.yarn/berry/cache/@loaders.gl-core-npm-4.3.4-aea5a727cf-10c0.zip/node_modules/@loaders.gl/core/dist/lib/api/load.js
async function load(url, loaders, options, context) {
  let resolvedLoaders;
  let resolvedOptions;
  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {
    resolvedLoaders = [];
    resolvedOptions = loaders;
    context = void 0;
  } else {
    resolvedLoaders = loaders;
    resolvedOptions = options;
  }
  const fetch2 = getFetchFunction(resolvedOptions);
  let data = url;
  if (typeof url === "string") {
    data = await fetch2(url);
  }
  if (isBlob(url)) {
    data = await fetch2(url);
  }
  return Array.isArray(resolvedLoaders) ? await parse(data, resolvedLoaders, resolvedOptions) : await parse(data, resolvedLoaders, resolvedOptions);
}

// .yarn/__virtual__/@loaders.gl-images-virtual-15c6321e42/4/.yarn/berry/cache/@loaders.gl-images-npm-4.3.4-79978e2d0b-10c0.zip/node_modules/@loaders.gl/images/dist/lib/utils/version.js
var VERSION4 = true ? "4.3.3" : "latest";

// .yarn/__virtual__/@loaders.gl-images-virtual-15c6321e42/4/.yarn/berry/cache/@loaders.gl-images-npm-4.3.4-79978e2d0b-10c0.zip/node_modules/@loaders.gl/images/dist/lib/category-api/image-type.js
var _a;
var parseImageNode = (_a = globalThis.loaders) == null ? void 0 : _a.parseImageNode;
var IMAGE_SUPPORTED = typeof Image !== "undefined";
var IMAGE_BITMAP_SUPPORTED = typeof ImageBitmap !== "undefined";
var NODE_IMAGE_SUPPORTED = Boolean(parseImageNode);
var DATA_SUPPORTED = isBrowser ? true : NODE_IMAGE_SUPPORTED;
function isImageTypeSupported(type) {
  switch (type) {
    case "auto":
      return IMAGE_BITMAP_SUPPORTED || IMAGE_SUPPORTED || DATA_SUPPORTED;
    case "imagebitmap":
      return IMAGE_BITMAP_SUPPORTED;
    case "image":
      return IMAGE_SUPPORTED;
    case "data":
      return DATA_SUPPORTED;
    default:
      throw new Error(`@loaders.gl/images: image ${type} not supported in this environment`);
  }
}
function getDefaultImageType() {
  if (IMAGE_BITMAP_SUPPORTED) {
    return "imagebitmap";
  }
  if (IMAGE_SUPPORTED) {
    return "image";
  }
  if (DATA_SUPPORTED) {
    return "data";
  }
  throw new Error("Install '@loaders.gl/polyfills' to parse images under Node.js");
}

// .yarn/__virtual__/@loaders.gl-images-virtual-15c6321e42/4/.yarn/berry/cache/@loaders.gl-images-npm-4.3.4-79978e2d0b-10c0.zip/node_modules/@loaders.gl/images/dist/lib/category-api/parsed-image-api.js
function getImageType(image) {
  const format = getImageTypeOrNull(image);
  if (!format) {
    throw new Error("Not an image");
  }
  return format;
}
function getImageData(image) {
  switch (getImageType(image)) {
    case "data":
      return image;
    case "image":
    case "imagebitmap":
      const canvas2 = document.createElement("canvas");
      const context = canvas2.getContext("2d");
      if (!context) {
        throw new Error("getImageData");
      }
      canvas2.width = image.width;
      canvas2.height = image.height;
      context.drawImage(image, 0, 0);
      return context.getImageData(0, 0, image.width, image.height);
    default:
      throw new Error("getImageData");
  }
}
function getImageTypeOrNull(image) {
  if (typeof ImageBitmap !== "undefined" && image instanceof ImageBitmap) {
    return "imagebitmap";
  }
  if (typeof Image !== "undefined" && image instanceof Image) {
    return "image";
  }
  if (image && typeof image === "object" && image.data && image.width && image.height) {
    return "data";
  }
  return null;
}

// .yarn/__virtual__/@loaders.gl-images-virtual-15c6321e42/4/.yarn/berry/cache/@loaders.gl-images-npm-4.3.4-79978e2d0b-10c0.zip/node_modules/@loaders.gl/images/dist/lib/parsers/svg-utils.js
var SVG_DATA_URL_PATTERN = /^data:image\/svg\+xml/;
var SVG_URL_PATTERN = /\.svg((\?|#).*)?$/;
function isSVG(url) {
  return url && (SVG_DATA_URL_PATTERN.test(url) || SVG_URL_PATTERN.test(url));
}
function getBlobOrSVGDataUrl(arrayBuffer2, url) {
  if (isSVG(url)) {
    const textDecoder = new TextDecoder();
    let xmlText = textDecoder.decode(arrayBuffer2);
    try {
      if (typeof unescape === "function" && typeof encodeURIComponent === "function") {
        xmlText = unescape(encodeURIComponent(xmlText));
      }
    } catch (error) {
      throw new Error(error.message);
    }
    const src = `data:image/svg+xml;base64,${btoa(xmlText)}`;
    return src;
  }
  return getBlob(arrayBuffer2, url);
}
function getBlob(arrayBuffer2, url) {
  if (isSVG(url)) {
    throw new Error("SVG cannot be parsed directly to imagebitmap");
  }
  return new Blob([new Uint8Array(arrayBuffer2)]);
}

// .yarn/__virtual__/@loaders.gl-images-virtual-15c6321e42/4/.yarn/berry/cache/@loaders.gl-images-npm-4.3.4-79978e2d0b-10c0.zip/node_modules/@loaders.gl/images/dist/lib/parsers/parse-to-image.js
async function parseToImage(arrayBuffer2, options, url) {
  const blobOrDataUrl = getBlobOrSVGDataUrl(arrayBuffer2, url);
  const URL2 = self.URL || self.webkitURL;
  const objectUrl = typeof blobOrDataUrl !== "string" && URL2.createObjectURL(blobOrDataUrl);
  try {
    return await loadToImage(objectUrl || blobOrDataUrl, options);
  } finally {
    if (objectUrl) {
      URL2.revokeObjectURL(objectUrl);
    }
  }
}
async function loadToImage(url, options) {
  const image = new Image();
  image.src = url;
  if (options.image && options.image.decode && image.decode) {
    await image.decode();
    return image;
  }
  return await new Promise((resolve2, reject) => {
    try {
      image.onload = () => resolve2(image);
      image.onerror = (error) => {
        const message2 = error instanceof Error ? error.message : "error";
        reject(new Error(message2));
      };
    } catch (error) {
      reject(error);
    }
  });
}

// .yarn/__virtual__/@loaders.gl-images-virtual-15c6321e42/4/.yarn/berry/cache/@loaders.gl-images-npm-4.3.4-79978e2d0b-10c0.zip/node_modules/@loaders.gl/images/dist/lib/parsers/parse-to-image-bitmap.js
var EMPTY_OBJECT = {};
var imagebitmapOptionsSupported = true;
async function parseToImageBitmap(arrayBuffer2, options, url) {
  let blob;
  if (isSVG(url)) {
    const image = await parseToImage(arrayBuffer2, options, url);
    blob = image;
  } else {
    blob = getBlob(arrayBuffer2, url);
  }
  const imagebitmapOptions = options && options.imagebitmap;
  return await safeCreateImageBitmap(blob, imagebitmapOptions);
}
async function safeCreateImageBitmap(blob, imagebitmapOptions = null) {
  if (isEmptyObject(imagebitmapOptions) || !imagebitmapOptionsSupported) {
    imagebitmapOptions = null;
  }
  if (imagebitmapOptions) {
    try {
      return await createImageBitmap(blob, imagebitmapOptions);
    } catch (error) {
      console.warn(error);
      imagebitmapOptionsSupported = false;
    }
  }
  return await createImageBitmap(blob);
}
function isEmptyObject(object) {
  for (const key in object || EMPTY_OBJECT) {
    return false;
  }
  return true;
}

// .yarn/__virtual__/@loaders.gl-images-virtual-15c6321e42/4/.yarn/berry/cache/@loaders.gl-images-npm-4.3.4-79978e2d0b-10c0.zip/node_modules/@loaders.gl/images/dist/lib/category-api/parse-isobmff-binary.js
function getISOBMFFMediaType(buffer2) {
  if (!checkString(buffer2, "ftyp", 4)) {
    return null;
  }
  if ((buffer2[8] & 96) === 0) {
    return null;
  }
  return decodeMajorBrand(buffer2);
}
function decodeMajorBrand(buffer2) {
  const brandMajor = getUTF8String(buffer2, 8, 12).replace("\0", " ").trim();
  switch (brandMajor) {
    case "avif":
    case "avis":
      return { extension: "avif", mimeType: "image/avif" };
    default:
      return null;
  }
}
function getUTF8String(array, start, end) {
  return String.fromCharCode(...array.slice(start, end));
}
function stringToBytes(string) {
  return [...string].map((character) => character.charCodeAt(0));
}
function checkString(buffer2, header, offset = 0) {
  const headerBytes = stringToBytes(header);
  for (let i4 = 0; i4 < headerBytes.length; ++i4) {
    if (headerBytes[i4] !== buffer2[i4 + offset]) {
      return false;
    }
  }
  return true;
}

// .yarn/__virtual__/@loaders.gl-images-virtual-15c6321e42/4/.yarn/berry/cache/@loaders.gl-images-npm-4.3.4-79978e2d0b-10c0.zip/node_modules/@loaders.gl/images/dist/lib/category-api/binary-image-api.js
var BIG_ENDIAN = false;
var LITTLE_ENDIAN = true;
function getBinaryImageMetadata(binaryData) {
  const dataView = toDataView(binaryData);
  return getPngMetadata(dataView) || getJpegMetadata(dataView) || getGifMetadata(dataView) || getBmpMetadata(dataView) || getISOBMFFMetadata(dataView);
}
function getISOBMFFMetadata(binaryData) {
  const buffer2 = new Uint8Array(binaryData instanceof DataView ? binaryData.buffer : binaryData);
  const mediaType = getISOBMFFMediaType(buffer2);
  if (!mediaType) {
    return null;
  }
  return {
    mimeType: mediaType.mimeType,
    // TODO - decode width and height
    width: 0,
    height: 0
  };
}
function getPngMetadata(binaryData) {
  const dataView = toDataView(binaryData);
  const isPng = dataView.byteLength >= 24 && dataView.getUint32(0, BIG_ENDIAN) === 2303741511;
  if (!isPng) {
    return null;
  }
  return {
    mimeType: "image/png",
    width: dataView.getUint32(16, BIG_ENDIAN),
    height: dataView.getUint32(20, BIG_ENDIAN)
  };
}
function getGifMetadata(binaryData) {
  const dataView = toDataView(binaryData);
  const isGif = dataView.byteLength >= 10 && dataView.getUint32(0, BIG_ENDIAN) === 1195984440;
  if (!isGif) {
    return null;
  }
  return {
    mimeType: "image/gif",
    width: dataView.getUint16(6, LITTLE_ENDIAN),
    height: dataView.getUint16(8, LITTLE_ENDIAN)
  };
}
function getBmpMetadata(binaryData) {
  const dataView = toDataView(binaryData);
  const isBmp = dataView.byteLength >= 14 && dataView.getUint16(0, BIG_ENDIAN) === 16973 && dataView.getUint32(2, LITTLE_ENDIAN) === dataView.byteLength;
  if (!isBmp) {
    return null;
  }
  return {
    mimeType: "image/bmp",
    width: dataView.getUint32(18, LITTLE_ENDIAN),
    height: dataView.getUint32(22, LITTLE_ENDIAN)
  };
}
function getJpegMetadata(binaryData) {
  const dataView = toDataView(binaryData);
  const isJpeg = dataView.byteLength >= 3 && dataView.getUint16(0, BIG_ENDIAN) === 65496 && dataView.getUint8(2) === 255;
  if (!isJpeg) {
    return null;
  }
  const { tableMarkers, sofMarkers } = getJpegMarkers();
  let i4 = 2;
  while (i4 + 9 < dataView.byteLength) {
    const marker = dataView.getUint16(i4, BIG_ENDIAN);
    if (sofMarkers.has(marker)) {
      return {
        mimeType: "image/jpeg",
        height: dataView.getUint16(i4 + 5, BIG_ENDIAN),
        // Number of lines
        width: dataView.getUint16(i4 + 7, BIG_ENDIAN)
        // Number of pixels per line
      };
    }
    if (!tableMarkers.has(marker)) {
      return null;
    }
    i4 += 2;
    i4 += dataView.getUint16(i4, BIG_ENDIAN);
  }
  return null;
}
function getJpegMarkers() {
  const tableMarkers = /* @__PURE__ */ new Set([65499, 65476, 65484, 65501, 65534]);
  for (let i4 = 65504; i4 < 65520; ++i4) {
    tableMarkers.add(i4);
  }
  const sofMarkers = /* @__PURE__ */ new Set([
    65472,
    65473,
    65474,
    65475,
    65477,
    65478,
    65479,
    65481,
    65482,
    65483,
    65485,
    65486,
    65487,
    65502
  ]);
  return { tableMarkers, sofMarkers };
}
function toDataView(data) {
  if (data instanceof DataView) {
    return data;
  }
  if (ArrayBuffer.isView(data)) {
    return new DataView(data.buffer);
  }
  if (data instanceof ArrayBuffer) {
    return new DataView(data);
  }
  throw new Error("toDataView");
}

// .yarn/__virtual__/@loaders.gl-images-virtual-15c6321e42/4/.yarn/berry/cache/@loaders.gl-images-npm-4.3.4-79978e2d0b-10c0.zip/node_modules/@loaders.gl/images/dist/lib/parsers/parse-to-node-image.js
async function parseToNodeImage(arrayBuffer2, options) {
  var _a3;
  const { mimeType } = getBinaryImageMetadata(arrayBuffer2) || {};
  const parseImageNode2 = (_a3 = globalThis.loaders) == null ? void 0 : _a3.parseImageNode;
  assert(parseImageNode2);
  return await parseImageNode2(arrayBuffer2, mimeType);
}

// .yarn/__virtual__/@loaders.gl-images-virtual-15c6321e42/4/.yarn/berry/cache/@loaders.gl-images-npm-4.3.4-79978e2d0b-10c0.zip/node_modules/@loaders.gl/images/dist/lib/parsers/parse-image.js
async function parseImage(arrayBuffer2, options, context) {
  options = options || {};
  const imageOptions = options.image || {};
  const imageType = imageOptions.type || "auto";
  const { url } = context || {};
  const loadType = getLoadableImageType(imageType);
  let image;
  switch (loadType) {
    case "imagebitmap":
      image = await parseToImageBitmap(arrayBuffer2, options, url);
      break;
    case "image":
      image = await parseToImage(arrayBuffer2, options, url);
      break;
    case "data":
      image = await parseToNodeImage(arrayBuffer2, options);
      break;
    default:
      assert(false);
  }
  if (imageType === "data") {
    image = getImageData(image);
  }
  return image;
}
function getLoadableImageType(type) {
  switch (type) {
    case "auto":
    case "data":
      return getDefaultImageType();
    default:
      isImageTypeSupported(type);
      return type;
  }
}

// .yarn/__virtual__/@loaders.gl-images-virtual-15c6321e42/4/.yarn/berry/cache/@loaders.gl-images-npm-4.3.4-79978e2d0b-10c0.zip/node_modules/@loaders.gl/images/dist/image-loader.js
var EXTENSIONS = ["png", "jpg", "jpeg", "gif", "webp", "bmp", "ico", "svg", "avif"];
var MIME_TYPES = [
  "image/png",
  "image/jpeg",
  "image/gif",
  "image/webp",
  "image/avif",
  "image/bmp",
  "image/vnd.microsoft.icon",
  "image/svg+xml"
];
var DEFAULT_IMAGE_LOADER_OPTIONS = {
  image: {
    type: "auto",
    decode: true
    // if format is HTML
  }
  // imagebitmap: {} - passes (platform dependent) parameters to ImageBitmap constructor
};
var ImageLoader = {
  dataType: null,
  batchType: null,
  id: "image",
  module: "images",
  name: "Images",
  version: VERSION4,
  mimeTypes: MIME_TYPES,
  extensions: EXTENSIONS,
  parse: parseImage,
  // TODO: byteOffset, byteLength;
  tests: [(arrayBuffer2) => Boolean(getBinaryImageMetadata(new DataView(arrayBuffer2)))],
  options: DEFAULT_IMAGE_LOADER_OPTIONS
};

// .yarn/__virtual__/@loaders.gl-images-virtual-15c6321e42/4/.yarn/berry/cache/@loaders.gl-images-npm-4.3.4-79978e2d0b-10c0.zip/node_modules/@loaders.gl/images/dist/lib/encoders/encode-image.js
var _a2;
var encodeImageNode = (_a2 = globalThis.loaders) == null ? void 0 : _a2.encodeImageNode;

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/utils/log.js
var defaultLogger = new Log({ id: "deck" });
var log_default = defaultLogger;

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/debug/loggers.js
var logState = {
  attributeUpdateStart: -1,
  attributeManagerUpdateStart: -1,
  attributeUpdateMessages: []
};
var LOG_LEVEL_MAJOR_UPDATE = 1;
var LOG_LEVEL_MINOR_UPDATE = 2;
var LOG_LEVEL_UPDATE_DETAIL = 3;
var LOG_LEVEL_INFO = 4;
var LOG_LEVEL_DRAW = 2;
var getLoggers = (log3) => ({
  /* Layer events */
  "layer.changeFlag": (layer, key, flags) => {
    log3.log(LOG_LEVEL_UPDATE_DETAIL, `${layer.id} ${key}: `, flags[key])();
  },
  "layer.initialize": (layer) => {
    log3.log(LOG_LEVEL_MAJOR_UPDATE, `Initializing ${layer}`)();
  },
  "layer.update": (layer, needsUpdate) => {
    if (needsUpdate) {
      const flags = layer.getChangeFlags();
      log3.log(LOG_LEVEL_MINOR_UPDATE, `Updating ${layer} because: ${Object.keys(flags).filter((key) => flags[key]).join(", ")}`)();
    } else {
      log3.log(LOG_LEVEL_INFO, `${layer} does not need update`)();
    }
  },
  "layer.matched": (layer, changed) => {
    if (changed) {
      log3.log(LOG_LEVEL_INFO, `Matched ${layer}, state transfered`)();
    }
  },
  "layer.finalize": (layer) => {
    log3.log(LOG_LEVEL_MAJOR_UPDATE, `Finalizing ${layer}`)();
  },
  /* CompositeLayer events */
  "compositeLayer.renderLayers": (layer, updated, subLayers) => {
    if (updated) {
      log3.log(LOG_LEVEL_MINOR_UPDATE, `Composite layer rendered new subLayers ${layer}`, subLayers)();
    } else {
      log3.log(LOG_LEVEL_INFO, `Composite layer reused subLayers ${layer}`, subLayers)();
    }
  },
  /* LayerManager events */
  "layerManager.setLayers": (layerManager, updated, layers) => {
    if (updated) {
      log3.log(LOG_LEVEL_MINOR_UPDATE, `Updating ${layers.length} deck layers`)();
    }
  },
  "layerManager.activateViewport": (layerManager, viewport) => {
    log3.log(LOG_LEVEL_UPDATE_DETAIL, "Viewport changed", viewport)();
  },
  /* AttributeManager events */
  "attributeManager.invalidate": (attributeManager, trigger, attributeNames) => {
    log3.log(LOG_LEVEL_MAJOR_UPDATE, attributeNames ? `invalidated attributes ${attributeNames} (${trigger}) for ${attributeManager.id}` : `invalidated all attributes for ${attributeManager.id}`)();
  },
  "attributeManager.updateStart": (attributeManager) => {
    logState.attributeUpdateMessages.length = 0;
    logState.attributeManagerUpdateStart = Date.now();
  },
  "attributeManager.updateEnd": (attributeManager, numInstances) => {
    const timeMs = Math.round(Date.now() - logState.attributeManagerUpdateStart);
    log3.groupCollapsed(LOG_LEVEL_MINOR_UPDATE, `Updated attributes for ${numInstances} instances in ${attributeManager.id} in ${timeMs}ms`)();
    for (const updateMessage of logState.attributeUpdateMessages) {
      log3.log(LOG_LEVEL_UPDATE_DETAIL, updateMessage)();
    }
    log3.groupEnd(LOG_LEVEL_MINOR_UPDATE)();
  },
  /* Attribute events */
  "attribute.updateStart": (attribute) => {
    logState.attributeUpdateStart = Date.now();
  },
  "attribute.allocate": (attribute, numInstances) => {
    const message2 = `${attribute.id} allocated ${numInstances}`;
    logState.attributeUpdateMessages.push(message2);
  },
  "attribute.updateEnd": (attribute, numInstances) => {
    const timeMs = Math.round(Date.now() - logState.attributeUpdateStart);
    const message2 = `${attribute.id} updated ${numInstances} in ${timeMs}ms`;
    logState.attributeUpdateMessages.push(message2);
  },
  /* Render events */
  "deckRenderer.renderLayers": (deckRenderer, renderStats, opts) => {
    const { pass, redrawReason, stats } = opts;
    for (const status of renderStats) {
      const { totalCount, visibleCount, compositeCount, pickableCount } = status;
      const primitiveCount = totalCount - compositeCount;
      const hiddenCount = primitiveCount - visibleCount;
      log3.log(LOG_LEVEL_DRAW, `RENDER #${deckRenderer.renderCount}   ${visibleCount} (of ${totalCount} layers) to ${pass} because ${redrawReason}   (${hiddenCount} hidden, ${compositeCount} composite ${pickableCount} pickable)`)();
      if (stats) {
        stats.get("Redraw Layers").add(visibleCount);
      }
    }
  }
});

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/debug/index.js
var loggers = {};
if (true) {
  loggers = getLoggers(log_default);
}
function register(handlers) {
  loggers = handlers;
}
function debug(eventType, arg1, arg2, arg3) {
  if (log_default.level > 0 && loggers[eventType]) {
    loggers[eventType].call(null, arg1, arg2, arg3);
  }
}

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/utils/json-loader.js
function isJSON(text) {
  const firstChar = text[0];
  const lastChar = text[text.length - 1];
  return firstChar === "{" && lastChar === "}" || firstChar === "[" && lastChar === "]";
}
var json_loader_default = {
  dataType: null,
  batchType: null,
  id: "JSON",
  name: "JSON",
  module: "",
  version: "",
  options: {},
  extensions: ["json", "geojson"],
  mimeTypes: ["application/json", "application/geo+json"],
  testText: isJSON,
  parseTextSync: JSON.parse
};

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/lib/init.js
function checkVersion() {
  const version2 = true ? "9.1.14" : globalThis.DECK_VERSION || "untranspiled source";
  const existingVersion = globalThis.deck && globalThis.deck.VERSION;
  if (existingVersion && existingVersion !== version2) {
    throw new Error(`deck.gl - multiple versions detected: ${existingVersion} vs ${version2}`);
  }
  if (!existingVersion) {
    log_default.log(1, `deck.gl ${version2}`)();
    globalThis.deck = {
      ...globalThis.deck,
      VERSION: version2,
      version: version2,
      log: log_default,
      // experimental
      _registerLoggers: register
    };
    registerLoaders([
      json_loader_default,
      // @ts-expect-error non-standard Loader format
      [ImageLoader, { imagebitmap: { premultiplyAlpha: "none" } }]
    ]);
  }
  return version2;
}
var VERSION5 = checkVersion();

// .yarn/__virtual__/@luma.gl-shadertools-virtual-ed2a1ebd80/4/.yarn/berry/cache/@luma.gl-shadertools-npm-9.1.9-81b6398d54-10c0.zip/node_modules/@luma.gl/shadertools/dist/lib/utils/assert.js
function assert5(condition, message2) {
  if (!condition) {
    throw new Error(message2 || "shadertools: assertion failed.");
  }
}

// .yarn/__virtual__/@luma.gl-shadertools-virtual-ed2a1ebd80/4/.yarn/berry/cache/@luma.gl-shadertools-npm-9.1.9-81b6398d54-10c0.zip/node_modules/@luma.gl/shadertools/dist/lib/filters/prop-types.js
var DEFAULT_PROP_VALIDATORS = {
  number: {
    type: "number",
    validate(value, propType) {
      return Number.isFinite(value) && typeof propType === "object" && (propType.max === void 0 || value <= propType.max) && (propType.min === void 0 || value >= propType.min);
    }
  },
  array: {
    type: "array",
    validate(value, propType) {
      return Array.isArray(value) || ArrayBuffer.isView(value);
    }
  }
};
function makePropValidators(propTypes) {
  const propValidators = {};
  for (const [name2, propType] of Object.entries(propTypes)) {
    propValidators[name2] = makePropValidator(propType);
  }
  return propValidators;
}
function makePropValidator(propType) {
  let type = getTypeOf(propType);
  if (type !== "object") {
    return { value: propType, ...DEFAULT_PROP_VALIDATORS[type], type };
  }
  if (typeof propType === "object") {
    if (!propType) {
      return { type: "object", value: null };
    }
    if (propType.type !== void 0) {
      return { ...propType, ...DEFAULT_PROP_VALIDATORS[propType.type], type: propType.type };
    }
    if (propType.value === void 0) {
      return { type: "object", value: propType };
    }
    type = getTypeOf(propType.value);
    return { ...propType, ...DEFAULT_PROP_VALIDATORS[type], type };
  }
  throw new Error("props");
}
function getTypeOf(value) {
  if (Array.isArray(value) || ArrayBuffer.isView(value)) {
    return "array";
  }
  return typeof value;
}

// .yarn/__virtual__/@luma.gl-shadertools-virtual-ed2a1ebd80/4/.yarn/berry/cache/@luma.gl-shadertools-npm-9.1.9-81b6398d54-10c0.zip/node_modules/@luma.gl/shadertools/dist/module-injectors.js
var MODULE_INJECTORS_VS = (
  /* glsl */
  `#ifdef MODULE_LOGDEPTH
  logdepth_adjustPosition(gl_Position);
#endif
`
);
var MODULE_INJECTORS_FS = (
  /* glsl */
  `#ifdef MODULE_MATERIAL
  fragColor = material_filterColor(fragColor);
#endif

#ifdef MODULE_LIGHTING
  fragColor = lighting_filterColor(fragColor);
#endif

#ifdef MODULE_FOG
  fragColor = fog_filterColor(fragColor);
#endif

#ifdef MODULE_PICKING
  fragColor = picking_filterHighlightColor(fragColor);
  fragColor = picking_filterPickingColor(fragColor);
#endif

#ifdef MODULE_LOGDEPTH
  logdepth_setFragDepth();
#endif
`
);

// .yarn/__virtual__/@luma.gl-shadertools-virtual-ed2a1ebd80/4/.yarn/berry/cache/@luma.gl-shadertools-npm-9.1.9-81b6398d54-10c0.zip/node_modules/@luma.gl/shadertools/dist/lib/shader-assembly/shader-injections.js
var MODULE_INJECTORS = {
  vertex: MODULE_INJECTORS_VS,
  fragment: MODULE_INJECTORS_FS
};
var REGEX_START_OF_MAIN = /void\s+main\s*\([^)]*\)\s*\{\n?/;
var REGEX_END_OF_MAIN = /}\n?[^{}]*$/;
var fragments = [];
var DECLARATION_INJECT_MARKER = "__LUMA_INJECT_DECLARATIONS__";
function normalizeInjections(injections) {
  const result = { vertex: {}, fragment: {} };
  for (const hook in injections) {
    let injection = injections[hook];
    const stage = getHookStage(hook);
    if (typeof injection === "string") {
      injection = {
        order: 0,
        injection
      };
    }
    result[stage][hook] = injection;
  }
  return result;
}
function getHookStage(hook) {
  const type = hook.slice(0, 2);
  switch (type) {
    case "vs":
      return "vertex";
    case "fs":
      return "fragment";
    default:
      throw new Error(type);
  }
}
function injectShader(source4, stage, inject, injectStandardStubs = false) {
  const isVertex = stage === "vertex";
  for (const key in inject) {
    const fragmentData = inject[key];
    fragmentData.sort((a3, b2) => a3.order - b2.order);
    fragments.length = fragmentData.length;
    for (let i4 = 0, len5 = fragmentData.length; i4 < len5; ++i4) {
      fragments[i4] = fragmentData[i4].injection;
    }
    const fragmentString = `${fragments.join("\n")}
`;
    switch (key) {
      // declarations are injected before the main function
      case "vs:#decl":
        if (isVertex) {
          source4 = source4.replace(DECLARATION_INJECT_MARKER, fragmentString);
        }
        break;
      // inject code at the beginning of the main function
      case "vs:#main-start":
        if (isVertex) {
          source4 = source4.replace(REGEX_START_OF_MAIN, (match) => match + fragmentString);
        }
        break;
      // inject code at the end of main function
      case "vs:#main-end":
        if (isVertex) {
          source4 = source4.replace(REGEX_END_OF_MAIN, (match) => fragmentString + match);
        }
        break;
      // declarations are injected before the main function
      case "fs:#decl":
        if (!isVertex) {
          source4 = source4.replace(DECLARATION_INJECT_MARKER, fragmentString);
        }
        break;
      // inject code at the beginning of the main function
      case "fs:#main-start":
        if (!isVertex) {
          source4 = source4.replace(REGEX_START_OF_MAIN, (match) => match + fragmentString);
        }
        break;
      // inject code at the end of main function
      case "fs:#main-end":
        if (!isVertex) {
          source4 = source4.replace(REGEX_END_OF_MAIN, (match) => fragmentString + match);
        }
        break;
      default:
        source4 = source4.replace(key, (match) => match + fragmentString);
    }
  }
  source4 = source4.replace(DECLARATION_INJECT_MARKER, "");
  if (injectStandardStubs) {
    source4 = source4.replace(/\}\s*$/, (match) => match + MODULE_INJECTORS[stage]);
  }
  return source4;
}

// .yarn/__virtual__/@luma.gl-shadertools-virtual-ed2a1ebd80/4/.yarn/berry/cache/@luma.gl-shadertools-npm-9.1.9-81b6398d54-10c0.zip/node_modules/@luma.gl/shadertools/dist/lib/shader-module/shader-module.js
function initializeShaderModules(modules) {
  modules.map((module) => initializeShaderModule(module));
}
function initializeShaderModule(module) {
  if (module.instance) {
    return;
  }
  initializeShaderModules(module.dependencies || []);
  const {
    propTypes = {},
    deprecations = [],
    // defines = {},
    inject = {}
  } = module;
  const instance = {
    normalizedInjections: normalizeInjections(inject),
    parsedDeprecations: parseDeprecationDefinitions(deprecations)
  };
  if (propTypes) {
    instance.propValidators = makePropValidators(propTypes);
  }
  module.instance = instance;
  let defaultProps3 = {};
  if (propTypes) {
    defaultProps3 = Object.entries(propTypes).reduce((obj, [key, propType]) => {
      const value = propType == null ? void 0 : propType.value;
      if (value) {
        obj[key] = value;
      }
      return obj;
    }, {});
  }
  module.defaultUniforms = { ...module.defaultUniforms, ...defaultProps3 };
}
function checkShaderModuleDeprecations(shaderModule, shaderSource, log3) {
  var _a3;
  (_a3 = shaderModule.deprecations) == null ? void 0 : _a3.forEach((def) => {
    var _a4;
    if ((_a4 = def.regex) == null ? void 0 : _a4.test(shaderSource)) {
      if (def.deprecated) {
        log3.deprecated(def.old, def.new)();
      } else {
        log3.removed(def.old, def.new)();
      }
    }
  });
}
function parseDeprecationDefinitions(deprecations) {
  deprecations.forEach((def) => {
    switch (def.type) {
      case "function":
        def.regex = new RegExp(`\\b${def.old}\\(`);
        break;
      default:
        def.regex = new RegExp(`${def.type} ${def.old};`);
    }
  });
  return deprecations;
}

// .yarn/__virtual__/@luma.gl-shadertools-virtual-ed2a1ebd80/4/.yarn/berry/cache/@luma.gl-shadertools-npm-9.1.9-81b6398d54-10c0.zip/node_modules/@luma.gl/shadertools/dist/lib/shader-module/shader-module-dependencies.js
function getShaderModuleDependencies(modules) {
  initializeShaderModules(modules);
  const moduleMap = {};
  const moduleDepth = {};
  getDependencyGraph({ modules, level: 0, moduleMap, moduleDepth });
  const dependencies = Object.keys(moduleDepth).sort((a3, b2) => moduleDepth[b2] - moduleDepth[a3]).map((name2) => moduleMap[name2]);
  initializeShaderModules(dependencies);
  return dependencies;
}
function getDependencyGraph(options) {
  const { modules, level, moduleMap, moduleDepth } = options;
  if (level >= 5) {
    throw new Error("Possible loop in shader dependency graph");
  }
  for (const module of modules) {
    moduleMap[module.name] = module;
    if (moduleDepth[module.name] === void 0 || moduleDepth[module.name] < level) {
      moduleDepth[module.name] = level;
    }
  }
  for (const module of modules) {
    if (module.dependencies) {
      getDependencyGraph({ modules: module.dependencies, level: level + 1, moduleMap, moduleDepth });
    }
  }
}

// .yarn/__virtual__/@luma.gl-shadertools-virtual-ed2a1ebd80/4/.yarn/berry/cache/@luma.gl-shadertools-npm-9.1.9-81b6398d54-10c0.zip/node_modules/@luma.gl/shadertools/dist/lib/shader-assembly/platform-defines.js
function getPlatformShaderDefines(platformInfo) {
  switch (platformInfo == null ? void 0 : platformInfo.gpu.toLowerCase()) {
    case "apple":
      return (
        /* glsl */
        `#define APPLE_GPU
// Apple optimizes away the calculation necessary for emulated fp64
#define LUMA_FP64_CODE_ELIMINATION_WORKAROUND 1
#define LUMA_FP32_TAN_PRECISION_WORKAROUND 1
// Intel GPU doesn't have full 32 bits precision in same cases, causes overflow
#define LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND 1
`
      );
    case "nvidia":
      return (
        /* glsl */
        `#define NVIDIA_GPU
// Nvidia optimizes away the calculation necessary for emulated fp64
#define LUMA_FP64_CODE_ELIMINATION_WORKAROUND 1
`
      );
    case "intel":
      return (
        /* glsl */
        `#define INTEL_GPU
// Intel optimizes away the calculation necessary for emulated fp64
#define LUMA_FP64_CODE_ELIMINATION_WORKAROUND 1
// Intel's built-in 'tan' function doesn't have acceptable precision
#define LUMA_FP32_TAN_PRECISION_WORKAROUND 1
// Intel GPU doesn't have full 32 bits precision in same cases, causes overflow
#define LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND 1
`
      );
    case "amd":
      return (
        /* glsl */
        `#define AMD_GPU
`
      );
    default:
      return (
        /* glsl */
        `#define DEFAULT_GPU
// Prevent driver from optimizing away the calculation necessary for emulated fp64
#define LUMA_FP64_CODE_ELIMINATION_WORKAROUND 1
// Headless Chrome's software shader 'tan' function doesn't have acceptable precision
#define LUMA_FP32_TAN_PRECISION_WORKAROUND 1
// If the GPU doesn't have full 32 bits precision, will causes overflow
#define LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND 1
`
      );
  }
}

// .yarn/__virtual__/@luma.gl-shadertools-virtual-ed2a1ebd80/4/.yarn/berry/cache/@luma.gl-shadertools-npm-9.1.9-81b6398d54-10c0.zip/node_modules/@luma.gl/shadertools/dist/lib/shader-transpiler/transpile-glsl-shader.js
function transpileGLSLShader(source4, stage) {
  var _a3;
  const sourceGLSLVersion = Number(((_a3 = source4.match(/^#version[ \t]+(\d+)/m)) == null ? void 0 : _a3[1]) || 100);
  if (sourceGLSLVersion !== 300) {
    throw new Error("luma.gl v9 only supports GLSL 3.00 shader sources");
  }
  switch (stage) {
    case "vertex":
      source4 = convertShader(source4, ES300_VERTEX_REPLACEMENTS);
      return source4;
    case "fragment":
      source4 = convertShader(source4, ES300_FRAGMENT_REPLACEMENTS);
      return source4;
    default:
      throw new Error(stage);
  }
}
var ES300_REPLACEMENTS = [
  // Fix poorly formatted version directive
  [/^(#version[ \t]+(100|300[ \t]+es))?[ \t]*\n/, "#version 300 es\n"],
  // The individual `texture...()` functions were replaced with `texture()` overloads
  [/\btexture(2D|2DProj|Cube)Lod(EXT)?\(/g, "textureLod("],
  [/\btexture(2D|2DProj|Cube)(EXT)?\(/g, "texture("]
];
var ES300_VERTEX_REPLACEMENTS = [
  ...ES300_REPLACEMENTS,
  // `attribute` keyword replaced with `in`
  [makeVariableTextRegExp("attribute"), "in $1"],
  // `varying` keyword replaced with `out`
  [makeVariableTextRegExp("varying"), "out $1"]
];
var ES300_FRAGMENT_REPLACEMENTS = [
  ...ES300_REPLACEMENTS,
  // `varying` keyword replaced with `in`
  [makeVariableTextRegExp("varying"), "in $1"]
];
function convertShader(source4, replacements) {
  for (const [pattern, replacement] of replacements) {
    source4 = source4.replace(pattern, replacement);
  }
  return source4;
}
function makeVariableTextRegExp(qualifier) {
  return new RegExp(`\\b${qualifier}[ \\t]+(\\w+[ \\t]+\\w+(\\[\\w+\\])?;)`, "g");
}

// .yarn/__virtual__/@luma.gl-shadertools-virtual-ed2a1ebd80/4/.yarn/berry/cache/@luma.gl-shadertools-npm-9.1.9-81b6398d54-10c0.zip/node_modules/@luma.gl/shadertools/dist/lib/shader-assembly/shader-hooks.js
function getShaderHooks(hookFunctions, hookInjections) {
  let result = "";
  for (const hookName in hookFunctions) {
    const hookFunction = hookFunctions[hookName];
    result += `void ${hookFunction.signature} {
`;
    if (hookFunction.header) {
      result += `  ${hookFunction.header}`;
    }
    if (hookInjections[hookName]) {
      const injections = hookInjections[hookName];
      injections.sort((a3, b2) => a3.order - b2.order);
      for (const injection of injections) {
        result += `  ${injection.injection}
`;
      }
    }
    if (hookFunction.footer) {
      result += `  ${hookFunction.footer}`;
    }
    result += "}\n";
  }
  return result;
}
function normalizeShaderHooks(hookFunctions) {
  const result = { vertex: {}, fragment: {} };
  for (const hookFunction of hookFunctions) {
    let opts;
    let hook;
    if (typeof hookFunction !== "string") {
      opts = hookFunction;
      hook = opts.hook;
    } else {
      opts = {};
      hook = hookFunction;
    }
    hook = hook.trim();
    const [shaderStage, signature] = hook.split(":");
    const name2 = hook.replace(/\(.+/, "");
    const normalizedHook = Object.assign(opts, { signature });
    switch (shaderStage) {
      case "vs":
        result.vertex[name2] = normalizedHook;
        break;
      case "fs":
        result.fragment[name2] = normalizedHook;
        break;
      default:
        throw new Error(shaderStage);
    }
  }
  return result;
}

// .yarn/__virtual__/@luma.gl-shadertools-virtual-ed2a1ebd80/4/.yarn/berry/cache/@luma.gl-shadertools-npm-9.1.9-81b6398d54-10c0.zip/node_modules/@luma.gl/shadertools/dist/lib/glsl-utils/get-shader-info.js
function getShaderInfo(source4, defaultName) {
  return {
    name: getShaderName(source4, defaultName),
    language: "glsl",
    version: getShaderVersion(source4)
  };
}
function getShaderName(shader, defaultName = "unnamed") {
  const SHADER_NAME_REGEXP = /#define[^\S\r\n]*SHADER_NAME[^\S\r\n]*([A-Za-z0-9_-]+)\s*/;
  const match = SHADER_NAME_REGEXP.exec(shader);
  return match ? match[1] : defaultName;
}
function getShaderVersion(source4) {
  let version2 = 100;
  const words = source4.match(/[^\s]+/g);
  if (words && words.length >= 2 && words[0] === "#version") {
    const parsedVersion = parseInt(words[1], 10);
    if (Number.isFinite(parsedVersion)) {
      version2 = parsedVersion;
    }
  }
  if (version2 !== 100 && version2 !== 300) {
    throw new Error(`Invalid GLSL version ${version2}`);
  }
  return version2;
}

// .yarn/__virtual__/@luma.gl-shadertools-virtual-ed2a1ebd80/4/.yarn/berry/cache/@luma.gl-shadertools-npm-9.1.9-81b6398d54-10c0.zip/node_modules/@luma.gl/shadertools/dist/lib/shader-assembly/assemble-shaders.js
var INJECT_SHADER_DECLARATIONS = `

${DECLARATION_INJECT_MARKER}
`;
var FRAGMENT_SHADER_PROLOGUE = (
  /* glsl */
  `precision highp float;
`
);
function assembleWGSLShader(options) {
  const modules = getShaderModuleDependencies(options.modules || []);
  return {
    source: assembleShaderWGSL(options.platformInfo, {
      ...options,
      source: options.source,
      stage: "vertex",
      modules
    }),
    getUniforms: assembleGetUniforms(modules)
  };
}
function assembleGLSLShaderPair(options) {
  const { vs: vs11, fs: fs10 } = options;
  const modules = getShaderModuleDependencies(options.modules || []);
  return {
    vs: assembleShaderGLSL(options.platformInfo, {
      ...options,
      source: vs11,
      stage: "vertex",
      modules
    }),
    fs: assembleShaderGLSL(options.platformInfo, {
      ...options,
      // @ts-expect-error
      source: fs10,
      stage: "fragment",
      modules
    }),
    getUniforms: assembleGetUniforms(modules)
  };
}
function assembleShaderWGSL(platformInfo, options) {
  var _a3;
  const {
    // id,
    source: source4,
    stage,
    modules,
    // defines = {},
    hookFunctions = [],
    inject = {},
    log: log3
  } = options;
  assert5(typeof source4 === "string", "shader source must be a string");
  const coreSource = source4;
  let assembledSource = "";
  const hookFunctionMap = normalizeShaderHooks(hookFunctions);
  const hookInjections = {};
  const declInjections = {};
  const mainInjections = {};
  for (const key in inject) {
    const injection = typeof inject[key] === "string" ? { injection: inject[key], order: 0 } : inject[key];
    const match = /^(v|f)s:(#)?([\w-]+)$/.exec(key);
    if (match) {
      const hash = match[2];
      const name2 = match[3];
      if (hash) {
        if (name2 === "decl") {
          declInjections[key] = [injection];
        } else {
          mainInjections[key] = [injection];
        }
      } else {
        hookInjections[key] = [injection];
      }
    } else {
      mainInjections[key] = [injection];
    }
  }
  const modulesToInject = modules;
  for (const module of modulesToInject) {
    if (log3) {
      checkShaderModuleDeprecations(module, coreSource, log3);
    }
    const moduleSource = getShaderModuleSource(module, "wgsl");
    assembledSource += moduleSource;
    const injections = ((_a3 = module.injections) == null ? void 0 : _a3[stage]) || {};
    for (const key in injections) {
      const match = /^(v|f)s:#([\w-]+)$/.exec(key);
      if (match) {
        const name2 = match[2];
        const injectionType = name2 === "decl" ? declInjections : mainInjections;
        injectionType[key] = injectionType[key] || [];
        injectionType[key].push(injections[key]);
      } else {
        hookInjections[key] = hookInjections[key] || [];
        hookInjections[key].push(injections[key]);
      }
    }
  }
  assembledSource += INJECT_SHADER_DECLARATIONS;
  assembledSource = injectShader(assembledSource, stage, declInjections);
  assembledSource += getShaderHooks(hookFunctionMap[stage], hookInjections);
  assembledSource += coreSource;
  assembledSource = injectShader(assembledSource, stage, mainInjections);
  return assembledSource;
}
function assembleShaderGLSL(platformInfo, options) {
  var _a3;
  const { id, source: source4, stage, language = "glsl", modules, defines: defines2 = {}, hookFunctions = [], inject = {}, prologue = true, log: log3 } = options;
  assert5(typeof source4 === "string", "shader source must be a string");
  const sourceVersion = language === "glsl" ? getShaderInfo(source4).version : -1;
  const targetVersion = platformInfo.shaderLanguageVersion;
  const sourceVersionDirective = sourceVersion === 100 ? "#version 100" : "#version 300 es";
  const sourceLines = source4.split("\n");
  const coreSource = sourceLines.slice(1).join("\n");
  const allDefines = {};
  modules.forEach((module) => {
    Object.assign(allDefines, module.defines);
  });
  Object.assign(allDefines, defines2);
  let assembledSource = "";
  switch (language) {
    case "wgsl":
      break;
    case "glsl":
      assembledSource = prologue ? `${sourceVersionDirective}

// ----- PROLOGUE -------------------------
${getShaderNameDefine({ id, source: source4, stage })}
${`#define SHADER_TYPE_${stage.toUpperCase()}`}

${getPlatformShaderDefines(platformInfo)}
${stage === "fragment" ? FRAGMENT_SHADER_PROLOGUE : ""}

// ----- APPLICATION DEFINES -------------------------

${getApplicationDefines(allDefines)}

` : `${sourceVersionDirective}
`;
      break;
  }
  const hookFunctionMap = normalizeShaderHooks(hookFunctions);
  const hookInjections = {};
  const declInjections = {};
  const mainInjections = {};
  for (const key in inject) {
    const injection = typeof inject[key] === "string" ? { injection: inject[key], order: 0 } : inject[key];
    const match = /^(v|f)s:(#)?([\w-]+)$/.exec(key);
    if (match) {
      const hash = match[2];
      const name2 = match[3];
      if (hash) {
        if (name2 === "decl") {
          declInjections[key] = [injection];
        } else {
          mainInjections[key] = [injection];
        }
      } else {
        hookInjections[key] = [injection];
      }
    } else {
      mainInjections[key] = [injection];
    }
  }
  for (const module of modules) {
    if (log3) {
      checkShaderModuleDeprecations(module, coreSource, log3);
    }
    const moduleSource = getShaderModuleSource(module, stage);
    assembledSource += moduleSource;
    const injections = ((_a3 = module.instance) == null ? void 0 : _a3.normalizedInjections[stage]) || {};
    for (const key in injections) {
      const match = /^(v|f)s:#([\w-]+)$/.exec(key);
      if (match) {
        const name2 = match[2];
        const injectionType = name2 === "decl" ? declInjections : mainInjections;
        injectionType[key] = injectionType[key] || [];
        injectionType[key].push(injections[key]);
      } else {
        hookInjections[key] = hookInjections[key] || [];
        hookInjections[key].push(injections[key]);
      }
    }
  }
  assembledSource += "// ----- MAIN SHADER SOURCE -------------------------";
  assembledSource += INJECT_SHADER_DECLARATIONS;
  assembledSource = injectShader(assembledSource, stage, declInjections);
  assembledSource += getShaderHooks(hookFunctionMap[stage], hookInjections);
  assembledSource += coreSource;
  assembledSource = injectShader(assembledSource, stage, mainInjections);
  if (language === "glsl" && sourceVersion !== targetVersion) {
    assembledSource = transpileGLSLShader(assembledSource, stage);
  }
  return assembledSource.trim();
}
function assembleGetUniforms(modules) {
  return function getUniforms5(opts) {
    var _a3;
    const uniforms = {};
    for (const module of modules) {
      const moduleUniforms = (_a3 = module.getUniforms) == null ? void 0 : _a3.call(module, opts, uniforms);
      Object.assign(uniforms, moduleUniforms);
    }
    return uniforms;
  };
}
function getShaderNameDefine(options) {
  const { id, source: source4, stage } = options;
  const injectShaderName = id && source4.indexOf("SHADER_NAME") === -1;
  return injectShaderName ? `
#define SHADER_NAME ${id}_${stage}` : "";
}
function getApplicationDefines(defines2 = {}) {
  let sourceText = "";
  for (const define in defines2) {
    const value = defines2[define];
    if (value || Number.isFinite(value)) {
      sourceText += `#define ${define.toUpperCase()} ${defines2[define]}
`;
    }
  }
  return sourceText;
}
function getShaderModuleSource(module, stage) {
  let moduleSource;
  switch (stage) {
    case "vertex":
      moduleSource = module.vs || "";
      break;
    case "fragment":
      moduleSource = module.fs || "";
      break;
    case "wgsl":
      moduleSource = module.source || "";
      break;
    default:
      assert5(false);
  }
  if (!module.name) {
    throw new Error("Shader module must have a name");
  }
  const moduleName = module.name.toUpperCase().replace(/[^0-9a-z]/gi, "_");
  let source4 = `// ----- MODULE ${module.name} ---------------

`;
  if (stage !== "wgsl") {
    source4 += `#define MODULE_${moduleName}
`;
  }
  source4 += `${moduleSource}
`;
  return source4;
}

// .yarn/__virtual__/@luma.gl-shadertools-virtual-ed2a1ebd80/4/.yarn/berry/cache/@luma.gl-shadertools-npm-9.1.9-81b6398d54-10c0.zip/node_modules/@luma.gl/shadertools/dist/lib/preprocessor/preprocessor.js
var IFDEF_REGEXP = /^\s*\#\s*ifdef\s*([a-zA-Z_]+)\s*$/;
var ENDIF_REGEXP = /^\s*\#\s*endif\s*$/;
function preprocess(source4, options) {
  var _a3;
  const lines = source4.split("\n");
  const output = [];
  let conditional = true;
  let currentDefine = null;
  for (const line of lines) {
    const matchIf = line.match(IFDEF_REGEXP);
    const matchEnd = line.match(ENDIF_REGEXP);
    if (matchIf) {
      currentDefine = matchIf[1];
      conditional = Boolean((_a3 = options == null ? void 0 : options.defines) == null ? void 0 : _a3[currentDefine]);
    } else if (matchEnd) {
      conditional = true;
    } else if (conditional) {
      output.push(line);
    }
  }
  return output.join("\n");
}

// .yarn/__virtual__/@luma.gl-shadertools-virtual-ed2a1ebd80/4/.yarn/berry/cache/@luma.gl-shadertools-npm-9.1.9-81b6398d54-10c0.zip/node_modules/@luma.gl/shadertools/dist/lib/shader-assembler.js
var _ShaderAssembler = class _ShaderAssembler {
  constructor() {
    /** Hook functions */
    __publicField(this, "_hookFunctions", []);
    /** Shader modules */
    __publicField(this, "_defaultModules", []);
  }
  /**
   * A default shader assembler instance - the natural place to register default modules and hooks
   * @returns
   */
  static getDefaultShaderAssembler() {
    _ShaderAssembler.defaultShaderAssembler = _ShaderAssembler.defaultShaderAssembler || new _ShaderAssembler();
    return _ShaderAssembler.defaultShaderAssembler;
  }
  /**
   * Add a default module that does not have to be provided with every call to assembleShaders()
   */
  addDefaultModule(module) {
    if (!this._defaultModules.find((m3) => m3.name === (typeof module === "string" ? module : module.name))) {
      this._defaultModules.push(module);
    }
  }
  /**
   * Remove a default module
   */
  removeDefaultModule(module) {
    const moduleName = typeof module === "string" ? module : module.name;
    this._defaultModules = this._defaultModules.filter((m3) => m3.name !== moduleName);
  }
  /**
   * Register a shader hook
   * @param hook
   * @param opts
   */
  addShaderHook(hook, opts) {
    if (opts) {
      hook = Object.assign(opts, { hook });
    }
    this._hookFunctions.push(hook);
  }
  /**
   * Assemble a WGSL unified shader
   * @param platformInfo
   * @param props
   * @returns
   */
  assembleWGSLShader(props) {
    const modules = this._getModuleList(props.modules);
    const hookFunctions = this._hookFunctions;
    const { source: source4, getUniforms: getUniforms5 } = assembleWGSLShader({
      ...props,
      // @ts-expect-error
      source: props.source,
      modules,
      hookFunctions
    });
    const preprocessedSource = props.platformInfo.shaderLanguage === "wgsl" ? preprocess(source4) : source4;
    return { source: preprocessedSource, getUniforms: getUniforms5, modules };
  }
  /**
   * Assemble a pair of shaders into a single shader program
   * @param platformInfo
   * @param props
   * @returns
   */
  assembleGLSLShaderPair(props) {
    const modules = this._getModuleList(props.modules);
    const hookFunctions = this._hookFunctions;
    const assembled = assembleGLSLShaderPair({
      ...props,
      // @ts-expect-error
      vs: props.vs,
      // @ts-expect-error
      fs: props.fs,
      modules,
      hookFunctions
    });
    return { ...assembled, modules };
  }
  /**
   * Dedupe and combine with default modules
   */
  _getModuleList(appModules = []) {
    const modules = new Array(this._defaultModules.length + appModules.length);
    const seen = {};
    let count2 = 0;
    for (let i4 = 0, len5 = this._defaultModules.length; i4 < len5; ++i4) {
      const module = this._defaultModules[i4];
      const name2 = module.name;
      modules[count2++] = module;
      seen[name2] = true;
    }
    for (let i4 = 0, len5 = appModules.length; i4 < len5; ++i4) {
      const module = appModules[i4];
      const name2 = module.name;
      if (!seen[name2]) {
        modules[count2++] = module;
        seen[name2] = true;
      }
    }
    modules.length = count2;
    initializeShaderModules(modules);
    return modules;
  }
};
/** Default ShaderAssembler instance */
__publicField(_ShaderAssembler, "defaultShaderAssembler");
var ShaderAssembler = _ShaderAssembler;

// .yarn/__virtual__/@luma.gl-shadertools-virtual-ed2a1ebd80/4/.yarn/berry/cache/@luma.gl-shadertools-npm-9.1.9-81b6398d54-10c0.zip/node_modules/@luma.gl/shadertools/dist/lib/glsl-utils/shader-utils.js
var FS_GLES = (
  /* glsl */
  `out vec4 transform_output;
void main() {
  transform_output = vec4(0);
}`
);
var FS300 = `#version 300 es
${FS_GLES}`;
function getPassthroughFS(options) {
  const { input, inputChannels, output } = options || {};
  if (!input) {
    return FS300;
  }
  if (!inputChannels) {
    throw new Error("inputChannels");
  }
  const inputType = channelCountToType(inputChannels);
  const outputValue = convertToVec4(input, inputChannels);
  return `#version 300 es
in ${inputType} ${input};
out vec4 ${output};
void main() {
  ${output} = ${outputValue};
}`;
}
function channelCountToType(channels) {
  switch (channels) {
    case 1:
      return "float";
    case 2:
      return "vec2";
    case 3:
      return "vec3";
    case 4:
      return "vec4";
    default:
      throw new Error(`invalid channels: ${channels}`);
  }
}
function convertToVec4(variable, channels) {
  switch (channels) {
    case 1:
      return `vec4(${variable}, 0.0, 0.0, 1.0)`;
    case 2:
      return `vec4(${variable}, 0.0, 1.0)`;
    case 3:
      return `vec4(${variable}, 1.0)`;
    case 4:
      return variable;
    default:
      throw new Error(`invalid channels: ${channels}`);
  }
}

// ../../../.yarn/berry/cache/@luma.gl-core-npm-9.1.9-f747d3c594-10c0.zip/node_modules/@luma.gl/core/dist/utils/stats-manager.js
var StatsManager = class {
  constructor() {
    __publicField(this, "stats", /* @__PURE__ */ new Map());
  }
  getStats(name2) {
    return this.get(name2);
  }
  get(name2) {
    if (!this.stats.has(name2)) {
      this.stats.set(name2, new Stats({ id: name2 }));
    }
    return this.stats.get(name2);
  }
};
var lumaStats = new StatsManager();

// ../../../.yarn/berry/cache/@luma.gl-core-npm-9.1.9-f747d3c594-10c0.zip/node_modules/@luma.gl/core/dist/utils/log.js
var log2 = new Log({ id: "luma.gl" });

// ../../../.yarn/berry/cache/@luma.gl-core-npm-9.1.9-f747d3c594-10c0.zip/node_modules/@luma.gl/core/dist/utils/uid.js
var uidCounters = {};
function uid(id = "id") {
  uidCounters[id] = uidCounters[id] || 1;
  const count2 = uidCounters[id]++;
  return `${id}-${count2}`;
}

// ../../../.yarn/berry/cache/@luma.gl-core-npm-9.1.9-f747d3c594-10c0.zip/node_modules/@luma.gl/core/dist/adapter/resources/resource.js
var Resource = class {
  /**
   * Create a new Resource. Called from Subclass
   */
  constructor(device, props, defaultProps3) {
    /** props.id, for debugging. */
    __publicField(this, "id");
    __publicField(this, "props");
    __publicField(this, "userData", {});
    __publicField(this, "_device");
    /** Whether this resource has been destroyed */
    __publicField(this, "destroyed", false);
    /** For resources that allocate GPU memory */
    __publicField(this, "allocatedBytes", 0);
    /** Attached resources will be destroyed when this resource is destroyed. Tracks auto-created "sub" resources. */
    __publicField(this, "_attachedResources", /* @__PURE__ */ new Set());
    if (!device) {
      throw new Error("no device");
    }
    this._device = device;
    this.props = selectivelyMerge(props, defaultProps3);
    const id = this.props.id !== "undefined" ? this.props.id : uid(this[Symbol.toStringTag]);
    this.props.id = id;
    this.id = id;
    this.userData = this.props.userData || {};
    this.addStats();
  }
  toString() {
    return `${this[Symbol.toStringTag] || this.constructor.name}:"${this.id}"`;
  }
  /**
   * destroy can be called on any resource to release it before it is garbage collected.
   */
  destroy() {
    this.destroyResource();
  }
  /** @deprecated Use destroy() */
  delete() {
    this.destroy();
    return this;
  }
  /**
   * Combines a map of user props and default props, only including props from defaultProps
   * @returns returns a map of overridden default props
   */
  getProps() {
    return this.props;
  }
  // ATTACHED RESOURCES
  /**
   * Attaches a resource. Attached resources are auto destroyed when this resource is destroyed
   * Called automatically when sub resources are auto created but can be called by application
   */
  attachResource(resource) {
    this._attachedResources.add(resource);
  }
  /**
   * Detach an attached resource. The resource will no longer be auto-destroyed when this resource is destroyed.
   */
  detachResource(resource) {
    this._attachedResources.delete(resource);
  }
  /**
   * Destroys a resource (only if owned), and removes from the owned (auto-destroy) list for this resource.
   */
  destroyAttachedResource(resource) {
    if (this._attachedResources.delete(resource)) {
      resource.destroy();
    }
  }
  /** Destroy all owned resources. Make sure the resources are no longer needed before calling. */
  destroyAttachedResources() {
    for (const resource of Object.values(this._attachedResources)) {
      resource.destroy();
    }
    this._attachedResources = /* @__PURE__ */ new Set();
  }
  // PROTECTED METHODS
  /** Perform all destroy steps. Can be called by derived resources when overriding destroy() */
  destroyResource() {
    this.destroyAttachedResources();
    this.removeStats();
    this.destroyed = true;
  }
  /** Called by .destroy() to track object destruction. Subclass must call if overriding destroy() */
  removeStats() {
    const stats = this._device.statsManager.getStats("Resource Counts");
    const name2 = this[Symbol.toStringTag];
    stats.get(`${name2}s Active`).decrementCount();
  }
  /** Called by subclass to track memory allocations */
  trackAllocatedMemory(bytes, name2 = this[Symbol.toStringTag]) {
    const stats = this._device.statsManager.getStats("Resource Counts");
    stats.get("GPU Memory").addCount(bytes);
    stats.get(`${name2} Memory`).addCount(bytes);
    this.allocatedBytes = bytes;
  }
  /** Called by subclass to track memory deallocations */
  trackDeallocatedMemory(name2 = this[Symbol.toStringTag]) {
    const stats = this._device.statsManager.getStats("Resource Counts");
    stats.get("GPU Memory").subtractCount(this.allocatedBytes);
    stats.get(`${name2} Memory`).subtractCount(this.allocatedBytes);
    this.allocatedBytes = 0;
  }
  /** Called by resource constructor to track object creation */
  addStats() {
    const stats = this._device.statsManager.getStats("Resource Counts");
    const name2 = this[Symbol.toStringTag];
    stats.get("Resources Created").incrementCount();
    stats.get(`${name2}s Created`).incrementCount();
    stats.get(`${name2}s Active`).incrementCount();
  }
};
/** Default properties for resource */
__publicField(Resource, "defaultProps", {
  id: "undefined",
  handle: void 0,
  userData: void 0
});
function selectivelyMerge(props, defaultProps3) {
  const mergedProps = { ...defaultProps3 };
  for (const key in props) {
    if (props[key] !== void 0) {
      mergedProps[key] = props[key];
    }
  }
  return mergedProps;
}

// ../../../.yarn/berry/cache/@luma.gl-core-npm-9.1.9-f747d3c594-10c0.zip/node_modules/@luma.gl/core/dist/adapter/resources/buffer.js
var _Buffer = class _Buffer extends Resource {
  constructor(device, props) {
    const deducedProps = { ...props };
    if ((props.usage || 0) & _Buffer.INDEX && !props.indexType) {
      if (props.data instanceof Uint32Array) {
        deducedProps.indexType = "uint32";
      } else if (props.data instanceof Uint16Array) {
        deducedProps.indexType = "uint16";
      }
    }
    delete deducedProps.data;
    super(device, deducedProps, _Buffer.defaultProps);
    /** The usage with which this buffer was created */
    __publicField(this, "usage");
    /** For index buffers, whether indices are 16 or 32 bit */
    __publicField(this, "indexType");
    /** "Time" of last update, can be used to check if redraw is needed */
    __publicField(this, "updateTimestamp");
    /** A partial CPU-side copy of the data in this buffer, for debugging purposes */
    __publicField(this, "debugData", new ArrayBuffer(0));
    this.usage = deducedProps.usage || 0;
    this.indexType = deducedProps.indexType;
    this.updateTimestamp = device.incrementTimestamp();
  }
  get [Symbol.toStringTag]() {
    return "Buffer";
  }
  /**
   * Create a copy of this Buffer with new byteLength, with same props but of the specified size.
   * @note Does not copy contents of the cloned Buffer.
   */
  clone(props) {
    return this.device.createBuffer({ ...this.props, ...props });
  }
  /** Read data synchronously. @note WebGL2 only */
  readSyncWebGL(byteOffset, byteLength) {
    throw new Error("not implemented");
  }
  /** This doesn't handle partial non-zero offset updates correctly */
  _setDebugData(data, byteOffset, byteLength) {
    const arrayBuffer2 = ArrayBuffer.isView(data) ? data.buffer : data;
    const debugDataLength = Math.min(data ? data.byteLength : byteLength, _Buffer.DEBUG_DATA_MAX_LENGTH);
    if (arrayBuffer2 === null) {
      this.debugData = new ArrayBuffer(debugDataLength);
    } else if (byteOffset === 0 && byteLength === arrayBuffer2.byteLength) {
      this.debugData = arrayBuffer2.slice(0, debugDataLength);
    } else {
      this.debugData = arrayBuffer2.slice(byteOffset, byteOffset + debugDataLength);
    }
  }
};
__publicField(_Buffer, "defaultProps", {
  ...Resource.defaultProps,
  usage: 0,
  // Buffer.COPY_DST | Buffer.COPY_SRC
  byteLength: 0,
  byteOffset: 0,
  data: null,
  indexType: "uint16",
  mappedAtCreation: false
});
// Usage Flags
__publicField(_Buffer, "MAP_READ", 1);
__publicField(_Buffer, "MAP_WRITE", 2);
__publicField(_Buffer, "COPY_SRC", 4);
__publicField(_Buffer, "COPY_DST", 8);
/** Index buffer */
__publicField(_Buffer, "INDEX", 16);
/** Vertex buffer */
__publicField(_Buffer, "VERTEX", 32);
/** Uniform buffer */
__publicField(_Buffer, "UNIFORM", 64);
/** Storage buffer */
__publicField(_Buffer, "STORAGE", 128);
__publicField(_Buffer, "INDIRECT", 256);
__publicField(_Buffer, "QUERY_RESOLVE", 512);
// PROTECTED METHODS (INTENDED FOR USE BY OTHER FRAMEWORK CODE ONLY)
/** Max amount of debug data saved. Two vec4's */
__publicField(_Buffer, "DEBUG_DATA_MAX_LENGTH", 32);
var Buffer = _Buffer;

// ../../../.yarn/berry/cache/@luma.gl-core-npm-9.1.9-f747d3c594-10c0.zip/node_modules/@luma.gl/core/dist/gpu-type-utils/decode-data-type.js
function decodeVertexType(type) {
  const dataType = TYPE_MAP[type];
  const bytes = getDataTypeBytes(dataType);
  const normalized = type.includes("norm");
  const integer = !normalized && !type.startsWith("float");
  const signed = type.startsWith("s");
  return {
    dataType: TYPE_MAP[type],
    byteLength: bytes,
    integer,
    signed,
    normalized
  };
}
function getDataTypeBytes(type) {
  const bytes = TYPE_SIZES[type];
  return bytes;
}
var TYPE_MAP = {
  uint8: "uint8",
  sint8: "sint8",
  unorm8: "uint8",
  snorm8: "sint8",
  uint16: "uint16",
  sint16: "sint16",
  unorm16: "uint16",
  snorm16: "sint16",
  float16: "float16",
  float32: "float32",
  uint32: "uint32",
  sint32: "sint32"
};
var TYPE_SIZES = {
  uint8: 1,
  sint8: 1,
  uint16: 2,
  sint16: 2,
  float16: 2,
  float32: 4,
  uint32: 4,
  sint32: 4
};

// ../../../.yarn/berry/cache/@luma.gl-core-npm-9.1.9-f747d3c594-10c0.zip/node_modules/@luma.gl/core/dist/gpu-type-utils/texture-format-table.js
var texture_compression_bc = "texture-compression-bc";
var texture_compression_astc = "texture-compression-astc";
var texture_compression_etc2 = "texture-compression-etc2";
var texture_compression_etc1_webgl = "texture-compression-etc1-webgl";
var texture_compression_pvrtc_webgl = "texture-compression-pvrtc-webgl";
var texture_compression_atc_webgl = "texture-compression-atc-webgl";
var float32_renderable = "float32-renderable-webgl";
var float16_renderable = "float16-renderable-webgl";
var rgb9e5ufloat_renderable = "rgb9e5ufloat-renderable-webgl";
var snorm8_renderable = "snorm8-renderable-webgl";
var norm16_renderable = "norm16-renderable-webgl";
var snorm16_renderable = "snorm16-renderable-webgl";
var float32_filterable = "float32-filterable";
var float16_filterable = "float16-filterable-webgl";
function getTextureFormatDefinition(format) {
  const info = TEXTURE_FORMAT_TABLE[format];
  if (!info) {
    throw new Error(`Unsupported texture format ${format}`);
  }
  return info;
}
var TEXTURE_FORMAT_TABLE = {
  // 8-bit formats
  "r8unorm": {},
  "r8snorm": { render: snorm8_renderable },
  "r8uint": {},
  "r8sint": {},
  // 16-bit formats
  "rg8unorm": {},
  "rg8snorm": { render: snorm8_renderable },
  "rg8uint": {},
  "rg8sint": {},
  "r16uint": {},
  "r16sint": {},
  "r16float": { render: float16_renderable, filter: "float16-filterable-webgl" },
  "r16unorm-webgl": { f: norm16_renderable },
  "r16snorm-webgl": { f: snorm16_renderable },
  // Packed 16-bit formats
  "rgba4unorm-webgl": { channels: "rgba", bitsPerChannel: [4, 4, 4, 4], packed: true },
  "rgb565unorm-webgl": { channels: "rgb", bitsPerChannel: [5, 6, 5, 0], packed: true },
  "rgb5a1unorm-webgl": { channels: "rgba", bitsPerChannel: [5, 5, 5, 1], packed: true },
  // 24-bit formats
  "rgb8unorm-webgl": {},
  "rgb8snorm-webgl": {},
  // 32-bit formats  
  "rgba8unorm": {},
  "rgba8unorm-srgb": {},
  "rgba8snorm": { render: snorm8_renderable },
  "rgba8uint": {},
  "rgba8sint": {},
  // 32-bit, reverse colors, webgpu only
  "bgra8unorm": {},
  "bgra8unorm-srgb": {},
  "rg16uint": {},
  "rg16sint": {},
  "rg16float": { render: float16_renderable, filter: float16_filterable },
  "rg16unorm-webgl": { render: norm16_renderable },
  "rg16snorm-webgl": { render: snorm16_renderable },
  "r32uint": {},
  "r32sint": {},
  "r32float": { render: float32_renderable, filter: float32_filterable },
  // Packed 32 bit formats
  "rgb9e5ufloat": { channels: "rgb", packed: true, render: rgb9e5ufloat_renderable },
  // , filter: true},
  "rg11b10ufloat": { channels: "rgb", bitsPerChannel: [11, 11, 10, 0], packed: true, p: 1, render: float32_renderable },
  "rgb10a2unorm": { channels: "rgba", bitsPerChannel: [10, 10, 10, 2], packed: true, p: 1 },
  "rgb10a2uint-webgl": { channels: "rgba", bitsPerChannel: [10, 10, 10, 2], packed: true, p: 1, wgpu: false },
  // 48-bit formats
  "rgb16unorm-webgl": { f: norm16_renderable },
  // rgb not renderable
  "rgb16snorm-webgl": { f: norm16_renderable },
  // rgb not renderable
  // 64-bit formats
  "rg32uint": {},
  "rg32sint": {},
  "rg32float": { render: false, filter: float32_filterable },
  "rgba16uint": {},
  "rgba16sint": {},
  "rgba16float": { render: float16_renderable, filter: float16_filterable },
  "rgba16unorm-webgl": { render: norm16_renderable },
  "rgba16snorm-webgl": { render: snorm16_renderable },
  // 96-bit formats (deprecated!)
  "rgb32float-webgl": { render: float32_renderable, filter: float32_filterable },
  // 128-bit formats
  "rgba32uint": {},
  "rgba32sint": {},
  "rgba32float": { render: float32_renderable, filter: float32_filterable },
  // Depth/stencil
  // Depth and stencil formats
  stencil8: { attachment: "stencil", bitsPerChannel: [8, 0, 0, 0], dataType: "uint8" },
  "depth16unorm": { attachment: "depth", bitsPerChannel: [16, 0, 0, 0], dataType: "uint16" },
  "depth24plus": { attachment: "depth", bitsPerChannel: [24, 0, 0, 0], dataType: "uint32" },
  "depth32float": { attachment: "depth", bitsPerChannel: [32, 0, 0, 0], dataType: "float32" },
  // The depth component of the "depth24plus" and "depth24plus-stencil8" formats may be implemented as either a 24-bit depth value or a "depth32float" value.
  "depth24plus-stencil8": { attachment: "depth-stencil", bitsPerChannel: [24, 8, 0, 0], packed: true },
  // "depth32float-stencil8" feature
  "depth32float-stencil8": { attachment: "depth-stencil", bitsPerChannel: [32, 8, 0, 0], packed: true },
  // BC compressed formats: check device.features.has("texture-compression-bc");
  "bc1-rgb-unorm-webgl": { f: texture_compression_bc },
  "bc1-rgb-unorm-srgb-webgl": { f: texture_compression_bc },
  "bc1-rgba-unorm": { f: texture_compression_bc },
  "bc1-rgba-unorm-srgb": { f: texture_compression_bc },
  "bc2-rgba-unorm": { f: texture_compression_bc },
  "bc2-rgba-unorm-srgb": { f: texture_compression_bc },
  "bc3-rgba-unorm": { f: texture_compression_bc },
  "bc3-rgba-unorm-srgb": { f: texture_compression_bc },
  "bc4-r-unorm": { f: texture_compression_bc },
  "bc4-r-snorm": { f: texture_compression_bc },
  "bc5-rg-unorm": { f: texture_compression_bc },
  "bc5-rg-snorm": { f: texture_compression_bc },
  "bc6h-rgb-ufloat": { f: texture_compression_bc },
  "bc6h-rgb-float": { f: texture_compression_bc },
  "bc7-rgba-unorm": { f: texture_compression_bc },
  "bc7-rgba-unorm-srgb": { f: texture_compression_bc },
  // WEBGL_compressed_texture_etc: device.features.has("texture-compression-etc2")
  // Note: Supposedly guaranteed availability compressed formats in WebGL2, but through CPU decompression
  "etc2-rgb8unorm": { f: texture_compression_etc2 },
  "etc2-rgb8unorm-srgb": { f: texture_compression_etc2 },
  "etc2-rgb8a1unorm": { f: texture_compression_etc2 },
  "etc2-rgb8a1unorm-srgb": { f: texture_compression_etc2 },
  "etc2-rgba8unorm": { f: texture_compression_etc2 },
  "etc2-rgba8unorm-srgb": { f: texture_compression_etc2 },
  "eac-r11unorm": { f: texture_compression_etc2 },
  "eac-r11snorm": { f: texture_compression_etc2 },
  "eac-rg11unorm": { f: texture_compression_etc2 },
  "eac-rg11snorm": { f: texture_compression_etc2 },
  // X_ASTC compressed formats: device.features.has("texture-compression-astc")
  "astc-4x4-unorm": { f: texture_compression_astc },
  "astc-4x4-unorm-srgb": { f: texture_compression_astc },
  "astc-5x4-unorm": { f: texture_compression_astc },
  "astc-5x4-unorm-srgb": { f: texture_compression_astc },
  "astc-5x5-unorm": { f: texture_compression_astc },
  "astc-5x5-unorm-srgb": { f: texture_compression_astc },
  "astc-6x5-unorm": { f: texture_compression_astc },
  "astc-6x5-unorm-srgb": { f: texture_compression_astc },
  "astc-6x6-unorm": { f: texture_compression_astc },
  "astc-6x6-unorm-srgb": { f: texture_compression_astc },
  "astc-8x5-unorm": { f: texture_compression_astc },
  "astc-8x5-unorm-srgb": { f: texture_compression_astc },
  "astc-8x6-unorm": { f: texture_compression_astc },
  "astc-8x6-unorm-srgb": { f: texture_compression_astc },
  "astc-8x8-unorm": { f: texture_compression_astc },
  "astc-8x8-unorm-srgb": { f: texture_compression_astc },
  "astc-10x5-unorm": { f: texture_compression_astc },
  "astc-10x5-unorm-srgb": { f: texture_compression_astc },
  "astc-10x6-unorm": { f: texture_compression_astc },
  "astc-10x6-unorm-srgb": { f: texture_compression_astc },
  "astc-10x8-unorm": { f: texture_compression_astc },
  "astc-10x8-unorm-srgb": { f: texture_compression_astc },
  "astc-10x10-unorm": { f: texture_compression_astc },
  "astc-10x10-unorm-srgb": { f: texture_compression_astc },
  "astc-12x10-unorm": { f: texture_compression_astc },
  "astc-12x10-unorm-srgb": { f: texture_compression_astc },
  "astc-12x12-unorm": { f: texture_compression_astc },
  "astc-12x12-unorm-srgb": { f: texture_compression_astc },
  // WEBGL_compressed_texture_pvrtc
  "pvrtc-rgb4unorm-webgl": { f: texture_compression_pvrtc_webgl },
  "pvrtc-rgba4unorm-webgl": { f: texture_compression_pvrtc_webgl },
  "pvrtc-rbg2unorm-webgl": { f: texture_compression_pvrtc_webgl },
  "pvrtc-rgba2unorm-webgl": { f: texture_compression_pvrtc_webgl },
  // WEBGL_compressed_texture_etc1
  "etc1-rbg-unorm-webgl": { f: texture_compression_etc1_webgl },
  // WEBGL_compressed_texture_atc
  "atc-rgb-unorm-webgl": { f: texture_compression_atc_webgl },
  "atc-rgba-unorm-webgl": { f: texture_compression_atc_webgl },
  "atc-rgbai-unorm-webgl": { f: texture_compression_atc_webgl }
};

// ../../../.yarn/berry/cache/@luma.gl-core-npm-9.1.9-f747d3c594-10c0.zip/node_modules/@luma.gl/core/dist/gpu-type-utils/decode-texture-format.js
var COMPRESSED_TEXTURE_FORMAT_PREFIXES = [
  "bc1",
  "bc2",
  "bc3",
  "bc4",
  "bc5",
  "bc6",
  "bc7",
  "etc1",
  "etc2",
  "eac",
  "atc",
  "astc",
  "pvrtc"
];
var RGB_FORMAT_REGEX = /^(r|rg|rgb|rgba|bgra)([0-9]*)([a-z]*)(-srgb)?(-webgl)?$/;
function isTextureFormatCompressed(format) {
  return COMPRESSED_TEXTURE_FORMAT_PREFIXES.some((prefix) => format.startsWith(prefix));
}
function decodeTextureFormat(format) {
  let formatInfo = decodeTextureFormatUsingTable(format);
  if (isTextureFormatCompressed(format)) {
    formatInfo.channels = "rgb";
    formatInfo.components = 3;
    formatInfo.bytesPerPixel = 1;
    formatInfo.srgb = false;
    formatInfo.compressed = true;
    const blockSize = getCompressedTextureBlockSize(format);
    if (blockSize) {
      formatInfo.blockWidth = blockSize.blockWidth;
      formatInfo.blockHeight = blockSize.blockHeight;
    }
  }
  const matches3 = RGB_FORMAT_REGEX.exec(format);
  if (matches3) {
    const [, channels, length5, type, srgb, suffix] = matches3;
    const dataType = `${type}${length5}`;
    const decodedType = decodeVertexType(dataType);
    const bits = decodedType.byteLength * 8;
    const components = channels.length;
    const bitsPerChannel = [
      bits,
      components >= 2 ? bits : 0,
      components >= 3 ? bits : 0,
      components >= 4 ? bits : 0
    ];
    formatInfo = {
      format,
      attachment: formatInfo.attachment,
      dataType: decodedType.dataType,
      components,
      channels,
      integer: decodedType.integer,
      signed: decodedType.signed,
      normalized: decodedType.normalized,
      bitsPerChannel,
      bytesPerPixel: decodedType.byteLength * channels.length,
      packed: formatInfo.packed,
      srgb: formatInfo.srgb
    };
    if (suffix === "-webgl") {
      formatInfo.webgl = true;
    }
    if (srgb === "-srgb") {
      formatInfo.srgb = true;
    }
  }
  if (format.endsWith("-webgl")) {
    formatInfo.webgl = true;
  }
  if (format.endsWith("-srgb")) {
    formatInfo.srgb = true;
  }
  return formatInfo;
}
function decodeTextureFormatUsingTable(format) {
  var _a3;
  const info = getTextureFormatDefinition(format);
  const bytesPerPixel = info.bytesPerPixel || 1;
  const bitsPerChannel = info.bitsPerChannel || [8, 8, 8, 8];
  delete info.bitsPerChannel;
  delete info.bytesPerPixel;
  delete info.f;
  delete info.render;
  delete info.filter;
  delete info.blend;
  delete info.store;
  const formatInfo = {
    ...info,
    format,
    attachment: info.attachment || "color",
    channels: info.channels || "r",
    components: info.components || ((_a3 = info.channels) == null ? void 0 : _a3.length) || 1,
    bytesPerPixel,
    bitsPerChannel,
    dataType: info.dataType || "uint8",
    srgb: info.srgb ?? false,
    packed: info.packed ?? false,
    webgl: info.webgl ?? false,
    integer: info.integer ?? false,
    signed: info.signed ?? false,
    normalized: info.normalized ?? false,
    compressed: info.compressed ?? false
  };
  return formatInfo;
}
function getCompressedTextureBlockSize(format) {
  const REGEX = /.*-(\d+)x(\d+)-.*/;
  const matches3 = REGEX.exec(format);
  if (matches3) {
    const [, blockWidth, blockHeight] = matches3;
    return { blockWidth: Number(blockWidth), blockHeight: Number(blockHeight) };
  }
  return null;
}

// ../../../.yarn/berry/cache/@luma.gl-core-npm-9.1.9-f747d3c594-10c0.zip/node_modules/@luma.gl/core/dist/gpu-type-utils/texture-format-capabilities.js
function getTextureFormatCapabilities(format) {
  const info = getTextureFormatDefinition(format);
  const formatCapabilities = {
    format,
    create: info.f ?? true,
    render: info.render ?? true,
    filter: info.filter ?? true,
    blend: info.blend ?? true,
    store: info.store ?? true
  };
  const formatInfo = decodeTextureFormat(format);
  const isDepthStencil = format.startsWith("depth") || format.startsWith("stencil");
  const isSigned = formatInfo == null ? void 0 : formatInfo.signed;
  const isInteger = formatInfo == null ? void 0 : formatInfo.integer;
  const isWebGLSpecific = formatInfo == null ? void 0 : formatInfo.webgl;
  formatCapabilities.render && (formatCapabilities.render = !isSigned);
  formatCapabilities.filter && (formatCapabilities.filter = !isDepthStencil && !isSigned && !isInteger && !isWebGLSpecific);
  return formatCapabilities;
}

// ../../../.yarn/berry/cache/@luma.gl-core-npm-9.1.9-f747d3c594-10c0.zip/node_modules/@luma.gl/core/dist/adapter/device.js
var DeviceLimits = class {
};
var DeviceFeatures = class {
  constructor(features = [], disabledFeatures) {
    __publicField(this, "features");
    __publicField(this, "disabledFeatures");
    this.features = new Set(features);
    this.disabledFeatures = disabledFeatures || {};
  }
  *[Symbol.iterator]() {
    yield* this.features;
  }
  has(feature) {
    var _a3;
    return !((_a3 = this.disabledFeatures) == null ? void 0 : _a3[feature]) && this.features.has(feature);
  }
};
var _Device = class _Device {
  constructor(props) {
    /** id of this device, primarily for debugging */
    __publicField(this, "id");
    /** A copy of the device props  */
    __publicField(this, "props");
    /** Available for the application to store data on the device */
    __publicField(this, "userData", {});
    /** stats */
    __publicField(this, "statsManager", lumaStats);
    /** An abstract timestamp used for change tracking */
    __publicField(this, "timestamp", 0);
    /** True if this device has been reused during device creation (app has multiple references) */
    __publicField(this, "_reused", false);
    /** Used by other luma.gl modules to store data on the device */
    __publicField(this, "_lumaData", {});
    this.props = { ..._Device.defaultProps, ...props };
    this.id = this.props.id || uid(this[Symbol.toStringTag].toLowerCase());
  }
  get [Symbol.toStringTag]() {
    return "Device";
  }
  /** Determines what operations are supported on a texture format, checking against supported device features */
  getTextureFormatCapabilities(format) {
    const genericCapabilities = getTextureFormatCapabilities(format);
    const checkFeature = (featureOrBoolean) => (typeof featureOrBoolean === "string" ? this.features.has(featureOrBoolean) : featureOrBoolean) ?? true;
    const supported = checkFeature(genericCapabilities.create);
    const deviceCapabilities = {
      format,
      create: supported,
      render: supported && checkFeature(genericCapabilities.render),
      filter: supported && checkFeature(genericCapabilities.filter),
      blend: supported && checkFeature(genericCapabilities.blend),
      store: supported && checkFeature(genericCapabilities.store)
    };
    return this._getDeviceSpecificTextureFormatCapabilities(deviceCapabilities);
  }
  /** Check if device supports a specific texture format (creation and `nearest` sampling) */
  isTextureFormatSupported(format, capabilities) {
    return this.getTextureFormatCapabilities(format).create;
  }
  /** Check if linear filtering (sampler interpolation) is supported for a specific texture format */
  isTextureFormatFilterable(format) {
    return this.getTextureFormatCapabilities(format).filter;
  }
  /** Check if device supports rendering to a framebuffer color attachment of a specific texture format */
  isTextureFormatRenderable(format) {
    return this.getTextureFormatCapabilities(format).render;
  }
  /** Check if a specific texture format is GPU compressed */
  isTextureFormatCompressed(format) {
    return isTextureFormatCompressed(format);
  }
  /**
   * Trigger device loss.
   * @returns `true` if context loss could actually be triggered.
   * @note primarily intended for testing how application reacts to device loss
   */
  loseDevice() {
    return false;
  }
  /** Report error (normally called for unhandled device errors) */
  reportError(error) {
    this.props.onError(error);
  }
  /** Returns the default / primary canvas context. Throws an error if no canvas context is available (a WebGPU compute device) */
  getDefaultCanvasContext() {
    if (!this.canvasContext) {
      throw new Error("Device has no default CanvasContext. See props.createCanvasContext");
    }
    return this.canvasContext;
  }
  createCommandEncoder(props = {}) {
    throw new Error("not implemented");
  }
  /** A monotonic counter for tracking buffer and texture updates */
  incrementTimestamp() {
    return this.timestamp++;
  }
  // Error Handling
  /** Report unhandled device errors */
  onError(error) {
    this.props.onError(error);
  }
  // DEPRECATED METHODS
  /** @deprecated Use getDefaultCanvasContext() */
  getCanvasContext() {
    return this.getDefaultCanvasContext();
  }
  // WebGL specific HACKS - enables app to remove webgl import
  // Use until we have a better way to handle these
  /** @deprecated - will be removed - should use command encoder */
  readPixelsToArrayWebGL(source4, options) {
    throw new Error("not implemented");
  }
  /** @deprecated - will be removed - should use command encoder */
  readPixelsToBufferWebGL(source4, options) {
    throw new Error("not implemented");
  }
  /** @deprecated - will be removed - should use WebGPU parameters (pipeline) */
  setParametersWebGL(parameters) {
    throw new Error("not implemented");
  }
  /** @deprecated - will be removed - should use WebGPU parameters (pipeline) */
  getParametersWebGL(parameters) {
    throw new Error("not implemented");
  }
  /** @deprecated - will be removed - should use WebGPU parameters (pipeline) */
  withParametersWebGL(parameters, func) {
    throw new Error("not implemented");
  }
  /** @deprecated - will be removed - should use clear arguments in RenderPass */
  clearWebGL(options) {
    throw new Error("not implemented");
  }
  /** @deprecated - will be removed - should use for debugging only */
  resetWebGL() {
    throw new Error("not implemented");
  }
  // IMPLEMENTATION
  /** Helper to get the canvas context props */
  static _getCanvasContextProps(props) {
    return props.createCanvasContext === true ? {} : props.createCanvasContext;
  }
  /** Subclasses use this to support .createBuffer() overloads */
  _normalizeBufferProps(props) {
    if (props instanceof ArrayBuffer || ArrayBuffer.isView(props)) {
      props = { data: props };
    }
    const newProps = { ...props };
    if ((props.usage || 0) & Buffer.INDEX && !props.indexType) {
      if (props.data instanceof Uint32Array) {
        newProps.indexType = "uint32";
      } else if (props.data instanceof Uint16Array) {
        newProps.indexType = "uint16";
      } else {
        log2.warn("indices buffer content must be of integer type")();
      }
    }
    return newProps;
  }
};
__publicField(_Device, "defaultProps", {
  id: null,
  powerPreference: "high-performance",
  failIfMajorPerformanceCaveat: false,
  createCanvasContext: void 0,
  // Callbacks
  onError: (error) => log2.error(error.message)(),
  // Experimental
  _reuseDevices: false,
  _requestMaxLimits: true,
  _factoryDestroyPolicy: "unused",
  // TODO - Change these after confirming things work as expected
  _initializeFeatures: true,
  _disabledFeatures: {
    "compilation-status-async-webgl": true
  },
  _resourceDefaults: {},
  // WebGL specific
  webgl: {},
  debug: log2.get("debug") || void 0,
  debugShaders: log2.get("debug-shaders") || void 0,
  debugFramebuffers: Boolean(log2.get("debug-framebuffers")),
  debugWebGL: Boolean(log2.get("debug-webgl")),
  debugSpectorJS: void 0,
  // Note: log setting is queried by the spector.js code
  debugSpectorJSUrl: void 0,
  // INTERNAL
  _handle: void 0
});
var Device = _Device;

// ../../../.yarn/berry/cache/@luma.gl-core-npm-9.1.9-f747d3c594-10c0.zip/node_modules/@luma.gl/core/dist/adapter/luma.js
var isPage = isBrowser2() && typeof document !== "undefined";
var isPageLoaded = () => isPage && document.readyState === "complete";
var STARTUP_MESSAGE = "set luma.log.level=1 (or higher) to trace rendering";
var ERROR_MESSAGE = "No matching device found. Ensure `@luma.gl/webgl` and/or `@luma.gl/webgpu` modules are imported.";
var _Luma = class _Luma {
  constructor() {
    /** Global stats for all devices */
    __publicField(this, "stats", lumaStats);
    /**
     * Global log
     *
     * Assign luma.log.level in console to control logging: \
     * 0: none, 1: minimal, 2: verbose, 3: attribute/uniforms, 4: gl logs
     * luma.log.break[], set to gl funcs, luma.log.profile[] set to model names`;
     */
    __publicField(this, "log", log2);
    /** Version of luma.gl */
    __publicField(
      this,
      "VERSION",
      // Version detection using build plugin
      // @ts-expect-error no-undef
      true ? "9.1.9" : "running from source"
    );
    __publicField(this, "spector");
    __publicField(this, "preregisteredAdapters", /* @__PURE__ */ new Map());
    if (globalThis.luma) {
      if (globalThis.luma.VERSION !== this.VERSION) {
        log2.error(`Found luma.gl ${globalThis.luma.VERSION} while initialzing ${this.VERSION}`)();
        log2.error(`'yarn why @luma.gl/core' can help identify the source of the conflict`)();
        throw new Error(`luma.gl - multiple versions detected: see console log`);
      }
      log2.error("This version of luma.gl has already been initialized")();
    }
    log2.log(1, `${this.VERSION} - ${STARTUP_MESSAGE}`)();
    globalThis.luma = this;
  }
  registerAdapters(adapters) {
    for (const deviceClass of adapters) {
      this.preregisteredAdapters.set(deviceClass.type, deviceClass);
    }
  }
  /** Get type strings for supported Devices */
  getSupportedAdapters(adapters = []) {
    const adapterMap = this.getAdapterMap(adapters);
    return Array.from(adapterMap).map(([, adapter]) => adapter).filter((adapter) => {
      var _a3;
      return (_a3 = adapter.isSupported) == null ? void 0 : _a3.call(adapter);
    }).map((adapter) => adapter.type);
  }
  /** Get type strings for best available Device */
  getBestAvailableAdapter(adapters = []) {
    var _a3, _b, _c, _d;
    const adapterMap = this.getAdapterMap(adapters);
    if ((_b = (_a3 = adapterMap.get("webgpu")) == null ? void 0 : _a3.isSupported) == null ? void 0 : _b.call(_a3)) {
      return "webgpu";
    }
    if ((_d = (_c = adapterMap.get("webgl")) == null ? void 0 : _c.isSupported) == null ? void 0 : _d.call(_c)) {
      return "webgl";
    }
    return null;
  }
  setDefaultDeviceProps(props) {
    Object.assign(_Luma.defaultProps, props);
  }
  /** Creates a device. Asynchronously. */
  async createDevice(props = {}) {
    var _a3;
    props = { ..._Luma.defaultProps, ...props };
    if (props.waitForPageLoad) {
      await _Luma.pageLoaded;
    }
    const adapterMap = this.getAdapterMap(props.adapters);
    let type = props.type || "";
    if (type === "best-available") {
      type = this.getBestAvailableAdapter(props.adapters) || type;
    }
    const adapters = this.getAdapterMap(props.adapters) || adapterMap;
    const adapter = adapters.get(type);
    const device = await ((_a3 = adapter == null ? void 0 : adapter.create) == null ? void 0 : _a3.call(adapter, props));
    if (device) {
      return device;
    }
    throw new Error(ERROR_MESSAGE);
  }
  /** Attach to an existing GPU API handle (WebGL2RenderingContext or GPUDevice). */
  async attachDevice(props) {
    var _a3;
    const adapters = this.getAdapterMap(props.adapters);
    let type = "";
    if (props.handle instanceof WebGL2RenderingContext) {
      type = "webgl";
    }
    if (props.createCanvasContext) {
      await _Luma.pageLoaded;
    }
    if (props.handle === null) {
      type = "unknown";
    }
    const adapter = adapters.get(type);
    const device = await ((_a3 = adapter == null ? void 0 : adapter.attach) == null ? void 0 : _a3.call(adapter, null));
    if (device) {
      return device;
    }
    throw new Error(ERROR_MESSAGE);
  }
  /**
   * Override `HTMLCanvasContext.getCanvas()` to always create WebGL2 contexts with additional WebGL1 compatibility.
   * Useful when attaching luma to a context from an external library does not support creating WebGL2 contexts.
   */
  enforceWebGL2(enforce = true, adapters = []) {
    var _a3;
    const adapterMap = this.getAdapterMap(adapters);
    const webgl2Adapter2 = adapterMap.get("webgl");
    if (!webgl2Adapter2) {
      log2.warn("enforceWebGL2: webgl adapter not found")();
    }
    (_a3 = webgl2Adapter2 == null ? void 0 : webgl2Adapter2.enforceWebGL2) == null ? void 0 : _a3.call(webgl2Adapter2, enforce);
  }
  /** Convert a list of adapters to a map */
  getAdapterMap(adapters = []) {
    const map3 = new Map(this.preregisteredAdapters);
    for (const adapter of adapters) {
      map3.set(adapter.type, adapter);
    }
    return map3;
  }
  // DEPRECATED
  /** @deprecated Use registerAdapters */
  registerDevices(deviceClasses) {
    log2.warn("luma.registerDevices() is deprecated, use luma.registerAdapters() instead");
    for (const deviceClass of deviceClasses) {
      const adapter = deviceClass.adapter;
      if (adapter) {
        this.preregisteredAdapters.set(adapter.type, adapter);
      }
    }
  }
};
__publicField(_Luma, "defaultProps", {
  ...Device.defaultProps,
  type: "best-available",
  adapters: void 0,
  waitForPageLoad: true
});
/**
 * Page load promise
 * Get a 'lazy' promise that resolves when the DOM is loaded.
 * @note Since there may be limitations on number of `load` event listeners,
 * it is recommended avoid calling this function until actually needed.
 * I.e. don't call it until you know that you will be looking up a string in the DOM.
 */
__publicField(_Luma, "pageLoaded", getPageLoadPromise().then(() => {
  log2.probe(2, "DOM is loaded")();
}));
var Luma = _Luma;
var luma = new Luma();
function getPageLoadPromise() {
  if (isPageLoaded() || typeof window === "undefined") {
    return Promise.resolve();
  }
  return new Promise((resolve2) => {
    window.addEventListener("load", () => resolve2());
  });
}

// ../../../.yarn/berry/cache/@luma.gl-core-npm-9.1.9-f747d3c594-10c0.zip/node_modules/@luma.gl/core/dist/adapter/adapter.js
var Adapter = class {
};

// ../../../.yarn/berry/cache/@luma.gl-core-npm-9.1.9-f747d3c594-10c0.zip/node_modules/@luma.gl/core/dist/adapter/canvas-context.js
var _CanvasContext = class _CanvasContext {
  constructor(props) {
    __publicField(this, "id");
    __publicField(this, "props");
    __publicField(this, "canvas");
    __publicField(this, "htmlCanvas");
    __publicField(this, "offscreenCanvas");
    __publicField(this, "type");
    __publicField(this, "width", 1);
    __publicField(this, "height", 1);
    __publicField(this, "resizeObserver");
    /** State used by luma.gl classes: TODO - move to canvasContext*/
    __publicField(this, "_canvasSizeInfo", { clientWidth: 0, clientHeight: 0, devicePixelRatio: 1 });
    this.props = { ..._CanvasContext.defaultProps, ...props };
    props = this.props;
    if (!isBrowser2()) {
      this.id = "node-canvas-context";
      this.type = "node";
      this.width = this.props.width;
      this.height = this.props.height;
      this.canvas = null;
      return;
    }
    if (!props.canvas) {
      const canvas2 = createCanvas(props);
      const container = getContainer((props == null ? void 0 : props.container) || null);
      container.insertBefore(canvas2, container.firstChild);
      this.canvas = canvas2;
      if (!(props == null ? void 0 : props.visible)) {
        this.canvas.style.visibility = "hidden";
      }
    } else if (typeof props.canvas === "string") {
      this.canvas = getCanvasFromDOM(props.canvas);
    } else {
      this.canvas = props.canvas;
    }
    if (this.canvas instanceof HTMLCanvasElement) {
      this.id = this.canvas.id;
      this.type = "html-canvas";
      this.htmlCanvas = this.canvas;
    } else {
      this.id = "offscreen-canvas";
      this.type = "offscreen-canvas";
      this.offscreenCanvas = this.canvas;
    }
    if (this.canvas instanceof HTMLCanvasElement && props.autoResize) {
      this.resizeObserver = new ResizeObserver((entries) => {
        for (const entry of entries) {
          if (entry.target === this.canvas) {
            this.update();
          }
        }
      });
      this.resizeObserver.observe(this.canvas);
    }
  }
  toString() {
    return `${this[Symbol.toStringTag]}(${this.id})`;
  }
  /**
   * Returns the current DPR, if props.useDevicePixels is true
   * Device refers to physical
   */
  getDevicePixelRatio(useDevicePixels) {
    if (typeof OffscreenCanvas !== "undefined" && this.canvas instanceof OffscreenCanvas) {
      return 1;
    }
    useDevicePixels = useDevicePixels === void 0 ? this.props.useDevicePixels : useDevicePixels;
    if (!useDevicePixels || useDevicePixels <= 0) {
      return 1;
    }
    if (useDevicePixels === true) {
      const dpr = typeof window !== "undefined" && window.devicePixelRatio;
      return dpr || 1;
    }
    return useDevicePixels;
  }
  /**
   * Returns the size of drawing buffer in device pixels.
   * @note This can be different from the 'CSS' size of a canvas, and also from the
   * canvas' internal drawing buffer size (.width, .height).
   * This is the size required to cover the canvas, adjusted for DPR
   */
  getPixelSize() {
    switch (this.type) {
      case "node":
        return [this.width, this.height];
      case "offscreen-canvas":
        return [this.canvas.width, this.canvas.height];
      case "html-canvas":
        const dpr = this.getDevicePixelRatio();
        const canvas2 = this.canvas;
        return canvas2.parentElement ? [canvas2.clientWidth * dpr, canvas2.clientHeight * dpr] : [this.canvas.width, this.canvas.height];
      default:
        throw new Error(this.type);
    }
  }
  getAspect() {
    const [width, height] = this.getPixelSize();
    return width / height;
  }
  /**
   * Returns multiplier need to convert CSS size to Device size
   */
  cssToDeviceRatio() {
    var _a3;
    try {
      const [drawingBufferWidth] = this.getDrawingBufferSize();
      const clientWidth = this._canvasSizeInfo.clientWidth || ((_a3 = this.htmlCanvas) == null ? void 0 : _a3.clientWidth);
      return clientWidth ? drawingBufferWidth / clientWidth : 1;
    } catch {
      return 1;
    }
  }
  /**
   * Maps CSS pixel position to device pixel position
   */
  cssToDevicePixels(cssPixel, yInvert = true) {
    const ratio = this.cssToDeviceRatio();
    const [width, height] = this.getDrawingBufferSize();
    return scalePixels(cssPixel, ratio, width, height, yInvert);
  }
  /**
   * Use devicePixelRatio to set canvas width and height
   * @note this is a raw port of luma.gl v8 code. Might be worth a review
   */
  setDevicePixelRatio(devicePixelRatio, options = {}) {
    if (!this.htmlCanvas) {
      return;
    }
    let clientWidth = "width" in options ? options.width : this.htmlCanvas.clientWidth;
    let clientHeight = "height" in options ? options.height : this.htmlCanvas.clientHeight;
    if (!clientWidth || !clientHeight) {
      log2.log(1, "Canvas clientWidth/clientHeight is 0")();
      devicePixelRatio = 1;
      clientWidth = this.htmlCanvas.width || 1;
      clientHeight = this.htmlCanvas.height || 1;
    }
    const cachedSize = this._canvasSizeInfo;
    if (cachedSize.clientWidth !== clientWidth || cachedSize.clientHeight !== clientHeight || cachedSize.devicePixelRatio !== devicePixelRatio) {
      let clampedPixelRatio = devicePixelRatio;
      const canvasWidth = Math.floor(clientWidth * clampedPixelRatio);
      const canvasHeight = Math.floor(clientHeight * clampedPixelRatio);
      this.htmlCanvas.width = canvasWidth;
      this.htmlCanvas.height = canvasHeight;
      const gl = this.device.gl;
      if (gl) {
        const [drawingBufferWidth, drawingBufferHeight] = this.getDrawingBufferSize();
        if (drawingBufferWidth !== canvasWidth || drawingBufferHeight !== canvasHeight) {
          clampedPixelRatio = Math.min(drawingBufferWidth / clientWidth, drawingBufferHeight / clientHeight);
          this.htmlCanvas.width = Math.floor(clientWidth * clampedPixelRatio);
          this.htmlCanvas.height = Math.floor(clientHeight * clampedPixelRatio);
          log2.warn("Device pixel ratio clamped")();
        }
        this._canvasSizeInfo.clientWidth = clientWidth;
        this._canvasSizeInfo.clientHeight = clientHeight;
        this._canvasSizeInfo.devicePixelRatio = devicePixelRatio;
      }
    }
  }
  // PRIVATE
  /** @todo Major hack done to port the CSS methods above, base canvas context should not depend on WebGL */
  getDrawingBufferSize() {
    const gl = this.device.gl;
    if (!gl) {
      return this.getPixelSize();
    }
    return [gl.drawingBufferWidth, gl.drawingBufferHeight];
  }
  /**
   * Allows subclass constructor to override the canvas id for auto created canvases.
   * This can really help when debugging DOM in apps that create multiple devices
   */
  _setAutoCreatedCanvasId(id) {
    var _a3;
    if (((_a3 = this.htmlCanvas) == null ? void 0 : _a3.id) === "lumagl-auto-created-canvas") {
      this.htmlCanvas.id = id;
    }
  }
};
__publicField(_CanvasContext, "defaultProps", {
  canvas: null,
  width: 800,
  // width are height are only used by headless gl
  height: 600,
  useDevicePixels: true,
  autoResize: true,
  container: null,
  visible: true,
  alphaMode: "opaque",
  colorSpace: "srgb"
});
var CanvasContext = _CanvasContext;
function getContainer(container) {
  if (typeof container === "string") {
    const element = document.getElementById(container);
    if (!element) {
      throw new Error(`${container} is not an HTML element`);
    }
    return element;
  } else if (container) {
    return container;
  }
  return document.body;
}
function getCanvasFromDOM(canvasId) {
  const canvas2 = document.getElementById(canvasId);
  if (!(canvas2 instanceof HTMLCanvasElement)) {
    throw new Error("Object is not a canvas element");
  }
  return canvas2;
}
function createCanvas(props) {
  const { width, height } = props;
  const targetCanvas = document.createElement("canvas");
  targetCanvas.id = uid("lumagl-auto-created-canvas");
  targetCanvas.width = width || 1;
  targetCanvas.height = height || 1;
  targetCanvas.style.width = Number.isFinite(width) ? `${width}px` : "100%";
  targetCanvas.style.height = Number.isFinite(height) ? `${height}px` : "100%";
  return targetCanvas;
}
function scalePixels(pixel, ratio, width, height, yInvert) {
  const point = pixel;
  const x3 = scaleX(point[0], ratio, width);
  let y3 = scaleY(point[1], ratio, height, yInvert);
  let t3 = scaleX(point[0] + 1, ratio, width);
  const xHigh = t3 === width - 1 ? t3 : t3 - 1;
  t3 = scaleY(point[1] + 1, ratio, height, yInvert);
  let yHigh;
  if (yInvert) {
    t3 = t3 === 0 ? t3 : t3 + 1;
    yHigh = y3;
    y3 = t3;
  } else {
    yHigh = t3 === height - 1 ? t3 : t3 - 1;
  }
  return {
    x: x3,
    y: y3,
    // when ratio < 1, current css pixel and next css pixel may point to same device pixel, set width/height to 1 in those cases.
    width: Math.max(xHigh - x3 + 1, 1),
    height: Math.max(yHigh - y3 + 1, 1)
  };
}
function scaleX(x3, ratio, width) {
  const r3 = Math.min(Math.round(x3 * ratio), width - 1);
  return r3;
}
function scaleY(y3, ratio, height, yInvert) {
  return yInvert ? Math.max(0, height - 1 - Math.round(y3 * ratio)) : Math.min(Math.round(y3 * ratio), height - 1);
}

// ../../../.yarn/berry/cache/@luma.gl-core-npm-9.1.9-f747d3c594-10c0.zip/node_modules/@luma.gl/core/dist/adapter/resources/texture.js
var _Texture = class _Texture extends Resource {
  /** Do not use directly. Create with device.createTexture() */
  constructor(device, props) {
    props = _Texture.normalizeProps(device, props);
    super(device, props, _Texture.defaultProps);
    /** dimension of this texture */
    __publicField(this, "dimension");
    /** format of this texture */
    __publicField(this, "format");
    /** width in pixels of this texture */
    __publicField(this, "width");
    /** height in pixels of this texture */
    __publicField(this, "height");
    /** depth of this texture */
    __publicField(this, "depth");
    /** mip levels in this texture */
    __publicField(this, "mipLevels");
    /** "Time" of last update. Monotonically increasing timestamp. TODO move to AsyncTexture? */
    __publicField(this, "updateTimestamp");
    this.dimension = this.props.dimension;
    this.format = this.props.format;
    this.width = this.props.width;
    this.height = this.props.height;
    this.depth = this.props.depth;
    if (this.props.width === void 0 || this.props.height === void 0) {
      const size = _Texture.getTextureDataSize(this.props.data);
      this.width = (size == null ? void 0 : size.width) || 1;
      this.height = (size == null ? void 0 : size.height) || 1;
    }
    if (this.props.mipmaps && this.props.mipLevels === void 0) {
      this.props.mipLevels = "pyramid";
    }
    this.mipLevels = this.props.mipLevels === "pyramid" ? _Texture.getMipLevelCount(this.width, this.height) : this.props.mipLevels || 1;
    this.updateTimestamp = device.incrementTimestamp();
  }
  get [Symbol.toStringTag]() {
    return "Texture";
  }
  toString() {
    return `Texture(${this.id},${this.format},${this.width}x${this.height})`;
  }
  /**
   * Create a new texture with the same parameters and optionally, a different size
   * @note Textures are immutable and cannot be resized after creation, but we can create a similar texture with the same parameters but a new size.
   * @note Does not copy contents of the texture
   */
  clone(size) {
    return this.device.createTexture({ ...this.props, ...size });
  }
  /** Check if data is an external image */
  static isExternalImage(data) {
    return typeof ImageData !== "undefined" && data instanceof ImageData || typeof ImageBitmap !== "undefined" && data instanceof ImageBitmap || typeof HTMLImageElement !== "undefined" && data instanceof HTMLImageElement || typeof HTMLVideoElement !== "undefined" && data instanceof HTMLVideoElement || typeof VideoFrame !== "undefined" && data instanceof VideoFrame || typeof HTMLCanvasElement !== "undefined" && data instanceof HTMLCanvasElement || typeof OffscreenCanvas !== "undefined" && data instanceof OffscreenCanvas;
  }
  /** Determine size (width and height) of provided image data */
  static getExternalImageSize(data) {
    if (typeof ImageData !== "undefined" && data instanceof ImageData || typeof ImageBitmap !== "undefined" && data instanceof ImageBitmap || typeof HTMLCanvasElement !== "undefined" && data instanceof HTMLCanvasElement || typeof OffscreenCanvas !== "undefined" && data instanceof OffscreenCanvas) {
      return { width: data.width, height: data.height };
    }
    if (typeof HTMLImageElement !== "undefined" && data instanceof HTMLImageElement) {
      return { width: data.naturalWidth, height: data.naturalHeight };
    }
    if (typeof HTMLVideoElement !== "undefined" && data instanceof HTMLVideoElement) {
      return { width: data.videoWidth, height: data.videoHeight };
    }
    if (typeof VideoFrame !== "undefined" && data instanceof VideoFrame) {
      return { width: data.displayWidth, height: data.displayHeight };
    }
    throw new Error("Unknown image type");
  }
  /** Check if texture data is a typed array */
  static isTextureLevelData(data) {
    const typedArray = data == null ? void 0 : data.data;
    return ArrayBuffer.isView(typedArray);
  }
  /** Get the size of the texture described by the provided TextureData */
  static getTextureDataSize(data) {
    if (!data) {
      return null;
    }
    if (ArrayBuffer.isView(data)) {
      return null;
    }
    if (Array.isArray(data)) {
      return _Texture.getTextureDataSize(data[0]);
    }
    if (_Texture.isExternalImage(data)) {
      return _Texture.getExternalImageSize(data);
    }
    if (data && typeof data === "object" && data.constructor === Object) {
      const textureDataArray = Object.values(data);
      const untypedData = textureDataArray[0];
      return { width: untypedData.width, height: untypedData.height };
    }
    throw new Error("texture size deduction failed");
  }
  /**
   * Normalize TextureData to an array of TextureLevelData / ExternalImages
   * @param data
   * @param options
   * @returns array of TextureLevelData / ExternalImages
   */
  static normalizeTextureData(data, options) {
    let lodArray;
    if (ArrayBuffer.isView(data)) {
      lodArray = [
        {
          // ts-expect-error does data really need to be Uint8ClampedArray?
          data,
          width: options.width,
          height: options.height
          // depth: options.depth
        }
      ];
    } else if (!Array.isArray(data)) {
      lodArray = [data];
    } else {
      lodArray = data;
    }
    return lodArray;
  }
  /** Calculate the number of mip levels for a texture of width and height */
  static getMipLevelCount(width, height) {
    return Math.floor(Math.log2(Math.max(width, height))) + 1;
  }
  /** Convert luma.gl cubemap face constants to depth index */
  static getCubeFaceDepth(face) {
    switch (face) {
      case "+X":
        return 0;
      case "-X":
        return 1;
      case "+Y":
        return 2;
      case "-Y":
        return 3;
      case "+Z":
        return 4;
      case "-Z":
        return 5;
      default:
        throw new Error(face);
    }
  }
  /** Ensure we have integer coordinates */
  static normalizeProps(device, props) {
    var _a3, _b;
    const newProps = { ...props };
    const overriddenDefaultProps = ((_b = (_a3 = device == null ? void 0 : device.props) == null ? void 0 : _a3._resourceDefaults) == null ? void 0 : _b.texture) || {};
    Object.assign(newProps, overriddenDefaultProps);
    const { width, height } = newProps;
    if (typeof width === "number") {
      newProps.width = Math.max(1, Math.ceil(width));
    }
    if (typeof height === "number") {
      newProps.height = Math.max(1, Math.ceil(height));
    }
    return newProps;
  }
};
__publicField(_Texture, "COPY_SRC", 1);
__publicField(_Texture, "COPY_DST", 2);
__publicField(_Texture, "TEXTURE", 4);
__publicField(_Texture, "STORAGE", 8);
__publicField(_Texture, "RENDER_ATTACHMENT", 16);
__publicField(_Texture, "CubeFaces", ["+X", "-X", "+Y", "-Y", "+Z", "-Z"]);
__publicField(_Texture, "defaultProps", {
  ...Resource.defaultProps,
  data: null,
  dimension: "2d",
  format: "rgba8unorm",
  width: void 0,
  height: void 0,
  depth: 1,
  mipmaps: false,
  compressed: false,
  usage: 0,
  mipLevels: void 0,
  samples: void 0,
  sampler: {},
  view: void 0,
  flipY: void 0
});
/** Default options */
__publicField(_Texture, "defaultCopyExternalImageOptions", {
  image: void 0,
  sourceX: 0,
  sourceY: 0,
  width: void 0,
  height: void 0,
  depth: 1,
  mipLevel: 0,
  x: 0,
  y: 0,
  z: 0,
  aspect: "all",
  colorSpace: "srgb",
  premultipliedAlpha: false,
  flipY: false
});
var Texture = _Texture;

// ../../../.yarn/berry/cache/@luma.gl-core-npm-9.1.9-f747d3c594-10c0.zip/node_modules/@luma.gl/core/dist/adapter/resources/texture-view.js
var _TextureView = class _TextureView extends Resource {
  get [Symbol.toStringTag]() {
    return "TextureView";
  }
  /** Should not be constructed directly. Use `texture.createView(props)` */
  constructor(device, props) {
    super(device, props, _TextureView.defaultProps);
  }
};
__publicField(_TextureView, "defaultProps", {
  ...Resource.defaultProps,
  format: void 0,
  dimension: void 0,
  aspect: "all",
  baseMipLevel: 0,
  mipLevelCount: void 0,
  baseArrayLayer: 0,
  arrayLayerCount: void 0
});
var TextureView = _TextureView;

// ../../../.yarn/berry/cache/@luma.gl-core-npm-9.1.9-f747d3c594-10c0.zip/node_modules/@luma.gl/core/dist/adapter/resources/external-texture.js
var _ExternalTexture = class _ExternalTexture extends Resource {
  get [Symbol.toStringTag]() {
    return "ExternalTexture";
  }
  constructor(device, props) {
    super(device, props, _ExternalTexture.defaultProps);
  }
};
__publicField(_ExternalTexture, "defaultProps", {
  ...Resource.defaultProps,
  source: void 0,
  colorSpace: "srgb"
});
var ExternalTexture = _ExternalTexture;

// ../../../.yarn/berry/cache/@luma.gl-core-npm-9.1.9-f747d3c594-10c0.zip/node_modules/@luma.gl/core/dist/adapter-utils/format-compiler-log.js
function formatCompilerLog(shaderLog, source4, options) {
  let formattedLog = "";
  const lines = source4.split(/\r?\n/);
  const log3 = shaderLog.slice().sort((a3, b2) => a3.lineNum - b2.lineNum);
  switch ((options == null ? void 0 : options.showSourceCode) || "no") {
    case "all":
      let currentMessage = 0;
      for (let lineNum = 1; lineNum <= lines.length; lineNum++) {
        formattedLog += getNumberedLine(lines[lineNum - 1], lineNum, options);
        while (log3.length > currentMessage && log3[currentMessage].lineNum === lineNum) {
          const message2 = log3[currentMessage++];
          formattedLog += formatCompilerMessage(message2, lines, message2.lineNum, {
            ...options,
            inlineSource: false
          });
        }
      }
      return formattedLog;
    case "issues":
    case "no":
      for (const message2 of shaderLog) {
        formattedLog += formatCompilerMessage(message2, lines, message2.lineNum, {
          inlineSource: (options == null ? void 0 : options.showSourceCode) !== "no"
        });
      }
      return formattedLog;
  }
}
function formatCompilerMessage(message2, lines, lineNum, options) {
  if (options == null ? void 0 : options.inlineSource) {
    const numberedLines = getNumberedLines(lines, lineNum);
    const positionIndicator = message2.linePos > 0 ? `${" ".repeat(message2.linePos + 5)}^^^
` : "";
    return `
${numberedLines}${positionIndicator}${message2.type.toUpperCase()}: ${message2.message}

`;
  }
  const color = message2.type === "error" ? "red" : "#8B4000";
  return (options == null ? void 0 : options.html) ? `<div class='luma-compiler-log-error' style="color:${color};"><b> ${message2.type.toUpperCase()}: ${message2.message}</b></div>` : `${message2.type.toUpperCase()}: ${message2.message}`;
}
function getNumberedLines(lines, lineNum, options) {
  let numberedLines = "";
  for (let lineIndex = lineNum - 2; lineIndex <= lineNum; lineIndex++) {
    const sourceLine = lines[lineIndex - 1];
    if (sourceLine !== void 0) {
      numberedLines += getNumberedLine(sourceLine, lineNum, options);
    }
  }
  return numberedLines;
}
function getNumberedLine(line, lineNum, options) {
  const escapedLine = (options == null ? void 0 : options.html) ? escapeHTML(line) : line;
  return `${padLeft(String(lineNum), 4)}: ${escapedLine}${(options == null ? void 0 : options.html) ? "<br/>" : "\n"}`;
}
function padLeft(string, paddedLength) {
  let result = "";
  for (let i4 = string.length; i4 < paddedLength; ++i4) {
    result += " ";
  }
  return result + string;
}
function escapeHTML(unsafe) {
  return unsafe.replaceAll("&", "&amp;").replaceAll("<", "&lt;").replaceAll(">", "&gt;").replaceAll('"', "&quot;").replaceAll("'", "&#039;");
}

// ../../../.yarn/berry/cache/@luma.gl-core-npm-9.1.9-f747d3c594-10c0.zip/node_modules/@luma.gl/core/dist/adapter/resources/shader.js
var _Shader = class _Shader extends Resource {
  /** Create a new Shader instance */
  constructor(device, props) {
    props = { ...props, debugShaders: props.debugShaders || device.props.debugShaders || "errors" };
    super(device, { id: getShaderIdFromProps(props), ...props }, _Shader.defaultProps);
    /** The stage of this shader */
    __publicField(this, "stage");
    /** The source code of this shader */
    __publicField(this, "source");
    /** The compilation status of the shader. 'pending' if compilation is asynchronous, and on production */
    __publicField(this, "compilationStatus", "pending");
    this.stage = this.props.stage;
    this.source = this.props.source;
  }
  get [Symbol.toStringTag]() {
    return "Shader";
  }
  /** Get compiler log synchronously (WebGL only) */
  getCompilationInfoSync() {
    return null;
  }
  /** Get translated shader source in host platform's native language (HLSL, GLSL, and even GLSL ES), if available */
  getTranslatedSource() {
    return null;
  }
  // PORTABLE HELPERS
  /** In browser logging of errors */
  async debugShader() {
    const trigger = this.props.debugShaders;
    switch (trigger) {
      case "never":
        return;
      case "errors":
        if (this.compilationStatus === "success") {
          return;
        }
        break;
      case "warnings":
      case "always":
        break;
    }
    const messages = await this.getCompilationInfo();
    if (trigger === "warnings" && (messages == null ? void 0 : messages.length) === 0) {
      return;
    }
    this._displayShaderLog(messages);
  }
  // PRIVATE
  /**
   * In-browser UI logging of errors
   * TODO - this HTML formatting code should not be in Device, should be pluggable
   */
  _displayShaderLog(messages) {
    var _a3;
    if (typeof document === "undefined" || !(document == null ? void 0 : document.createElement)) {
      return;
    }
    const shaderName = getShaderName2(this.source);
    const shaderTitle = `${this.stage} ${shaderName}`;
    let htmlLog = formatCompilerLog(messages, this.source, { showSourceCode: "all", html: true });
    const translatedSource = this.getTranslatedSource();
    if (translatedSource) {
      htmlLog += `<br /><br /><h1>Translated Source</h1><br /><br /><code style="user-select:text;"><pre>${translatedSource}</pre></code>`;
    }
    const button = document.createElement("Button");
    button.innerHTML = `
<h1>Shader Compilation Error in ${shaderTitle}</h1><br /><br />
<code style="user-select:text;"><pre>
${htmlLog}
</pre></code>`;
    button.style.top = "10px";
    button.style.left = "10px";
    button.style.position = "absolute";
    button.style.zIndex = "9999";
    button.style.width = "100%";
    button.style.textAlign = "left";
    document.body.appendChild(button);
    const errors = document.getElementsByClassName("luma-compiler-log-error");
    (_a3 = errors[0]) == null ? void 0 : _a3.scrollIntoView();
    button.onclick = () => {
      const dataURI = `data:text/plain,${encodeURIComponent(this.source)}`;
      navigator.clipboard.writeText(dataURI);
    };
  }
};
__publicField(_Shader, "defaultProps", {
  ...Resource.defaultProps,
  language: "auto",
  stage: void 0,
  source: "",
  sourceMap: null,
  entryPoint: "main",
  debugShaders: void 0
});
var Shader = _Shader;
function getShaderIdFromProps(props) {
  return getShaderName2(props.source) || props.id || uid(`unnamed ${props.stage}-shader`);
}
function getShaderName2(shader, defaultName = "unnamed") {
  const SHADER_NAME_REGEXP = /#define[\s*]SHADER_NAME[\s*]([A-Za-z0-9_-]+)[\s*]/;
  const match = SHADER_NAME_REGEXP.exec(shader);
  return match ? match[1] : defaultName;
}

// ../../../.yarn/berry/cache/@luma.gl-core-npm-9.1.9-f747d3c594-10c0.zip/node_modules/@luma.gl/core/dist/adapter/resources/sampler.js
var _Sampler = class _Sampler extends Resource {
  get [Symbol.toStringTag]() {
    return "Sampler";
  }
  constructor(device, props) {
    props = _Sampler.normalizeProps(device, props);
    super(device, props, _Sampler.defaultProps);
  }
  static normalizeProps(device, props) {
    var _a3, _b;
    const overriddenDefaultProps = ((_b = (_a3 = device == null ? void 0 : device.props) == null ? void 0 : _a3._resourceDefaults) == null ? void 0 : _b.sampler) || {};
    const newProps = { ...props, ...overriddenDefaultProps };
    return newProps;
  }
};
__publicField(_Sampler, "defaultProps", {
  ...Resource.defaultProps,
  type: "color-sampler",
  addressModeU: "clamp-to-edge",
  addressModeV: "clamp-to-edge",
  addressModeW: "clamp-to-edge",
  magFilter: "nearest",
  minFilter: "nearest",
  mipmapFilter: "none",
  lodMinClamp: 0,
  lodMaxClamp: 32,
  // Per WebGPU spec
  compare: "less-equal",
  maxAnisotropy: 1
});
var Sampler = _Sampler;

// ../../../.yarn/berry/cache/@luma.gl-core-npm-9.1.9-f747d3c594-10c0.zip/node_modules/@luma.gl/core/dist/adapter/resources/framebuffer.js
var _Framebuffer = class _Framebuffer extends Resource {
  constructor(device, props = {}) {
    super(device, props, _Framebuffer.defaultProps);
    /** Width of all attachments in this framebuffer */
    __publicField(this, "width");
    /** Height of all attachments in this framebuffer */
    __publicField(this, "height");
    this.width = this.props.width;
    this.height = this.props.height;
  }
  get [Symbol.toStringTag]() {
    return "Framebuffer";
  }
  /**
   * Create a copy of this framebuffer with new attached textures, with same props but of the specified size.
   * @note Does not copy contents of the attached textures.
   */
  clone(size) {
    const colorAttachments = this.colorAttachments.map((colorAttachment) => colorAttachment.texture.clone(size));
    const depthStencilAttachment = this.depthStencilAttachment && this.depthStencilAttachment.texture.clone(size);
    return this.device.createFramebuffer({ ...this.props, colorAttachments, depthStencilAttachment });
  }
  resize(size) {
    let updateSize = !size;
    if (size) {
      const [width, height] = Array.isArray(size) ? size : [size.width, size.height];
      updateSize = updateSize || height !== this.height || width !== this.width;
      this.width = width;
      this.height = height;
    }
    if (updateSize) {
      log2.log(2, `Resizing framebuffer ${this.id} to ${this.width}x${this.height}`)();
      this.resizeAttachments(this.width, this.height);
    }
  }
  /** Auto creates any textures */
  autoCreateAttachmentTextures() {
    if (this.props.colorAttachments.length === 0 && !this.props.depthStencilAttachment) {
      throw new Error("Framebuffer has noattachments");
    }
    this.colorAttachments = this.props.colorAttachments.map((attachment2, index) => {
      if (typeof attachment2 === "string") {
        const texture = this.createColorTexture(attachment2, index);
        this.attachResource(texture);
        return texture.view;
      }
      if (attachment2 instanceof Texture) {
        return attachment2.view;
      }
      return attachment2;
    });
    const attachment = this.props.depthStencilAttachment;
    if (attachment) {
      if (typeof attachment === "string") {
        const texture = this.createDepthStencilTexture(attachment);
        this.attachResource(texture);
        this.depthStencilAttachment = texture.view;
      } else if (attachment instanceof Texture) {
        this.depthStencilAttachment = attachment.view;
      } else {
        this.depthStencilAttachment = attachment;
      }
    }
  }
  /** Create a color texture */
  createColorTexture(format, index) {
    return this.device.createTexture({
      id: `${this.id}-color-attachment-${index}`,
      usage: Texture.RENDER_ATTACHMENT,
      format,
      width: this.width,
      height: this.height,
      // TODO deprecated? - luma.gl v8 compatibility
      sampler: {
        magFilter: "linear",
        minFilter: "linear"
      }
    });
  }
  /** Create depth stencil texture */
  createDepthStencilTexture(format) {
    return this.device.createTexture({
      id: `${this.id}-depth-stencil-attachment`,
      usage: Texture.RENDER_ATTACHMENT,
      format,
      width: this.width,
      height: this.height,
      mipmaps: false
    });
  }
  /**
   * Default implementation of resize
   * Creates new textures with correct size for all attachments.
   * and destroys existing textures if owned
   */
  resizeAttachments(width, height) {
    for (let i4 = 0; i4 < this.colorAttachments.length; ++i4) {
      if (this.colorAttachments[i4]) {
        const resizedTexture = this.colorAttachments[i4].texture.clone({
          width,
          height
        });
        this.destroyAttachedResource(this.colorAttachments[i4]);
        this.colorAttachments[i4] = resizedTexture.view;
        this.attachResource(resizedTexture.view);
      }
    }
    if (this.depthStencilAttachment) {
      const resizedTexture = this.depthStencilAttachment.texture.clone({
        width,
        height
      });
      this.destroyAttachedResource(this.depthStencilAttachment);
      this.depthStencilAttachment = resizedTexture.view;
      this.attachResource(resizedTexture);
    }
    this.updateAttachments();
  }
};
__publicField(_Framebuffer, "defaultProps", {
  ...Resource.defaultProps,
  width: 1,
  height: 1,
  colorAttachments: [],
  // ['rgba8unorm'],
  depthStencilAttachment: null
  // 'depth24plus-stencil8'
});
var Framebuffer = _Framebuffer;

// ../../../.yarn/berry/cache/@luma.gl-core-npm-9.1.9-f747d3c594-10c0.zip/node_modules/@luma.gl/core/dist/adapter/resources/render-pipeline.js
var _RenderPipeline = class _RenderPipeline extends Resource {
  constructor(device, props) {
    super(device, props, _RenderPipeline.defaultProps);
    /** The merged layout */
    __publicField(this, "shaderLayout");
    /** Buffer map describing buffer interleaving etc */
    __publicField(this, "bufferLayout");
    /** The linking status of the pipeline. 'pending' if linking is asynchronous, and on production */
    __publicField(this, "linkStatus", "pending");
    /** The hash of the pipeline */
    __publicField(this, "hash", "");
    this.shaderLayout = this.props.shaderLayout;
    this.bufferLayout = this.props.bufferLayout || [];
  }
  get [Symbol.toStringTag]() {
    return "RenderPipeline";
  }
  // DEPRECATED METHODS
  /**
   * Uniforms
   * @deprecated Use uniforms buffers
   * @note textures, samplers and uniform buffers should be set via `setBindings()`, these are not considered uniforms.
   * @note In WebGL uniforms have a performance penalty, they are reset before each call to enable pipeline sharing.
   */
  setUniformsWebGL(uniforms) {
    throw new Error("Use uniform blocks");
  }
};
__publicField(_RenderPipeline, "defaultProps", {
  ...Resource.defaultProps,
  vs: null,
  vertexEntryPoint: "vertexMain",
  vsConstants: {},
  fs: null,
  fragmentEntryPoint: "fragmentMain",
  fsConstants: {},
  shaderLayout: null,
  bufferLayout: [],
  topology: "triangle-list",
  parameters: {},
  // isInstanced: false,
  // instanceCount: 0,
  // vertexCount: 0,
  bindings: {},
  uniforms: {}
});
var RenderPipeline = _RenderPipeline;

// ../../../.yarn/berry/cache/@luma.gl-core-npm-9.1.9-f747d3c594-10c0.zip/node_modules/@luma.gl/core/dist/adapter/resources/render-pass.js
var _RenderPass = class _RenderPass extends Resource {
  get [Symbol.toStringTag]() {
    return "RenderPass";
  }
  constructor(device, props) {
    props = _RenderPass.normalizeProps(device, props);
    super(device, props, _RenderPass.defaultProps);
  }
  static normalizeProps(device, props) {
    var _a3;
    const overriddenDefaultProps = (_a3 = device.props._resourceDefaults) == null ? void 0 : _a3.renderPass;
    const newProps = { ...overriddenDefaultProps, ...props };
    return newProps;
  }
};
/** TODO - should be [0, 0, 0, 0], update once deck.gl tests run clean */
__publicField(_RenderPass, "defaultClearColor", [0, 0, 0, 1]);
/** Depth 1.0 represents the far plance */
__publicField(_RenderPass, "defaultClearDepth", 1);
/** Clears all stencil bits */
__publicField(_RenderPass, "defaultClearStencil", 0);
/** Default properties for RenderPass */
__publicField(_RenderPass, "defaultProps", {
  ...Resource.defaultProps,
  framebuffer: null,
  parameters: void 0,
  clearColor: _RenderPass.defaultClearColor,
  clearColors: void 0,
  clearDepth: _RenderPass.defaultClearDepth,
  clearStencil: _RenderPass.defaultClearStencil,
  depthReadOnly: false,
  stencilReadOnly: false,
  discard: false,
  occlusionQuerySet: void 0,
  timestampQuerySet: void 0,
  beginTimestampIndex: void 0,
  endTimestampIndex: void 0
});
var RenderPass = _RenderPass;

// ../../../.yarn/berry/cache/@luma.gl-core-npm-9.1.9-f747d3c594-10c0.zip/node_modules/@luma.gl/core/dist/adapter/resources/compute-pipeline.js
var _ComputePipeline = class _ComputePipeline extends Resource {
  constructor(device, props) {
    super(device, props, _ComputePipeline.defaultProps);
    __publicField(this, "hash", "");
    /** The merged shader layout */
    __publicField(this, "shaderLayout");
    this.shaderLayout = props.shaderLayout;
  }
  get [Symbol.toStringTag]() {
    return "ComputePipeline";
  }
};
__publicField(_ComputePipeline, "defaultProps", {
  ...Resource.defaultProps,
  shader: void 0,
  entryPoint: void 0,
  constants: {},
  shaderLayout: void 0
});
var ComputePipeline = _ComputePipeline;

// ../../../.yarn/berry/cache/@luma.gl-core-npm-9.1.9-f747d3c594-10c0.zip/node_modules/@luma.gl/core/dist/adapter/resources/compute-pass.js
var _ComputePass = class _ComputePass extends Resource {
  get [Symbol.toStringTag]() {
    return "ComputePass";
  }
  constructor(device, props) {
    super(device, props, _ComputePass.defaultProps);
  }
};
__publicField(_ComputePass, "defaultProps", {
  ...Resource.defaultProps,
  timestampQuerySet: void 0,
  beginTimestampIndex: void 0,
  endTimestampIndex: void 0
});
var ComputePass = _ComputePass;

// ../../../.yarn/berry/cache/@luma.gl-core-npm-9.1.9-f747d3c594-10c0.zip/node_modules/@luma.gl/core/dist/adapter/resources/command-encoder.js
var _CommandEncoder = class _CommandEncoder extends Resource {
  get [Symbol.toStringTag]() {
    return "CommandEncoder";
  }
  constructor(device, props) {
    super(device, props, _CommandEncoder.defaultProps);
  }
};
__publicField(_CommandEncoder, "defaultProps", {
  ...Resource.defaultProps,
  measureExecutionTime: void 0
});
var CommandEncoder = _CommandEncoder;

// ../../../.yarn/berry/cache/@luma.gl-core-npm-9.1.9-f747d3c594-10c0.zip/node_modules/@luma.gl/core/dist/adapter/resources/command-buffer.js
var _CommandBuffer = class _CommandBuffer extends Resource {
  get [Symbol.toStringTag]() {
    return "CommandBuffer";
  }
  constructor(device, props) {
    super(device, props, _CommandBuffer.defaultProps);
  }
};
__publicField(_CommandBuffer, "defaultProps", {
  ...Resource.defaultProps
});
var CommandBuffer = _CommandBuffer;

// ../../../.yarn/berry/cache/@luma.gl-core-npm-9.1.9-f747d3c594-10c0.zip/node_modules/@luma.gl/core/dist/gpu-type-utils/decode-attribute-type.js
function decodeShaderAttributeType(attributeType) {
  const [dataType, components] = TYPE_INFO[attributeType];
  const integer = dataType === "i32" || dataType === "u32";
  const signed = dataType !== "u32";
  const byteLength = TYPE_SIZES2[dataType] * components;
  const defaultVertexFormat = getCompatibleVertexFormat(dataType, components);
  return {
    dataType,
    components,
    defaultVertexFormat,
    byteLength,
    integer,
    signed
  };
}
function getCompatibleVertexFormat(dataType, components) {
  let vertexType;
  switch (dataType) {
    case "f32":
      vertexType = "float32";
      break;
    case "i32":
      vertexType = "sint32";
      break;
    case "u32":
      vertexType = "uint32";
      break;
    case "f16":
      return components <= 2 ? "float16x2" : "float16x4";
  }
  if (components === 1) {
    return vertexType;
  }
  return `${vertexType}x${components}`;
}
var TYPE_INFO = {
  f32: ["f32", 1],
  "vec2<f32>": ["f32", 2],
  "vec3<f32>": ["f32", 3],
  "vec4<f32>": ["f32", 4],
  f16: ["f16", 1],
  "vec2<f16>": ["f16", 2],
  "vec3<f16>": ["f16", 3],
  "vec4<f16>": ["f16", 4],
  i32: ["i32", 1],
  "vec2<i32>": ["i32", 2],
  "vec3<i32>": ["i32", 3],
  "vec4<i32>": ["i32", 4],
  u32: ["u32", 1],
  "vec2<u32>": ["u32", 2],
  "vec3<u32>": ["u32", 3],
  "vec4<u32>": ["u32", 4]
};
var TYPE_SIZES2 = {
  f32: 4,
  f16: 2,
  i32: 4,
  u32: 4
  // 'bool-webgl': 4,
};

// ../../../.yarn/berry/cache/@luma.gl-core-npm-9.1.9-f747d3c594-10c0.zip/node_modules/@luma.gl/core/dist/gpu-type-utils/decode-vertex-format.js
function decodeVertexFormat(format) {
  let webglOnly;
  if (format.endsWith("-webgl")) {
    format.replace("-webgl", "");
    webglOnly = true;
  }
  const [type_, count2] = format.split("x");
  const type = type_;
  const components = count2 ? parseInt(count2) : 1;
  const decodedType = decodeVertexType(type);
  const result = {
    type,
    components,
    byteLength: decodedType.byteLength * components,
    integer: decodedType.integer,
    signed: decodedType.signed,
    normalized: decodedType.normalized
  };
  if (webglOnly) {
    result.webglOnly = true;
  }
  return result;
}

// ../../../.yarn/berry/cache/@luma.gl-core-npm-9.1.9-f747d3c594-10c0.zip/node_modules/@luma.gl/core/dist/adapter-utils/get-attribute-from-layouts.js
function getAttributeInfosFromLayouts(shaderLayout, bufferLayout) {
  const attributeInfos = {};
  for (const attribute of shaderLayout.attributes) {
    const attributeInfo = getAttributeInfoFromLayouts(shaderLayout, bufferLayout, attribute.name);
    if (attributeInfo) {
      attributeInfos[attribute.name] = attributeInfo;
    }
  }
  return attributeInfos;
}
function getAttributeInfosByLocation(shaderLayout, bufferLayout, maxVertexAttributes = 16) {
  const attributeInfos = getAttributeInfosFromLayouts(shaderLayout, bufferLayout);
  const locationInfos = new Array(maxVertexAttributes).fill(null);
  for (const attributeInfo of Object.values(attributeInfos)) {
    locationInfos[attributeInfo.location] = attributeInfo;
  }
  return locationInfos;
}
function getAttributeInfoFromLayouts(shaderLayout, bufferLayout, name2) {
  const shaderDeclaration = getAttributeFromShaderLayout(shaderLayout, name2);
  const bufferMapping = getAttributeFromBufferLayout(bufferLayout, name2);
  if (!shaderDeclaration) {
    return null;
  }
  const attributeTypeInfo = decodeShaderAttributeType(shaderDeclaration.type);
  const vertexFormat = (bufferMapping == null ? void 0 : bufferMapping.vertexFormat) || attributeTypeInfo.defaultVertexFormat;
  const vertexFormatInfo = decodeVertexFormat(vertexFormat);
  return {
    attributeName: (bufferMapping == null ? void 0 : bufferMapping.attributeName) || shaderDeclaration.name,
    bufferName: (bufferMapping == null ? void 0 : bufferMapping.bufferName) || shaderDeclaration.name,
    location: shaderDeclaration.location,
    shaderType: shaderDeclaration.type,
    shaderDataType: attributeTypeInfo.dataType,
    shaderComponents: attributeTypeInfo.components,
    vertexFormat,
    bufferDataType: vertexFormatInfo.type,
    bufferComponents: vertexFormatInfo.components,
    // normalized is a property of the buffer's vertex format
    normalized: vertexFormatInfo.normalized,
    // integer is a property of the shader declaration
    integer: attributeTypeInfo.integer,
    stepMode: (bufferMapping == null ? void 0 : bufferMapping.stepMode) || shaderDeclaration.stepMode || "vertex",
    byteOffset: (bufferMapping == null ? void 0 : bufferMapping.byteOffset) || 0,
    byteStride: (bufferMapping == null ? void 0 : bufferMapping.byteStride) || 0
  };
}
function getAttributeFromShaderLayout(shaderLayout, name2) {
  const attribute = shaderLayout.attributes.find((attr) => attr.name === name2);
  if (!attribute) {
    log2.warn(`shader layout attribute "${name2}" not present in shader`);
  }
  return attribute || null;
}
function getAttributeFromBufferLayout(bufferLayouts, name2) {
  checkBufferLayouts(bufferLayouts);
  let bufferLayoutInfo = getAttributeFromShortHand(bufferLayouts, name2);
  if (bufferLayoutInfo) {
    return bufferLayoutInfo;
  }
  bufferLayoutInfo = getAttributeFromAttributesList(bufferLayouts, name2);
  if (bufferLayoutInfo) {
    return bufferLayoutInfo;
  }
  log2.warn(`layout for attribute "${name2}" not present in buffer layout`);
  return null;
}
function checkBufferLayouts(bufferLayouts) {
  for (const bufferLayout of bufferLayouts) {
    if (bufferLayout.attributes && bufferLayout.format || !bufferLayout.attributes && !bufferLayout.format) {
      log2.warn(`BufferLayout ${name} must have either 'attributes' or 'format' field`);
    }
  }
}
function getAttributeFromShortHand(bufferLayouts, name2) {
  for (const bufferLayout of bufferLayouts) {
    if (bufferLayout.format && bufferLayout.name === name2) {
      return {
        attributeName: bufferLayout.name,
        bufferName: name2,
        stepMode: bufferLayout.stepMode,
        vertexFormat: bufferLayout.format,
        // If offset is needed, use `attributes` field.
        byteOffset: 0,
        byteStride: bufferLayout.byteStride || 0
      };
    }
  }
  return null;
}
function getAttributeFromAttributesList(bufferLayouts, name2) {
  var _a3;
  for (const bufferLayout of bufferLayouts) {
    let byteStride = bufferLayout.byteStride;
    if (typeof bufferLayout.byteStride !== "number") {
      for (const attributeMapping2 of bufferLayout.attributes || []) {
        const info = decodeVertexFormat(attributeMapping2.format);
        byteStride += info.byteLength;
      }
    }
    const attributeMapping = (_a3 = bufferLayout.attributes) == null ? void 0 : _a3.find((mapping) => mapping.attribute === name2);
    if (attributeMapping) {
      return {
        attributeName: attributeMapping.attribute,
        bufferName: bufferLayout.name,
        stepMode: bufferLayout.stepMode,
        vertexFormat: attributeMapping.format,
        byteOffset: attributeMapping.byteOffset,
        // @ts-ignore
        byteStride
      };
    }
  }
  return null;
}

// ../../../.yarn/berry/cache/@luma.gl-core-npm-9.1.9-f747d3c594-10c0.zip/node_modules/@luma.gl/core/dist/adapter/resources/vertex-array.js
var _VertexArray = class _VertexArray extends Resource {
  constructor(device, props) {
    super(device, props, _VertexArray.defaultProps);
    /** Max number of vertex attributes */
    __publicField(this, "maxVertexAttributes");
    /** Attribute infos indexed by location - TODO only needed by webgl module? */
    __publicField(this, "attributeInfos");
    /** Index buffer */
    __publicField(this, "indexBuffer", null);
    /** Attributes indexed by buffer slot */
    __publicField(this, "attributes");
    this.maxVertexAttributes = device.limits.maxVertexAttributes;
    this.attributes = new Array(this.maxVertexAttributes).fill(null);
    const { shaderLayout, bufferLayout } = props.renderPipeline || {};
    if (!shaderLayout || !bufferLayout) {
      throw new Error("VertexArray");
    }
    this.attributeInfos = getAttributeInfosByLocation(shaderLayout, bufferLayout, this.maxVertexAttributes);
  }
  get [Symbol.toStringTag]() {
    return "VertexArray";
  }
  // DEPRECATED METHODS
  /** @deprecated Set constant attributes (WebGL only) */
  setConstantWebGL(location, value) {
    this.device.reportError(new Error("constant attributes not supported"));
  }
};
__publicField(_VertexArray, "defaultProps", {
  ...Resource.defaultProps,
  renderPipeline: null
});
var VertexArray = _VertexArray;

// ../../../.yarn/berry/cache/@luma.gl-core-npm-9.1.9-f747d3c594-10c0.zip/node_modules/@luma.gl/core/dist/adapter/resources/transform-feedback.js
var _TransformFeedback = class _TransformFeedback extends Resource {
  get [Symbol.toStringTag]() {
    return "TransformFeedback";
  }
  constructor(device, props) {
    super(device, props, _TransformFeedback.defaultProps);
  }
};
__publicField(_TransformFeedback, "defaultProps", {
  ...Resource.defaultProps,
  layout: void 0,
  buffers: {}
});
var TransformFeedback = _TransformFeedback;

// ../../../.yarn/berry/cache/@luma.gl-core-npm-9.1.9-f747d3c594-10c0.zip/node_modules/@luma.gl/core/dist/adapter/resources/query-set.js
var _QuerySet = class _QuerySet extends Resource {
  get [Symbol.toStringTag]() {
    return "QuerySet";
  }
  constructor(device, props) {
    super(device, props, _QuerySet.defaultProps);
  }
};
__publicField(_QuerySet, "defaultProps", {
  ...Resource.defaultProps,
  type: void 0,
  count: void 0
});
var QuerySet = _QuerySet;

// ../../../.yarn/berry/cache/@luma.gl-core-npm-9.1.9-f747d3c594-10c0.zip/node_modules/@luma.gl/core/dist/adapter/resources/pipeline-layout.js
var _PipelineLayout = class _PipelineLayout extends Resource {
  get [Symbol.toStringTag]() {
    return "PipelineLayout";
  }
  constructor(device, props) {
    super(device, props, _PipelineLayout.defaultProps);
  }
};
__publicField(_PipelineLayout, "defaultProps", {
  ...Resource.defaultProps,
  shaderLayout: {
    attributes: [],
    bindings: []
  }
});
var PipelineLayout = _PipelineLayout;

// ../../../.yarn/berry/cache/@luma.gl-core-npm-9.1.9-f747d3c594-10c0.zip/node_modules/@luma.gl/core/dist/gpu-type-utils/decode-shader-types.js
var UNIFORM_FORMATS = {
  f32: { type: "f32", components: 1 },
  i32: { type: "i32", components: 1 },
  u32: { type: "u32", components: 1 },
  // 'bool-webgl': {type: 'bool-webgl', components: 1},
  "vec2<f32>": { type: "f32", components: 2 },
  "vec3<f32>": { type: "f32", components: 3 },
  "vec4<f32>": { type: "f32", components: 4 },
  "vec2<i32>": { type: "i32", components: 2 },
  "vec3<i32>": { type: "i32", components: 3 },
  "vec4<i32>": { type: "i32", components: 4 },
  "vec2<u32>": { type: "u32", components: 2 },
  "vec3<u32>": { type: "u32", components: 3 },
  "vec4<u32>": { type: "u32", components: 4 },
  "mat2x2<f32>": { type: "f32", components: 4 },
  "mat2x3<f32>": { type: "f32", components: 6 },
  "mat2x4<f32>": { type: "f32", components: 8 },
  "mat3x2<f32>": { type: "f32", components: 6 },
  "mat3x3<f32>": { type: "f32", components: 9 },
  "mat3x4<f32>": { type: "f32", components: 12 },
  "mat4x2<f32>": { type: "f32", components: 8 },
  "mat4x3<f32>": { type: "f32", components: 12 },
  "mat4x4<f32>": { type: "f32", components: 16 }
};
function decodeShaderUniformType(format) {
  const decoded = UNIFORM_FORMATS[format];
  return decoded;
}
function alignTo(size, count2) {
  switch (count2) {
    case 1:
      return size;
    // Pad upwards to even multiple of 2
    case 2:
      return size + size % 2;
    // Pad upwards to even multiple of 2
    default:
      return size + (4 - size % 4) % 4;
  }
}

// ../../../.yarn/berry/cache/@luma.gl-core-npm-9.1.9-f747d3c594-10c0.zip/node_modules/@luma.gl/core/dist/utils/array-utils-flat.js
var arrayBuffer;
function getScratchArrayBuffer(byteLength) {
  if (!arrayBuffer || arrayBuffer.byteLength < byteLength) {
    arrayBuffer = new ArrayBuffer(byteLength);
  }
  return arrayBuffer;
}
function getScratchArray(Type2, length5) {
  const scratchArrayBuffer = getScratchArrayBuffer(Type2.BYTES_PER_ELEMENT * length5);
  return new Type2(scratchArrayBuffer, 0, length5);
}

// ../../../.yarn/berry/cache/@luma.gl-core-npm-9.1.9-f747d3c594-10c0.zip/node_modules/@luma.gl/core/dist/utils/is-array.js
function isTypedArray(value) {
  return ArrayBuffer.isView(value) && !(value instanceof DataView);
}
function isNumberArray(value) {
  if (Array.isArray(value)) {
    return value.length === 0 || typeof value[0] === "number";
  }
  return isTypedArray(value);
}

// ../../../.yarn/berry/cache/@luma.gl-core-npm-9.1.9-f747d3c594-10c0.zip/node_modules/@luma.gl/core/dist/portable/uniform-buffer-layout.js
var minBufferSize = 1024;
var UniformBufferLayout = class {
  /** Create a new UniformBufferLayout given a map of attributes. */
  constructor(uniformTypes2) {
    __publicField(this, "layout", {});
    /** number of bytes needed for buffer allocation */
    __publicField(this, "byteLength");
    let size = 0;
    for (const [key, uniformType] of Object.entries(uniformTypes2)) {
      const typeAndComponents = decodeShaderUniformType(uniformType);
      const { type, components: count2 } = typeAndComponents;
      size = alignTo(size, count2);
      const offset = size;
      size += count2;
      this.layout[key] = { type, size: count2, offset };
    }
    size += (4 - size % 4) % 4;
    const actualByteLength = size * 4;
    this.byteLength = Math.max(actualByteLength, minBufferSize);
  }
  /** Get the data for the complete buffer */
  getData(uniformValues) {
    const bufferSize = Math.max(this.byteLength, minBufferSize);
    const arrayBuffer2 = getScratchArrayBuffer(bufferSize);
    const typedArrays = {
      i32: new Int32Array(arrayBuffer2),
      u32: new Uint32Array(arrayBuffer2),
      f32: new Float32Array(arrayBuffer2),
      // TODO not implemented
      f16: new Uint16Array(arrayBuffer2)
    };
    for (const [name2, value] of Object.entries(uniformValues)) {
      const uniformLayout = this.layout[name2];
      if (!uniformLayout) {
        log2.warn(`Supplied uniform value ${name2} not present in uniform block layout`)();
        continue;
      }
      const { type, size, offset } = uniformLayout;
      const typedArray = typedArrays[type];
      if (size === 1) {
        if (typeof value !== "number" && typeof value !== "boolean") {
          log2.warn(`Supplied value for single component uniform ${name2} is not a number: ${value}`)();
          continue;
        }
        typedArray[offset] = Number(value);
      } else {
        if (!isNumberArray(value)) {
          log2.warn(`Supplied value for multi component / array uniform ${name2} is not a numeric array: ${value}`)();
          continue;
        }
        typedArray.set(value, offset);
      }
    }
    return new Uint8Array(arrayBuffer2);
  }
  /** Does this layout have a field with specified name */
  has(name2) {
    return Boolean(this.layout[name2]);
  }
  /** Get offset and size for a field with specified name */
  get(name2) {
    const layout = this.layout[name2];
    return layout;
  }
};

// ../../../.yarn/berry/cache/@luma.gl-core-npm-9.1.9-f747d3c594-10c0.zip/node_modules/@luma.gl/core/dist/utils/array-equal.js
function arrayEqual(a3, b2, limit = 16) {
  if (a3 !== b2) {
    return false;
  }
  const arrayA = a3;
  const arrayB = b2;
  if (!isNumberArray(arrayA)) {
    return false;
  }
  if (isNumberArray(arrayB) && arrayA.length === arrayB.length) {
    for (let i4 = 0; i4 < arrayA.length; ++i4) {
      if (arrayB[i4] !== arrayA[i4]) {
        return false;
      }
    }
  }
  return true;
}
function arrayCopy(a3) {
  if (isNumberArray(a3)) {
    return a3.slice();
  }
  return a3;
}

// ../../../.yarn/berry/cache/@luma.gl-core-npm-9.1.9-f747d3c594-10c0.zip/node_modules/@luma.gl/core/dist/portable/uniform-block.js
var UniformBlock = class {
  constructor(props) {
    __publicField(this, "name");
    __publicField(this, "uniforms", {});
    __publicField(this, "modifiedUniforms", {});
    __publicField(this, "modified", true);
    __publicField(this, "bindingLayout", {});
    __publicField(this, "needsRedraw", "initialized");
    var _a3;
    this.name = (props == null ? void 0 : props.name) || "unnamed";
    if ((props == null ? void 0 : props.name) && (props == null ? void 0 : props.shaderLayout)) {
      const binding = (_a3 = props == null ? void 0 : props.shaderLayout.bindings) == null ? void 0 : _a3.find((binding_) => binding_.type === "uniform" && binding_.name === (props == null ? void 0 : props.name));
      if (!binding) {
        throw new Error(props == null ? void 0 : props.name);
      }
      const uniformBlock5 = binding;
      for (const uniform of uniformBlock5.uniforms || []) {
        this.bindingLayout[uniform.name] = uniform;
      }
    }
  }
  /** Set a map of uniforms */
  setUniforms(uniforms) {
    for (const [key, value] of Object.entries(uniforms)) {
      this._setUniform(key, value);
      if (!this.needsRedraw) {
        this.setNeedsRedraw(`${this.name}.${key}=${value}`);
      }
    }
  }
  setNeedsRedraw(reason) {
    this.needsRedraw = this.needsRedraw || reason;
  }
  /** Returns all uniforms */
  getAllUniforms() {
    this.modifiedUniforms = {};
    this.needsRedraw = false;
    return this.uniforms || {};
  }
  /** Set a single uniform */
  _setUniform(key, value) {
    if (arrayEqual(this.uniforms[key], value)) {
      return;
    }
    this.uniforms[key] = arrayCopy(value);
    this.modifiedUniforms[key] = true;
    this.modified = true;
  }
};

// ../../../.yarn/berry/cache/@luma.gl-core-npm-9.1.9-f747d3c594-10c0.zip/node_modules/@luma.gl/core/dist/portable/uniform-store.js
var UniformStore = class {
  /**
   * Create a new UniformStore instance
   * @param blocks
   */
  constructor(blocks) {
    /** Stores the uniform values for each uniform block */
    __publicField(this, "uniformBlocks", /* @__PURE__ */ new Map());
    /** Can generate data for a uniform buffer for each block from data */
    __publicField(this, "uniformBufferLayouts", /* @__PURE__ */ new Map());
    /** Actual buffer for the blocks */
    __publicField(this, "uniformBuffers", /* @__PURE__ */ new Map());
    for (const [bufferName, block] of Object.entries(blocks)) {
      const uniformBufferName = bufferName;
      const uniformBufferLayout = new UniformBufferLayout(block.uniformTypes || {});
      this.uniformBufferLayouts.set(uniformBufferName, uniformBufferLayout);
      const uniformBlock5 = new UniformBlock({ name: bufferName });
      uniformBlock5.setUniforms(block.defaultUniforms || {});
      this.uniformBlocks.set(uniformBufferName, uniformBlock5);
    }
  }
  /** Destroy any managed uniform buffers */
  destroy() {
    for (const uniformBuffer of this.uniformBuffers.values()) {
      uniformBuffer.destroy();
    }
  }
  /**
   * Set uniforms
   * Makes all properties partial
   */
  setUniforms(uniforms) {
    var _a3;
    for (const [blockName, uniformValues] of Object.entries(uniforms)) {
      (_a3 = this.uniformBlocks.get(blockName)) == null ? void 0 : _a3.setUniforms(uniformValues);
    }
    this.updateUniformBuffers();
  }
  /** Get the required minimum length of the uniform buffer */
  getUniformBufferByteLength(uniformBufferName) {
    var _a3;
    return ((_a3 = this.uniformBufferLayouts.get(uniformBufferName)) == null ? void 0 : _a3.byteLength) || 0;
  }
  /** Get formatted binary memory that can be uploaded to a buffer */
  getUniformBufferData(uniformBufferName) {
    var _a3, _b;
    const uniformValues = ((_a3 = this.uniformBlocks.get(uniformBufferName)) == null ? void 0 : _a3.getAllUniforms()) || {};
    return (_b = this.uniformBufferLayouts.get(uniformBufferName)) == null ? void 0 : _b.getData(uniformValues);
  }
  /**
   * Creates an unmanaged uniform buffer (umnanaged means that application is responsible for destroying it)
   * The new buffer is initialized with current / supplied values
   */
  createUniformBuffer(device, uniformBufferName, uniforms) {
    if (uniforms) {
      this.setUniforms(uniforms);
    }
    const byteLength = this.getUniformBufferByteLength(uniformBufferName);
    const uniformBuffer = device.createBuffer({
      usage: Buffer.UNIFORM | Buffer.COPY_DST,
      byteLength
    });
    const uniformBufferData = this.getUniformBufferData(uniformBufferName);
    uniformBuffer.write(uniformBufferData);
    return uniformBuffer;
  }
  /** Get the managed uniform buffer. "managed" resources are destroyed when the uniformStore is destroyed. */
  getManagedUniformBuffer(device, uniformBufferName) {
    if (!this.uniformBuffers.get(uniformBufferName)) {
      const byteLength = this.getUniformBufferByteLength(uniformBufferName);
      const uniformBuffer = device.createBuffer({
        usage: Buffer.UNIFORM | Buffer.COPY_DST,
        byteLength
      });
      this.uniformBuffers.set(uniformBufferName, uniformBuffer);
    }
    return this.uniformBuffers.get(uniformBufferName);
  }
  /** Updates all uniform buffers where values have changed */
  updateUniformBuffers() {
    let reason = false;
    for (const uniformBufferName of this.uniformBlocks.keys()) {
      const bufferReason = this.updateUniformBuffer(uniformBufferName);
      reason || (reason = bufferReason);
    }
    if (reason) {
      log2.log(3, `UniformStore.updateUniformBuffers(): ${reason}`)();
    }
    return reason;
  }
  /** Update one uniform buffer. Only updates if values have changed */
  updateUniformBuffer(uniformBufferName) {
    var _a3;
    const uniformBlock5 = this.uniformBlocks.get(uniformBufferName);
    let uniformBuffer = this.uniformBuffers.get(uniformBufferName);
    let reason = false;
    if (uniformBuffer && (uniformBlock5 == null ? void 0 : uniformBlock5.needsRedraw)) {
      reason || (reason = uniformBlock5.needsRedraw);
      const uniformBufferData = this.getUniformBufferData(uniformBufferName);
      uniformBuffer = this.uniformBuffers.get(uniformBufferName);
      uniformBuffer == null ? void 0 : uniformBuffer.write(uniformBufferData);
      const uniformValues = (_a3 = this.uniformBlocks.get(uniformBufferName)) == null ? void 0 : _a3.getAllUniforms();
      log2.log(4, `Writing to uniform buffer ${String(uniformBufferName)}`, uniformBufferData, uniformValues)();
    }
    return reason;
  }
};

// ../../../.yarn/berry/cache/@luma.gl-core-npm-9.1.9-f747d3c594-10c0.zip/node_modules/@luma.gl/core/dist/gpu-type-utils/vertex-format-from-attribute.js
function getDataTypeFromTypedArray2(arrayOrType) {
  const type = ArrayBuffer.isView(arrayOrType) ? arrayOrType.constructor : arrayOrType;
  switch (type) {
    case Float32Array:
      return "float32";
    case Uint16Array:
      return "uint16";
    case Uint32Array:
      return "uint32";
    case Uint8Array:
    case Uint8ClampedArray:
      return "uint8";
    case Int8Array:
      return "sint8";
    case Int16Array:
      return "sint16";
    case Int32Array:
      return "sint32";
    default:
      throw new Error(type.constructor.name);
  }
}
function getTypedArrayFromDataType(dataType) {
  switch (dataType) {
    case "float32":
      return Float32Array;
    case "uint32":
      return Uint32Array;
    case "sint32":
      return Int32Array;
    case "uint16":
    case "unorm16":
      return Uint16Array;
    case "sint16":
    case "snorm16":
      return Int16Array;
    case "uint8":
    case "unorm8":
      return Uint8Array;
    case "sint8":
    case "snorm8":
      return Int8Array;
    default:
      throw new Error(dataType);
  }
}
function getVertexFormatFromAttribute(typedArray, size, normalized) {
  if (!size || size > 4) {
    throw new Error(`size ${size}`);
  }
  const components = size;
  let dataType = getDataTypeFromTypedArray2(typedArray);
  if (dataType === "uint8" && normalized && components === 1) {
    return "unorm8-webgl";
  }
  if (dataType === "uint8" && normalized && components === 3) {
    return "unorm8x3-webgl";
  }
  if (dataType === "uint8" || dataType === "sint8") {
    if (components === 1 || components === 3) {
      throw new Error(`size: ${size}`);
    }
    if (normalized) {
      dataType = dataType.replace("int", "norm");
    }
    return `${dataType}x${components}`;
  }
  if (dataType === "uint16" || dataType === "sint16") {
    if (components === 1 || components === 3) {
      throw new Error(`size: ${size}`);
    }
    if (normalized) {
      dataType = dataType.replace("int", "norm");
    }
    return `${dataType}x${components}`;
  }
  if (components === 1) {
    return dataType;
  }
  return `${dataType}x${components}`;
}

// ../../../.yarn/berry/cache/@luma.gl-core-npm-9.1.9-f747d3c594-10c0.zip/node_modules/@luma.gl/core/dist/adapter-utils/buffer-layout-helper.js
var BufferLayoutHelper = class {
  constructor(bufferLayouts) {
    __publicField(this, "bufferLayouts");
    this.bufferLayouts = bufferLayouts;
  }
  getBufferLayout(name2) {
    return this.bufferLayouts.find((layout) => layout.name === name2) || null;
  }
  /** Get attribute names from a BufferLayout */
  getAttributeNamesForBuffer(bufferLayout) {
    var _a3;
    return bufferLayout.attributes ? (_a3 = bufferLayout.attributes) == null ? void 0 : _a3.map((layout) => layout.attribute) : [bufferLayout.name];
  }
  mergeBufferLayouts(bufferLayouts1, bufferLayouts2) {
    const mergedLayouts = [...bufferLayouts1];
    for (const attribute of bufferLayouts2) {
      const index = mergedLayouts.findIndex((attribute2) => attribute2.name === attribute.name);
      if (index < 0) {
        mergedLayouts.push(attribute);
      } else {
        mergedLayouts[index] = attribute;
      }
    }
    return mergedLayouts;
  }
  getBufferIndex(bufferName) {
    const bufferIndex = this.bufferLayouts.findIndex((layout) => layout.name === bufferName);
    if (bufferIndex === -1) {
      log2.warn(`BufferLayout: Missing buffer for "${bufferName}".`)();
    }
    return bufferIndex;
  }
};

// ../../../.yarn/berry/cache/@luma.gl-core-npm-9.1.9-f747d3c594-10c0.zip/node_modules/@luma.gl/core/dist/adapter-utils/buffer-layout-order.js
function sortedBufferLayoutByShaderSourceLocations(shaderLayout, bufferLayout) {
  const shaderLayoutMap = Object.fromEntries(shaderLayout.attributes.map((attr) => [attr.name, attr.location]));
  const sortedLayout = bufferLayout.slice();
  sortedLayout.sort((a3, b2) => {
    const attributeNamesA = a3.attributes ? a3.attributes.map((attr) => attr.attribute) : [a3.name];
    const attributeNamesB = b2.attributes ? b2.attributes.map((attr) => attr.attribute) : [b2.name];
    const minLocationA = Math.min(...attributeNamesA.map((name2) => shaderLayoutMap[name2]));
    const minLocationB = Math.min(...attributeNamesB.map((name2) => shaderLayoutMap[name2]));
    return minLocationA - minLocationB;
  });
  return sortedLayout;
}

// ../../../.yarn/berry/cache/wgsl_reflect-npm-1.2.3-58aee34150-10c0.zip/node_modules/wgsl_reflect/wgsl_reflect.module.js
var e = class {
  constructor(e4, t3) {
    this.name = e4, this.attributes = t3, this.size = 0;
  }
  get isArray() {
    return false;
  }
  get isStruct() {
    return false;
  }
  get isTemplate() {
    return false;
  }
  get isPointer() {
    return false;
  }
  getTypeName() {
    return this.name;
  }
};
var t = class {
  constructor(e4, t3, n3) {
    this.name = e4, this.type = t3, this.attributes = n3, this.offset = 0, this.size = 0;
  }
  get isArray() {
    return this.type.isArray;
  }
  get isStruct() {
    return this.type.isStruct;
  }
  get isTemplate() {
    return this.type.isTemplate;
  }
  get align() {
    return this.type.isStruct ? this.type.align : 0;
  }
  get members() {
    return this.type.isStruct ? this.type.members : null;
  }
  get format() {
    return this.type.isArray || this.type.isTemplate ? this.type.format : null;
  }
  get count() {
    return this.type.isArray ? this.type.count : 0;
  }
  get stride() {
    return this.type.isArray ? this.type.stride : this.size;
  }
};
var n = class extends e {
  constructor(e4, t3) {
    super(e4, t3), this.members = [], this.align = 0, this.startLine = -1, this.endLine = -1, this.inUse = false;
  }
  get isStruct() {
    return true;
  }
};
var s = class extends e {
  constructor(e4, t3) {
    super(e4, t3), this.count = 0, this.stride = 0;
  }
  get isArray() {
    return true;
  }
  getTypeName() {
    return `array<${this.format.getTypeName()}, ${this.count}>`;
  }
};
var r = class extends e {
  constructor(e4, t3, n3) {
    super(e4, n3), this.format = t3;
  }
  get isPointer() {
    return true;
  }
  getTypeName() {
    return `&${this.format.getTypeName()}`;
  }
};
var a = class extends e {
  constructor(e4, t3, n3, s3) {
    super(e4, n3), this.format = t3, this.access = s3;
  }
  get isTemplate() {
    return true;
  }
  getTypeName() {
    let e4 = this.name;
    if (null !== this.format) {
      if ("vec2" === e4 || "vec3" === e4 || "vec4" === e4 || "mat2x2" === e4 || "mat2x3" === e4 || "mat2x4" === e4 || "mat3x2" === e4 || "mat3x3" === e4 || "mat3x4" === e4 || "mat4x2" === e4 || "mat4x3" === e4 || "mat4x4" === e4) {
        if ("f32" === this.format.name) return e4 += "f", e4;
        if ("i32" === this.format.name) return e4 += "i", e4;
        if ("u32" === this.format.name) return e4 += "u", e4;
        if ("bool" === this.format.name) return e4 += "b", e4;
        if ("f16" === this.format.name) return e4 += "h", e4;
      }
      e4 += `<${this.format.name}>`;
    } else if ("vec2" === e4 || "vec3" === e4 || "vec4" === e4) return e4;
    return e4;
  }
};
var i;
((e4) => {
  e4[e4.Uniform = 0] = "Uniform", e4[e4.Storage = 1] = "Storage", e4[e4.Texture = 2] = "Texture", e4[e4.Sampler = 3] = "Sampler", e4[e4.StorageTexture = 4] = "StorageTexture";
})(i || (i = {}));
var o = class {
  constructor(e4, t3, n3, s3, r3, a3, i4) {
    this.name = e4, this.type = t3, this.group = n3, this.binding = s3, this.attributes = r3, this.resourceType = a3, this.access = i4;
  }
  get isArray() {
    return this.type.isArray;
  }
  get isStruct() {
    return this.type.isStruct;
  }
  get isTemplate() {
    return this.type.isTemplate;
  }
  get size() {
    return this.type.size;
  }
  get align() {
    return this.type.isStruct ? this.type.align : 0;
  }
  get members() {
    return this.type.isStruct ? this.type.members : null;
  }
  get format() {
    return this.type.isArray || this.type.isTemplate ? this.type.format : null;
  }
  get count() {
    return this.type.isArray ? this.type.count : 0;
  }
  get stride() {
    return this.type.isArray ? this.type.stride : this.size;
  }
};
var c = class {
  constructor(e4, t3) {
    this.name = e4, this.type = t3;
  }
};
var l = class {
  constructor(e4, t3, n3, s3) {
    this.name = e4, this.type = t3, this.locationType = n3, this.location = s3, this.interpolation = null;
  }
};
var u = class {
  constructor(e4, t3, n3, s3) {
    this.name = e4, this.type = t3, this.locationType = n3, this.location = s3;
  }
};
var h = class {
  constructor(e4, t3, n3, s3) {
    this.name = e4, this.type = t3, this.attributes = n3, this.id = s3;
  }
};
var f = class {
  constructor(e4, t3, n3) {
    this.name = e4, this.type = t3, this.attributes = n3;
  }
};
var p = class {
  constructor(e4, t3 = null, n3) {
    this.stage = null, this.inputs = [], this.outputs = [], this.arguments = [], this.returnType = null, this.resources = [], this.overrides = [], this.startLine = -1, this.endLine = -1, this.inUse = false, this.calls = /* @__PURE__ */ new Set(), this.name = e4, this.stage = t3, this.attributes = n3;
  }
};
var d = class {
  constructor() {
    this.vertex = [], this.fragment = [], this.compute = [];
  }
};
function m(e4) {
  var t3 = (32768 & e4) >> 15, n3 = (31744 & e4) >> 10, s3 = 1023 & e4;
  return 0 == n3 ? (t3 ? -1 : 1) * Math.pow(2, -14) * (s3 / Math.pow(2, 10)) : 31 == n3 ? s3 ? NaN : 1 / 0 * (t3 ? -1 : 1) : (t3 ? -1 : 1) * Math.pow(2, n3 - 15) * (1 + s3 / Math.pow(2, 10));
}
var g = new Float32Array(1);
var _ = new Int32Array(g.buffer);
var x = new Uint16Array(1);
function y(e4) {
  g[0] = e4;
  const t3 = _[0], n3 = t3 >> 31 & 1;
  let s3 = t3 >> 23 & 255, r3 = 8388607 & t3;
  if (255 === s3) return x[0] = n3 << 15 | 31744 | (0 !== r3 ? 512 : 0), x[0];
  if (0 === s3) {
    if (0 === r3) return x[0] = n3 << 15, x[0];
    r3 |= 8388608;
    let e5 = 113;
    for (; !(8388608 & r3); ) r3 <<= 1, e5--;
    return s3 = 127 - e5, r3 &= 8388607, s3 > 0 ? (r3 = (r3 >> 126 - s3) + (r3 >> 127 - s3 & 1), x[0] = n3 << 15 | s3 << 10 | r3 >> 13, x[0]) : (x[0] = n3 << 15, x[0]);
  }
  return s3 = s3 - 127 + 15, s3 >= 31 ? (x[0] = n3 << 15 | 31744, x[0]) : s3 <= 0 ? s3 < -10 ? (x[0] = n3 << 15, x[0]) : (r3 = (8388608 | r3) >> 1 - s3, x[0] = n3 << 15 | r3 >> 13, x[0]) : (r3 >>= 13, x[0] = n3 << 15 | s3 << 10 | r3, x[0]);
}
var b = new Uint32Array(1);
var v = new Float32Array(b.buffer, 0, 1);
function w(e4) {
  const t3 = 112 + (e4 >> 6 & 31) << 23 | (63 & e4) << 17;
  return b[0] = t3, v[0];
}
function k(e4, t3, n3, s3, r3, a3, i4, o3, c3) {
  const l3 = s3 * (i4 >>= r3) * (a3 >>= r3) + n3 * i4 + t3 * o3;
  switch (c3) {
    case "r8unorm":
      return [I(e4, l3, "8unorm", 1)[0]];
    case "r8snorm":
      return [I(e4, l3, "8snorm", 1)[0]];
    case "r8uint":
      return [I(e4, l3, "8uint", 1)[0]];
    case "r8sint":
      return [I(e4, l3, "8sint", 1)[0]];
    case "rg8unorm": {
      const t4 = I(e4, l3, "8unorm", 2);
      return [t4[0], t4[1]];
    }
    case "rg8snorm": {
      const t4 = I(e4, l3, "8snorm", 2);
      return [t4[0], t4[1]];
    }
    case "rg8uint": {
      const t4 = I(e4, l3, "8uint", 2);
      return [t4[0], t4[1]];
    }
    case "rg8sint": {
      const t4 = I(e4, l3, "8sint", 2);
      return [t4[0], t4[1]];
    }
    case "rgba8unorm-srgb":
    case "rgba8unorm": {
      const t4 = I(e4, l3, "8unorm", 4);
      return [t4[0], t4[1], t4[2], t4[3]];
    }
    case "rgba8snorm": {
      const t4 = I(e4, l3, "8snorm", 4);
      return [t4[0], t4[1], t4[2], t4[3]];
    }
    case "rgba8uint": {
      const t4 = I(e4, l3, "8uint", 4);
      return [t4[0], t4[1], t4[2], t4[3]];
    }
    case "rgba8sint": {
      const t4 = I(e4, l3, "8sint", 4);
      return [t4[0], t4[1], t4[2], t4[3]];
    }
    case "bgra8unorm-srgb":
    case "bgra8unorm": {
      const t4 = I(e4, l3, "8unorm", 4);
      return [t4[2], t4[1], t4[0], t4[3]];
    }
    case "r16uint":
      return [I(e4, l3, "16uint", 1)[0]];
    case "r16sint":
      return [I(e4, l3, "16sint", 1)[0]];
    case "r16float":
      return [I(e4, l3, "16float", 1)[0]];
    case "rg16uint": {
      const t4 = I(e4, l3, "16uint", 2);
      return [t4[0], t4[1]];
    }
    case "rg16sint": {
      const t4 = I(e4, l3, "16sint", 2);
      return [t4[0], t4[1]];
    }
    case "rg16float": {
      const t4 = I(e4, l3, "16float", 2);
      return [t4[0], t4[1]];
    }
    case "rgba16uint": {
      const t4 = I(e4, l3, "16uint", 4);
      return [t4[0], t4[1], t4[2], t4[3]];
    }
    case "rgba16sint": {
      const t4 = I(e4, l3, "16sint", 4);
      return [t4[0], t4[1], t4[2], t4[3]];
    }
    case "rgba16float": {
      const t4 = I(e4, l3, "16float", 4);
      return [t4[0], t4[1], t4[2], t4[3]];
    }
    case "r32uint":
      return [I(e4, l3, "32uint", 1)[0]];
    case "r32sint":
      return [I(e4, l3, "32sint", 1)[0]];
    case "depth16unorm":
    case "depth24plus":
    case "depth24plus-stencil8":
    case "depth32float":
    case "depth32float-stencil8":
    case "r32float":
      return [I(e4, l3, "32float", 1)[0]];
    case "rg32uint": {
      const t4 = I(e4, l3, "32uint", 2);
      return [t4[0], t4[1]];
    }
    case "rg32sint": {
      const t4 = I(e4, l3, "32sint", 2);
      return [t4[0], t4[1]];
    }
    case "rg32float": {
      const t4 = I(e4, l3, "32float", 2);
      return [t4[0], t4[1]];
    }
    case "rgba32uint": {
      const t4 = I(e4, l3, "32uint", 4);
      return [t4[0], t4[1], t4[2], t4[3]];
    }
    case "rgba32sint": {
      const t4 = I(e4, l3, "32sint", 4);
      return [t4[0], t4[1], t4[2], t4[3]];
    }
    case "rgba32float": {
      const t4 = I(e4, l3, "32float", 4);
      return [t4[0], t4[1], t4[2], t4[3]];
    }
    case "rg11b10ufloat": {
      const t4 = new Uint32Array(e4.buffer, l3, 1)[0], n4 = (4192256 & t4) >> 11, s4 = (4290772992 & t4) >> 22;
      return [w(2047 & t4), w(n4), (function(e5) {
        const t5 = 112 + (e5 >> 5 & 31) << 23 | (31 & e5) << 18;
        return b[0] = t5, v[0];
      })(s4), 1];
    }
  }
  return null;
}
function I(e4, t3, n3, s3) {
  const r3 = [0, 0, 0, 0];
  for (let a3 = 0; a3 < s3; ++a3) switch (n3) {
    case "8unorm":
      r3[a3] = e4[t3] / 255, t3++;
      break;
    case "8snorm":
      r3[a3] = e4[t3] / 255 * 2 - 1, t3++;
      break;
    case "8uint":
      r3[a3] = e4[t3], t3++;
      break;
    case "8sint":
      r3[a3] = e4[t3] - 127, t3++;
      break;
    case "16uint":
      r3[a3] = e4[t3] | e4[t3 + 1] << 8, t3 += 2;
      break;
    case "16sint":
      r3[a3] = (e4[t3] | e4[t3 + 1] << 8) - 32768, t3 += 2;
      break;
    case "16float":
      r3[a3] = m(e4[t3] | e4[t3 + 1] << 8), t3 += 2;
      break;
    case "32uint":
    case "32sint":
      r3[a3] = e4[t3] | e4[t3 + 1] << 8 | e4[t3 + 2] << 16 | e4[t3 + 3] << 24, t3 += 4;
      break;
    case "32float":
      r3[a3] = new Float32Array(e4.buffer, t3, 1)[0], t3 += 4;
  }
  return r3;
}
function T(e4, t3, n3, s3, r3) {
  for (let a3 = 0; a3 < s3; ++a3) switch (n3) {
    case "8unorm":
      e4[t3] = 255 * r3[a3], t3++;
      break;
    case "8snorm":
      e4[t3] = 0.5 * (r3[a3] + 1) * 255, t3++;
      break;
    case "8uint":
      e4[t3] = r3[a3], t3++;
      break;
    case "8sint":
      e4[t3] = r3[a3] + 127, t3++;
      break;
    case "16uint":
      new Uint16Array(e4.buffer, t3, 1)[0] = r3[a3], t3 += 2;
      break;
    case "16sint":
      new Int16Array(e4.buffer, t3, 1)[0] = r3[a3], t3 += 2;
      break;
    case "16float": {
      const n4 = y(r3[a3]);
      new Uint16Array(e4.buffer, t3, 1)[0] = n4, t3 += 2;
      break;
    }
    case "32uint":
      new Uint32Array(e4.buffer, t3, 1)[0] = r3[a3], t3 += 4;
      break;
    case "32sint":
      new Int32Array(e4.buffer, t3, 1)[0] = r3[a3], t3 += 4;
      break;
    case "32float":
      new Float32Array(e4.buffer, t3, 1)[0] = r3[a3], t3 += 4;
  }
  return r3;
}
var S = { r8unorm: { bytesPerBlock: 1, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 1 }, r8snorm: { bytesPerBlock: 1, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 1 }, r8uint: { bytesPerBlock: 1, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 1 }, r8sint: { bytesPerBlock: 1, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 1 }, rg8unorm: { bytesPerBlock: 2, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 2 }, rg8snorm: { bytesPerBlock: 2, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 2 }, rg8uint: { bytesPerBlock: 2, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 2 }, rg8sint: { bytesPerBlock: 2, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 2 }, rgba8unorm: { bytesPerBlock: 4, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 4 }, "rgba8unorm-srgb": { bytesPerBlock: 4, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 4 }, rgba8snorm: { bytesPerBlock: 4, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 4 }, rgba8uint: { bytesPerBlock: 4, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 4 }, rgba8sint: { bytesPerBlock: 4, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 4 }, bgra8unorm: { bytesPerBlock: 4, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 4 }, "bgra8unorm-srgb": { bytesPerBlock: 4, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 4 }, r16uint: { bytesPerBlock: 2, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 1 }, r16sint: { bytesPerBlock: 2, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 1 }, r16float: { bytesPerBlock: 2, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 1 }, rg16uint: { bytesPerBlock: 4, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 2 }, rg16sint: { bytesPerBlock: 4, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 2 }, rg16float: { bytesPerBlock: 4, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 2 }, rgba16uint: { bytesPerBlock: 8, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 4 }, rgba16sint: { bytesPerBlock: 8, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 4 }, rgba16float: { bytesPerBlock: 8, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 4 }, r32uint: { bytesPerBlock: 4, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 1 }, r32sint: { bytesPerBlock: 4, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 1 }, r32float: { bytesPerBlock: 4, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 1 }, rg32uint: { bytesPerBlock: 8, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 2 }, rg32sint: { bytesPerBlock: 8, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 2 }, rg32float: { bytesPerBlock: 8, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 2 }, rgba32uint: { bytesPerBlock: 16, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 4 }, rgba32sint: { bytesPerBlock: 16, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 4 }, rgba32float: { bytesPerBlock: 16, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 4 }, rgb10a2uint: { bytesPerBlock: 4, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 4 }, rgb10a2unorm: { bytesPerBlock: 4, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 4 }, rg11b10ufloat: { bytesPerBlock: 4, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 4 }, stencil8: { bytesPerBlock: 1, blockWidth: 1, blockHeight: 1, isCompressed: false, isDepthStencil: true, hasDepth: false, hasStencil: true, channels: 1 }, depth16unorm: { bytesPerBlock: 2, blockWidth: 1, blockHeight: 1, isCompressed: false, isDepthStencil: true, hasDepth: true, hasStencil: false, channels: 1 }, depth24plus: { bytesPerBlock: 4, blockWidth: 1, blockHeight: 1, isCompressed: false, isDepthStencil: true, hasDepth: true, hasStencil: false, depthOnlyFormat: "depth32float", channels: 1 }, "depth24plus-stencil8": { bytesPerBlock: 8, blockWidth: 1, blockHeight: 1, isCompressed: false, isDepthStencil: true, hasDepth: true, hasStencil: true, depthOnlyFormat: "depth32float", channels: 1 }, depth32float: { bytesPerBlock: 4, blockWidth: 1, blockHeight: 1, isCompressed: false, isDepthStencil: true, hasDepth: true, hasStencil: false, channels: 1 }, "depth32float-stencil8": { bytesPerBlock: 8, blockWidth: 1, blockHeight: 1, isCompressed: false, isDepthStencil: true, hasDepth: true, hasStencil: true, stencilOnlyFormat: "depth32float", channels: 1 }, rgb9e5ufloat: { bytesPerBlock: 4, blockWidth: 1, blockHeight: 1, isCompressed: false, channels: 4 }, "bc1-rgba-unorm": { bytesPerBlock: 8, blockWidth: 4, blockHeight: 4, isCompressed: true, channels: 4 }, "bc1-rgba-unorm-srgb": { bytesPerBlock: 8, blockWidth: 4, blockHeight: 4, isCompressed: true, channels: 4 }, "bc2-rgba-unorm": { bytesPerBlock: 16, blockWidth: 4, blockHeight: 4, isCompressed: true, channels: 4 }, "bc2-rgba-unorm-srgb": { bytesPerBlock: 16, blockWidth: 4, blockHeight: 4, isCompressed: true, channels: 4 }, "bc3-rgba-unorm": { bytesPerBlock: 16, blockWidth: 4, blockHeight: 4, isCompressed: true, channels: 4 }, "bc3-rgba-unorm-srgb": { bytesPerBlock: 16, blockWidth: 4, blockHeight: 4, isCompressed: true, channels: 4 }, "bc4-r-unorm": { bytesPerBlock: 8, blockWidth: 4, blockHeight: 4, isCompressed: true, channels: 1 }, "bc4-r-snorm": { bytesPerBlock: 8, blockWidth: 4, blockHeight: 4, isCompressed: true, channels: 1 }, "bc5-rg-unorm": { bytesPerBlock: 16, blockWidth: 4, blockHeight: 4, isCompressed: true, channels: 2 }, "bc5-rg-snorm": { bytesPerBlock: 16, blockWidth: 4, blockHeight: 4, isCompressed: true, channels: 2 }, "bc6h-rgb-ufloat": { bytesPerBlock: 16, blockWidth: 4, blockHeight: 4, isCompressed: true, channels: 4 }, "bc6h-rgb-float": { bytesPerBlock: 16, blockWidth: 4, blockHeight: 4, isCompressed: true, channels: 4 }, "bc7-rgba-unorm": { bytesPerBlock: 16, blockWidth: 4, blockHeight: 4, isCompressed: true, channels: 4 }, "bc7-rgba-unorm-srgb": { bytesPerBlock: 16, blockWidth: 4, blockHeight: 4, isCompressed: true, channels: 4 }, "etc2-rgb8unorm": { bytesPerBlock: 8, blockWidth: 4, blockHeight: 4, isCompressed: true, channels: 4 }, "etc2-rgb8unorm-srgb": { bytesPerBlock: 8, blockWidth: 4, blockHeight: 4, isCompressed: true, channels: 4 }, "etc2-rgb8a1unorm": { bytesPerBlock: 8, blockWidth: 4, blockHeight: 4, isCompressed: true, channels: 4 }, "etc2-rgb8a1unorm-srgb": { bytesPerBlock: 8, blockWidth: 4, blockHeight: 4, isCompressed: true, channels: 4 }, "etc2-rgba8unorm": { bytesPerBlock: 16, blockWidth: 4, blockHeight: 4, isCompressed: true, channels: 4 }, "etc2-rgba8unorm-srgb": { bytesPerBlock: 16, blockWidth: 4, blockHeight: 4, isCompressed: true, channels: 4 }, "eac-r11unorm": { bytesPerBlock: 8, blockWidth: 1, blockHeight: 1, isCompressed: true, channels: 1 }, "eac-r11snorm": { bytesPerBlock: 8, blockWidth: 1, blockHeight: 1, isCompressed: true, channels: 1 }, "eac-rg11unorm": { bytesPerBlock: 16, blockWidth: 1, blockHeight: 1, isCompressed: true, channels: 2 }, "eac-rg11snorm": { bytesPerBlock: 16, blockWidth: 1, blockHeight: 1, isCompressed: true, channels: 2 }, "astc-4x4-unorm": { bytesPerBlock: 16, blockWidth: 4, blockHeight: 4, isCompressed: true, channels: 4 }, "astc-4x4-unorm-srgb": { bytesPerBlock: 16, blockWidth: 4, blockHeight: 4, isCompressed: true, channels: 4 }, "astc-5x4-unorm": { bytesPerBlock: 16, blockWidth: 5, blockHeight: 4, isCompressed: true, channels: 4 }, "astc-5x4-unorm-srgb": { bytesPerBlock: 16, blockWidth: 5, blockHeight: 4, isCompressed: true, channels: 4 }, "astc-5x5-unorm": { bytesPerBlock: 16, blockWidth: 5, blockHeight: 5, isCompressed: true, channels: 4 }, "astc-5x5-unorm-srgb": { bytesPerBlock: 16, blockWidth: 5, blockHeight: 5, isCompressed: true, channels: 4 }, "astc-6x5-unorm": { bytesPerBlock: 16, blockWidth: 6, blockHeight: 5, isCompressed: true, channels: 4 }, "astc-6x5-unorm-srgb": { bytesPerBlock: 16, blockWidth: 6, blockHeight: 5, isCompressed: true, channels: 4 }, "astc-6x6-unorm": { bytesPerBlock: 16, blockWidth: 6, blockHeight: 6, isCompressed: true, channels: 4 }, "astc-6x6-unorm-srgb": { bytesPerBlock: 16, blockWidth: 6, blockHeight: 6, isCompressed: true, channels: 4 }, "astc-8x5-unorm": { bytesPerBlock: 16, blockWidth: 8, blockHeight: 5, isCompressed: true, channels: 4 }, "astc-8x5-unorm-srgb": { bytesPerBlock: 16, blockWidth: 8, blockHeight: 5, isCompressed: true, channels: 4 }, "astc-8x6-unorm": { bytesPerBlock: 16, blockWidth: 8, blockHeight: 6, isCompressed: true, channels: 4 }, "astc-8x6-unorm-srgb": { bytesPerBlock: 16, blockWidth: 8, blockHeight: 6, isCompressed: true, channels: 4 }, "astc-8x8-unorm": { bytesPerBlock: 16, blockWidth: 8, blockHeight: 8, isCompressed: true, channels: 4 }, "astc-8x8-unorm-srgb": { bytesPerBlock: 16, blockWidth: 8, blockHeight: 8, isCompressed: true, channels: 4 }, "astc-10x5-unorm": { bytesPerBlock: 16, blockWidth: 10, blockHeight: 5, isCompressed: true, channels: 4 }, "astc-10x5-unorm-srgb": { bytesPerBlock: 16, blockWidth: 10, blockHeight: 5, isCompressed: true, channels: 4 }, "astc-10x6-unorm": { bytesPerBlock: 16, blockWidth: 10, blockHeight: 6, isCompressed: true, channels: 4 }, "astc-10x6-unorm-srgb": { bytesPerBlock: 16, blockWidth: 10, blockHeight: 6, isCompressed: true, channels: 4 }, "astc-10x8-unorm": { bytesPerBlock: 16, blockWidth: 10, blockHeight: 8, isCompressed: true, channels: 4 }, "astc-10x8-unorm-srgb": { bytesPerBlock: 16, blockWidth: 10, blockHeight: 8, isCompressed: true, channels: 4 }, "astc-10x10-unorm": { bytesPerBlock: 16, blockWidth: 10, blockHeight: 10, isCompressed: true, channels: 4 }, "astc-10x10-unorm-srgb": { bytesPerBlock: 16, blockWidth: 10, blockHeight: 10, isCompressed: true, channels: 4 }, "astc-12x10-unorm": { bytesPerBlock: 16, blockWidth: 12, blockHeight: 10, isCompressed: true, channels: 4 }, "astc-12x10-unorm-srgb": { bytesPerBlock: 16, blockWidth: 12, blockHeight: 10, isCompressed: true, channels: 4 }, "astc-12x12-unorm": { bytesPerBlock: 16, blockWidth: 12, blockHeight: 12, isCompressed: true, channels: 4 }, "astc-12x12-unorm-srgb": { bytesPerBlock: 16, blockWidth: 12, blockHeight: 12, isCompressed: true, channels: 4 } };
var A = class _A {
  constructor() {
    this.id = _A._id++, this.line = 0;
  }
  get isAstNode() {
    return true;
  }
  get astNodeType() {
    return "";
  }
  search(e4) {
    e4(this);
  }
  searchBlock(e4, t3) {
    if (e4) {
      t3(E.instance);
      for (const n3 of e4) n3 instanceof Array ? this.searchBlock(n3, t3) : n3.search(t3);
      t3($.instance);
    }
  }
  constEvaluate(e4, t3) {
    throw new Error("Cannot evaluate node");
  }
  constEvaluateString(e4) {
    return this.constEvaluate(e4).toString();
  }
};
A._id = 0;
var E = class extends A {
};
E.instance = new E();
var $ = class extends A {
};
$.instance = new $();
var L = /* @__PURE__ */ new Set(["all", "all", "any", "select", "arrayLength", "abs", "acos", "acosh", "asin", "asinh", "atan", "atanh", "atan2", "ceil", "clamp", "cos", "cosh", "countLeadingZeros", "countOneBits", "countTrailingZeros", "cross", "degrees", "determinant", "distance", "dot", "dot4U8Packed", "dot4I8Packed", "exp", "exp2", "extractBits", "faceForward", "firstLeadingBit", "firstTrailingBit", "floor", "fma", "fract", "frexp", "insertBits", "inverseSqrt", "ldexp", "length", "log", "log2", "max", "min", "mix", "modf", "normalize", "pow", "quantizeToF16", "radians", "reflect", "refract", "reverseBits", "round", "saturate", "sign", "sin", "sinh", "smoothStep", "sqrt", "step", "tan", "tanh", "transpose", "trunc", "dpdx", "dpdxCoarse", "dpdxFine", "dpdy", "dpdyCoarse", "dpdyFine", "fwidth", "fwidthCoarse", "fwidthFine", "textureDimensions", "textureGather", "textureGatherCompare", "textureLoad", "textureNumLayers", "textureNumLevels", "textureNumSamples", "textureSample", "textureSampleBias", "textureSampleCompare", "textureSampleCompareLevel", "textureSampleGrad", "textureSampleLevel", "textureSampleBaseClampToEdge", "textureStore", "atomicLoad", "atomicStore", "atomicAdd", "atomicSub", "atomicMax", "atomicMin", "atomicAnd", "atomicOr", "atomicXor", "atomicExchange", "atomicCompareExchangeWeak", "pack4x8snorm", "pack4x8unorm", "pack4xI8", "pack4xU8", "pack4x8Clamp", "pack4xU8Clamp", "pack2x16snorm", "pack2x16unorm", "pack2x16float", "unpack4x8snorm", "unpack4x8unorm", "unpack4xI8", "unpack4xU8", "unpack2x16snorm", "unpack2x16unorm", "unpack2x16float", "storageBarrier", "textureBarrier", "workgroupBarrier", "workgroupUniformLoad", "subgroupAdd", "subgroupExclusiveAdd", "subgroupInclusiveAdd", "subgroupAll", "subgroupAnd", "subgroupAny", "subgroupBallot", "subgroupBroadcast", "subgroupBroadcastFirst", "subgroupElect", "subgroupMax", "subgroupMin", "subgroupMul", "subgroupExclusiveMul", "subgroupInclusiveMul", "subgroupOr", "subgroupShuffle", "subgroupShuffleDown", "subgroupShuffleUp", "subgroupShuffleXor", "subgroupXor", "quadBroadcast", "quadSwapDiagonal", "quadSwapX", "quadSwapY"]);
var C = class extends A {
  constructor() {
    super();
  }
};
var D = class extends C {
  constructor(e4, t3, n3, s3, r3, a3) {
    super(), this.calls = /* @__PURE__ */ new Set(), this.name = e4, this.args = t3, this.returnType = n3, this.body = s3, this.startLine = r3, this.endLine = a3;
  }
  get astNodeType() {
    return "function";
  }
  search(e4) {
    if (this.attributes) for (const t3 of this.attributes) e4(t3);
    e4(this);
    for (const t3 of this.args) e4(t3);
    this.searchBlock(this.body, e4);
  }
};
var N = class extends C {
  constructor(e4) {
    super(), this.expression = e4;
  }
  get astNodeType() {
    return "staticAssert";
  }
  search(e4) {
    this.expression.search(e4);
  }
};
var V = class extends C {
  constructor(e4, t3) {
    super(), this.condition = e4, this.body = t3;
  }
  get astNodeType() {
    return "while";
  }
  search(e4) {
    this.condition.search(e4), this.searchBlock(this.body, e4);
  }
};
var O = class extends C {
  constructor(e4, t3) {
    super(), this.body = e4, this.loopId = t3;
  }
  get astNodeType() {
    return "continuing";
  }
  search(e4) {
    this.searchBlock(this.body, e4);
  }
};
var B = class extends C {
  constructor(e4, t3, n3, s3) {
    super(), this.init = e4, this.condition = t3, this.increment = n3, this.body = s3;
  }
  get astNodeType() {
    return "for";
  }
  search(e4) {
    var t3, n3, s3;
    null === (t3 = this.init) || void 0 === t3 || t3.search(e4), null === (n3 = this.condition) || void 0 === n3 || n3.search(e4), null === (s3 = this.increment) || void 0 === s3 || s3.search(e4), this.searchBlock(this.body, e4);
  }
};
var F = class extends C {
  constructor(e4, t3, n3, s3, r3) {
    super(), this.attributes = null, this.name = e4, this.type = t3, this.storage = n3, this.access = s3, this.value = r3;
  }
  get astNodeType() {
    return "var";
  }
  search(e4) {
    var t3;
    e4(this), null === (t3 = this.value) || void 0 === t3 || t3.search(e4);
  }
};
var M = class extends C {
  constructor(e4, t3, n3) {
    super(), this.attributes = null, this.name = e4, this.type = t3, this.value = n3;
  }
  get astNodeType() {
    return "override";
  }
  search(e4) {
    var t3;
    null === (t3 = this.value) || void 0 === t3 || t3.search(e4);
  }
};
var U = class extends C {
  constructor(e4, t3, n3, s3, r3) {
    super(), this.attributes = null, this.name = e4, this.type = t3, this.storage = n3, this.access = s3, this.value = r3;
  }
  get astNodeType() {
    return "let";
  }
  search(e4) {
    var t3;
    e4(this), null === (t3 = this.value) || void 0 === t3 || t3.search(e4);
  }
};
var P = class extends C {
  constructor(e4, t3, n3, s3, r3) {
    super(), this.attributes = null, this.name = e4, this.type = t3, this.storage = n3, this.access = s3, this.value = r3;
  }
  get astNodeType() {
    return "const";
  }
  constEvaluate(e4, t3) {
    return this.value.constEvaluate(e4, t3);
  }
  search(e4) {
    var t3;
    e4(this), null === (t3 = this.value) || void 0 === t3 || t3.search(e4);
  }
};
var W;
var q;
var H;
var z;
((e4) => {
  e4.increment = "++", e4.decrement = "--";
})(W || (W = {})), ((e4) => {
  e4.parse = function(t3) {
    const n3 = t3;
    if ("parse" == n3) throw new Error("Invalid value for IncrementOperator");
    return e4[n3];
  };
})(W || (W = {}));
var R = class extends C {
  constructor(e4, t3) {
    super(), this.operator = e4, this.variable = t3;
  }
  get astNodeType() {
    return "increment";
  }
  search(e4) {
    this.variable.search(e4);
  }
};
((e4) => {
  e4.assign = "=", e4.addAssign = "+=", e4.subtractAssin = "-=", e4.multiplyAssign = "*=", e4.divideAssign = "/=", e4.moduloAssign = "%=", e4.andAssign = "&=", e4.orAssign = "|=", e4.xorAssign = "^=", e4.shiftLeftAssign = "<<=", e4.shiftRightAssign = ">>=";
})(q || (q = {})), ((e4) => {
  e4.parse = function(e5) {
    const t3 = e5;
    if ("parse" == t3) throw new Error("Invalid value for AssignOperator");
    return t3;
  };
})(q || (q = {}));
var G = class extends C {
  constructor(e4, t3, n3) {
    super(), this.operator = e4, this.variable = t3, this.value = n3;
  }
  get astNodeType() {
    return "assign";
  }
  search(e4) {
    this.variable.search(e4), this.value.search(e4);
  }
};
var X = class extends C {
  constructor(e4, t3) {
    super(), this.name = e4, this.args = t3;
  }
  get astNodeType() {
    return "call";
  }
  isBuiltin() {
    return L.has(this.name);
  }
  search(e4) {
    for (const t3 of this.args) t3.search(e4);
    e4(this);
  }
};
var j = class extends C {
  constructor(e4, t3) {
    super(), this.body = e4, this.continuing = t3;
  }
  get astNodeType() {
    return "loop";
  }
  search(e4) {
    var t3;
    this.searchBlock(this.body, e4), null === (t3 = this.continuing) || void 0 === t3 || t3.search(e4);
  }
};
var Z = class extends C {
  constructor(e4, t3) {
    super(), this.condition = e4, this.cases = t3;
  }
  get astNodeType() {
    return "switch";
  }
  search(e4) {
    e4(this);
    for (const t3 of this.cases) t3.search(e4);
  }
};
var Q = class extends C {
  constructor(e4, t3, n3, s3) {
    super(), this.condition = e4, this.body = t3, this.elseif = n3, this.else = s3;
  }
  get astNodeType() {
    return "if";
  }
  search(e4) {
    this.condition.search(e4), this.searchBlock(this.body, e4), this.searchBlock(this.elseif, e4), this.searchBlock(this.else, e4);
  }
};
var Y = class extends C {
  constructor(e4) {
    super(), this.value = e4;
  }
  get astNodeType() {
    return "return";
  }
  search(e4) {
    var t3;
    null === (t3 = this.value) || void 0 === t3 || t3.search(e4);
  }
};
var K = class extends C {
  constructor(e4) {
    super(), this.name = e4;
  }
  get astNodeType() {
    return "enable";
  }
};
var J = class extends C {
  constructor(e4) {
    super(), this.extensions = e4;
  }
  get astNodeType() {
    return "requires";
  }
};
var ee = class extends C {
  constructor(e4, t3) {
    super(), this.severity = e4, this.rule = t3;
  }
  get astNodeType() {
    return "diagnostic";
  }
};
var te = class extends C {
  constructor(e4, t3) {
    super(), this.name = e4, this.type = t3;
  }
  get astNodeType() {
    return "alias";
  }
};
var ne = class extends C {
  constructor() {
    super();
  }
  get astNodeType() {
    return "discard";
  }
};
var se = class extends C {
  constructor() {
    super(), this.condition = null, this.loopId = -1;
  }
  get astNodeType() {
    return "break";
  }
};
var re = class extends C {
  constructor() {
    super(), this.loopId = -1;
  }
  get astNodeType() {
    return "continue";
  }
};
var ae = class _ae extends C {
  constructor(e4) {
    super(), this.attributes = null, this.name = e4;
  }
  get astNodeType() {
    return "type";
  }
  get isStruct() {
    return false;
  }
  get isArray() {
    return false;
  }
  static maxFormatType(e4) {
    let t3 = e4[0];
    if ("f32" === t3.name) return t3;
    for (let n3 = 1; n3 < e4.length; ++n3) {
      const s3 = _ae._priority.get(t3.name);
      _ae._priority.get(e4[n3].name) < s3 && (t3 = e4[n3]);
    }
    return "x32" === t3.name ? _ae.i32 : t3;
  }
  getTypeName() {
    return this.name;
  }
};
ae.x32 = new ae("x32"), ae.f32 = new ae("f32"), ae.i32 = new ae("i32"), ae.u32 = new ae("u32"), ae.f16 = new ae("f16"), ae.bool = new ae("bool"), ae.void = new ae("void"), ae._priority = /* @__PURE__ */ new Map([["f32", 0], ["f16", 1], ["u32", 2], ["i32", 3], ["x32", 3]]);
var ie = class extends ae {
  constructor(e4) {
    super(e4);
  }
};
var oe = class extends ae {
  constructor(e4, t3, n3, s3) {
    super(e4), this.members = t3, this.startLine = n3, this.endLine = s3;
  }
  get astNodeType() {
    return "struct";
  }
  get isStruct() {
    return true;
  }
  getMemberIndex(e4) {
    for (let t3 = 0; t3 < this.members.length; t3++) if (this.members[t3].name == e4) return t3;
    return -1;
  }
  search(e4) {
    for (const t3 of this.members) e4(t3);
  }
};
var ce = class extends ae {
  constructor(e4, t3, n3) {
    super(e4), this.format = t3, this.access = n3;
  }
  get astNodeType() {
    return "template";
  }
  getTypeName() {
    let e4 = this.name;
    if (null !== this.format) {
      if ("vec2" === e4 || "vec3" === e4 || "vec4" === e4 || "mat2x2" === e4 || "mat2x3" === e4 || "mat2x4" === e4 || "mat3x2" === e4 || "mat3x3" === e4 || "mat3x4" === e4 || "mat4x2" === e4 || "mat4x3" === e4 || "mat4x4" === e4) {
        if ("f32" === this.format.name) return e4 += "f", e4;
        if ("i32" === this.format.name) return e4 += "i", e4;
        if ("u32" === this.format.name) return e4 += "u", e4;
        if ("bool" === this.format.name) return e4 += "b", e4;
        if ("f16" === this.format.name) return e4 += "h", e4;
      }
      e4 += `<${this.format.name}>`;
    } else if ("vec2" === e4 || "vec3" === e4 || "vec4" === e4) return e4;
    return e4;
  }
};
ce.vec2f = new ce("vec2", ae.f32, null), ce.vec3f = new ce("vec3", ae.f32, null), ce.vec4f = new ce("vec4", ae.f32, null), ce.vec2i = new ce("vec2", ae.i32, null), ce.vec3i = new ce("vec3", ae.i32, null), ce.vec4i = new ce("vec4", ae.i32, null), ce.vec2u = new ce("vec2", ae.u32, null), ce.vec3u = new ce("vec3", ae.u32, null), ce.vec4u = new ce("vec4", ae.u32, null), ce.vec2h = new ce("vec2", ae.f16, null), ce.vec3h = new ce("vec3", ae.f16, null), ce.vec4h = new ce("vec4", ae.f16, null), ce.vec2b = new ce("vec2", ae.bool, null), ce.vec3b = new ce("vec3", ae.bool, null), ce.vec4b = new ce("vec4", ae.bool, null), ce.mat2x2f = new ce("mat2x2", ae.f32, null), ce.mat2x3f = new ce("mat2x3", ae.f32, null), ce.mat2x4f = new ce("mat2x4", ae.f32, null), ce.mat3x2f = new ce("mat3x2", ae.f32, null), ce.mat3x3f = new ce("mat3x3", ae.f32, null), ce.mat3x4f = new ce("mat3x4", ae.f32, null), ce.mat4x2f = new ce("mat4x2", ae.f32, null), ce.mat4x3f = new ce("mat4x3", ae.f32, null), ce.mat4x4f = new ce("mat4x4", ae.f32, null), ce.mat2x2h = new ce("mat2x2", ae.f16, null), ce.mat2x3h = new ce("mat2x3", ae.f16, null), ce.mat2x4h = new ce("mat2x4", ae.f16, null), ce.mat3x2h = new ce("mat3x2", ae.f16, null), ce.mat3x3h = new ce("mat3x3", ae.f16, null), ce.mat3x4h = new ce("mat3x4", ae.f16, null), ce.mat4x2h = new ce("mat4x2", ae.f16, null), ce.mat4x3h = new ce("mat4x3", ae.f16, null), ce.mat4x4h = new ce("mat4x4", ae.f16, null), ce.mat2x2i = new ce("mat2x2", ae.i32, null), ce.mat2x3i = new ce("mat2x3", ae.i32, null), ce.mat2x4i = new ce("mat2x4", ae.i32, null), ce.mat3x2i = new ce("mat3x2", ae.i32, null), ce.mat3x3i = new ce("mat3x3", ae.i32, null), ce.mat3x4i = new ce("mat3x4", ae.i32, null), ce.mat4x2i = new ce("mat4x2", ae.i32, null), ce.mat4x3i = new ce("mat4x3", ae.i32, null), ce.mat4x4i = new ce("mat4x4", ae.i32, null), ce.mat2x2u = new ce("mat2x2", ae.u32, null), ce.mat2x3u = new ce("mat2x3", ae.u32, null), ce.mat2x4u = new ce("mat2x4", ae.u32, null), ce.mat3x2u = new ce("mat3x2", ae.u32, null), ce.mat3x3u = new ce("mat3x3", ae.u32, null), ce.mat3x4u = new ce("mat3x4", ae.u32, null), ce.mat4x2u = new ce("mat4x2", ae.u32, null), ce.mat4x3u = new ce("mat4x3", ae.u32, null), ce.mat4x4u = new ce("mat4x4", ae.u32, null);
var le = class extends ae {
  constructor(e4, t3, n3, s3) {
    super(e4), this.storage = t3, this.type = n3, this.access = s3;
  }
  get astNodeType() {
    return "pointer";
  }
};
var ue = class extends ae {
  constructor(e4, t3, n3, s3) {
    super(e4), this.attributes = t3, this.format = n3, this.count = s3;
  }
  get astNodeType() {
    return "array";
  }
  get isArray() {
    return true;
  }
};
var he = class extends ae {
  constructor(e4, t3, n3) {
    super(e4), this.format = t3, this.access = n3;
  }
  get astNodeType() {
    return "sampler";
  }
};
var fe = class extends A {
  constructor() {
    super(), this.postfix = null;
  }
};
var pe = class extends fe {
  constructor(e4) {
    super(), this.value = e4;
  }
  get astNodeType() {
    return "stringExpr";
  }
  toString() {
    return this.value;
  }
  constEvaluateString() {
    return this.value;
  }
};
var de = class extends fe {
  constructor(e4, t3) {
    super(), this.type = e4, this.args = t3;
  }
  get astNodeType() {
    return "createExpr";
  }
  search(e4) {
    if (e4(this), this.args) for (const t3 of this.args) t3.search(e4);
  }
  constEvaluate(e4, t3) {
    return t3 && (t3[0] = this.type), e4.evalExpression(this, e4.context);
  }
};
var me = class extends fe {
  constructor(e4, t3) {
    super(), this.cachedReturnValue = null, this.name = e4, this.args = t3;
  }
  get astNodeType() {
    return "callExpr";
  }
  setCachedReturnValue(e4) {
    this.cachedReturnValue = e4;
  }
  get isBuiltin() {
    return L.has(this.name);
  }
  constEvaluate(e4, t3) {
    return e4.evalExpression(this, e4.context);
  }
  search(e4) {
    for (const t3 of this.args) t3.search(e4);
    e4(this);
  }
};
var ge = class extends fe {
  constructor(e4) {
    super(), this.name = e4;
  }
  get astNodeType() {
    return "varExpr";
  }
  search(e4) {
    e4(this), this.postfix && this.postfix.search(e4);
  }
  constEvaluate(e4, t3) {
    return e4.evalExpression(this, e4.context);
  }
};
var _e = class extends fe {
  constructor(e4, t3) {
    super(), this.name = e4, this.initializer = t3;
  }
  get astNodeType() {
    return "constExpr";
  }
  constEvaluate(e4, t3) {
    if (this.initializer) {
      const t4 = e4.evalExpression(this.initializer, e4.context);
      return null !== t4 && this.postfix ? t4.getSubData(e4, this.postfix, e4.context) : t4;
    }
    return null;
  }
  search(e4) {
    this.initializer.search(e4);
  }
};
var xe = class extends fe {
  constructor(e4, t3) {
    super(), this.value = e4, this.type = t3;
  }
  get astNodeType() {
    return "literalExpr";
  }
  constEvaluate(e4, t3) {
    return void 0 !== t3 && (t3[0] = this.type), this.value;
  }
  get isScalar() {
    return this.value instanceof Be;
  }
  get isVector() {
    return this.value instanceof Me || this.value instanceof Ue;
  }
  get scalarValue() {
    return this.value instanceof Be ? this.value.value : (console.error("Value is not scalar."), 0);
  }
  get vectorValue() {
    return this.value instanceof Me || this.value instanceof Ue ? this.value.data : (console.error("Value is not a vector or matrix."), new Float32Array(0));
  }
};
var ye = class extends fe {
  constructor(e4, t3) {
    super(), this.type = e4, this.value = t3;
  }
  get astNodeType() {
    return "bitcastExpr";
  }
  search(e4) {
    this.value.search(e4);
  }
};
var ve = class extends fe {
  constructor(e4) {
    super(), this.index = e4;
  }
  search(e4) {
    this.index.search(e4);
  }
};
var we = class extends fe {
  constructor() {
    super();
  }
};
var ke = class extends we {
  constructor(e4, t3) {
    super(), this.operator = e4, this.right = t3;
  }
  get astNodeType() {
    return "unaryOp";
  }
  constEvaluate(e4, t3) {
    return e4.evalExpression(this, e4.context);
  }
  search(e4) {
    this.right.search(e4);
  }
};
var Ie = class extends we {
  constructor(e4, t3, n3) {
    super(), this.operator = e4, this.left = t3, this.right = n3;
  }
  get astNodeType() {
    return "binaryOp";
  }
  _getPromotedType(e4, t3) {
    return e4.name === t3.name ? e4 : "f32" === e4.name || "f32" === t3.name ? ae.f32 : "u32" === e4.name || "u32" === t3.name ? ae.u32 : ae.i32;
  }
  constEvaluate(e4, t3) {
    return e4.evalExpression(this, e4.context);
  }
  search(e4) {
    this.left.search(e4), this.right.search(e4);
  }
};
var Te = class extends A {
  constructor(e4) {
    super(), this.body = e4;
  }
  search(e4) {
    e4(this), this.searchBlock(this.body, e4);
  }
};
var Se = class extends fe {
  constructor() {
    super();
  }
  get astNodeType() {
    return "default";
  }
};
var Ae = class extends Te {
  constructor(e4, t3) {
    super(t3), this.selectors = e4;
  }
  get astNodeType() {
    return "case";
  }
  search(e4) {
    this.searchBlock(this.body, e4);
  }
};
var Ee = class extends Te {
  constructor(e4) {
    super(e4);
  }
  get astNodeType() {
    return "default";
  }
  search(e4) {
    this.searchBlock(this.body, e4);
  }
};
var $e = class extends A {
  constructor(e4, t3, n3) {
    super(), this.name = e4, this.type = t3, this.attributes = n3;
  }
  get astNodeType() {
    return "argument";
  }
};
var Le = class extends A {
  constructor(e4, t3) {
    super(), this.condition = e4, this.body = t3;
  }
  get astNodeType() {
    return "elseif";
  }
  search(e4) {
    this.condition.search(e4), this.searchBlock(this.body, e4);
  }
};
var Ce = class extends A {
  constructor(e4, t3, n3) {
    super(), this.name = e4, this.type = t3, this.attributes = n3;
  }
  get astNodeType() {
    return "member";
  }
};
var De = class extends A {
  constructor(e4, t3) {
    super(), this.name = e4, this.value = t3;
  }
  get astNodeType() {
    return "attribute";
  }
};
var Ne = class _Ne {
  constructor(e4, t3) {
    this.parent = null, this.typeInfo = e4, this.parent = t3, this.id = _Ne._id++;
  }
  clone() {
    throw `Clone: Not implemented for ${this.constructor.name}`;
  }
  setDataValue(e4, t3, n3, s3) {
    console.error(`SetDataValue: Not implemented for ${this.constructor.name}`);
  }
  getSubData(e4, t3, n3) {
    return console.error(`GetDataValue: Not implemented for ${this.constructor.name}`), null;
  }
  toString() {
    return `<${this.typeInfo.getTypeName()}>`;
  }
};
Ne._id = 0;
var Ve = class extends Ne {
  constructor() {
    super(new e("void", null), null);
  }
  toString() {
    return "void";
  }
};
Ve.void = new Ve();
var Oe = class extends Ne {
  constructor(e4) {
    super(new r("pointer", e4.typeInfo, null), null), this.reference = e4;
  }
  clone() {
    return this;
  }
  setDataValue(e4, t3, n3, s3) {
    this.reference.setDataValue(e4, t3, n3, s3);
  }
  getSubData(e4, t3, n3) {
    return t3 ? this.reference.getSubData(e4, t3, n3) : this;
  }
  toString() {
    return `&${this.reference.toString()}`;
  }
};
var Be = class _Be extends Ne {
  constructor(e4, t3, n3 = null) {
    super(t3, n3), e4 instanceof Int32Array || e4 instanceof Uint32Array || e4 instanceof Float32Array ? this.data = e4 : "x32" === this.typeInfo.name ? e4 - Math.floor(e4) !== 0 ? this.data = new Float32Array([e4]) : this.data = e4 >= 0 ? new Uint32Array([e4]) : new Int32Array([e4]) : "i32" === this.typeInfo.name || "bool" === this.typeInfo.name ? this.data = new Int32Array([e4]) : "u32" === this.typeInfo.name ? this.data = new Uint32Array([e4]) : "f32" === this.typeInfo.name || "f16" === this.typeInfo.name ? this.data = new Float32Array([e4]) : console.error("ScalarData2: Invalid type", t3);
  }
  clone() {
    if (this.data instanceof Float32Array) return new _Be(new Float32Array(this.data), this.typeInfo, null);
    if (this.data instanceof Int32Array) return new _Be(new Int32Array(this.data), this.typeInfo, null);
    if (this.data instanceof Uint32Array) return new _Be(new Uint32Array(this.data), this.typeInfo, null);
    throw "ScalarData: Invalid data type";
  }
  get value() {
    return this.data[0];
  }
  set value(e4) {
    this.data[0] = e4;
  }
  setDataValue(e4, t3, n3, s3) {
    if (n3) return void console.error("SetDataValue: Scalar data does not support postfix", n3);
    if (!(t3 instanceof _Be)) return void console.error("SetDataValue: Invalid value", t3);
    let r3 = t3.data[0];
    "i32" === this.typeInfo.name || "u32" === this.typeInfo.name ? r3 = Math.floor(r3) : "bool" === this.typeInfo.name && (r3 = r3 ? 1 : 0), this.data[0] = r3;
  }
  getSubData(e4, t3, n3) {
    return t3 ? (console.error("getSubData: Scalar data does not support postfix", t3), null) : this;
  }
  toString() {
    return `${this.value}`;
  }
};
function Fe(e4, t3, n3) {
  const s3 = t3.length;
  return 2 === s3 ? "f32" === n3 ? new Me(new Float32Array(t3), e4.getTypeInfo("vec2f")) : "i32" === n3 || "bool" === n3 ? new Me(new Int32Array(t3), e4.getTypeInfo("vec2i")) : "u32" === n3 ? new Me(new Uint32Array(t3), e4.getTypeInfo("vec2u")) : "f16" === n3 ? new Me(new Float32Array(t3), e4.getTypeInfo("vec2h")) : (console.error(`getSubData: Unknown format ${n3}`), null) : 3 === s3 ? "f32" === n3 ? new Me(new Float32Array(t3), e4.getTypeInfo("vec3f")) : "i32" === n3 || "bool" === n3 ? new Me(new Int32Array(t3), e4.getTypeInfo("vec3i")) : "u32" === n3 ? new Me(new Uint32Array(t3), e4.getTypeInfo("vec3u")) : "f16" === n3 ? new Me(new Float32Array(t3), e4.getTypeInfo("vec3h")) : (console.error(`getSubData: Unknown format ${n3}`), null) : 4 === s3 ? "f32" === n3 ? new Me(new Float32Array(t3), e4.getTypeInfo("vec4f")) : "i32" === n3 || "bool" === n3 ? new Me(new Int32Array(t3), e4.getTypeInfo("vec4i")) : "u32" === n3 ? new Me(new Uint32Array(t3), e4.getTypeInfo("vec4u")) : "f16" === n3 ? new Me(new Float32Array(t3), e4.getTypeInfo("vec4h")) : (console.error(`getSubData: Unknown format ${n3}`), null) : (console.error(`getSubData: Invalid vector size ${t3.length}`), null);
}
var Me = class _Me extends Ne {
  constructor(e4, t3, n3 = null) {
    if (super(t3, n3), e4 instanceof Float32Array || e4 instanceof Uint32Array || e4 instanceof Int32Array) this.data = e4;
    else {
      const t4 = this.typeInfo.name;
      "vec2f" === t4 || "vec3f" === t4 || "vec4f" === t4 ? this.data = new Float32Array(e4) : "vec2i" === t4 || "vec3i" === t4 || "vec4i" === t4 ? this.data = new Int32Array(e4) : "vec2u" === t4 || "vec3u" === t4 || "vec4u" === t4 ? this.data = new Uint32Array(e4) : "vec2h" === t4 || "vec3h" === t4 || "vec4h" === t4 ? this.data = new Float32Array(e4) : "vec2b" === t4 || "vec3b" === t4 || "vec4b" === t4 ? this.data = new Int32Array(e4) : "vec2" === t4 || "vec3" === t4 || "vec4" === t4 ? this.data = new Float32Array(e4) : console.error(`VectorData: Invalid type ${t4}`);
    }
  }
  clone() {
    if (this.data instanceof Float32Array) return new _Me(new Float32Array(this.data), this.typeInfo, null);
    if (this.data instanceof Int32Array) return new _Me(new Int32Array(this.data), this.typeInfo, null);
    if (this.data instanceof Uint32Array) return new _Me(new Uint32Array(this.data), this.typeInfo, null);
    throw "VectorData: Invalid data type";
  }
  setDataValue(e4, t3, n3, s3) {
    n3 instanceof pe ? console.error("TODO: Set vector postfix") : t3 instanceof _Me ? this.data = t3.data : console.error("SetDataValue: Invalid value", t3);
  }
  getSubData(e4, t3, n3) {
    if (null === t3) return this;
    let s3 = e4.getTypeInfo("f32");
    if (this.typeInfo instanceof a) s3 = this.typeInfo.format || s3;
    else {
      const t4 = this.typeInfo.name;
      "vec2f" === t4 || "vec3f" === t4 || "vec4f" === t4 ? s3 = e4.getTypeInfo("f32") : "vec2i" === t4 || "vec3i" === t4 || "vec4i" === t4 ? s3 = e4.getTypeInfo("i32") : "vec2b" === t4 || "vec3b" === t4 || "vec4b" === t4 ? s3 = e4.getTypeInfo("bool") : "vec2u" === t4 || "vec3u" === t4 || "vec4u" === t4 ? s3 = e4.getTypeInfo("u32") : "vec2h" === t4 || "vec3h" === t4 || "vec4h" === t4 ? s3 = e4.getTypeInfo("f16") : console.error(`GetSubData: Unknown type ${t4}`);
    }
    let r3 = this;
    for (; null !== t3 && null !== r3; ) {
      if (t3 instanceof ve) {
        const a3 = t3.index;
        let i4 = -1;
        if (a3 instanceof xe) {
          if (!(a3.value instanceof Be)) return console.error(`GetSubData: Invalid array index ${a3.value}`), null;
          i4 = a3.value.value;
        } else {
          const t4 = e4.evalExpression(a3, n3);
          if (!(t4 instanceof Be)) return console.error("GetSubData: Unknown index type", a3), null;
          i4 = t4.value;
        }
        if (i4 < 0 || i4 >= r3.data.length) return console.error("GetSubData: Index out of range", i4), null;
        if (r3.data instanceof Float32Array) {
          const e5 = new Float32Array(r3.data.buffer, r3.data.byteOffset + 4 * i4, 1);
          return new Be(e5, s3);
        }
        if (r3.data instanceof Int32Array) {
          const e5 = new Int32Array(r3.data.buffer, r3.data.byteOffset + 4 * i4, 1);
          return new Be(e5, s3);
        }
        if (r3.data instanceof Uint32Array) {
          const e5 = new Uint32Array(r3.data.buffer, r3.data.byteOffset + 4 * i4, 1);
          return new Be(e5, s3);
        }
        throw "GetSubData: Invalid data type";
      }
      if (!(t3 instanceof pe)) return console.error("GetSubData: Unknown postfix", t3), null;
      {
        const n4 = t3.value.toLowerCase();
        if (1 === n4.length) {
          let e5 = 0;
          if ("x" === n4 || "r" === n4) e5 = 0;
          else if ("y" === n4 || "g" === n4) e5 = 1;
          else if ("z" === n4 || "b" === n4) e5 = 2;
          else {
            if ("w" !== n4 && "a" !== n4) return console.error(`GetSubData: Unknown member ${n4}`), null;
            e5 = 3;
          }
          if (this.data instanceof Float32Array) {
            let t4 = new Float32Array(this.data.buffer, this.data.byteOffset + 4 * e5, 1);
            return new Be(t4, s3, this);
          }
          if (this.data instanceof Int32Array) {
            let t4 = new Int32Array(this.data.buffer, this.data.byteOffset + 4 * e5, 1);
            return new Be(t4, s3, this);
          }
          if (this.data instanceof Uint32Array) {
            let t4 = new Uint32Array(this.data.buffer, this.data.byteOffset + 4 * e5, 1);
            return new Be(t4, s3, this);
          }
        }
        const a3 = [];
        for (const e5 of n4) "x" === e5 || "r" === e5 ? a3.push(this.data[0]) : "y" === e5 || "g" === e5 ? a3.push(this.data[1]) : "z" === e5 || "b" === e5 ? a3.push(this.data[2]) : "w" === e5 || "a" === e5 ? a3.push(this.data[3]) : console.error(`GetDataValue: Unknown member ${e5}`);
        r3 = Fe(e4, a3, s3.name);
      }
      t3 = t3.postfix;
    }
    return r3;
  }
  toString() {
    let e4 = `${this.data[0]}`;
    for (let t3 = 1; t3 < this.data.length; ++t3) e4 += `, ${this.data[t3]}`;
    return e4;
  }
};
var Ue = class _Ue extends Ne {
  constructor(e4, t3, n3 = null) {
    super(t3, n3), e4 instanceof Float32Array ? this.data = e4 : this.data = new Float32Array(e4);
  }
  clone() {
    return new _Ue(new Float32Array(this.data), this.typeInfo, null);
  }
  setDataValue(e4, t3, n3, s3) {
    n3 instanceof pe ? console.error("TODO: Set matrix postfix") : t3 instanceof _Ue ? this.data = t3.data : console.error("SetDataValue: Invalid value", t3);
  }
  getSubData(e4, t3, n3) {
    if (null === t3) return this;
    const s3 = this.typeInfo.name;
    if (e4.getTypeInfo("f32"), this.typeInfo instanceof a) this.typeInfo.format;
    else if (s3.endsWith("f")) e4.getTypeInfo("f32");
    else if (s3.endsWith("i")) e4.getTypeInfo("i32");
    else if (s3.endsWith("u")) e4.getTypeInfo("u32");
    else {
      if (!s3.endsWith("h")) return console.error(`GetDataValue: Unknown type ${s3}`), null;
      e4.getTypeInfo("f16");
    }
    if (t3 instanceof ve) {
      const r3 = t3.index;
      let a3 = -1;
      if (r3 instanceof xe) {
        if (!(r3.value instanceof Be)) return console.error(`GetDataValue: Invalid array index ${r3.value}`), null;
        a3 = r3.value.value;
      } else {
        const t4 = e4.evalExpression(r3, n3);
        if (!(t4 instanceof Be)) return console.error("GetDataValue: Unknown index type", r3), null;
        a3 = t4.value;
      }
      if (a3 < 0 || a3 >= this.data.length) return console.error("GetDataValue: Index out of range", a3), null;
      const i4 = s3.endsWith("h") ? "h" : "f";
      let o3;
      if ("mat2x2" === s3 || "mat2x2f" === s3 || "mat2x2h" === s3 || "mat3x2" === s3 || "mat3x2f" === s3 || "mat3x2h" === s3 || "mat4x2" === s3 || "mat4x2f" === s3 || "mat4x2h" === s3) o3 = new Me(new Float32Array(this.data.buffer, this.data.byteOffset + 2 * a3 * 4, 2), e4.getTypeInfo(`vec2${i4}`));
      else if ("mat2x3" === s3 || "mat2x3f" === s3 || "mat2x3h" === s3 || "mat3x3" === s3 || "mat3x3f" === s3 || "mat3x3h" === s3 || "mat4x3" === s3 || "mat4x3f" === s3 || "mat4x3h" === s3) o3 = new Me(new Float32Array(this.data.buffer, this.data.byteOffset + 3 * a3 * 4, 3), e4.getTypeInfo(`vec3${i4}`));
      else {
        if ("mat2x4" !== s3 && "mat2x4f" !== s3 && "mat2x4h" !== s3 && "mat3x4" !== s3 && "mat3x4f" !== s3 && "mat3x4h" !== s3 && "mat4x4" !== s3 && "mat4x4f" !== s3 && "mat4x4h" !== s3) return console.error(`GetDataValue: Unknown type ${s3}`), null;
        o3 = new Me(new Float32Array(this.data.buffer, this.data.byteOffset + 4 * a3 * 4, 4), e4.getTypeInfo(`vec4${i4}`));
      }
      return t3.postfix ? o3.getSubData(e4, t3.postfix, n3) : o3;
    }
    return console.error("GetDataValue: Invalid postfix", t3), null;
  }
  toString() {
    let e4 = `${this.data[0]}`;
    for (let t3 = 1; t3 < this.data.length; ++t3) e4 += `, ${this.data[t3]}`;
    return e4;
  }
};
var Pe = class _Pe extends Ne {
  constructor(e4, t3, n3 = 0, s3 = null) {
    super(t3, s3), this.buffer = e4 instanceof ArrayBuffer ? e4 : e4.buffer, this.offset = n3;
  }
  clone() {
    const e4 = new Uint8Array(new Uint8Array(this.buffer, this.offset, this.typeInfo.size));
    return new _Pe(e4.buffer, this.typeInfo, 0, null);
  }
  setDataValue(t3, r3, a3, i4) {
    if (null === r3) return void console.log("setDataValue: NULL data.");
    let o3 = this.offset, c3 = this.typeInfo;
    for (; a3; ) {
      if (a3 instanceof ve) if (c3 instanceof s) {
        const e4 = a3.index;
        if (e4 instanceof xe) {
          if (!(e4.value instanceof Be)) return void console.error(`SetDataValue: Invalid index type ${e4.value}`);
          o3 += e4.value.value * c3.stride;
        } else {
          const n3 = t3.evalExpression(e4, i4);
          if (!(n3 instanceof Be)) return void console.error("SetDataValue: Unknown index type", e4);
          o3 += n3.value * c3.stride;
        }
        c3 = c3.format;
      } else console.error(`SetDataValue: Type ${c3.getTypeName()} is not an array`);
      else {
        if (!(a3 instanceof pe)) return void console.error("SetDataValue: Unknown postfix type", a3);
        {
          const t4 = a3.value;
          if (c3 instanceof n) {
            let e4 = false;
            for (const n3 of c3.members) if (n3.name === t4) {
              o3 += n3.offset, c3 = n3.type, e4 = true;
              break;
            }
            if (!e4) return void console.error(`SetDataValue: Member ${t4} not found`);
          } else if (c3 instanceof e) {
            const e4 = c3.getTypeName();
            let n3 = 0;
            if ("x" === t4 || "r" === t4) n3 = 0;
            else if ("y" === t4 || "g" === t4) n3 = 1;
            else if ("z" === t4 || "b" === t4) n3 = 2;
            else {
              if ("w" !== t4 && "a" !== t4) return void console.error(`SetDataValue: Unknown member ${t4}`);
              n3 = 3;
            }
            if (!(r3 instanceof Be)) return void console.error("SetDataValue: Invalid value", r3);
            const s3 = r3.value;
            return "vec2f" === e4 ? void (new Float32Array(this.buffer, o3, 2)[n3] = s3) : "vec3f" === e4 ? void (new Float32Array(this.buffer, o3, 3)[n3] = s3) : "vec4f" === e4 ? void (new Float32Array(this.buffer, o3, 4)[n3] = s3) : "vec2i" === e4 ? void (new Int32Array(this.buffer, o3, 2)[n3] = s3) : "vec3i" === e4 ? void (new Int32Array(this.buffer, o3, 3)[n3] = s3) : "vec4i" === e4 ? void (new Int32Array(this.buffer, o3, 4)[n3] = s3) : "vec2u" === e4 ? void (new Uint32Array(this.buffer, o3, 2)[n3] = s3) : "vec3u" === e4 ? void (new Uint32Array(this.buffer, o3, 3)[n3] = s3) : "vec4u" === e4 ? void (new Uint32Array(this.buffer, o3, 4)[n3] = s3) : void console.error(`SetDataValue: Type ${e4} is not a struct`);
          }
        }
      }
      a3 = a3.postfix;
    }
    this.setData(t3, r3, c3, o3, i4);
  }
  setData(e4, t3, n3, s3, r3) {
    const a3 = n3.getTypeName();
    if ("f32" !== a3 && "f16" !== a3) if ("i32" !== a3 && "atomic<i32>" !== a3 && "x32" !== a3) if ("u32" !== a3 && "atomic<u32>" !== a3) if ("bool" !== a3) {
      if ("vec2f" === a3 || "vec2h" === a3) {
        const e5 = new Float32Array(this.buffer, s3, 2);
        return void (t3 instanceof Me ? (e5[0] = t3.data[0], e5[1] = t3.data[1]) : (e5[0] = t3[0], e5[1] = t3[1]));
      }
      if ("vec3f" === a3 || "vec3h" === a3) {
        const e5 = new Float32Array(this.buffer, s3, 3);
        return void (t3 instanceof Me ? (e5[0] = t3.data[0], e5[1] = t3.data[1], e5[2] = t3.data[2]) : (e5[0] = t3[0], e5[1] = t3[1], e5[2] = t3[2]));
      }
      if ("vec4f" === a3 || "vec4h" === a3) {
        const e5 = new Float32Array(this.buffer, s3, 4);
        return void (t3 instanceof Me ? (e5[0] = t3.data[0], e5[1] = t3.data[1], e5[2] = t3.data[2], e5[3] = t3.data[3]) : (e5[0] = t3[0], e5[1] = t3[1], e5[2] = t3[2], e5[3] = t3[3]));
      }
      if ("vec2i" === a3) {
        const e5 = new Int32Array(this.buffer, s3, 2);
        return void (t3 instanceof Me ? (e5[0] = t3.data[0], e5[1] = t3.data[1]) : (e5[0] = t3[0], e5[1] = t3[1]));
      }
      if ("vec3i" === a3) {
        const e5 = new Int32Array(this.buffer, s3, 3);
        return void (t3 instanceof Me ? (e5[0] = t3.data[0], e5[1] = t3.data[1], e5[2] = t3.data[2]) : (e5[0] = t3[0], e5[1] = t3[1], e5[2] = t3[2]));
      }
      if ("vec4i" === a3) {
        const e5 = new Int32Array(this.buffer, s3, 4);
        return void (t3 instanceof Me ? (e5[0] = t3.data[0], e5[1] = t3.data[1], e5[2] = t3.data[2], e5[3] = t3.data[3]) : (e5[0] = t3[0], e5[1] = t3[1], e5[2] = t3[2], e5[3] = t3[3]));
      }
      if ("vec2u" === a3) {
        const e5 = new Uint32Array(this.buffer, s3, 2);
        return void (t3 instanceof Me ? (e5[0] = t3.data[0], e5[1] = t3.data[1]) : (e5[0] = t3[0], e5[1] = t3[1]));
      }
      if ("vec3u" === a3) {
        const e5 = new Uint32Array(this.buffer, s3, 3);
        return void (t3 instanceof Me ? (e5[0] = t3.data[0], e5[1] = t3.data[1], e5[2] = t3.data[2]) : (e5[0] = t3[0], e5[1] = t3[1], e5[2] = t3[2]));
      }
      if ("vec4u" === a3) {
        const e5 = new Uint32Array(this.buffer, s3, 4);
        return void (t3 instanceof Me ? (e5[0] = t3.data[0], e5[1] = t3.data[1], e5[2] = t3.data[2], e5[3] = t3.data[3]) : (e5[0] = t3[0], e5[1] = t3[1], e5[2] = t3[2], e5[3] = t3[3]));
      }
      if ("vec2b" === a3) {
        const e5 = new Uint32Array(this.buffer, s3, 2);
        return void (t3 instanceof Me ? (e5[0] = t3.data[0], e5[1] = t3.data[1]) : (e5[0] = t3[0], e5[1] = t3[1]));
      }
      if ("vec3b" === a3) {
        const e5 = new Uint32Array(this.buffer, s3, 3);
        return void (t3 instanceof Me ? (e5[0] = t3.data[0], e5[1] = t3.data[1], e5[2] = t3.data[2]) : (e5[0] = t3[0], e5[1] = t3[1], e5[2] = t3[2]));
      }
      if ("vec4b" === a3) {
        const e5 = new Uint32Array(this.buffer, s3, 4);
        return void (t3 instanceof Me ? (e5[0] = t3.data[0], e5[1] = t3.data[1], e5[2] = t3.data[2], e5[3] = t3.data[3]) : (e5[0] = t3[0], e5[1] = t3[1], e5[2] = t3[2], e5[3] = t3[3]));
      }
      if ("mat2x2f" === a3 || "mat2x2h" === a3) {
        const e5 = new Float32Array(this.buffer, s3, 4);
        return void (t3 instanceof Ue ? (e5[0] = t3.data[0], e5[1] = t3.data[1], e5[2] = t3.data[2], e5[3] = t3.data[3]) : (e5[0] = t3[0], e5[1] = t3[1], e5[2] = t3[2], e5[3] = t3[3]));
      }
      if ("mat2x3f" === a3 || "mat2x3h" === a3) {
        const e5 = new Float32Array(this.buffer, s3, 6);
        return void (t3 instanceof Ue ? (e5[0] = t3.data[0], e5[1] = t3.data[1], e5[2] = t3.data[2], e5[3] = t3.data[3], e5[4] = t3.data[4], e5[5] = t3.data[5]) : (e5[0] = t3[0], e5[1] = t3[1], e5[2] = t3[2], e5[3] = t3[3], e5[4] = t3[4], e5[5] = t3[5]));
      }
      if ("mat2x4f" === a3 || "mat2x4h" === a3) {
        const e5 = new Float32Array(this.buffer, s3, 8);
        return void (t3 instanceof Ue ? (e5[0] = t3.data[0], e5[1] = t3.data[1], e5[2] = t3.data[2], e5[3] = t3.data[3], e5[4] = t3.data[4], e5[5] = t3.data[5], e5[6] = t3.data[6], e5[7] = t3.data[7]) : (e5[0] = t3[0], e5[1] = t3[1], e5[2] = t3[2], e5[3] = t3[3], e5[4] = t3[4], e5[5] = t3[5], e5[6] = t3[6], e5[7] = t3[7]));
      }
      if ("mat3x2f" === a3 || "mat3x2h" === a3) {
        const e5 = new Float32Array(this.buffer, s3, 6);
        return void (t3 instanceof Ue ? (e5[0] = t3.data[0], e5[1] = t3.data[1], e5[2] = t3.data[2], e5[3] = t3.data[3], e5[4] = t3.data[4], e5[5] = t3.data[5]) : (e5[0] = t3[0], e5[1] = t3[1], e5[2] = t3[2], e5[3] = t3[3], e5[4] = t3[4], e5[5] = t3[5]));
      }
      if ("mat3x3f" === a3 || "mat3x3h" === a3) {
        const e5 = new Float32Array(this.buffer, s3, 9);
        return void (t3 instanceof Ue ? (e5[0] = t3.data[0], e5[1] = t3.data[1], e5[2] = t3.data[2], e5[3] = t3.data[3], e5[4] = t3.data[4], e5[5] = t3.data[5], e5[6] = t3.data[6], e5[7] = t3.data[7], e5[8] = t3.data[8]) : (e5[0] = t3[0], e5[1] = t3[1], e5[2] = t3[2], e5[3] = t3[3], e5[4] = t3[4], e5[5] = t3[5], e5[6] = t3[6], e5[7] = t3[7], e5[8] = t3[8]));
      }
      if ("mat3x4f" === a3 || "mat3x4h" === a3) {
        const e5 = new Float32Array(this.buffer, s3, 12);
        return void (t3 instanceof Ue ? (e5[0] = t3.data[0], e5[1] = t3.data[1], e5[2] = t3.data[2], e5[3] = t3.data[3], e5[4] = t3.data[4], e5[5] = t3.data[5], e5[6] = t3.data[6], e5[7] = t3.data[7], e5[8] = t3.data[8], e5[9] = t3.data[9], e5[10] = t3.data[10], e5[11] = t3.data[11]) : (e5[0] = t3[0], e5[1] = t3[1], e5[2] = t3[2], e5[3] = t3[3], e5[4] = t3[4], e5[5] = t3[5], e5[6] = t3[6], e5[7] = t3[7], e5[8] = t3[8], e5[9] = t3[9], e5[10] = t3[10], e5[11] = t3[11]));
      }
      if ("mat4x2f" === a3 || "mat4x2h" === a3) {
        const e5 = new Float32Array(this.buffer, s3, 8);
        return void (t3 instanceof Ue ? (e5[0] = t3.data[0], e5[1] = t3.data[1], e5[2] = t3.data[2], e5[3] = t3.data[3], e5[4] = t3.data[4], e5[5] = t3.data[5], e5[6] = t3.data[6], e5[7] = t3.data[7]) : (e5[0] = t3[0], e5[1] = t3[1], e5[2] = t3[2], e5[3] = t3[3], e5[4] = t3[4], e5[5] = t3[5], e5[6] = t3[6], e5[7] = t3[7]));
      }
      if ("mat4x3f" === a3 || "mat4x3h" === a3) {
        const e5 = new Float32Array(this.buffer, s3, 12);
        return void (t3 instanceof Ue ? (e5[0] = t3.data[0], e5[1] = t3.data[1], e5[2] = t3.data[2], e5[3] = t3.data[3], e5[4] = t3.data[4], e5[5] = t3.data[5], e5[6] = t3.data[6], e5[7] = t3.data[7], e5[8] = t3.data[8], e5[9] = t3.data[9], e5[10] = t3.data[10], e5[11] = t3.data[11]) : (e5[0] = t3[0], e5[1] = t3[1], e5[2] = t3[2], e5[3] = t3[3], e5[4] = t3[4], e5[5] = t3[5], e5[6] = t3[6], e5[7] = t3[7], e5[8] = t3[8], e5[9] = t3[9], e5[10] = t3[10], e5[11] = t3[11]));
      }
      if ("mat4x4f" === a3 || "mat4x4h" === a3) {
        const e5 = new Float32Array(this.buffer, s3, 16);
        return void (t3 instanceof Ue ? (e5[0] = t3.data[0], e5[1] = t3.data[1], e5[2] = t3.data[2], e5[3] = t3.data[3], e5[4] = t3.data[4], e5[5] = t3.data[5], e5[6] = t3.data[6], e5[7] = t3.data[7], e5[8] = t3.data[8], e5[9] = t3.data[9], e5[10] = t3.data[10], e5[11] = t3.data[11], e5[12] = t3.data[12], e5[13] = t3.data[13], e5[14] = t3.data[14], e5[15] = t3.data[15]) : (e5[0] = t3[0], e5[1] = t3[1], e5[2] = t3[2], e5[3] = t3[3], e5[4] = t3[4], e5[5] = t3[5], e5[6] = t3[6], e5[7] = t3[7], e5[8] = t3[8], e5[9] = t3[9], e5[10] = t3[10], e5[11] = t3[11], e5[12] = t3[12], e5[13] = t3[13], e5[14] = t3[14], e5[15] = t3[15]));
      }
      if (t3 instanceof _Pe) {
        if (n3 === t3.typeInfo) {
          return void new Uint8Array(this.buffer, s3, t3.buffer.byteLength).set(new Uint8Array(t3.buffer));
        }
        console.error("SetDataValue: Type mismatch", a3, t3.typeInfo.getTypeName());
      } else console.error(`SetData: Unknown type ${a3}`);
    } else t3 instanceof Be && (new Int32Array(this.buffer, s3, 1)[0] = t3.value);
    else t3 instanceof Be && (new Uint32Array(this.buffer, s3, 1)[0] = t3.value);
    else t3 instanceof Be && (new Int32Array(this.buffer, s3, 1)[0] = t3.value);
    else t3 instanceof Be && (new Float32Array(this.buffer, s3, 1)[0] = t3.value);
  }
  getSubData(t3, r3, i4) {
    var o3, c3, l3;
    if (null === r3) return this;
    let u4 = this.offset, h3 = this.typeInfo;
    for (; r3; ) {
      if (r3 instanceof ve) {
        const e4 = r3.index, n3 = e4 instanceof fe ? t3.evalExpression(e4, i4) : e4;
        let a3 = 0;
        if (n3 instanceof Be ? a3 = n3.value : "number" == typeof n3 ? a3 = n3 : console.error("GetDataValue: Invalid index type", e4), h3 instanceof s) u4 += a3 * h3.stride, h3 = h3.format;
        else {
          const e5 = h3.getTypeName();
          "mat4x4" === e5 || "mat4x4f" === e5 || "mat4x4h" === e5 ? (u4 += 16 * a3, h3 = t3.getTypeInfo("vec4f")) : console.error(`getDataValue: Type ${h3.getTypeName()} is not an array`);
        }
      } else {
        if (!(r3 instanceof pe)) return console.error("GetDataValue: Unknown postfix type", r3), null;
        {
          const s3 = r3.value;
          if (h3 instanceof n) {
            let e4 = false;
            for (const t4 of h3.members) if (t4.name === s3) {
              u4 += t4.offset, h3 = t4.type, e4 = true;
              break;
            }
            if (!e4) return console.error(`GetDataValue: Member ${s3} not found`), null;
          } else if (h3 instanceof e) {
            const e4 = h3.getTypeName();
            if ("vec2f" === e4 || "vec3f" === e4 || "vec4f" === e4 || "vec2i" === e4 || "vec3i" === e4 || "vec4i" === e4 || "vec2u" === e4 || "vec3u" === e4 || "vec4u" === e4 || "vec2b" === e4 || "vec3b" === e4 || "vec4b" === e4 || "vec2h" === e4 || "vec3h" === e4 || "vec4h" === e4 || "vec2" === e4 || "vec3" === e4 || "vec4" === e4) {
              if (s3.length > 0 && s3.length < 5) {
                let n3 = "f";
                const r4 = [];
                for (let a3 = 0; a3 < s3.length; ++a3) {
                  const i5 = s3[a3].toLowerCase();
                  let o4 = 0;
                  if ("x" === i5 || "r" === i5) o4 = 0;
                  else if ("y" === i5 || "g" === i5) o4 = 1;
                  else if ("z" === i5 || "b" === i5) o4 = 2;
                  else {
                    if ("w" !== i5 && "a" !== i5) return console.error(`Unknown member ${s3}`), null;
                    o4 = 3;
                  }
                  if (1 === s3.length) {
                    if (e4.endsWith("f")) return this.buffer.byteLength < u4 + 4 * o4 + 4 ? (console.log("Insufficient buffer data"), null) : new Be(new Float32Array(this.buffer, u4 + 4 * o4, 1), t3.getTypeInfo("f32"), this);
                    if (e4.endsWith("h")) return new Be(new Float32Array(this.buffer, u4 + 4 * o4, 1), t3.getTypeInfo("f16"), this);
                    if (e4.endsWith("i")) return new Be(new Int32Array(this.buffer, u4 + 4 * o4, 1), t3.getTypeInfo("i32"), this);
                    if (e4.endsWith("b")) return new Be(new Int32Array(this.buffer, u4 + 4 * o4, 1), t3.getTypeInfo("bool"), this);
                    if (e4.endsWith("u")) return new Be(new Uint32Array(this.buffer, u4 + 4 * o4, 1), t3.getTypeInfo("i32"), this);
                  }
                  if ("vec2f" === e4) r4.push(new Float32Array(this.buffer, u4, 2)[o4]);
                  else if ("vec3f" === e4) {
                    if (u4 + 12 >= this.buffer.byteLength) return console.log("Insufficient buffer data"), null;
                    const e5 = new Float32Array(this.buffer, u4, 3);
                    r4.push(e5[o4]);
                  } else if ("vec4f" === e4) r4.push(new Float32Array(this.buffer, u4, 4)[o4]);
                  else if ("vec2i" === e4) n3 = "i", r4.push(new Int32Array(this.buffer, u4, 2)[o4]);
                  else if ("vec3i" === e4) n3 = "i", r4.push(new Int32Array(this.buffer, u4, 3)[o4]);
                  else if ("vec4i" === e4) n3 = "i", r4.push(new Int32Array(this.buffer, u4, 4)[o4]);
                  else if ("vec2u" === e4) {
                    n3 = "u";
                    const e5 = new Uint32Array(this.buffer, u4, 2);
                    r4.push(e5[o4]);
                  } else "vec3u" === e4 ? (n3 = "u", r4.push(new Uint32Array(this.buffer, u4, 3)[o4])) : "vec4u" === e4 && (n3 = "u", r4.push(new Uint32Array(this.buffer, u4, 4)[o4]));
                }
                return 2 === r4.length ? h3 = t3.getTypeInfo(`vec2${n3}`) : 3 === r4.length ? h3 = t3.getTypeInfo(`vec3${n3}`) : 4 === r4.length ? h3 = t3.getTypeInfo(`vec4${n3}`) : console.error(`GetDataValue: Invalid vector length ${r4.length}`), new Me(r4, h3, null);
              }
              return console.error(`GetDataValue: Unknown member ${s3}`), null;
            }
            return console.error(`GetDataValue: Type ${e4} is not a struct`), null;
          }
        }
      }
      r3 = r3.postfix;
    }
    const f4 = h3.getTypeName();
    return "f32" === f4 ? new Be(new Float32Array(this.buffer, u4, 1), h3, this) : "i32" === f4 ? new Be(new Int32Array(this.buffer, u4, 1), h3, this) : "u32" === f4 ? new Be(new Uint32Array(this.buffer, u4, 1), h3, this) : "vec2f" === f4 ? new Me(new Float32Array(this.buffer, u4, 2), h3, this) : "vec3f" === f4 ? new Me(new Float32Array(this.buffer, u4, 3), h3, this) : "vec4f" === f4 ? new Me(new Float32Array(this.buffer, u4, 4), h3, this) : "vec2i" === f4 ? new Me(new Int32Array(this.buffer, u4, 2), h3, this) : "vec3i" === f4 ? new Me(new Int32Array(this.buffer, u4, 3), h3, this) : "vec4i" === f4 ? new Me(new Int32Array(this.buffer, u4, 4), h3, this) : "vec2u" === f4 ? new Me(new Uint32Array(this.buffer, u4, 2), h3, this) : "vec3u" === f4 ? new Me(new Uint32Array(this.buffer, u4, 3), h3, this) : "vec4u" === f4 ? new Me(new Uint32Array(this.buffer, u4, 4), h3, this) : h3 instanceof a && "atomic" === h3.name ? "u32" === (null === (o3 = h3.format) || void 0 === o3 ? void 0 : o3.name) ? new Be(new Uint32Array(this.buffer, u4, 1)[0], h3.format, this) : "i32" === (null === (c3 = h3.format) || void 0 === c3 ? void 0 : c3.name) ? new Be(new Int32Array(this.buffer, u4, 1)[0], h3.format, this) : (console.error(`GetDataValue: Invalid atomic format ${null === (l3 = h3.format) || void 0 === l3 ? void 0 : l3.name}`), null) : new _Pe(this.buffer, h3, u4, this);
  }
  toString() {
    let e4 = "";
    if (this.typeInfo instanceof s) if ("f32" === this.typeInfo.format.name) {
      const t3 = new Float32Array(this.buffer, this.offset);
      e4 = `[${t3[0]}`;
      for (let n3 = 1; n3 < t3.length; ++n3) e4 += `, ${t3[n3]}`;
    } else if ("i32" === this.typeInfo.format.name) {
      const t3 = new Int32Array(this.buffer, this.offset);
      e4 = `[${t3[0]}`;
      for (let n3 = 1; n3 < t3.length; ++n3) e4 += `, ${t3[n3]}`;
    } else if ("u32" === this.typeInfo.format.name) {
      const t3 = new Uint32Array(this.buffer, this.offset);
      e4 = `[${t3[0]}`;
      for (let n3 = 1; n3 < t3.length; ++n3) e4 += `, ${t3[n3]}`;
    } else if ("vec2f" === this.typeInfo.format.name) {
      const t3 = new Float32Array(this.buffer, this.offset);
      e4 = `[${t3[0]}, ${t3[1]}]`;
      for (let n3 = 1; n3 < t3.length / 2; ++n3) e4 += `, [${t3[2 * n3]}, ${t3[2 * n3 + 1]}]`;
    } else if ("vec3f" === this.typeInfo.format.name) {
      const t3 = new Float32Array(this.buffer, this.offset);
      e4 = `[${t3[0]}, ${t3[1]}, ${t3[2]}]`;
      for (let n3 = 4; n3 < t3.length; n3 += 4) e4 += `, [${t3[n3]}, ${t3[n3 + 1]}, ${t3[n3 + 2]}]`;
    } else if ("vec4f" === this.typeInfo.format.name) {
      const t3 = new Float32Array(this.buffer, this.offset);
      e4 = `[${t3[0]}, ${t3[1]}, ${t3[2]}, ${t3[3]}]`;
      for (let n3 = 4; n3 < t3.length; n3 += 4) e4 += `, [${t3[n3]}, ${t3[n3 + 1]}, ${t3[n3 + 2]}, ${t3[n3 + 3]}]`;
    } else e4 = "[...]";
    else this.typeInfo instanceof n ? e4 += "{...}" : e4 = "[...]";
    return e4;
  }
};
var We = class _We extends Ne {
  constructor(e4, t3, n3, s3) {
    super(t3, null), this.data = e4, this.descriptor = n3, this.view = s3;
  }
  clone() {
    return new _We(this.data, this.typeInfo, this.descriptor, this.view);
  }
  get width() {
    var e4, t3;
    const n3 = this.descriptor.size;
    return n3 instanceof Array && n3.length > 0 ? null !== (e4 = n3[0]) && void 0 !== e4 ? e4 : 0 : n3 instanceof Object && null !== (t3 = n3.width) && void 0 !== t3 ? t3 : 0;
  }
  get height() {
    var e4, t3;
    const n3 = this.descriptor.size;
    return n3 instanceof Array && n3.length > 1 ? null !== (e4 = n3[1]) && void 0 !== e4 ? e4 : 0 : n3 instanceof Object && null !== (t3 = n3.height) && void 0 !== t3 ? t3 : 0;
  }
  get depthOrArrayLayers() {
    var e4, t3;
    const n3 = this.descriptor.size;
    return n3 instanceof Array && n3.length > 2 ? null !== (e4 = n3[2]) && void 0 !== e4 ? e4 : 0 : n3 instanceof Object && null !== (t3 = n3.depthOrArrayLayers) && void 0 !== t3 ? t3 : 0;
  }
  get format() {
    var e4;
    return this.descriptor && null !== (e4 = this.descriptor.format) && void 0 !== e4 ? e4 : "rgba8unorm";
  }
  get sampleCount() {
    var e4;
    return this.descriptor && null !== (e4 = this.descriptor.sampleCount) && void 0 !== e4 ? e4 : 1;
  }
  get mipLevelCount() {
    var e4;
    return this.descriptor && null !== (e4 = this.descriptor.mipLevelCount) && void 0 !== e4 ? e4 : 1;
  }
  get dimension() {
    var e4;
    return this.descriptor && null !== (e4 = this.descriptor.dimension) && void 0 !== e4 ? e4 : "2d";
  }
  getMipLevelSize(e4) {
    if (e4 >= this.mipLevelCount) return [0, 0, 0];
    const t3 = [this.width, this.height, this.depthOrArrayLayers];
    for (let n3 = 0; n3 < t3.length; ++n3) t3[n3] = Math.max(1, t3[n3] >> e4);
    return t3;
  }
  get texelByteSize() {
    const e4 = this.format, t3 = S[e4];
    return t3 ? t3.isDepthStencil ? 4 : t3.bytesPerBlock : 0;
  }
  get bytesPerRow() {
    return this.width * this.texelByteSize;
  }
  get isDepthStencil() {
    const e4 = this.format, t3 = S[e4];
    return !!t3 && t3.isDepthStencil;
  }
  getGpuSize() {
    const e4 = this.format, t3 = S[e4], n3 = this.width;
    if (!e4 || n3 <= 0 || !t3) return -1;
    const s3 = this.height, r3 = this.depthOrArrayLayers, a3 = this.dimension;
    return n3 / t3.blockWidth * ("1d" === a3 ? 1 : s3 / t3.blockHeight) * t3.bytesPerBlock * r3;
  }
  getPixel(e4, t3, n3 = 0, s3 = 0) {
    const r3 = this.texelByteSize, a3 = this.bytesPerRow, i4 = this.height, o3 = this.data[s3];
    return k(new Uint8Array(o3), e4, t3, n3, s3, i4, a3, r3, this.format);
  }
  setPixel(e4, t3, n3, s3, r3) {
    const a3 = this.texelByteSize, i4 = this.bytesPerRow, o3 = this.height, c3 = this.data[s3];
    !(function(e5, t4, n4, s4, r4, a4, i5, o4, c4, l3) {
      const u4 = s4 * (i5 >>= r4) * (a4 >>= r4) + n4 * i5 + t4 * o4;
      switch (c4) {
        case "r8unorm":
          return void T(e5, u4, "8unorm", 1, l3);
        case "r8snorm":
          return void T(e5, u4, "8snorm", 1, l3);
        case "r8uint":
          return void T(e5, u4, "8uint", 1, l3);
        case "r8sint":
          return void T(e5, u4, "8sint", 1, l3);
        case "rg8unorm":
          return void T(e5, u4, "8unorm", 2, l3);
        case "rg8snorm":
          return void T(e5, u4, "8snorm", 2, l3);
        case "rg8uint":
          return void T(e5, u4, "8uint", 2, l3);
        case "rg8sint":
          return void T(e5, u4, "8sint", 2, l3);
        case "rgba8unorm-srgb":
        case "rgba8unorm":
        case "bgra8unorm-srgb":
        case "bgra8unorm":
          return void T(e5, u4, "8unorm", 4, l3);
        case "rgba8snorm":
          return void T(e5, u4, "8snorm", 4, l3);
        case "rgba8uint":
          return void T(e5, u4, "8uint", 4, l3);
        case "rgba8sint":
          return void T(e5, u4, "8sint", 4, l3);
        case "r16uint":
          return void T(e5, u4, "16uint", 1, l3);
        case "r16sint":
          return void T(e5, u4, "16sint", 1, l3);
        case "r16float":
          return void T(e5, u4, "16float", 1, l3);
        case "rg16uint":
          return void T(e5, u4, "16uint", 2, l3);
        case "rg16sint":
          return void T(e5, u4, "16sint", 2, l3);
        case "rg16float":
          return void T(e5, u4, "16float", 2, l3);
        case "rgba16uint":
          return void T(e5, u4, "16uint", 4, l3);
        case "rgba16sint":
          return void T(e5, u4, "16sint", 4, l3);
        case "rgba16float":
          return void T(e5, u4, "16float", 4, l3);
        case "r32uint":
          return void T(e5, u4, "32uint", 1, l3);
        case "r32sint":
          return void T(e5, u4, "32sint", 1, l3);
        case "depth16unorm":
        case "depth24plus":
        case "depth24plus-stencil8":
        case "depth32float":
        case "depth32float-stencil8":
        case "r32float":
          return void T(e5, u4, "32float", 1, l3);
        case "rg32uint":
          return void T(e5, u4, "32uint", 2, l3);
        case "rg32sint":
          return void T(e5, u4, "32sint", 2, l3);
        case "rg32float":
          return void T(e5, u4, "32float", 2, l3);
        case "rgba32uint":
          return void T(e5, u4, "32uint", 4, l3);
        case "rgba32sint":
          return void T(e5, u4, "32sint", 4, l3);
        case "rgba32float":
          return void T(e5, u4, "32float", 4, l3);
        case "rg11b10ufloat":
          console.error("TODO: rg11b10ufloat not supported for writing");
      }
    })(new Uint8Array(c3), e4, t3, n3, s3, o3, i4, a3, this.format, r3);
  }
};
((e4) => {
  e4[e4.token = 0] = "token", e4[e4.keyword = 1] = "keyword", e4[e4.reserved = 2] = "reserved";
})(z || (z = {}));
var qe = class {
  constructor(e4, t3, n3) {
    this.name = e4, this.type = t3, this.rule = n3;
  }
  toString() {
    return this.name;
  }
};
var He = class {
};
H = He, He.none = new qe("", z.reserved, ""), He.eof = new qe("EOF", z.token, ""), He.reserved = { asm: new qe("asm", z.reserved, "asm"), bf16: new qe("bf16", z.reserved, "bf16"), do: new qe("do", z.reserved, "do"), enum: new qe("enum", z.reserved, "enum"), f16: new qe("f16", z.reserved, "f16"), f64: new qe("f64", z.reserved, "f64"), handle: new qe("handle", z.reserved, "handle"), i8: new qe("i8", z.reserved, "i8"), i16: new qe("i16", z.reserved, "i16"), i64: new qe("i64", z.reserved, "i64"), mat: new qe("mat", z.reserved, "mat"), premerge: new qe("premerge", z.reserved, "premerge"), regardless: new qe("regardless", z.reserved, "regardless"), typedef: new qe("typedef", z.reserved, "typedef"), u8: new qe("u8", z.reserved, "u8"), u16: new qe("u16", z.reserved, "u16"), u64: new qe("u64", z.reserved, "u64"), unless: new qe("unless", z.reserved, "unless"), using: new qe("using", z.reserved, "using"), vec: new qe("vec", z.reserved, "vec"), void: new qe("void", z.reserved, "void") }, He.keywords = { array: new qe("array", z.keyword, "array"), atomic: new qe("atomic", z.keyword, "atomic"), bool: new qe("bool", z.keyword, "bool"), f32: new qe("f32", z.keyword, "f32"), i32: new qe("i32", z.keyword, "i32"), mat2x2: new qe("mat2x2", z.keyword, "mat2x2"), mat2x3: new qe("mat2x3", z.keyword, "mat2x3"), mat2x4: new qe("mat2x4", z.keyword, "mat2x4"), mat3x2: new qe("mat3x2", z.keyword, "mat3x2"), mat3x3: new qe("mat3x3", z.keyword, "mat3x3"), mat3x4: new qe("mat3x4", z.keyword, "mat3x4"), mat4x2: new qe("mat4x2", z.keyword, "mat4x2"), mat4x3: new qe("mat4x3", z.keyword, "mat4x3"), mat4x4: new qe("mat4x4", z.keyword, "mat4x4"), ptr: new qe("ptr", z.keyword, "ptr"), sampler: new qe("sampler", z.keyword, "sampler"), sampler_comparison: new qe("sampler_comparison", z.keyword, "sampler_comparison"), struct: new qe("struct", z.keyword, "struct"), texture_1d: new qe("texture_1d", z.keyword, "texture_1d"), texture_2d: new qe("texture_2d", z.keyword, "texture_2d"), texture_2d_array: new qe("texture_2d_array", z.keyword, "texture_2d_array"), texture_3d: new qe("texture_3d", z.keyword, "texture_3d"), texture_cube: new qe("texture_cube", z.keyword, "texture_cube"), texture_cube_array: new qe("texture_cube_array", z.keyword, "texture_cube_array"), texture_multisampled_2d: new qe("texture_multisampled_2d", z.keyword, "texture_multisampled_2d"), texture_storage_1d: new qe("texture_storage_1d", z.keyword, "texture_storage_1d"), texture_storage_2d: new qe("texture_storage_2d", z.keyword, "texture_storage_2d"), texture_storage_2d_array: new qe("texture_storage_2d_array", z.keyword, "texture_storage_2d_array"), texture_storage_3d: new qe("texture_storage_3d", z.keyword, "texture_storage_3d"), texture_depth_2d: new qe("texture_depth_2d", z.keyword, "texture_depth_2d"), texture_depth_2d_array: new qe("texture_depth_2d_array", z.keyword, "texture_depth_2d_array"), texture_depth_cube: new qe("texture_depth_cube", z.keyword, "texture_depth_cube"), texture_depth_cube_array: new qe("texture_depth_cube_array", z.keyword, "texture_depth_cube_array"), texture_depth_multisampled_2d: new qe("texture_depth_multisampled_2d", z.keyword, "texture_depth_multisampled_2d"), texture_external: new qe("texture_external", z.keyword, "texture_external"), u32: new qe("u32", z.keyword, "u32"), vec2: new qe("vec2", z.keyword, "vec2"), vec3: new qe("vec3", z.keyword, "vec3"), vec4: new qe("vec4", z.keyword, "vec4"), bitcast: new qe("bitcast", z.keyword, "bitcast"), block: new qe("block", z.keyword, "block"), break: new qe("break", z.keyword, "break"), case: new qe("case", z.keyword, "case"), continue: new qe("continue", z.keyword, "continue"), continuing: new qe("continuing", z.keyword, "continuing"), default: new qe("default", z.keyword, "default"), diagnostic: new qe("diagnostic", z.keyword, "diagnostic"), discard: new qe("discard", z.keyword, "discard"), else: new qe("else", z.keyword, "else"), enable: new qe("enable", z.keyword, "enable"), fallthrough: new qe("fallthrough", z.keyword, "fallthrough"), false: new qe("false", z.keyword, "false"), fn: new qe("fn", z.keyword, "fn"), for: new qe("for", z.keyword, "for"), function: new qe("function", z.keyword, "function"), if: new qe("if", z.keyword, "if"), let: new qe("let", z.keyword, "let"), const: new qe("const", z.keyword, "const"), loop: new qe("loop", z.keyword, "loop"), while: new qe("while", z.keyword, "while"), private: new qe("private", z.keyword, "private"), read: new qe("read", z.keyword, "read"), read_write: new qe("read_write", z.keyword, "read_write"), return: new qe("return", z.keyword, "return"), requires: new qe("requires", z.keyword, "requires"), storage: new qe("storage", z.keyword, "storage"), switch: new qe("switch", z.keyword, "switch"), true: new qe("true", z.keyword, "true"), alias: new qe("alias", z.keyword, "alias"), type: new qe("type", z.keyword, "type"), uniform: new qe("uniform", z.keyword, "uniform"), var: new qe("var", z.keyword, "var"), override: new qe("override", z.keyword, "override"), workgroup: new qe("workgroup", z.keyword, "workgroup"), write: new qe("write", z.keyword, "write"), r8unorm: new qe("r8unorm", z.keyword, "r8unorm"), r8snorm: new qe("r8snorm", z.keyword, "r8snorm"), r8uint: new qe("r8uint", z.keyword, "r8uint"), r8sint: new qe("r8sint", z.keyword, "r8sint"), r16uint: new qe("r16uint", z.keyword, "r16uint"), r16sint: new qe("r16sint", z.keyword, "r16sint"), r16float: new qe("r16float", z.keyword, "r16float"), rg8unorm: new qe("rg8unorm", z.keyword, "rg8unorm"), rg8snorm: new qe("rg8snorm", z.keyword, "rg8snorm"), rg8uint: new qe("rg8uint", z.keyword, "rg8uint"), rg8sint: new qe("rg8sint", z.keyword, "rg8sint"), r32uint: new qe("r32uint", z.keyword, "r32uint"), r32sint: new qe("r32sint", z.keyword, "r32sint"), r32float: new qe("r32float", z.keyword, "r32float"), rg16uint: new qe("rg16uint", z.keyword, "rg16uint"), rg16sint: new qe("rg16sint", z.keyword, "rg16sint"), rg16float: new qe("rg16float", z.keyword, "rg16float"), rgba8unorm: new qe("rgba8unorm", z.keyword, "rgba8unorm"), rgba8unorm_srgb: new qe("rgba8unorm_srgb", z.keyword, "rgba8unorm_srgb"), rgba8snorm: new qe("rgba8snorm", z.keyword, "rgba8snorm"), rgba8uint: new qe("rgba8uint", z.keyword, "rgba8uint"), rgba8sint: new qe("rgba8sint", z.keyword, "rgba8sint"), bgra8unorm: new qe("bgra8unorm", z.keyword, "bgra8unorm"), bgra8unorm_srgb: new qe("bgra8unorm_srgb", z.keyword, "bgra8unorm_srgb"), rgb10a2unorm: new qe("rgb10a2unorm", z.keyword, "rgb10a2unorm"), rg11b10float: new qe("rg11b10float", z.keyword, "rg11b10float"), rg32uint: new qe("rg32uint", z.keyword, "rg32uint"), rg32sint: new qe("rg32sint", z.keyword, "rg32sint"), rg32float: new qe("rg32float", z.keyword, "rg32float"), rgba16uint: new qe("rgba16uint", z.keyword, "rgba16uint"), rgba16sint: new qe("rgba16sint", z.keyword, "rgba16sint"), rgba16float: new qe("rgba16float", z.keyword, "rgba16float"), rgba32uint: new qe("rgba32uint", z.keyword, "rgba32uint"), rgba32sint: new qe("rgba32sint", z.keyword, "rgba32sint"), rgba32float: new qe("rgba32float", z.keyword, "rgba32float"), static_assert: new qe("static_assert", z.keyword, "static_assert") }, He.tokens = { decimal_float_literal: new qe("decimal_float_literal", z.token, /((-?[0-9]*\.[0-9]+|-?[0-9]+\.[0-9]*)((e|E)(\+|-)?[0-9]+)?[fh]?)|(-?[0-9]+(e|E)(\+|-)?[0-9]+[fh]?)|(-?[0-9]+[fh])/), hex_float_literal: new qe("hex_float_literal", z.token, /-?0x((([0-9a-fA-F]*\.[0-9a-fA-F]+|[0-9a-fA-F]+\.[0-9a-fA-F]*)((p|P)(\+|-)?[0-9]+[fh]?)?)|([0-9a-fA-F]+(p|P)(\+|-)?[0-9]+[fh]?))/), int_literal: new qe("int_literal", z.token, /-?0x[0-9a-fA-F]+|0i?|-?[1-9][0-9]*i?/), uint_literal: new qe("uint_literal", z.token, /0x[0-9a-fA-F]+u|0u|[1-9][0-9]*u/), name: new qe("name", z.token, /([_\p{XID_Start}][\p{XID_Continue}]+)|([\p{XID_Start}])/u), ident: new qe("ident", z.token, /[_a-zA-Z][0-9a-zA-Z_]*/), and: new qe("and", z.token, "&"), and_and: new qe("and_and", z.token, "&&"), arrow: new qe("arrow ", z.token, "->"), attr: new qe("attr", z.token, "@"), forward_slash: new qe("forward_slash", z.token, "/"), bang: new qe("bang", z.token, "!"), bracket_left: new qe("bracket_left", z.token, "["), bracket_right: new qe("bracket_right", z.token, "]"), brace_left: new qe("brace_left", z.token, "{"), brace_right: new qe("brace_right", z.token, "}"), colon: new qe("colon", z.token, ":"), comma: new qe("comma", z.token, ","), equal: new qe("equal", z.token, "="), equal_equal: new qe("equal_equal", z.token, "=="), not_equal: new qe("not_equal", z.token, "!="), greater_than: new qe("greater_than", z.token, ">"), greater_than_equal: new qe("greater_than_equal", z.token, ">="), shift_right: new qe("shift_right", z.token, ">>"), less_than: new qe("less_than", z.token, "<"), less_than_equal: new qe("less_than_equal", z.token, "<="), shift_left: new qe("shift_left", z.token, "<<"), modulo: new qe("modulo", z.token, "%"), minus: new qe("minus", z.token, "-"), minus_minus: new qe("minus_minus", z.token, "--"), period: new qe("period", z.token, "."), plus: new qe("plus", z.token, "+"), plus_plus: new qe("plus_plus", z.token, "++"), or: new qe("or", z.token, "|"), or_or: new qe("or_or", z.token, "||"), paren_left: new qe("paren_left", z.token, "("), paren_right: new qe("paren_right", z.token, ")"), semicolon: new qe("semicolon", z.token, ";"), star: new qe("star", z.token, "*"), tilde: new qe("tilde", z.token, "~"), underscore: new qe("underscore", z.token, "_"), xor: new qe("xor", z.token, "^"), plus_equal: new qe("plus_equal", z.token, "+="), minus_equal: new qe("minus_equal", z.token, "-="), times_equal: new qe("times_equal", z.token, "*="), division_equal: new qe("division_equal", z.token, "/="), modulo_equal: new qe("modulo_equal", z.token, "%="), and_equal: new qe("and_equal", z.token, "&="), or_equal: new qe("or_equal", z.token, "|="), xor_equal: new qe("xor_equal", z.token, "^="), shift_right_equal: new qe("shift_right_equal", z.token, ">>="), shift_left_equal: new qe("shift_left_equal", z.token, "<<=") }, He.simpleTokens = { "@": H.tokens.attr, "{": H.tokens.brace_left, "}": H.tokens.brace_right, ":": H.tokens.colon, ",": H.tokens.comma, "(": H.tokens.paren_left, ")": H.tokens.paren_right, ";": H.tokens.semicolon }, He.literalTokens = { "&": H.tokens.and, "&&": H.tokens.and_and, "->": H.tokens.arrow, "/": H.tokens.forward_slash, "!": H.tokens.bang, "[": H.tokens.bracket_left, "]": H.tokens.bracket_right, "=": H.tokens.equal, "==": H.tokens.equal_equal, "!=": H.tokens.not_equal, ">": H.tokens.greater_than, ">=": H.tokens.greater_than_equal, ">>": H.tokens.shift_right, "<": H.tokens.less_than, "<=": H.tokens.less_than_equal, "<<": H.tokens.shift_left, "%": H.tokens.modulo, "-": H.tokens.minus, "--": H.tokens.minus_minus, ".": H.tokens.period, "+": H.tokens.plus, "++": H.tokens.plus_plus, "|": H.tokens.or, "||": H.tokens.or_or, "*": H.tokens.star, "~": H.tokens.tilde, _: H.tokens.underscore, "^": H.tokens.xor, "+=": H.tokens.plus_equal, "-=": H.tokens.minus_equal, "*=": H.tokens.times_equal, "/=": H.tokens.division_equal, "%=": H.tokens.modulo_equal, "&=": H.tokens.and_equal, "|=": H.tokens.or_equal, "^=": H.tokens.xor_equal, ">>=": H.tokens.shift_right_equal, "<<=": H.tokens.shift_left_equal }, He.regexTokens = { decimal_float_literal: H.tokens.decimal_float_literal, hex_float_literal: H.tokens.hex_float_literal, int_literal: H.tokens.int_literal, uint_literal: H.tokens.uint_literal, ident: H.tokens.ident }, He.storage_class = [H.keywords.function, H.keywords.private, H.keywords.workgroup, H.keywords.uniform, H.keywords.storage], He.access_mode = [H.keywords.read, H.keywords.write, H.keywords.read_write], He.sampler_type = [H.keywords.sampler, H.keywords.sampler_comparison], He.sampled_texture_type = [H.keywords.texture_1d, H.keywords.texture_2d, H.keywords.texture_2d_array, H.keywords.texture_3d, H.keywords.texture_cube, H.keywords.texture_cube_array], He.multisampled_texture_type = [H.keywords.texture_multisampled_2d], He.storage_texture_type = [H.keywords.texture_storage_1d, H.keywords.texture_storage_2d, H.keywords.texture_storage_2d_array, H.keywords.texture_storage_3d], He.depth_texture_type = [H.keywords.texture_depth_2d, H.keywords.texture_depth_2d_array, H.keywords.texture_depth_cube, H.keywords.texture_depth_cube_array, H.keywords.texture_depth_multisampled_2d], He.texture_external_type = [H.keywords.texture_external], He.any_texture_type = [...H.sampled_texture_type, ...H.multisampled_texture_type, ...H.storage_texture_type, ...H.depth_texture_type, ...H.texture_external_type], He.texel_format = [H.keywords.r8unorm, H.keywords.r8snorm, H.keywords.r8uint, H.keywords.r8sint, H.keywords.r16uint, H.keywords.r16sint, H.keywords.r16float, H.keywords.rg8unorm, H.keywords.rg8snorm, H.keywords.rg8uint, H.keywords.rg8sint, H.keywords.r32uint, H.keywords.r32sint, H.keywords.r32float, H.keywords.rg16uint, H.keywords.rg16sint, H.keywords.rg16float, H.keywords.rgba8unorm, H.keywords.rgba8unorm_srgb, H.keywords.rgba8snorm, H.keywords.rgba8uint, H.keywords.rgba8sint, H.keywords.bgra8unorm, H.keywords.bgra8unorm_srgb, H.keywords.rgb10a2unorm, H.keywords.rg11b10float, H.keywords.rg32uint, H.keywords.rg32sint, H.keywords.rg32float, H.keywords.rgba16uint, H.keywords.rgba16sint, H.keywords.rgba16float, H.keywords.rgba32uint, H.keywords.rgba32sint, H.keywords.rgba32float], He.const_literal = [H.tokens.int_literal, H.tokens.uint_literal, H.tokens.decimal_float_literal, H.tokens.hex_float_literal, H.keywords.true, H.keywords.false], He.literal_or_ident = [H.tokens.ident, H.tokens.int_literal, H.tokens.uint_literal, H.tokens.decimal_float_literal, H.tokens.hex_float_literal, H.tokens.name], He.element_count_expression = [H.tokens.int_literal, H.tokens.uint_literal, H.tokens.ident], He.template_types = [H.keywords.vec2, H.keywords.vec3, H.keywords.vec4, H.keywords.mat2x2, H.keywords.mat2x3, H.keywords.mat2x4, H.keywords.mat3x2, H.keywords.mat3x3, H.keywords.mat3x4, H.keywords.mat4x2, H.keywords.mat4x3, H.keywords.mat4x4, H.keywords.atomic, H.keywords.bitcast, ...H.any_texture_type], He.attribute_name = [H.tokens.ident, H.keywords.block, H.keywords.diagnostic], He.assignment_operators = [H.tokens.equal, H.tokens.plus_equal, H.tokens.minus_equal, H.tokens.times_equal, H.tokens.division_equal, H.tokens.modulo_equal, H.tokens.and_equal, H.tokens.or_equal, H.tokens.xor_equal, H.tokens.shift_right_equal, H.tokens.shift_left_equal], He.increment_operators = [H.tokens.plus_plus, H.tokens.minus_minus];
var ze = class {
  constructor(e4, t3, n3, s3, r3) {
    this.type = e4, this.lexeme = t3, this.line = n3, this.start = s3, this.end = r3;
  }
  toString() {
    return this.lexeme;
  }
  isTemplateType() {
    return -1 != He.template_types.indexOf(this.type);
  }
  isArrayType() {
    return this.type == He.keywords.array;
  }
  isArrayOrTemplateType() {
    return this.isArrayType() || this.isTemplateType();
  }
};
var Re = class {
  constructor(e4) {
    this._tokens = [], this._start = 0, this._current = 0, this._line = 1, this._source = null != e4 ? e4 : "";
  }
  scanTokens() {
    for (; !this._isAtEnd(); ) if (this._start = this._current, !this.scanToken()) throw `Invalid syntax at line ${this._line}`;
    return this._tokens.push(new ze(He.eof, "", this._line, this._current, this._current)), this._tokens;
  }
  scanToken() {
    let e4 = this._advance();
    if ("\n" == e4) return this._line++, true;
    if (this._isWhitespace(e4)) return true;
    if ("/" == e4) {
      if ("/" == this._peekAhead()) {
        for (; "\n" != e4; ) {
          if (this._isAtEnd()) return true;
          e4 = this._advance();
        }
        return this._line++, true;
      }
      if ("*" == this._peekAhead()) {
        this._advance();
        let t4 = 1;
        for (; t4 > 0; ) {
          if (this._isAtEnd()) return true;
          if (e4 = this._advance(), "\n" == e4) this._line++;
          else if ("*" == e4) {
            if ("/" == this._peekAhead() && (this._advance(), t4--, 0 == t4)) return true;
          } else "/" == e4 && "*" == this._peekAhead() && (this._advance(), t4++);
        }
        return true;
      }
    }
    const t3 = He.simpleTokens[e4];
    if (t3) return this._addToken(t3), true;
    let n3 = He.none;
    const s3 = this._isAlpha(e4), r3 = "_" === e4;
    if (this._isAlphaNumeric(e4)) {
      let t4 = this._peekAhead();
      for (; this._isAlphaNumeric(t4); ) e4 += this._advance(), t4 = this._peekAhead();
    }
    if (s3) {
      const t4 = He.keywords[e4];
      if (t4) return this._addToken(t4), true;
    }
    if (s3 || r3) return this._addToken(He.tokens.ident), true;
    for (; ; ) {
      let t4 = this._findType(e4);
      const s4 = this._peekAhead();
      if ("-" == e4 && this._tokens.length > 0) {
        if ("=" == s4) return this._current++, e4 += s4, this._addToken(He.tokens.minus_equal), true;
        if ("-" == s4) return this._current++, e4 += s4, this._addToken(He.tokens.minus_minus), true;
        const n4 = this._tokens.length - 1;
        if ((-1 != He.literal_or_ident.indexOf(this._tokens[n4].type) || this._tokens[n4].type == He.tokens.paren_right) && ">" != s4) return this._addToken(t4), true;
      }
      if (">" == e4 && (">" == s4 || "=" == s4)) {
        let e5 = false, n4 = this._tokens.length - 1;
        for (let t5 = 0; t5 < 5 && n4 >= 0 && -1 === He.assignment_operators.indexOf(this._tokens[n4].type); ++t5, --n4) if (this._tokens[n4].type === He.tokens.less_than) {
          n4 > 0 && this._tokens[n4 - 1].isArrayOrTemplateType() && (e5 = true);
          break;
        }
        if (e5) return this._addToken(t4), true;
      }
      if (t4 === He.none) {
        let s5 = e4, r4 = 0;
        const a3 = 2;
        for (let e5 = 0; e5 < a3; ++e5) if (s5 += this._peekAhead(e5), t4 = this._findType(s5), t4 !== He.none) {
          r4 = e5;
          break;
        }
        if (t4 === He.none) return n3 !== He.none && (this._current--, this._addToken(n3), true);
        e4 = s5, this._current += r4 + 1;
      }
      if (n3 = t4, this._isAtEnd()) break;
      e4 += this._advance();
    }
    return n3 !== He.none && (this._addToken(n3), true);
  }
  _findType(e4) {
    for (const t4 in He.regexTokens) {
      const n3 = He.regexTokens[t4];
      if (this._match(e4, n3.rule)) return n3;
    }
    const t3 = He.literalTokens[e4];
    return t3 || He.none;
  }
  _match(e4, t3) {
    const n3 = t3.exec(e4);
    return n3 && 0 == n3.index && n3[0] == e4;
  }
  _isAtEnd() {
    return this._current >= this._source.length;
  }
  _isAlpha(e4) {
    return !this._isNumeric(e4) && !this._isWhitespace(e4) && "_" !== e4 && "." !== e4 && "(" !== e4 && ")" !== e4 && "[" !== e4 && "]" !== e4 && "{" !== e4 && "}" !== e4 && "," !== e4 && ";" !== e4 && ":" !== e4 && "=" !== e4 && "!" !== e4 && "<" !== e4 && ">" !== e4 && "+" !== e4 && "-" !== e4 && "*" !== e4 && "/" !== e4 && "%" !== e4 && "&" !== e4 && "|" !== e4 && "^" !== e4 && "~" !== e4 && "@" !== e4 && "#" !== e4 && "?" !== e4 && "'" !== e4 && "`" !== e4 && '"' !== e4 && "\\" !== e4 && "\n" !== e4 && "\r" !== e4 && "	" !== e4 && "\0" !== e4;
  }
  _isNumeric(e4) {
    return e4 >= "0" && e4 <= "9";
  }
  _isAlphaNumeric(e4) {
    return this._isAlpha(e4) || this._isNumeric(e4) || "_" === e4;
  }
  _isWhitespace(e4) {
    return " " == e4 || "	" == e4 || "\r" == e4;
  }
  _advance(e4 = 0) {
    let t3 = this._source[this._current];
    return e4 = e4 || 0, e4++, this._current += e4, t3;
  }
  _peekAhead(e4 = 0) {
    return e4 = e4 || 0, this._current + e4 >= this._source.length ? "\0" : this._source[this._current + e4];
  }
  _addToken(e4) {
    const t3 = this._source.substring(this._start, this._current);
    this._tokens.push(new ze(e4, t3, this._line, this._start, this._current));
  }
};
function Ge(e4) {
  return Array.isArray(e4) || (null == e4 ? void 0 : e4.buffer) instanceof ArrayBuffer;
}
var Xe = new Float32Array(1);
var je = new Uint32Array(Xe.buffer);
var Ze = new Uint32Array(Xe.buffer);
var Qe = new Int32Array(1);
var Ye = new Float32Array(Qe.buffer);
var Ke = new Uint32Array(Qe.buffer);
var Je = new Uint32Array(1);
var et = new Float32Array(Je.buffer);
var tt = new Int32Array(Je.buffer);
function nt(e4, t3, n3) {
  if (t3 === n3) return e4;
  if ("f32" === t3) {
    if ("i32" === n3 || "x32" === n3) return Xe[0] = e4, je[0];
    if ("u32" === n3) return Xe[0] = e4, Ze[0];
  } else if ("i32" === t3 || "x32" === t3) {
    if ("f32" === n3) return Qe[0] = e4, Ye[0];
    if ("u32" === n3) return Qe[0] = e4, Ke[0];
  } else if ("u32" === t3) {
    if ("f32" === n3) return Je[0] = e4, et[0];
    if ("i32" === n3 || "x32" === n3) return Je[0] = e4, tt[0];
  }
  return console.error(`Unsupported cast from ${t3} to ${n3}`), e4;
}
var st = class {
  constructor(e4) {
    this.resources = null, this.inUse = false, this.info = null, this.node = e4;
  }
};
var rt = class {
  constructor(e4, t3) {
    this.align = e4, this.size = t3;
  }
};
var at = class _at {
  constructor() {
    this.uniforms = [], this.storage = [], this.textures = [], this.samplers = [], this.aliases = [], this.overrides = [], this.structs = [], this.entry = new d(), this.functions = [], this._types = /* @__PURE__ */ new Map(), this._functions = /* @__PURE__ */ new Map();
  }
  _isStorageTexture(e4) {
    return "texture_storage_1d" == e4.name || "texture_storage_2d" == e4.name || "texture_storage_2d_array" == e4.name || "texture_storage_3d" == e4.name;
  }
  updateAST(e4) {
    for (const t3 of e4) t3 instanceof D && this._functions.set(t3.name, new st(t3));
    for (const t3 of e4) if (t3 instanceof oe) {
      const e5 = this.getTypeInfo(t3, null);
      e5 instanceof n && this.structs.push(e5);
    }
    for (const t3 of e4) if (t3 instanceof te) this.aliases.push(this._getAliasInfo(t3));
    else {
      if (t3 instanceof M) {
        const e5 = t3, n3 = this._getAttributeNum(e5.attributes, "id", 0), s3 = null != e5.type ? this.getTypeInfo(e5.type, e5.attributes) : null;
        this.overrides.push(new h(e5.name, s3, e5.attributes, n3));
        continue;
      }
      if (this._isUniformVar(t3)) {
        const e5 = t3, n3 = this._getAttributeNum(e5.attributes, "group", 0), s3 = this._getAttributeNum(e5.attributes, "binding", 0), r3 = this.getTypeInfo(e5.type, e5.attributes), a3 = new o(e5.name, r3, n3, s3, e5.attributes, i.Uniform, e5.access);
        a3.access || (a3.access = "read"), this.uniforms.push(a3);
        continue;
      }
      if (this._isStorageVar(t3)) {
        const e5 = t3, n3 = this._getAttributeNum(e5.attributes, "group", 0), s3 = this._getAttributeNum(e5.attributes, "binding", 0), r3 = this.getTypeInfo(e5.type, e5.attributes), a3 = this._isStorageTexture(r3), c3 = new o(e5.name, r3, n3, s3, e5.attributes, a3 ? i.StorageTexture : i.Storage, e5.access);
        c3.access || (c3.access = "read"), this.storage.push(c3);
        continue;
      }
      if (this._isTextureVar(t3)) {
        const e5 = t3, n3 = this._getAttributeNum(e5.attributes, "group", 0), s3 = this._getAttributeNum(e5.attributes, "binding", 0), r3 = this.getTypeInfo(e5.type, e5.attributes), a3 = this._isStorageTexture(r3), c3 = new o(e5.name, r3, n3, s3, e5.attributes, a3 ? i.StorageTexture : i.Texture, e5.access);
        c3.access || (c3.access = "read"), a3 ? this.storage.push(c3) : this.textures.push(c3);
        continue;
      }
      if (this._isSamplerVar(t3)) {
        const e5 = t3, n3 = this._getAttributeNum(e5.attributes, "group", 0), s3 = this._getAttributeNum(e5.attributes, "binding", 0), r3 = this.getTypeInfo(e5.type, e5.attributes), a3 = new o(e5.name, r3, n3, s3, e5.attributes, i.Sampler, e5.access);
        this.samplers.push(a3);
        continue;
      }
    }
    for (const t3 of e4) if (t3 instanceof D) {
      const e5 = this._getAttribute(t3, "vertex"), n3 = this._getAttribute(t3, "fragment"), s3 = this._getAttribute(t3, "compute"), r3 = e5 || n3 || s3, a3 = new p(t3.name, null == r3 ? void 0 : r3.name, t3.attributes);
      a3.attributes = t3.attributes, a3.startLine = t3.startLine, a3.endLine = t3.endLine, this.functions.push(a3), this._functions.get(t3.name).info = a3, r3 && (this._functions.get(t3.name).inUse = true, a3.inUse = true, a3.resources = this._findResources(t3, !!r3), a3.inputs = this._getInputs(t3.args), a3.outputs = this._getOutputs(t3.returnType), this.entry[r3.name].push(a3)), a3.arguments = t3.args.map((e6) => new f(e6.name, this.getTypeInfo(e6.type, e6.attributes), e6.attributes)), a3.returnType = t3.returnType ? this.getTypeInfo(t3.returnType, t3.attributes) : null;
      continue;
    }
    for (const e5 of this._functions.values()) e5.info && (e5.info.inUse = e5.inUse, this._addCalls(e5.node, e5.info.calls));
    for (const e5 of this._functions.values()) e5.node.search((t3) => {
      var n3, s3, r3;
      if (t3 instanceof De) {
        if (t3.value) if (Ge(t3.value)) for (const s4 of t3.value) for (const t4 of this.overrides) s4 === t4.name && (null === (n3 = e5.info) || void 0 === n3 || n3.overrides.push(t4));
        else for (const n4 of this.overrides) t3.value === n4.name && (null === (s3 = e5.info) || void 0 === s3 || s3.overrides.push(n4));
      } else if (t3 instanceof ge) for (const n4 of this.overrides) t3.name === n4.name && (null === (r3 = e5.info) || void 0 === r3 || r3.overrides.push(n4));
    });
    for (const e5 of this.uniforms) this._markStructsInUse(e5.type);
    for (const e5 of this.storage) this._markStructsInUse(e5.type);
  }
  getFunctionInfo(e4) {
    for (const t3 of this.functions) if (t3.name == e4) return t3;
    return null;
  }
  getStructInfo(e4) {
    for (const t3 of this.structs) if (t3.name == e4) return t3;
    return null;
  }
  getOverrideInfo(e4) {
    for (const t3 of this.overrides) if (t3.name == e4) return t3;
    return null;
  }
  _markStructsInUse(e4) {
    if (e4) if (e4.isStruct) {
      if (e4.inUse = true, e4.members) for (const t3 of e4.members) this._markStructsInUse(t3.type);
    } else if (e4.isArray) this._markStructsInUse(e4.format);
    else if (e4.isTemplate) e4.format && this._markStructsInUse(e4.format);
    else {
      const t3 = this._getAlias(e4.name);
      t3 && this._markStructsInUse(t3);
    }
  }
  _addCalls(e4, t3) {
    var n3;
    for (const s3 of e4.calls) {
      const e5 = null === (n3 = this._functions.get(s3.name)) || void 0 === n3 ? void 0 : n3.info;
      e5 && t3.add(e5);
    }
  }
  findResource(e4, t3, n3) {
    if (n3) {
      for (const s3 of this.entry.compute) if (s3.name === n3) {
        for (const n4 of s3.resources) if (n4.group == e4 && n4.binding == t3) return n4;
      }
      for (const s3 of this.entry.vertex) if (s3.name === n3) {
        for (const n4 of s3.resources) if (n4.group == e4 && n4.binding == t3) return n4;
      }
      for (const s3 of this.entry.fragment) if (s3.name === n3) {
        for (const n4 of s3.resources) if (n4.group == e4 && n4.binding == t3) return n4;
      }
    }
    for (const n4 of this.uniforms) if (n4.group == e4 && n4.binding == t3) return n4;
    for (const n4 of this.storage) if (n4.group == e4 && n4.binding == t3) return n4;
    for (const n4 of this.textures) if (n4.group == e4 && n4.binding == t3) return n4;
    for (const n4 of this.samplers) if (n4.group == e4 && n4.binding == t3) return n4;
    return null;
  }
  _findResource(e4) {
    for (const t3 of this.uniforms) if (t3.name == e4) return t3;
    for (const t3 of this.storage) if (t3.name == e4) return t3;
    for (const t3 of this.textures) if (t3.name == e4) return t3;
    for (const t3 of this.samplers) if (t3.name == e4) return t3;
    return null;
  }
  _markStructsFromAST(e4) {
    const t3 = this.getTypeInfo(e4, null);
    this._markStructsInUse(t3);
  }
  _findResources(e4, t3) {
    const n3 = [], s3 = this, r3 = [];
    return e4.search((a3) => {
      if (a3 instanceof E) r3.push({});
      else if (a3 instanceof $) r3.pop();
      else if (a3 instanceof F) {
        const e5 = a3;
        t3 && null !== e5.type && this._markStructsFromAST(e5.type), r3.length > 0 && (r3[r3.length - 1][e5.name] = e5);
      } else if (a3 instanceof de) {
        const e5 = a3;
        t3 && null !== e5.type && this._markStructsFromAST(e5.type);
      } else if (a3 instanceof U) {
        const e5 = a3;
        t3 && null !== e5.type && this._markStructsFromAST(e5.type), r3.length > 0 && (r3[r3.length - 1][e5.name] = e5);
      } else if (a3 instanceof ge) {
        const e5 = a3;
        if (r3.length > 0) {
          if (r3[r3.length - 1][e5.name]) return;
        }
        const t4 = s3._findResource(e5.name);
        t4 && n3.push(t4);
      } else if (a3 instanceof me) {
        const r4 = a3, i4 = s3._functions.get(r4.name);
        i4 && (t3 && (i4.inUse = true), e4.calls.add(i4.node), null === i4.resources && (i4.resources = s3._findResources(i4.node, t3)), n3.push(...i4.resources));
      } else if (a3 instanceof X) {
        const r4 = a3, i4 = s3._functions.get(r4.name);
        i4 && (t3 && (i4.inUse = true), e4.calls.add(i4.node), null === i4.resources && (i4.resources = s3._findResources(i4.node, t3)), n3.push(...i4.resources));
      }
    }), [...new Map(n3.map((e5) => [e5.name, e5])).values()];
  }
  getBindGroups() {
    const e4 = [];
    function t3(t4, n3) {
      t4 >= e4.length && (e4.length = t4 + 1), void 0 === e4[t4] && (e4[t4] = []), n3 >= e4[t4].length && (e4[t4].length = n3 + 1);
    }
    for (const n3 of this.uniforms) {
      t3(n3.group, n3.binding);
      e4[n3.group][n3.binding] = n3;
    }
    for (const n3 of this.storage) {
      t3(n3.group, n3.binding);
      e4[n3.group][n3.binding] = n3;
    }
    for (const n3 of this.textures) {
      t3(n3.group, n3.binding);
      e4[n3.group][n3.binding] = n3;
    }
    for (const n3 of this.samplers) {
      t3(n3.group, n3.binding);
      e4[n3.group][n3.binding] = n3;
    }
    return e4;
  }
  _getOutputs(e4, t3 = void 0) {
    if (void 0 === t3 && (t3 = []), e4 instanceof oe) this._getStructOutputs(e4, t3);
    else {
      const n3 = this._getOutputInfo(e4);
      null !== n3 && t3.push(n3);
    }
    return t3;
  }
  _getStructOutputs(e4, t3) {
    for (const n3 of e4.members) if (n3.type instanceof oe) this._getStructOutputs(n3.type, t3);
    else {
      const e5 = this._getAttribute(n3, "location") || this._getAttribute(n3, "builtin");
      if (null !== e5) {
        const s3 = this.getTypeInfo(n3.type, n3.type.attributes), r3 = this._parseInt(e5.value), a3 = new u(n3.name, s3, e5.name, r3);
        t3.push(a3);
      }
    }
  }
  _getOutputInfo(e4) {
    const t3 = this._getAttribute(e4, "location") || this._getAttribute(e4, "builtin");
    if (null !== t3) {
      const n3 = this.getTypeInfo(e4, e4.attributes), s3 = this._parseInt(t3.value);
      return new u("", n3, t3.name, s3);
    }
    return null;
  }
  _getInputs(e4, t3 = void 0) {
    void 0 === t3 && (t3 = []);
    for (const n3 of e4) if (n3.type instanceof oe) this._getStructInputs(n3.type, t3);
    else {
      const e5 = this._getInputInfo(n3);
      null !== e5 && t3.push(e5);
    }
    return t3;
  }
  _getStructInputs(e4, t3) {
    for (const n3 of e4.members) if (n3.type instanceof oe) this._getStructInputs(n3.type, t3);
    else {
      const e5 = this._getInputInfo(n3);
      null !== e5 && t3.push(e5);
    }
  }
  _getInputInfo(e4) {
    const t3 = this._getAttribute(e4, "location") || this._getAttribute(e4, "builtin");
    if (null !== t3) {
      const n3 = this._getAttribute(e4, "interpolation"), s3 = this.getTypeInfo(e4.type, e4.attributes), r3 = this._parseInt(t3.value), a3 = new l(e4.name, s3, t3.name, r3);
      return null !== n3 && (a3.interpolation = this._parseString(n3.value)), a3;
    }
    return null;
  }
  _parseString(e4) {
    return e4 instanceof Array && (e4 = e4[0]), e4;
  }
  _parseInt(e4) {
    e4 instanceof Array && (e4 = e4[0]);
    const t3 = parseInt(e4);
    return isNaN(t3) ? e4 : t3;
  }
  _getAlias(e4) {
    for (const t3 of this.aliases) if (t3.name == e4) return t3.type;
    return null;
  }
  _getAliasInfo(e4) {
    return new c(e4.name, this.getTypeInfo(e4.type, null));
  }
  getTypeInfoByName(e4) {
    for (const t3 of this.structs) if (t3.name == e4) return t3;
    for (const t3 of this.aliases) if (t3.name == e4) return t3.type;
    return null;
  }
  getTypeInfo(i4, o3 = null) {
    if (this._types.has(i4)) return this._types.get(i4);
    if (i4 instanceof le) {
      const e4 = i4.type ? this.getTypeInfo(i4.type, i4.attributes) : null, t3 = new r(i4.name, e4, o3);
      return this._types.set(i4, t3), this._updateTypeInfo(t3), t3;
    }
    if (i4 instanceof ue) {
      const e4 = i4, t3 = e4.format ? this.getTypeInfo(e4.format, e4.attributes) : null, n3 = new s(e4.name, o3);
      return n3.format = t3, n3.count = e4.count, this._types.set(i4, n3), this._updateTypeInfo(n3), n3;
    }
    if (i4 instanceof oe) {
      const e4 = i4, s3 = new n(e4.name, o3);
      s3.startLine = e4.startLine, s3.endLine = e4.endLine;
      for (const n3 of e4.members) {
        const e5 = this.getTypeInfo(n3.type, n3.attributes);
        s3.members.push(new t(n3.name, e5, n3.attributes));
      }
      return this._types.set(i4, s3), this._updateTypeInfo(s3), s3;
    }
    if (i4 instanceof he) {
      const t3 = i4, n3 = t3.format instanceof ae, s3 = t3.format ? n3 ? this.getTypeInfo(t3.format, null) : new e(t3.format, null) : null, r3 = new a(t3.name, s3, o3, t3.access);
      return this._types.set(i4, r3), this._updateTypeInfo(r3), r3;
    }
    if (i4 instanceof ce) {
      const e4 = i4, t3 = e4.format ? this.getTypeInfo(e4.format, null) : null, n3 = new a(e4.name, t3, o3, e4.access);
      return this._types.set(i4, n3), this._updateTypeInfo(n3), n3;
    }
    const c3 = new e(i4.name, o3);
    return this._types.set(i4, c3), this._updateTypeInfo(c3), c3;
  }
  _updateTypeInfo(e4) {
    var t3, a3, i4;
    const o3 = this._getTypeSize(e4);
    if (e4.size = null !== (t3 = null == o3 ? void 0 : o3.size) && void 0 !== t3 ? t3 : 0, e4 instanceof s && e4.format) {
      const t4 = this._getTypeSize(e4.format);
      e4.stride = Math.max(null !== (a3 = null == t4 ? void 0 : t4.size) && void 0 !== a3 ? a3 : 0, null !== (i4 = null == t4 ? void 0 : t4.align) && void 0 !== i4 ? i4 : 0), this._updateTypeInfo(e4.format);
    }
    e4 instanceof r && this._updateTypeInfo(e4.format), e4 instanceof n && this._updateStructInfo(e4);
  }
  _updateStructInfo(e4) {
    var t3;
    let n3 = 0, s3 = 0, r3 = 0, a3 = 0;
    for (let i4 = 0, o3 = e4.members.length; i4 < o3; ++i4) {
      const o4 = e4.members[i4], c3 = this._getTypeSize(o4);
      if (!c3) continue;
      null !== (t3 = this._getAlias(o4.type.name)) && void 0 !== t3 || o4.type;
      const l3 = c3.align, u4 = c3.size;
      n3 = this._roundUp(l3, n3 + s3), s3 = u4, r3 = n3, a3 = Math.max(a3, l3), o4.offset = n3, o4.size = u4, this._updateTypeInfo(o4.type);
    }
    e4.size = this._roundUp(a3, r3 + s3), e4.align = a3;
  }
  _getTypeSize(r3) {
    var a3, i4;
    if (null == r3) return null;
    const o3 = this._getAttributeNum(r3.attributes, "size", 0), c3 = this._getAttributeNum(r3.attributes, "align", 0);
    if (r3 instanceof t && (r3 = r3.type), r3 instanceof e) {
      const e4 = this._getAlias(r3.name);
      null !== e4 && (r3 = e4);
    }
    {
      const e4 = _at._typeInfo[r3.name];
      if (void 0 !== e4) {
        const t3 = "f16" === (null === (a3 = r3.format) || void 0 === a3 ? void 0 : a3.name) ? 2 : 1;
        return new rt(Math.max(c3, e4.align / t3), Math.max(o3, e4.size / t3));
      }
    }
    {
      const e4 = _at._typeInfo[r3.name.substring(0, r3.name.length - 1)];
      if (e4) {
        const t3 = "h" === r3.name[r3.name.length - 1] ? 2 : 1;
        return new rt(Math.max(c3, e4.align / t3), Math.max(o3, e4.size / t3));
      }
    }
    if (r3 instanceof s) {
      let e4 = r3, t3 = 8, n3 = 8;
      const s3 = this._getTypeSize(e4.format);
      null !== s3 && (n3 = s3.size, t3 = s3.align);
      return n3 = e4.count * this._getAttributeNum(null !== (i4 = null == r3 ? void 0 : r3.attributes) && void 0 !== i4 ? i4 : null, "stride", this._roundUp(t3, n3)), o3 && (n3 = o3), new rt(Math.max(c3, t3), Math.max(o3, n3));
    }
    if (r3 instanceof n) {
      let e4 = 0, t3 = 0, n3 = 0, s3 = 0, a4 = 0;
      for (const t4 of r3.members) {
        const r4 = this._getTypeSize(t4.type);
        null !== r4 && (e4 = Math.max(r4.align, e4), n3 = this._roundUp(r4.align, n3 + s3), s3 = r4.size, a4 = n3);
      }
      return t3 = this._roundUp(e4, a4 + s3), new rt(Math.max(c3, e4), Math.max(o3, t3));
    }
    return null;
  }
  _isUniformVar(e4) {
    return e4 instanceof F && "uniform" == e4.storage;
  }
  _isStorageVar(e4) {
    return e4 instanceof F && "storage" == e4.storage;
  }
  _isTextureVar(e4) {
    return e4 instanceof F && null !== e4.type && -1 != _at._textureTypes.indexOf(e4.type.name);
  }
  _isSamplerVar(e4) {
    return e4 instanceof F && null !== e4.type && -1 != _at._samplerTypes.indexOf(e4.type.name);
  }
  _getAttribute(e4, t3) {
    const n3 = e4;
    if (!n3 || !n3.attributes) return null;
    const s3 = n3.attributes;
    for (let e5 of s3) if (e5.name == t3) return e5;
    return null;
  }
  _getAttributeNum(e4, t3, n3) {
    if (null === e4) return n3;
    for (let s3 of e4) if (s3.name == t3) {
      let e5 = null !== s3 && null !== s3.value ? s3.value : n3;
      return e5 instanceof Array && (e5 = e5[0]), "number" == typeof e5 ? e5 : "string" == typeof e5 ? parseInt(e5) : n3;
    }
    return n3;
  }
  _roundUp(e4, t3) {
    return Math.ceil(t3 / e4) * e4;
  }
};
at._typeInfo = { f16: { align: 2, size: 2 }, i32: { align: 4, size: 4 }, u32: { align: 4, size: 4 }, f32: { align: 4, size: 4 }, atomic: { align: 4, size: 4 }, vec2: { align: 8, size: 8 }, vec3: { align: 16, size: 12 }, vec4: { align: 16, size: 16 }, mat2x2: { align: 8, size: 16 }, mat3x2: { align: 8, size: 24 }, mat4x2: { align: 8, size: 32 }, mat2x3: { align: 16, size: 32 }, mat3x3: { align: 16, size: 48 }, mat4x3: { align: 16, size: 64 }, mat2x4: { align: 16, size: 32 }, mat3x4: { align: 16, size: 48 }, mat4x4: { align: 16, size: 64 } }, at._textureTypes = He.any_texture_type.map((e4) => e4.name), at._samplerTypes = He.sampler_type.map((e4) => e4.name);
var it = 0;
var ot = class _ot {
  constructor(e4, t3, n3) {
    this.id = it++, this.name = e4, this.value = t3, this.node = n3;
  }
  clone() {
    return new _ot(this.name, this.value, this.node);
  }
};
var ct = class _ct {
  constructor(e4) {
    this.id = it++, this.name = e4.name, this.node = e4;
  }
  clone() {
    return new _ct(this.node);
  }
};
var lt = class _lt {
  constructor(e4) {
    this.parent = null, this.variables = /* @__PURE__ */ new Map(), this.functions = /* @__PURE__ */ new Map(), this.currentFunctionName = "", this.id = it++, e4 && (this.parent = e4, this.currentFunctionName = e4.currentFunctionName);
  }
  getVariable(e4) {
    var t3;
    return this.variables.has(e4) ? null !== (t3 = this.variables.get(e4)) && void 0 !== t3 ? t3 : null : this.parent ? this.parent.getVariable(e4) : null;
  }
  getFunction(e4) {
    var t3;
    return this.functions.has(e4) ? null !== (t3 = this.functions.get(e4)) && void 0 !== t3 ? t3 : null : this.parent ? this.parent.getFunction(e4) : null;
  }
  createVariable(e4, t3, n3) {
    this.variables.set(e4, new ot(e4, t3, null != n3 ? n3 : null));
  }
  setVariable(e4, t3, n3) {
    const s3 = this.getVariable(e4);
    null !== s3 ? s3.value = t3 : this.createVariable(e4, t3, n3);
  }
  getVariableValue(e4) {
    var t3;
    const n3 = this.getVariable(e4);
    return null !== (t3 = null == n3 ? void 0 : n3.value) && void 0 !== t3 ? t3 : null;
  }
  clone() {
    return new _lt(this);
  }
};
var ut = class {
  evalExpression(e4, t3) {
    return null;
  }
  getTypeInfo(e4) {
    return null;
  }
  getVariableName(e4, t3) {
    return "";
  }
};
var ht = class {
  constructor(e4) {
    this.exec = e4;
  }
  getTypeInfo(e4) {
    return this.exec.getTypeInfo(e4);
  }
  All(e4, t3) {
    const n3 = this.exec.evalExpression(e4.args[0], t3);
    let s3 = true;
    if (n3 instanceof Me) return n3.data.forEach((e5) => {
      e5 || (s3 = false);
    }), new Be(s3 ? 1 : 0, this.getTypeInfo("bool"));
    throw new Error(`All() expects a vector argument. Line ${e4.line}`);
  }
  Any(e4, t3) {
    const n3 = this.exec.evalExpression(e4.args[0], t3);
    if (n3 instanceof Me) {
      const e5 = n3.data.some((e6) => e6);
      return new Be(e5 ? 1 : 0, this.getTypeInfo("bool"));
    }
    throw new Error(`Any() expects a vector argument. Line ${e4.line}`);
  }
  Select(e4, t3) {
    const n3 = this.exec.evalExpression(e4.args[2], t3);
    if (!(n3 instanceof Be)) throw new Error(`Select() expects a bool condition. Line ${e4.line}`);
    return n3.value ? this.exec.evalExpression(e4.args[1], t3) : this.exec.evalExpression(e4.args[0], t3);
  }
  ArrayLength(e4, t3) {
    let n3 = e4.args[0];
    n3 instanceof ke && (n3 = n3.right);
    const s3 = this.exec.evalExpression(n3, t3);
    if (s3 instanceof Pe && 0 === s3.typeInfo.size) {
      const e5 = s3.typeInfo, t4 = s3.buffer.byteLength / e5.stride;
      return new Be(t4, this.getTypeInfo("u32"));
    }
    return new Be(s3.typeInfo.size, this.getTypeInfo("u32"));
  }
  Abs(e4, t3) {
    const n3 = this.exec.evalExpression(e4.args[0], t3);
    if (n3 instanceof Me) return new Me(n3.data.map((e5) => Math.abs(e5)), n3.typeInfo);
    const s3 = n3;
    return new Be(Math.abs(s3.value), s3.typeInfo);
  }
  Acos(e4, t3) {
    const n3 = this.exec.evalExpression(e4.args[0], t3);
    if (n3 instanceof Me) return new Me(n3.data.map((e5) => Math.acos(e5)), n3.typeInfo);
    const s3 = n3;
    return new Be(Math.acos(s3.value), n3.typeInfo);
  }
  Acosh(e4, t3) {
    const n3 = this.exec.evalExpression(e4.args[0], t3);
    if (n3 instanceof Me) return new Me(n3.data.map((e5) => Math.acosh(e5)), n3.typeInfo);
    const s3 = n3;
    return new Be(Math.acosh(s3.value), n3.typeInfo);
  }
  Asin(e4, t3) {
    const n3 = this.exec.evalExpression(e4.args[0], t3);
    if (n3 instanceof Me) return new Me(n3.data.map((e5) => Math.asin(e5)), n3.typeInfo);
    const s3 = n3;
    return new Be(Math.asin(s3.value), n3.typeInfo);
  }
  Asinh(e4, t3) {
    const n3 = this.exec.evalExpression(e4.args[0], t3);
    if (n3 instanceof Me) return new Me(n3.data.map((e5) => Math.asinh(e5)), n3.typeInfo);
    const s3 = n3;
    return new Be(Math.asinh(s3.value), n3.typeInfo);
  }
  Atan(e4, t3) {
    const n3 = this.exec.evalExpression(e4.args[0], t3);
    if (n3 instanceof Me) return new Me(n3.data.map((e5) => Math.atan(e5)), n3.typeInfo);
    const s3 = n3;
    return new Be(Math.atan(s3.value), n3.typeInfo);
  }
  Atanh(e4, t3) {
    const n3 = this.exec.evalExpression(e4.args[0], t3);
    if (n3 instanceof Me) return new Me(n3.data.map((e5) => Math.atanh(e5)), n3.typeInfo);
    const s3 = n3;
    return new Be(Math.atanh(s3.value), n3.typeInfo);
  }
  Atan2(e4, t3) {
    const n3 = this.exec.evalExpression(e4.args[0], t3), s3 = this.exec.evalExpression(e4.args[1], t3);
    if (n3 instanceof Me && s3 instanceof Me) return new Me(n3.data.map((e5, t4) => Math.atan2(e5, s3.data[t4])), n3.typeInfo);
    const r3 = n3, a3 = s3;
    return new Be(Math.atan2(r3.value, a3.value), n3.typeInfo);
  }
  Ceil(e4, t3) {
    const n3 = this.exec.evalExpression(e4.args[0], t3);
    if (n3 instanceof Me) return new Me(n3.data.map((e5) => Math.ceil(e5)), n3.typeInfo);
    const s3 = n3;
    return new Be(Math.ceil(s3.value), n3.typeInfo);
  }
  _clamp(e4, t3, n3) {
    return Math.min(Math.max(e4, t3), n3);
  }
  Clamp(e4, t3) {
    const n3 = this.exec.evalExpression(e4.args[0], t3), s3 = this.exec.evalExpression(e4.args[1], t3), r3 = this.exec.evalExpression(e4.args[2], t3);
    if (n3 instanceof Me && s3 instanceof Me && r3 instanceof Me) return new Me(n3.data.map((e5, t4) => this._clamp(e5, s3.data[t4], r3.data[t4])), n3.typeInfo);
    const a3 = n3, i4 = s3, o3 = r3;
    return new Be(this._clamp(a3.value, i4.value, o3.value), n3.typeInfo);
  }
  Cos(e4, t3) {
    const n3 = this.exec.evalExpression(e4.args[0], t3);
    if (n3 instanceof Me) return new Me(n3.data.map((e5) => Math.cos(e5)), n3.typeInfo);
    const s3 = n3;
    return new Be(Math.cos(s3.value), n3.typeInfo);
  }
  Cosh(e4, t3) {
    const n3 = this.exec.evalExpression(e4.args[0], t3);
    if (n3 instanceof Me) return new Me(n3.data.map((e5) => Math.cosh(e5)), n3.typeInfo);
    const s3 = n3;
    return new Be(Math.cos(s3.value), n3.typeInfo);
  }
  CountLeadingZeros(e4, t3) {
    const n3 = this.exec.evalExpression(e4.args[0], t3);
    if (n3 instanceof Me) return new Me(n3.data.map((e5) => Math.clz32(e5)), n3.typeInfo);
    const s3 = n3;
    return new Be(Math.clz32(s3.value), n3.typeInfo);
  }
  _countOneBits(e4) {
    let t3 = 0;
    for (; 0 !== e4; ) 1 & e4 && t3++, e4 >>= 1;
    return t3;
  }
  CountOneBits(e4, t3) {
    const n3 = this.exec.evalExpression(e4.args[0], t3);
    if (n3 instanceof Me) return new Me(n3.data.map((e5) => this._countOneBits(e5)), n3.typeInfo);
    const s3 = n3;
    return new Be(this._countOneBits(s3.value), n3.typeInfo);
  }
  _countTrailingZeros(e4) {
    if (0 === e4) return 32;
    let t3 = 0;
    for (; !(1 & e4); ) e4 >>= 1, t3++;
    return t3;
  }
  CountTrailingZeros(e4, t3) {
    const n3 = this.exec.evalExpression(e4.args[0], t3);
    if (n3 instanceof Me) return new Me(n3.data.map((e5) => this._countTrailingZeros(e5)), n3.typeInfo);
    const s3 = n3;
    return new Be(this._countTrailingZeros(s3.value), n3.typeInfo);
  }
  Cross(e4, t3) {
    const n3 = this.exec.evalExpression(e4.args[0], t3), s3 = this.exec.evalExpression(e4.args[1], t3);
    if (n3 instanceof Me && s3 instanceof Me) {
      if (3 !== n3.data.length || 3 !== s3.data.length) return console.error(`Cross() expects 3D vectors. Line ${e4.line}`), null;
      const t4 = n3.data, r3 = s3.data;
      return new Me([t4[1] * r3[2] - r3[1] * t4[2], t4[2] * r3[0] - r3[2] * t4[0], t4[0] * r3[1] - r3[0] * t4[1]], n3.typeInfo);
    }
    return console.error(`Cross() expects vector arguments. Line ${e4.line}`), null;
  }
  Degrees(e4, t3) {
    const n3 = this.exec.evalExpression(e4.args[0], t3), s3 = 180 / Math.PI;
    if (n3 instanceof Me) return new Me(n3.data.map((e5) => e5 * s3), n3.typeInfo);
    return new Be(n3.value * s3, this.getTypeInfo("f32"));
  }
  Determinant(e4, t3) {
    const n3 = this.exec.evalExpression(e4.args[0], t3);
    if (n3 instanceof Ue) {
      const e5 = n3.data, t4 = n3.typeInfo.getTypeName(), s3 = t4.endsWith("h") ? this.getTypeInfo("f16") : this.getTypeInfo("f32");
      if ("mat2x2" === t4 || "mat2x2f" === t4 || "mat2x2h" === t4) return new Be(e5[0] * e5[3] - e5[1] * e5[2], s3);
      if ("mat2x3" === t4 || "mat2x3f" === t4 || "mat2x3h" === t4) return new Be(e5[0] * (e5[4] * e5[8] - e5[5] * e5[7]) - e5[1] * (e5[3] * e5[8] - e5[5] * e5[6]) + e5[2] * (e5[3] * e5[7] - e5[4] * e5[6]), s3);
      if ("mat2x4" === t4 || "mat2x4f" === t4 || "mat2x4h" === t4) console.error(`TODO: Determinant for ${t4}`);
      else if ("mat3x2" === t4 || "mat3x2f" === t4 || "mat3x2h" === t4) console.error(`TODO: Determinant for ${t4}`);
      else {
        if ("mat3x3" === t4 || "mat3x3f" === t4 || "mat3x3h" === t4) return new Be(e5[0] * (e5[4] * e5[8] - e5[5] * e5[7]) - e5[1] * (e5[3] * e5[8] - e5[5] * e5[6]) + e5[2] * (e5[3] * e5[7] - e5[4] * e5[6]), s3);
        "mat3x4" === t4 || "mat3x4f" === t4 || "mat3x4h" === t4 || "mat4x2" === t4 || "mat4x2f" === t4 || "mat4x2h" === t4 || "mat4x3" === t4 || "mat4x3f" === t4 || "mat4x3h" === t4 ? console.error(`TODO: Determinant for ${t4}`) : "mat4x4" !== t4 && "mat4x4f" !== t4 && "mat4x4h" !== t4 || console.error(`TODO: Determinant for ${t4}`);
      }
    }
    return console.error(`Determinant expects a matrix argument. Line ${e4.line}`), null;
  }
  Distance(e4, t3) {
    const n3 = this.exec.evalExpression(e4.args[0], t3), s3 = this.exec.evalExpression(e4.args[1], t3);
    if (n3 instanceof Me && s3 instanceof Me) {
      let e5 = 0;
      for (let t4 = 0; t4 < n3.data.length; ++t4) e5 += (n3.data[t4] - s3.data[t4]) * (n3.data[t4] - s3.data[t4]);
      return new Be(Math.sqrt(e5), this.getTypeInfo("f32"));
    }
    const r3 = n3, a3 = s3;
    return new Be(Math.abs(r3.value - a3.value), n3.typeInfo);
  }
  _dot(e4, t3) {
    let n3 = 0;
    for (let s3 = 0; s3 < e4.length; ++s3) n3 += t3[s3] * e4[s3];
    return n3;
  }
  Dot(e4, t3) {
    const n3 = this.exec.evalExpression(e4.args[0], t3), s3 = this.exec.evalExpression(e4.args[1], t3);
    return n3 instanceof Me && s3 instanceof Me ? new Be(this._dot(n3.data, s3.data), this.getTypeInfo("f32")) : (console.error(`Dot() expects vector arguments. Line ${e4.line}`), null);
  }
  Dot4U8Packed(e4, t3) {
    return console.error(`TODO: dot4U8Packed. Line ${e4.line}`), null;
  }
  Dot4I8Packed(e4, t3) {
    return console.error(`TODO: dot4I8Packed. Line ${e4.line}`), null;
  }
  Exp(e4, t3) {
    const n3 = this.exec.evalExpression(e4.args[0], t3);
    if (n3 instanceof Me) return new Me(n3.data.map((e5) => Math.exp(e5)), n3.typeInfo);
    const s3 = n3;
    return new Be(Math.exp(s3.value), n3.typeInfo);
  }
  Exp2(e4, t3) {
    const n3 = this.exec.evalExpression(e4.args[0], t3);
    if (n3 instanceof Me) return new Me(n3.data.map((e5) => Math.pow(2, e5)), n3.typeInfo);
    const s3 = n3;
    return new Be(Math.pow(2, s3.value), n3.typeInfo);
  }
  ExtractBits(e4, t3) {
    const n3 = this.exec.evalExpression(e4.args[0], t3), s3 = this.exec.evalExpression(e4.args[1], t3), r3 = this.exec.evalExpression(e4.args[2], t3);
    if ("u32" !== s3.typeInfo.name && "x32" !== s3.typeInfo.name) return console.error(`ExtractBits() expects an i32 offset argument. Line ${e4.line}`), null;
    if ("u32" !== r3.typeInfo.name && "x32" !== r3.typeInfo.name) return console.error(`ExtractBits() expects an i32 count argument. Line ${e4.line}`), null;
    const a3 = s3.value, i4 = r3.value;
    if (n3 instanceof Me) return new Me(n3.data.map((e5) => e5 >> a3 & (1 << i4) - 1), n3.typeInfo);
    if ("i32" !== n3.typeInfo.name && "x32" !== n3.typeInfo.name) return console.error(`ExtractBits() expects an i32 argument. Line ${e4.line}`), null;
    const o3 = n3.value;
    return new Be(o3 >> a3 & (1 << i4) - 1, this.getTypeInfo("i32"));
  }
  FaceForward(e4, t3) {
    const n3 = this.exec.evalExpression(e4.args[0], t3), s3 = this.exec.evalExpression(e4.args[1], t3), r3 = this.exec.evalExpression(e4.args[2], t3);
    if (n3 instanceof Me && s3 instanceof Me && r3 instanceof Me) {
      const e5 = this._dot(s3.data, r3.data);
      return new Me(e5 < 0 ? Array.from(n3.data) : n3.data.map((e6) => -e6), n3.typeInfo);
    }
    return console.error(`FaceForward() expects vector arguments. Line ${e4.line}`), null;
  }
  _firstLeadingBit(e4) {
    return 0 === e4 ? -1 : 31 - Math.clz32(e4);
  }
  FirstLeadingBit(e4, t3) {
    const n3 = this.exec.evalExpression(e4.args[0], t3);
    if (n3 instanceof Me) return new Me(n3.data.map((e5) => this._firstLeadingBit(e5)), n3.typeInfo);
    const s3 = n3;
    return new Be(this._firstLeadingBit(s3.value), n3.typeInfo);
  }
  _firstTrailingBit(e4) {
    return 0 === e4 ? -1 : Math.log2(e4 & -e4);
  }
  FirstTrailingBit(e4, t3) {
    const n3 = this.exec.evalExpression(e4.args[0], t3);
    if (n3 instanceof Me) return new Me(n3.data.map((e5) => this._firstTrailingBit(e5)), n3.typeInfo);
    const s3 = n3;
    return new Be(this._firstTrailingBit(s3.value), n3.typeInfo);
  }
  Floor(e4, t3) {
    const n3 = this.exec.evalExpression(e4.args[0], t3);
    if (n3 instanceof Me) return new Me(n3.data.map((e5) => Math.floor(e5)), n3.typeInfo);
    const s3 = n3;
    return new Be(Math.floor(s3.value), n3.typeInfo);
  }
  Fma(e4, t3) {
    const n3 = this.exec.evalExpression(e4.args[0], t3), s3 = this.exec.evalExpression(e4.args[1], t3), r3 = this.exec.evalExpression(e4.args[2], t3);
    if (n3 instanceof Me && s3 instanceof Me && r3 instanceof Me) return n3.data.length !== s3.data.length || n3.data.length !== r3.data.length ? (console.error(`Fma() expects vectors of the same length. Line ${e4.line}`), null) : new Me(n3.data.map((e5, t4) => e5 * s3.data[t4] + r3.data[t4]), n3.typeInfo);
    const a3 = n3, i4 = s3, o3 = r3;
    return new Be(a3.value * i4.value + o3.value, a3.typeInfo);
  }
  Fract(e4, t3) {
    const n3 = this.exec.evalExpression(e4.args[0], t3);
    if (n3 instanceof Me) return new Me(n3.data.map((e5) => e5 - Math.floor(e5)), n3.typeInfo);
    const s3 = n3;
    return new Be(s3.value - Math.floor(s3.value), n3.typeInfo);
  }
  Frexp(e4, t3) {
    return console.error(`TODO: frexp. Line ${e4.line}`), null;
  }
  InsertBits(e4, t3) {
    const n3 = this.exec.evalExpression(e4.args[0], t3), s3 = this.exec.evalExpression(e4.args[1], t3), r3 = this.exec.evalExpression(e4.args[2], t3), a3 = this.exec.evalExpression(e4.args[3], t3);
    if ("u32" !== r3.typeInfo.name && "x32" !== r3.typeInfo.name) return console.error(`InsertBits() expects an i32 offset argument. Line ${e4.line}`), null;
    const i4 = r3.value, o3 = (1 << a3.value) - 1 << i4, c3 = ~o3;
    if (n3 instanceof Me && s3 instanceof Me) return new Me(n3.data.map((e5, t4) => e5 & c3 | s3.data[t4] << i4 & o3), n3.typeInfo);
    const l3 = n3.value, u4 = s3.value;
    return new Be(l3 & c3 | u4 << i4 & o3, n3.typeInfo);
  }
  InverseSqrt(e4, t3) {
    const n3 = this.exec.evalExpression(e4.args[0], t3);
    if (n3 instanceof Me) return new Me(n3.data.map((e5) => 1 / Math.sqrt(e5)), n3.typeInfo);
    const s3 = n3;
    return new Be(1 / Math.sqrt(s3.value), n3.typeInfo);
  }
  Ldexp(e4, t3) {
    return console.error(`TODO: ldexp. Line ${e4.line}`), null;
  }
  Length(e4, t3) {
    const n3 = this.exec.evalExpression(e4.args[0], t3);
    if (n3 instanceof Me) {
      let e5 = 0;
      return n3.data.forEach((t4) => {
        e5 += t4 * t4;
      }), new Be(Math.sqrt(e5), this.getTypeInfo("f32"));
    }
    const s3 = n3;
    return new Be(Math.abs(s3.value), n3.typeInfo);
  }
  Log(e4, t3) {
    const n3 = this.exec.evalExpression(e4.args[0], t3);
    if (n3 instanceof Me) return new Me(n3.data.map((e5) => Math.log(e5)), n3.typeInfo);
    const s3 = n3;
    return new Be(Math.log(s3.value), n3.typeInfo);
  }
  Log2(e4, t3) {
    const n3 = this.exec.evalExpression(e4.args[0], t3);
    if (n3 instanceof Me) return new Me(n3.data.map((e5) => Math.log2(e5)), n3.typeInfo);
    const s3 = n3;
    return new Be(Math.log2(s3.value), n3.typeInfo);
  }
  Max(e4, t3) {
    const n3 = this.exec.evalExpression(e4.args[0], t3), s3 = this.exec.evalExpression(e4.args[1], t3);
    if (n3 instanceof Me && s3 instanceof Me) return new Me(n3.data.map((e5, t4) => Math.max(e5, s3.data[t4])), n3.typeInfo);
    const r3 = n3, a3 = s3;
    return new Be(Math.max(r3.value, a3.value), n3.typeInfo);
  }
  Min(e4, t3) {
    const n3 = this.exec.evalExpression(e4.args[0], t3), s3 = this.exec.evalExpression(e4.args[1], t3);
    if (n3 instanceof Me && s3 instanceof Me) return new Me(n3.data.map((e5, t4) => Math.min(e5, s3.data[t4])), n3.typeInfo);
    const r3 = n3, a3 = s3;
    return new Be(Math.min(r3.value, a3.value), n3.typeInfo);
  }
  Mix(e4, t3) {
    const n3 = this.exec.evalExpression(e4.args[0], t3), s3 = this.exec.evalExpression(e4.args[1], t3), r3 = this.exec.evalExpression(e4.args[2], t3);
    if (n3 instanceof Me && s3 instanceof Me && r3 instanceof Me) return new Me(n3.data.map((e5, t4) => n3.data[t4] * (1 - r3.data[t4]) + s3.data[t4] * r3.data[t4]), n3.typeInfo);
    const a3 = s3, i4 = r3;
    return new Be(n3.value * (1 - i4.value) + a3.value * i4.value, n3.typeInfo);
  }
  Modf(e4, t3) {
    const n3 = this.exec.evalExpression(e4.args[0], t3), s3 = this.exec.evalExpression(e4.args[1], t3);
    if (n3 instanceof Me && s3 instanceof Me) return new Me(n3.data.map((e5, t4) => e5 % s3.data[t4]), n3.typeInfo);
    const r3 = s3;
    return new Be(n3.value % r3.value, n3.typeInfo);
  }
  Normalize(e4, t3) {
    const n3 = this.exec.evalExpression(e4.args[0], t3);
    if (n3 instanceof Me) {
      const s3 = this.Length(e4, t3).value;
      return new Me(n3.data.map((e5) => e5 / s3), n3.typeInfo);
    }
    return console.error(`Normalize() expects a vector argument. Line ${e4.line}`), null;
  }
  Pow(e4, t3) {
    const n3 = this.exec.evalExpression(e4.args[0], t3), s3 = this.exec.evalExpression(e4.args[1], t3);
    if (n3 instanceof Me && s3 instanceof Me) return new Me(n3.data.map((e5, t4) => Math.pow(e5, s3.data[t4])), n3.typeInfo);
    const r3 = n3, a3 = s3;
    return new Be(Math.pow(r3.value, a3.value), n3.typeInfo);
  }
  QuantizeToF16(e4, t3) {
    const n3 = this.exec.evalExpression(e4.args[0], t3);
    if (n3 instanceof Me) return new Me(n3.data.map((e5) => e5), n3.typeInfo);
    return new Be(n3.value, n3.typeInfo);
  }
  Radians(e4, t3) {
    const n3 = this.exec.evalExpression(e4.args[0], t3);
    if (n3 instanceof Me) return new Me(n3.data.map((e5) => e5 * Math.PI / 180), n3.typeInfo);
    return new Be(n3.value * Math.PI / 180, this.getTypeInfo("f32"));
  }
  Reflect(e4, t3) {
    let n3 = this.exec.evalExpression(e4.args[0], t3), s3 = this.exec.evalExpression(e4.args[1], t3);
    if (n3 instanceof Me && s3 instanceof Me) {
      const e5 = this._dot(n3.data, s3.data);
      return new Me(n3.data.map((t4, n4) => t4 - 2 * e5 * s3.data[n4]), n3.typeInfo);
    }
    return console.error(`Reflect() expects vector arguments. Line ${e4.line}`), null;
  }
  Refract(e4, t3) {
    let n3 = this.exec.evalExpression(e4.args[0], t3), s3 = this.exec.evalExpression(e4.args[1], t3), r3 = this.exec.evalExpression(e4.args[2], t3);
    if (n3 instanceof Me && s3 instanceof Me && r3 instanceof Be) {
      const e5 = this._dot(s3.data, n3.data);
      return new Me(n3.data.map((t4, n4) => {
        const a3 = 1 - r3.value * r3.value * (1 - e5 * e5);
        if (a3 < 0) return 0;
        const i4 = Math.sqrt(a3);
        return r3.value * t4 - (r3.value * e5 + i4) * s3.data[n4];
      }), n3.typeInfo);
    }
    return console.error(`Refract() expects vector arguments and a scalar argument. Line ${e4.line}`), null;
  }
  ReverseBits(e4, t3) {
    return console.error(`TODO: reverseBits. Line ${e4.line}`), null;
  }
  Round(e4, t3) {
    const n3 = this.exec.evalExpression(e4.args[0], t3);
    if (n3 instanceof Me) return new Me(n3.data.map((e5) => Math.round(e5)), n3.typeInfo);
    const s3 = n3;
    return new Be(Math.round(s3.value), n3.typeInfo);
  }
  Saturate(e4, t3) {
    const n3 = this.exec.evalExpression(e4.args[0], t3);
    if (n3 instanceof Me) return new Me(n3.data.map((e5) => Math.min(Math.max(e5, 0), 1)), n3.typeInfo);
    const s3 = n3;
    return new Be(Math.min(Math.max(s3.value, 0), 1), n3.typeInfo);
  }
  Sign(e4, t3) {
    const n3 = this.exec.evalExpression(e4.args[0], t3);
    if (n3 instanceof Me) return new Me(n3.data.map((e5) => Math.sign(e5)), n3.typeInfo);
    const s3 = n3;
    return new Be(Math.sign(s3.value), n3.typeInfo);
  }
  Sin(e4, t3) {
    const n3 = this.exec.evalExpression(e4.args[0], t3);
    if (n3 instanceof Me) return new Me(n3.data.map((e5) => Math.sin(e5)), n3.typeInfo);
    const s3 = n3;
    return new Be(Math.sin(s3.value), n3.typeInfo);
  }
  Sinh(e4, t3) {
    const n3 = this.exec.evalExpression(e4.args[0], t3);
    if (n3 instanceof Me) return new Me(n3.data.map((e5) => Math.sinh(e5)), n3.typeInfo);
    const s3 = n3;
    return new Be(Math.sinh(s3.value), n3.typeInfo);
  }
  _smoothstep(e4, t3, n3) {
    const s3 = Math.min(Math.max((n3 - e4) / (t3 - e4), 0), 1);
    return s3 * s3 * (3 - 2 * s3);
  }
  SmoothStep(e4, t3) {
    const n3 = this.exec.evalExpression(e4.args[0], t3), s3 = this.exec.evalExpression(e4.args[1], t3), r3 = this.exec.evalExpression(e4.args[2], t3);
    if (r3 instanceof Me && n3 instanceof Me && s3 instanceof Me) return new Me(r3.data.map((e5, t4) => this._smoothstep(n3.data[t4], s3.data[t4], e5)), r3.typeInfo);
    const a3 = n3, i4 = s3, o3 = r3;
    return new Be(this._smoothstep(a3.value, i4.value, o3.value), r3.typeInfo);
  }
  Sqrt(e4, t3) {
    const n3 = this.exec.evalExpression(e4.args[0], t3);
    if (n3 instanceof Me) return new Me(n3.data.map((e5) => Math.sqrt(e5)), n3.typeInfo);
    const s3 = n3;
    return new Be(Math.sqrt(s3.value), n3.typeInfo);
  }
  Step(e4, t3) {
    const n3 = this.exec.evalExpression(e4.args[0], t3), s3 = this.exec.evalExpression(e4.args[1], t3);
    if (s3 instanceof Me && n3 instanceof Me) return new Me(s3.data.map((e5, t4) => e5 < n3.data[t4] ? 0 : 1), s3.typeInfo);
    const r3 = n3;
    return new Be(s3.value < r3.value ? 0 : 1, r3.typeInfo);
  }
  Tan(e4, t3) {
    const n3 = this.exec.evalExpression(e4.args[0], t3);
    if (n3 instanceof Me) return new Me(n3.data.map((e5) => Math.tan(e5)), n3.typeInfo);
    const s3 = n3;
    return new Be(Math.tan(s3.value), n3.typeInfo);
  }
  Tanh(e4, t3) {
    const n3 = this.exec.evalExpression(e4.args[0], t3);
    if (n3 instanceof Me) return new Me(n3.data.map((e5) => Math.tanh(e5)), n3.typeInfo);
    const s3 = n3;
    return new Be(Math.tanh(s3.value), n3.typeInfo);
  }
  _getTransposeType(e4) {
    const t3 = e4.getTypeName();
    return "mat2x2f" === t3 || "mat2x2h" === t3 ? e4 : "mat2x3f" === t3 ? this.getTypeInfo("mat3x2f") : "mat2x3h" === t3 ? this.getTypeInfo("mat3x2h") : "mat2x4f" === t3 ? this.getTypeInfo("mat4x2f") : "mat2x4h" === t3 ? this.getTypeInfo("mat4x2h") : "mat3x2f" === t3 ? this.getTypeInfo("mat2x3f") : "mat3x2h" === t3 ? this.getTypeInfo("mat2x3h") : "mat3x3f" === t3 || "mat3x3h" === t3 ? e4 : "mat3x4f" === t3 ? this.getTypeInfo("mat4x3f") : "mat3x4h" === t3 ? this.getTypeInfo("mat4x3h") : "mat4x2f" === t3 ? this.getTypeInfo("mat2x4f") : "mat4x2h" === t3 ? this.getTypeInfo("mat2x4h") : "mat4x3f" === t3 ? this.getTypeInfo("mat3x4f") : "mat4x3h" === t3 ? this.getTypeInfo("mat3x4h") : ("mat4x4f" === t3 || "mat4x4h" === t3 || console.error(`Invalid matrix type ${t3}`), e4);
  }
  Transpose(e4, t3) {
    const n3 = this.exec.evalExpression(e4.args[0], t3);
    if (!(n3 instanceof Ue)) return console.error(`Transpose() expects a matrix argument. Line ${e4.line}`), null;
    const s3 = this._getTransposeType(n3.typeInfo);
    if ("mat2x2" === n3.typeInfo.name || "mat2x2f" === n3.typeInfo.name || "mat2x2h" === n3.typeInfo.name) {
      const e5 = n3.data;
      return new Ue([e5[0], e5[2], e5[1], e5[3]], s3);
    }
    if ("mat2x3" === n3.typeInfo.name || "mat2x3f" === n3.typeInfo.name || "mat2x3h" === n3.typeInfo.name) {
      const e5 = n3.data;
      return new Ue([e5[0], e5[3], e5[6], e5[1], e5[4], e5[7]], s3);
    }
    if ("mat2x4" === n3.typeInfo.name || "mat2x4f" === n3.typeInfo.name || "mat2x4h" === n3.typeInfo.name) {
      const e5 = n3.data;
      return new Ue([e5[0], e5[4], e5[8], e5[12], e5[1], e5[5], e5[9], e5[13]], s3);
    }
    if ("mat3x2" === n3.typeInfo.name || "mat3x2f" === n3.typeInfo.name || "mat3x2h" === n3.typeInfo.name) {
      const e5 = n3.data;
      return new Ue([e5[0], e5[3], e5[1], e5[4], e5[2], e5[5]], s3);
    }
    if ("mat3x3" === n3.typeInfo.name || "mat3x3f" === n3.typeInfo.name || "mat3x3h" === n3.typeInfo.name) {
      const e5 = n3.data;
      return new Ue([e5[0], e5[3], e5[6], e5[1], e5[4], e5[7], e5[2], e5[5], e5[8]], s3);
    }
    if ("mat3x4" === n3.typeInfo.name || "mat3x4f" === n3.typeInfo.name || "mat3x4h" === n3.typeInfo.name) {
      const e5 = n3.data;
      return new Ue([e5[0], e5[4], e5[8], e5[12], e5[1], e5[5], e5[9], e5[13], e5[2], e5[6], e5[10], e5[14]], s3);
    }
    if ("mat4x2" === n3.typeInfo.name || "mat4x2f" === n3.typeInfo.name || "mat4x2h" === n3.typeInfo.name) {
      const e5 = n3.data;
      return new Ue([e5[0], e5[4], e5[1], e5[5], e5[2], e5[6]], s3);
    }
    if ("mat4x3" === n3.typeInfo.name || "mat4x3f" === n3.typeInfo.name || "mat4x3h" === n3.typeInfo.name) {
      const e5 = n3.data;
      return new Ue([e5[0], e5[4], e5[8], e5[1], e5[5], e5[9], e5[2], e5[6], e5[10]], s3);
    }
    if ("mat4x4" === n3.typeInfo.name || "mat4x4f" === n3.typeInfo.name || "mat4x4h" === n3.typeInfo.name) {
      const e5 = n3.data;
      return new Ue([e5[0], e5[4], e5[8], e5[12], e5[1], e5[5], e5[9], e5[13], e5[2], e5[6], e5[10], e5[14], e5[3], e5[7], e5[11], e5[15]], s3);
    }
    return console.error(`Invalid matrix type ${n3.typeInfo.name}`), null;
  }
  Trunc(e4, t3) {
    const n3 = this.exec.evalExpression(e4.args[0], t3);
    if (n3 instanceof Me) return new Me(n3.data.map((e5) => Math.trunc(e5)), n3.typeInfo);
    const s3 = n3;
    return new Be(Math.trunc(s3.value), n3.typeInfo);
  }
  Dpdx(e4, t3) {
    return console.error(`TODO: dpdx. Line ${e4.line}`), null;
  }
  DpdxCoarse(e4, t3) {
    return console.error(`TODO: dpdxCoarse. Line ${e4.line}`), null;
  }
  DpdxFine(e4, t3) {
    return console.error("TODO: dpdxFine"), null;
  }
  Dpdy(e4, t3) {
    return console.error("TODO: dpdy"), null;
  }
  DpdyCoarse(e4, t3) {
    return console.error("TODO: dpdyCoarse"), null;
  }
  DpdyFine(e4, t3) {
    return console.error("TODO: dpdyFine"), null;
  }
  Fwidth(e4, t3) {
    return console.error("TODO: fwidth"), null;
  }
  FwidthCoarse(e4, t3) {
    return console.error("TODO: fwidthCoarse"), null;
  }
  FwidthFine(e4, t3) {
    return console.error("TODO: fwidthFine"), null;
  }
  TextureDimensions(e4, t3) {
    const n3 = e4.args[0], s3 = e4.args.length > 1 ? this.exec.evalExpression(e4.args[1], t3).value : 0;
    if (n3 instanceof ge) {
      const r3 = n3.name, a3 = t3.getVariableValue(r3);
      if (a3 instanceof We) {
        if (s3 < 0 || s3 >= a3.mipLevelCount) return console.error(`Invalid mip level for textureDimensions. Line ${e4.line}`), null;
        const t4 = a3.getMipLevelSize(s3), n4 = a3.dimension;
        return "1d" === n4 ? new Be(t4[0], this.getTypeInfo("u32")) : "3d" === n4 ? new Me(t4, this.getTypeInfo("vec3u")) : "2d" === n4 ? new Me(t4.slice(0, 2), this.getTypeInfo("vec2u")) : (console.error(`Invalid texture dimension ${n4} not found. Line ${e4.line}`), null);
      }
      return console.error(`Texture ${r3} not found. Line ${e4.line}`), null;
    }
    return console.error(`Invalid texture argument for textureDimensions. Line ${e4.line}`), null;
  }
  TextureGather(e4, t3) {
    return console.error("TODO: textureGather"), null;
  }
  TextureGatherCompare(e4, t3) {
    return console.error("TODO: textureGatherCompare"), null;
  }
  TextureLoad(e4, t3) {
    const n3 = e4.args[0], s3 = this.exec.evalExpression(e4.args[1], t3), r3 = e4.args.length > 2 ? this.exec.evalExpression(e4.args[2], t3).value : 0;
    if (!(s3 instanceof Me) || 2 !== s3.data.length) return console.error(`Invalid UV argument for textureLoad. Line ${e4.line}`), null;
    if (n3 instanceof ge) {
      const a3 = n3.name, i4 = t3.getVariableValue(a3);
      if (i4 instanceof We) {
        const t4 = Math.floor(s3.data[0]), n4 = Math.floor(s3.data[1]);
        if (t4 < 0 || t4 >= i4.width || n4 < 0 || n4 >= i4.height) return console.error(`Texture ${a3} out of bounds. Line ${e4.line}`), null;
        const o3 = i4.getPixel(t4, n4, 0, r3);
        return null === o3 ? (console.error(`Invalid texture format for textureLoad. Line ${e4.line}`), null) : new Me(o3, this.getTypeInfo("vec4f"));
      }
      return console.error(`Texture ${a3} not found. Line ${e4.line}`), null;
    }
    return console.error(`Invalid texture argument for textureLoad. Line ${e4.line}`), null;
  }
  TextureNumLayers(e4, t3) {
    const n3 = e4.args[0];
    if (n3 instanceof ge) {
      const s3 = n3.name, r3 = t3.getVariableValue(s3);
      return r3 instanceof We ? new Be(r3.depthOrArrayLayers, this.getTypeInfo("u32")) : (console.error(`Texture ${s3} not found. Line ${e4.line}`), null);
    }
    return console.error(`Invalid texture argument for textureNumLayers. Line ${e4.line}`), null;
  }
  TextureNumLevels(e4, t3) {
    const n3 = e4.args[0];
    if (n3 instanceof ge) {
      const s3 = n3.name, r3 = t3.getVariableValue(s3);
      return r3 instanceof We ? new Be(r3.mipLevelCount, this.getTypeInfo("u32")) : (console.error(`Texture ${s3} not found. Line ${e4.line}`), null);
    }
    return console.error(`Invalid texture argument for textureNumLevels. Line ${e4.line}`), null;
  }
  TextureNumSamples(e4, t3) {
    const n3 = e4.args[0];
    if (n3 instanceof ge) {
      const s3 = n3.name, r3 = t3.getVariableValue(s3);
      return r3 instanceof We ? new Be(r3.sampleCount, this.getTypeInfo("u32")) : (console.error(`Texture ${s3} not found. Line ${e4.line}`), null);
    }
    return console.error(`Invalid texture argument for textureNumSamples. Line ${e4.line}`), null;
  }
  TextureSample(e4, t3) {
    return console.error("TODO: textureSample"), null;
  }
  TextureSampleBias(e4, t3) {
    return console.error("TODO: textureSampleBias"), null;
  }
  TextureSampleCompare(e4, t3) {
    return console.error("TODO: textureSampleCompare"), null;
  }
  TextureSampleCompareLevel(e4, t3) {
    return console.error("TODO: textureSampleCompareLevel"), null;
  }
  TextureSampleGrad(e4, t3) {
    return console.error("TODO: textureSampleGrad"), null;
  }
  TextureSampleLevel(e4, t3) {
    return console.error("TODO: textureSampleLevel"), null;
  }
  TextureSampleBaseClampToEdge(e4, t3) {
    return console.error("TODO: textureSampleBaseClampToEdge"), null;
  }
  TextureStore(e4, t3) {
    const n3 = e4.args[0], s3 = this.exec.evalExpression(e4.args[1], t3), r3 = 4 === e4.args.length ? this.exec.evalExpression(e4.args[2], t3).value : 0, a3 = 4 === e4.args.length ? this.exec.evalExpression(e4.args[3], t3).data : this.exec.evalExpression(e4.args[2], t3).data;
    if (4 !== a3.length) return console.error(`Invalid value argument for textureStore. Line ${e4.line}`), null;
    if (!(s3 instanceof Me) || 2 !== s3.data.length) return console.error(`Invalid UV argument for textureStore. Line ${e4.line}`), null;
    if (n3 instanceof ge) {
      const i4 = n3.name, o3 = t3.getVariableValue(i4);
      if (o3 instanceof We) {
        const t4 = o3.getMipLevelSize(0), n4 = Math.floor(s3.data[0]), c3 = Math.floor(s3.data[1]);
        return n4 < 0 || n4 >= t4[0] || c3 < 0 || c3 >= t4[1] ? (console.error(`Texture ${i4} out of bounds. Line ${e4.line}`), null) : (o3.setPixel(n4, c3, 0, r3, Array.from(a3)), null);
      }
      return console.error(`Texture ${i4} not found. Line ${e4.line}`), null;
    }
    return console.error(`Invalid texture argument for textureStore. Line ${e4.line}`), null;
  }
  AtomicLoad(e4, t3) {
    let n3 = e4.args[0];
    n3 instanceof ke && (n3 = n3.right);
    const s3 = this.exec.getVariableName(n3, t3);
    return t3.getVariable(s3).value.getSubData(this.exec, n3.postfix, t3);
  }
  AtomicStore(e4, t3) {
    let n3 = e4.args[0];
    n3 instanceof ke && (n3 = n3.right);
    const s3 = this.exec.getVariableName(n3, t3), r3 = t3.getVariable(s3);
    let a3 = e4.args[1];
    const i4 = this.exec.evalExpression(a3, t3), o3 = r3.value.getSubData(this.exec, n3.postfix, t3);
    return o3 instanceof Be && i4 instanceof Be && (o3.value = i4.value), r3.value instanceof Pe && r3.value.setDataValue(this.exec, o3, n3.postfix, t3), null;
  }
  AtomicAdd(e4, t3) {
    let n3 = e4.args[0];
    n3 instanceof ke && (n3 = n3.right);
    const s3 = this.exec.getVariableName(n3, t3), r3 = t3.getVariable(s3);
    let a3 = e4.args[1];
    const i4 = this.exec.evalExpression(a3, t3), o3 = r3.value.getSubData(this.exec, n3.postfix, t3), c3 = new Be(o3.value, o3.typeInfo);
    return o3 instanceof Be && i4 instanceof Be && (o3.value += i4.value), r3.value instanceof Pe && r3.value.setDataValue(this.exec, o3, n3.postfix, t3), c3;
  }
  AtomicSub(e4, t3) {
    let n3 = e4.args[0];
    n3 instanceof ke && (n3 = n3.right);
    const s3 = this.exec.getVariableName(n3, t3), r3 = t3.getVariable(s3);
    let a3 = e4.args[1];
    const i4 = this.exec.evalExpression(a3, t3), o3 = r3.value.getSubData(this.exec, n3.postfix, t3), c3 = new Be(o3.value, o3.typeInfo);
    return o3 instanceof Be && i4 instanceof Be && (o3.value -= i4.value), r3.value instanceof Pe && r3.value.setDataValue(this.exec, o3, n3.postfix, t3), c3;
  }
  AtomicMax(e4, t3) {
    let n3 = e4.args[0];
    n3 instanceof ke && (n3 = n3.right);
    const s3 = this.exec.getVariableName(n3, t3), r3 = t3.getVariable(s3);
    let a3 = e4.args[1];
    const i4 = this.exec.evalExpression(a3, t3), o3 = r3.value.getSubData(this.exec, n3.postfix, t3), c3 = new Be(o3.value, o3.typeInfo);
    return o3 instanceof Be && i4 instanceof Be && (o3.value = Math.max(o3.value, i4.value)), r3.value instanceof Pe && r3.value.setDataValue(this.exec, o3, n3.postfix, t3), c3;
  }
  AtomicMin(e4, t3) {
    let n3 = e4.args[0];
    n3 instanceof ke && (n3 = n3.right);
    const s3 = this.exec.getVariableName(n3, t3), r3 = t3.getVariable(s3);
    let a3 = e4.args[1];
    const i4 = this.exec.evalExpression(a3, t3), o3 = r3.value.getSubData(this.exec, n3.postfix, t3), c3 = new Be(o3.value, o3.typeInfo);
    return o3 instanceof Be && i4 instanceof Be && (o3.value = Math.min(o3.value, i4.value)), r3.value instanceof Pe && r3.value.setDataValue(this.exec, o3, n3.postfix, t3), c3;
  }
  AtomicAnd(e4, t3) {
    let n3 = e4.args[0];
    n3 instanceof ke && (n3 = n3.right);
    const s3 = this.exec.getVariableName(n3, t3), r3 = t3.getVariable(s3);
    let a3 = e4.args[1];
    const i4 = this.exec.evalExpression(a3, t3), o3 = r3.value.getSubData(this.exec, n3.postfix, t3), c3 = new Be(o3.value, o3.typeInfo);
    return o3 instanceof Be && i4 instanceof Be && (o3.value = o3.value & i4.value), r3.value instanceof Pe && r3.value.setDataValue(this.exec, o3, n3.postfix, t3), c3;
  }
  AtomicOr(e4, t3) {
    let n3 = e4.args[0];
    n3 instanceof ke && (n3 = n3.right);
    const s3 = this.exec.getVariableName(n3, t3), r3 = t3.getVariable(s3);
    let a3 = e4.args[1];
    const i4 = this.exec.evalExpression(a3, t3), o3 = r3.value.getSubData(this.exec, n3.postfix, t3), c3 = new Be(o3.value, o3.typeInfo);
    return o3 instanceof Be && i4 instanceof Be && (o3.value = o3.value | i4.value), r3.value instanceof Pe && r3.value.setDataValue(this.exec, o3, n3.postfix, t3), c3;
  }
  AtomicXor(e4, t3) {
    let n3 = e4.args[0];
    n3 instanceof ke && (n3 = n3.right);
    const s3 = this.exec.getVariableName(n3, t3), r3 = t3.getVariable(s3);
    let a3 = e4.args[1];
    const i4 = this.exec.evalExpression(a3, t3), o3 = r3.value.getSubData(this.exec, n3.postfix, t3), c3 = new Be(o3.value, o3.typeInfo);
    return o3 instanceof Be && i4 instanceof Be && (o3.value = o3.value ^ i4.value), r3.value instanceof Pe && r3.value.setDataValue(this.exec, o3, n3.postfix, t3), c3;
  }
  AtomicExchange(e4, t3) {
    let n3 = e4.args[0];
    n3 instanceof ke && (n3 = n3.right);
    const s3 = this.exec.getVariableName(n3, t3), r3 = t3.getVariable(s3);
    let a3 = e4.args[1];
    const i4 = this.exec.evalExpression(a3, t3), o3 = r3.value.getSubData(this.exec, n3.postfix, t3), c3 = new Be(o3.value, o3.typeInfo);
    return o3 instanceof Be && i4 instanceof Be && (o3.value = i4.value), r3.value instanceof Pe && r3.value.setDataValue(this.exec, o3, n3.postfix, t3), c3;
  }
  AtomicCompareExchangeWeak(e4, t3) {
    return console.error("TODO: atomicCompareExchangeWeak"), null;
  }
  Pack4x8snorm(e4, t3) {
    return console.error("TODO: pack4x8snorm"), null;
  }
  Pack4x8unorm(e4, t3) {
    return console.error("TODO: pack4x8unorm"), null;
  }
  Pack4xI8(e4, t3) {
    return console.error("TODO: pack4xI8"), null;
  }
  Pack4xU8(e4, t3) {
    return console.error("TODO: pack4xU8"), null;
  }
  Pack4x8Clamp(e4, t3) {
    return console.error("TODO: pack4x8Clamp"), null;
  }
  Pack4xU8Clamp(e4, t3) {
    return console.error("TODO: pack4xU8Clamp"), null;
  }
  Pack2x16snorm(e4, t3) {
    return console.error("TODO: pack2x16snorm"), null;
  }
  Pack2x16unorm(e4, t3) {
    return console.error("TODO: pack2x16unorm"), null;
  }
  Pack2x16float(e4, t3) {
    return console.error("TODO: pack2x16float"), null;
  }
  Unpack4x8snorm(e4, t3) {
    return console.error("TODO: unpack4x8snorm"), null;
  }
  Unpack4x8unorm(e4, t3) {
    return console.error("TODO: unpack4x8unorm"), null;
  }
  Unpack4xI8(e4, t3) {
    return console.error("TODO: unpack4xI8"), null;
  }
  Unpack4xU8(e4, t3) {
    return console.error("TODO: unpack4xU8"), null;
  }
  Unpack2x16snorm(e4, t3) {
    return console.error("TODO: unpack2x16snorm"), null;
  }
  Unpack2x16unorm(e4, t3) {
    return console.error("TODO: unpack2x16unorm"), null;
  }
  Unpack2x16float(e4, t3) {
    return console.error("TODO: unpack2x16float"), null;
  }
  StorageBarrier(e4, t3) {
    return null;
  }
  TextureBarrier(e4, t3) {
    return null;
  }
  WorkgroupBarrier(e4, t3) {
    return null;
  }
  WorkgroupUniformLoad(e4, t3) {
    return null;
  }
  SubgroupAdd(e4, t3) {
    return console.error("TODO: subgroupAdd"), null;
  }
  SubgroupExclusiveAdd(e4, t3) {
    return console.error("TODO: subgroupExclusiveAdd"), null;
  }
  SubgroupInclusiveAdd(e4, t3) {
    return console.error("TODO: subgroupInclusiveAdd"), null;
  }
  SubgroupAll(e4, t3) {
    return console.error("TODO: subgroupAll"), null;
  }
  SubgroupAnd(e4, t3) {
    return console.error("TODO: subgroupAnd"), null;
  }
  SubgroupAny(e4, t3) {
    return console.error("TODO: subgroupAny"), null;
  }
  SubgroupBallot(e4, t3) {
    return console.error("TODO: subgroupBallot"), null;
  }
  SubgroupBroadcast(e4, t3) {
    return console.error("TODO: subgroupBroadcast"), null;
  }
  SubgroupBroadcastFirst(e4, t3) {
    return console.error("TODO: subgroupBroadcastFirst"), null;
  }
  SubgroupElect(e4, t3) {
    return console.error("TODO: subgroupElect"), null;
  }
  SubgroupMax(e4, t3) {
    return console.error("TODO: subgroupMax"), null;
  }
  SubgroupMin(e4, t3) {
    return console.error("TODO: subgroupMin"), null;
  }
  SubgroupMul(e4, t3) {
    return console.error("TODO: subgroupMul"), null;
  }
  SubgroupExclusiveMul(e4, t3) {
    return console.error("TODO: subgroupExclusiveMul"), null;
  }
  SubgroupInclusiveMul(e4, t3) {
    return console.error("TODO: subgroupInclusiveMul"), null;
  }
  SubgroupOr(e4, t3) {
    return console.error("TODO: subgroupOr"), null;
  }
  SubgroupShuffle(e4, t3) {
    return console.error("TODO: subgroupShuffle"), null;
  }
  SubgroupShuffleDown(e4, t3) {
    return console.error("TODO: subgroupShuffleDown"), null;
  }
  SubgroupShuffleUp(e4, t3) {
    return console.error("TODO: subgroupShuffleUp"), null;
  }
  SubgroupShuffleXor(e4, t3) {
    return console.error("TODO: subgroupShuffleXor"), null;
  }
  SubgroupXor(e4, t3) {
    return console.error("TODO: subgroupXor"), null;
  }
  QuadBroadcast(e4, t3) {
    return console.error("TODO: quadBroadcast"), null;
  }
  QuadSwapDiagonal(e4, t3) {
    return console.error("TODO: quadSwapDiagonal"), null;
  }
  QuadSwapX(e4, t3) {
    return console.error("TODO: quadSwapX"), null;
  }
  QuadSwapY(e4, t3) {
    return console.error("TODO: quadSwapY"), null;
  }
};
var ft = { vec2: 2, vec2f: 2, vec2i: 2, vec2u: 2, vec2b: 2, vec2h: 2, vec3: 3, vec3f: 3, vec3i: 3, vec3u: 3, vec3b: 3, vec3h: 3, vec4: 4, vec4f: 4, vec4i: 4, vec4u: 4, vec4b: 4, vec4h: 4 };
var pt = { mat2x2: [2, 2, 4], mat2x2f: [2, 2, 4], mat2x2h: [2, 2, 4], mat2x3: [2, 3, 6], mat2x3f: [2, 3, 6], mat2x3h: [2, 3, 6], mat2x4: [2, 4, 8], mat2x4f: [2, 4, 8], mat2x4h: [2, 4, 8], mat3x2: [3, 2, 6], mat3x2f: [3, 2, 6], mat3x2h: [3, 2, 6], mat3x3: [3, 3, 9], mat3x3f: [3, 3, 9], mat3x3h: [3, 3, 9], mat3x4: [3, 4, 12], mat3x4f: [3, 4, 12], mat3x4h: [3, 4, 12], mat4x2: [4, 2, 8], mat4x2f: [4, 2, 8], mat4x2h: [4, 2, 8], mat4x3: [4, 3, 12], mat4x3f: [4, 3, 12], mat4x3h: [4, 3, 12], mat4x4: [4, 4, 16], mat4x4f: [4, 4, 16], mat4x4h: [4, 4, 16] };
var dt = class _dt extends ut {
  constructor(e4, t3) {
    var n3;
    super(), this.ast = null != e4 ? e4 : [], this.reflection = new at(), this.reflection.updateAST(this.ast), this.context = null !== (n3 = null == t3 ? void 0 : t3.clone()) && void 0 !== n3 ? n3 : new lt(), this.builtins = new ht(this), this.typeInfo = { bool: this.getTypeInfo(ae.bool), i32: this.getTypeInfo(ae.i32), u32: this.getTypeInfo(ae.u32), f32: this.getTypeInfo(ae.f32), f16: this.getTypeInfo(ae.f16), vec2f: this.getTypeInfo(ce.vec2f), vec2u: this.getTypeInfo(ce.vec2u), vec2i: this.getTypeInfo(ce.vec2i), vec2h: this.getTypeInfo(ce.vec2h), vec3f: this.getTypeInfo(ce.vec3f), vec3u: this.getTypeInfo(ce.vec3u), vec3i: this.getTypeInfo(ce.vec3i), vec3h: this.getTypeInfo(ce.vec3h), vec4f: this.getTypeInfo(ce.vec4f), vec4u: this.getTypeInfo(ce.vec4u), vec4i: this.getTypeInfo(ce.vec4i), vec4h: this.getTypeInfo(ce.vec4h), mat2x2f: this.getTypeInfo(ce.mat2x2f), mat2x3f: this.getTypeInfo(ce.mat2x3f), mat2x4f: this.getTypeInfo(ce.mat2x4f), mat3x2f: this.getTypeInfo(ce.mat3x2f), mat3x3f: this.getTypeInfo(ce.mat3x3f), mat3x4f: this.getTypeInfo(ce.mat3x4f), mat4x2f: this.getTypeInfo(ce.mat4x2f), mat4x3f: this.getTypeInfo(ce.mat4x3f), mat4x4f: this.getTypeInfo(ce.mat4x4f) };
  }
  getVariableValue(e4) {
    var t3, n3;
    const r3 = null !== (n3 = null === (t3 = this.context.getVariable(e4)) || void 0 === t3 ? void 0 : t3.value) && void 0 !== n3 ? n3 : null;
    if (null === r3) return null;
    if (r3 instanceof Be) return r3.value;
    if (r3 instanceof Me) return Array.from(r3.data);
    if (r3 instanceof Ue) return Array.from(r3.data);
    if (r3 instanceof Pe && r3.typeInfo instanceof s) {
      if ("u32" === r3.typeInfo.format.name) return Array.from(new Uint32Array(r3.buffer, r3.offset, r3.typeInfo.count));
      if ("i32" === r3.typeInfo.format.name) return Array.from(new Int32Array(r3.buffer, r3.offset, r3.typeInfo.count));
      if ("f32" === r3.typeInfo.format.name) return Array.from(new Float32Array(r3.buffer, r3.offset, r3.typeInfo.count));
    }
    return console.error(`Unsupported return variable type ${r3.typeInfo.name}`), null;
  }
  execute(e4) {
    (e4 = null != e4 ? e4 : {}).constants && this._setOverrides(e4.constants, this.context), this._execStatements(this.ast, this.context);
  }
  dispatchWorkgroups(e4, t3, n3, s3) {
    const r3 = this.context.clone();
    (s3 = null != s3 ? s3 : {}).constants && this._setOverrides(s3.constants, r3), this._execStatements(this.ast, r3);
    const a3 = r3.getFunction(e4);
    if (!a3) return void console.error(`Function ${e4} not found`);
    if ("number" == typeof t3) t3 = [t3, 1, 1];
    else {
      if (0 === t3.length) return void console.error("Invalid dispatch count");
      1 === t3.length ? t3 = [t3[0], 1, 1] : 2 === t3.length ? t3 = [t3[0], t3[1], 1] : t3.length > 3 && (t3 = [t3[0], t3[1], t3[2]]);
    }
    const i4 = t3[0], o3 = t3[1], c3 = t3[2], l3 = this.getTypeInfo("vec3u");
    r3.setVariable("@num_workgroups", new Me(t3, l3));
    const u4 = this.reflection.getFunctionInfo(e4);
    null === u4 && console.error(`Function ${e4} not found in reflection data`);
    for (const e5 in n3) for (const t4 in n3[e5]) {
      const s4 = n3[e5][t4];
      r3.variables.forEach((n4) => {
        var r4;
        const a4 = n4.node;
        if (null == a4 ? void 0 : a4.attributes) {
          let i5 = null, o4 = null;
          for (const e6 of a4.attributes) "binding" === e6.name ? i5 = e6.value : "group" === e6.name && (o4 = e6.value);
          if (t4 == i5 && e5 == o4) {
            let i6 = false;
            for (const s5 of u4.resources) if (s5.name === n4.name && s5.group === parseInt(e5) && s5.binding === parseInt(t4)) {
              i6 = true;
              break;
            }
            if (i6) if (void 0 !== s4.texture && void 0 !== s4.descriptor) {
              const e6 = new We(s4.texture, this.getTypeInfo(a4.type), s4.descriptor, null !== (r4 = s4.texture.view) && void 0 !== r4 ? r4 : null);
              n4.value = e6;
            } else void 0 !== s4.uniform ? n4.value = new Pe(s4.uniform, this.getTypeInfo(a4.type)) : n4.value = new Pe(s4, this.getTypeInfo(a4.type));
          }
        }
      });
    }
    for (let e5 = 0; e5 < c3; ++e5) for (let t4 = 0; t4 < o3; ++t4) for (let n4 = 0; n4 < i4; ++n4) r3.setVariable("@workgroup_id", new Me([n4, t4, e5], this.getTypeInfo("vec3u"))), this._dispatchWorkgroup(a3, [n4, t4, e5], r3);
  }
  execStatement(e4, t3) {
    if (e4 instanceof Y) return this.evalExpression(e4.value, t3);
    if (e4 instanceof se) {
      if (e4.condition) {
        const n3 = this.evalExpression(e4.condition, t3);
        if (!(n3 instanceof Be)) throw new Error("Invalid break-if condition");
        if (!n3.value) return null;
      }
      return _dt._breakObj;
    }
    if (e4 instanceof re) return _dt._continueObj;
    if (e4 instanceof U) this._let(e4, t3);
    else if (e4 instanceof F) this._var(e4, t3);
    else if (e4 instanceof P) this._const(e4, t3);
    else if (e4 instanceof D) this._function(e4, t3);
    else {
      if (e4 instanceof Q) return this._if(e4, t3);
      if (e4 instanceof Z) return this._switch(e4, t3);
      if (e4 instanceof B) return this._for(e4, t3);
      if (e4 instanceof V) return this._while(e4, t3);
      if (e4 instanceof j) return this._loop(e4, t3);
      if (e4 instanceof O) {
        const n3 = t3.clone();
        return n3.currentFunctionName = t3.currentFunctionName, this._execStatements(e4.body, n3);
      }
      if (e4 instanceof G) this._assign(e4, t3);
      else if (e4 instanceof R) this._increment(e4, t3);
      else {
        if (e4 instanceof oe) return null;
        if (e4 instanceof M) {
          const n3 = e4.name;
          null === t3.getVariable(n3) && t3.setVariable(n3, new Be(0, this.getTypeInfo("u32")));
        } else if (e4 instanceof X) this._call(e4, t3);
        else {
          if (e4 instanceof ee) return null;
          if (e4 instanceof te) return null;
          console.error("Invalid statement type.", e4, `Line ${e4.line}`);
        }
      }
    }
    return null;
  }
  evalExpression(e4, t3) {
    return e4 instanceof Ie ? this._evalBinaryOp(e4, t3) : e4 instanceof xe ? this._evalLiteral(e4, t3) : e4 instanceof ge ? this._evalVariable(e4, t3) : e4 instanceof me ? this._evalCall(e4, t3) : e4 instanceof de ? this._evalCreate(e4, t3) : e4 instanceof _e ? this._evalConst(e4, t3) : e4 instanceof ye ? this._evalBitcast(e4, t3) : e4 instanceof ke ? this._evalUnaryOp(e4, t3) : (console.error("Invalid expression type", e4, `Line ${e4.line}`), null);
  }
  getTypeInfo(e4) {
    var t3;
    if (e4 instanceof ae) {
      const t4 = this.reflection.getTypeInfo(e4);
      if (null !== t4) return t4;
    }
    let n3 = null !== (t3 = this.typeInfo[e4]) && void 0 !== t3 ? t3 : null;
    return null !== n3 || (n3 = this.reflection.getTypeInfoByName(e4)), n3;
  }
  _setOverrides(e4, t3) {
    for (const n3 in e4) {
      const s3 = e4[n3], r3 = this.reflection.getOverrideInfo(n3);
      null !== r3 ? (null === r3.type && (r3.type = this.getTypeInfo("u32")), "u32" === r3.type.name || "i32" === r3.type.name || "f32" === r3.type.name || "f16" === r3.type.name ? t3.setVariable(n3, new Be(s3, r3.type)) : "bool" === r3.type.name ? t3.setVariable(n3, new Be(s3 ? 1 : 0, r3.type)) : "vec2" === r3.type.name || "vec3" === r3.type.name || "vec4" === r3.type.name || "vec2f" === r3.type.name || "vec3f" === r3.type.name || "vec4f" === r3.type.name || "vec2i" === r3.type.name || "vec3i" === r3.type.name || "vec4i" === r3.type.name || "vec2u" === r3.type.name || "vec3u" === r3.type.name || "vec4u" === r3.type.name || "vec2h" === r3.type.name || "vec3h" === r3.type.name || "vec4h" === r3.type.name ? t3.setVariable(n3, new Me(s3, r3.type)) : console.error(`Invalid constant type for ${n3}`)) : console.error(`Override ${n3} does not exist in the shader.`);
    }
  }
  _dispatchWorkgroup(e4, t3, n3) {
    const s3 = [1, 1, 1];
    for (const t4 of e4.node.attributes) if ("workgroup_size" === t4.name) {
      if (t4.value.length > 0) {
        const e5 = n3.getVariableValue(t4.value[0]);
        s3[0] = e5 instanceof Be ? e5.value : parseInt(t4.value[0]);
      }
      if (t4.value.length > 1) {
        const e5 = n3.getVariableValue(t4.value[1]);
        s3[1] = e5 instanceof Be ? e5.value : parseInt(t4.value[1]);
      }
      if (t4.value.length > 2) {
        const e5 = n3.getVariableValue(t4.value[2]);
        s3[2] = e5 instanceof Be ? e5.value : parseInt(t4.value[2]);
      }
    }
    const r3 = this.getTypeInfo("vec3u"), a3 = this.getTypeInfo("u32");
    n3.setVariable("@workgroup_size", new Me(s3, r3));
    const i4 = s3[0], o3 = s3[1], c3 = s3[2];
    for (let l3 = 0, u4 = 0; l3 < c3; ++l3) for (let c4 = 0; c4 < o3; ++c4) for (let o4 = 0; o4 < i4; ++o4, ++u4) {
      const i5 = [o4, c4, l3], h3 = [o4 + t3[0] * s3[0], c4 + t3[1] * s3[1], l3 + t3[2] * s3[2]];
      n3.setVariable("@local_invocation_id", new Me(i5, r3)), n3.setVariable("@global_invocation_id", new Me(h3, r3)), n3.setVariable("@local_invocation_index", new Be(u4, a3)), this._dispatchExec(e4, n3);
    }
  }
  _dispatchExec(e4, t3) {
    for (const n3 of e4.node.args) for (const e5 of n3.attributes) if ("builtin" === e5.name) {
      const s3 = `@${e5.value}`, r3 = t3.getVariable(s3);
      void 0 !== r3 && t3.variables.set(n3.name, r3);
    }
    this._execStatements(e4.node.body, t3);
  }
  getVariableName(e4, t3) {
    for (; e4 instanceof ke; ) e4 = e4.right;
    return e4 instanceof ge ? e4.name : (console.error("Unknown variable type", e4, "Line", e4.line), null);
  }
  _execStatements(e4, t3) {
    for (const n3 of e4) {
      if (n3 instanceof Array) {
        const e6 = t3.clone(), s3 = this._execStatements(n3, e6);
        if (s3) return s3;
        continue;
      }
      const e5 = this.execStatement(n3, t3);
      if (e5) return e5;
    }
    return null;
  }
  _call(e4, t3) {
    const n3 = t3.clone();
    n3.currentFunctionName = e4.name;
    const s3 = t3.getFunction(e4.name);
    if (s3) {
      for (let t4 = 0; t4 < s3.node.args.length; ++t4) {
        const r3 = s3.node.args[t4], a3 = this.evalExpression(e4.args[t4], n3);
        n3.setVariable(r3.name, a3, r3);
      }
      this._execStatements(s3.node.body, n3);
    } else if (e4.isBuiltin) this._callBuiltinFunction(e4, n3);
    else {
      this.getTypeInfo(e4.name) && this._evalCreate(e4, t3);
    }
  }
  _increment(e4, t3) {
    const n3 = this.getVariableName(e4.variable, t3), s3 = t3.getVariable(n3);
    s3 ? "++" === e4.operator ? s3.value instanceof Be ? s3.value.value++ : console.error(`Variable ${n3} is not a scalar. Line ${e4.line}`) : "--" === e4.operator ? s3.value instanceof Be ? s3.value.value-- : console.error(`Variable ${n3} is not a scalar. Line ${e4.line}`) : console.error(`Unknown increment operator ${e4.operator}. Line ${e4.line}`) : console.error(`Variable ${n3} not found. Line ${e4.line}`);
  }
  _getVariableData(e4, t3) {
    if (e4 instanceof ge) {
      const n3 = this.getVariableName(e4, t3), s3 = t3.getVariable(n3);
      return null === s3 ? (console.error(`Variable ${n3} not found. Line ${e4.line}`), null) : s3.value.getSubData(this, e4.postfix, t3);
    }
    if (e4 instanceof ke) {
      if ("*" === e4.operator) {
        const n3 = this._getVariableData(e4.right, t3);
        return n3 instanceof Oe ? n3.reference.getSubData(this, e4.postfix, t3) : (console.error(`Variable ${e4.right} is not a pointer. Line ${e4.line}`), null);
      }
      if ("&" === e4.operator) {
        const n3 = this._getVariableData(e4.right, t3);
        return new Oe(n3);
      }
    }
    return null;
  }
  _assign(e4, t3) {
    let n3 = null, s3 = "<var>", r3 = null;
    if (e4.variable instanceof ke) {
      const n4 = this._getVariableData(e4.variable, t3), s4 = this.evalExpression(e4.value, t3), r4 = e4.operator;
      if ("=" === r4) {
        if (n4 instanceof Be || n4 instanceof Me || n4 instanceof Ue) {
          if (s4 instanceof Be || s4 instanceof Me || s4 instanceof Ue && n4.data.length === s4.data.length) return void n4.data.set(s4.data);
          console.error(`Invalid assignment. Line ${e4.line}`);
        } else if (n4 instanceof Pe && s4 instanceof Pe && n4.buffer.byteLength - n4.offset >= s4.buffer.byteLength - s4.offset) return void (n4.buffer.byteLength % 4 == 0 ? new Uint32Array(n4.buffer, n4.offset, n4.typeInfo.size / 4).set(new Uint32Array(s4.buffer, s4.offset, s4.typeInfo.size / 4)) : new Uint8Array(n4.buffer, n4.offset, n4.typeInfo.size).set(new Uint8Array(s4.buffer, s4.offset, s4.typeInfo.size)));
        return console.error(`Invalid assignment. Line ${e4.line}`), null;
      }
      if ("+=" === r4) return n4 instanceof Be || n4 instanceof Me || n4 instanceof Ue ? s4 instanceof Be || s4 instanceof Me || s4 instanceof Ue ? void n4.data.set(s4.data.map((e5, t4) => n4.data[t4] + e5)) : void console.error(`Invalid assignment . Line ${e4.line}`) : void console.error(`Invalid assignment. Line ${e4.line}`);
      if ("-=" === r4) return (n4 instanceof Be || n4 instanceof Me || n4 instanceof Ue) && (s4 instanceof Be || s4 instanceof Me || s4 instanceof Ue) ? void n4.data.set(s4.data.map((e5, t4) => n4.data[t4] - e5)) : void console.error(`Invalid assignment. Line ${e4.line}`);
    }
    if (e4.variable instanceof ke) {
      if ("*" === e4.variable.operator) {
        s3 = this.getVariableName(e4.variable.right, t3);
        const r4 = t3.getVariable(s3);
        if (!(r4 && r4.value instanceof Oe)) return void console.error(`Variable ${s3} is not a pointer. Line ${e4.line}`);
        n3 = r4.value.reference;
        let a4 = e4.variable.postfix;
        if (!a4) {
          let t4 = e4.variable.right;
          for (; t4 instanceof ke; ) {
            if (t4.postfix) {
              a4 = t4.postfix;
              break;
            }
            t4 = t4.right;
          }
        }
        a4 && (n3 = n3.getSubData(this, a4, t3));
      }
    } else {
      r3 = e4.variable.postfix, s3 = this.getVariableName(e4.variable, t3);
      const a4 = t3.getVariable(s3);
      if (null === a4) return void console.error(`Variable ${s3} not found. Line ${e4.line}`);
      n3 = a4.value;
    }
    if (n3 instanceof Oe && (n3 = n3.reference), null === n3) return void console.error(`Variable ${s3} not found. Line ${e4.line}`);
    const a3 = this.evalExpression(e4.value, t3), i4 = e4.operator;
    if ("=" !== i4) {
      const s4 = n3.getSubData(this, r3, t3);
      if (s4 instanceof Me && a3 instanceof Be) {
        const t4 = s4.data, n4 = a3.value;
        if ("+=" === i4) for (let e5 = 0; e5 < t4.length; ++e5) t4[e5] += n4;
        else if ("-=" === i4) for (let e5 = 0; e5 < t4.length; ++e5) t4[e5] -= n4;
        else if ("*=" === i4) for (let e5 = 0; e5 < t4.length; ++e5) t4[e5] *= n4;
        else if ("/=" === i4) for (let e5 = 0; e5 < t4.length; ++e5) t4[e5] /= n4;
        else if ("%=" === i4) for (let e5 = 0; e5 < t4.length; ++e5) t4[e5] %= n4;
        else if ("&=" === i4) for (let e5 = 0; e5 < t4.length; ++e5) t4[e5] &= n4;
        else if ("|=" === i4) for (let e5 = 0; e5 < t4.length; ++e5) t4[e5] |= n4;
        else if ("^=" === i4) for (let e5 = 0; e5 < t4.length; ++e5) t4[e5] ^= n4;
        else if ("<<=" === i4) for (let e5 = 0; e5 < t4.length; ++e5) t4[e5] <<= n4;
        else if (">>=" === i4) for (let e5 = 0; e5 < t4.length; ++e5) t4[e5] >>= n4;
        else console.error(`Invalid operator ${i4}. Line ${e4.line}`);
      } else if (s4 instanceof Me && a3 instanceof Me) {
        const t4 = s4.data, n4 = a3.data;
        if (t4.length !== n4.length) return void console.error(`Vector length mismatch. Line ${e4.line}`);
        if ("+=" === i4) for (let e5 = 0; e5 < t4.length; ++e5) t4[e5] += n4[e5];
        else if ("-=" === i4) for (let e5 = 0; e5 < t4.length; ++e5) t4[e5] -= n4[e5];
        else if ("*=" === i4) for (let e5 = 0; e5 < t4.length; ++e5) t4[e5] *= n4[e5];
        else if ("/=" === i4) for (let e5 = 0; e5 < t4.length; ++e5) t4[e5] /= n4[e5];
        else if ("%=" === i4) for (let e5 = 0; e5 < t4.length; ++e5) t4[e5] %= n4[e5];
        else if ("&=" === i4) for (let e5 = 0; e5 < t4.length; ++e5) t4[e5] &= n4[e5];
        else if ("|=" === i4) for (let e5 = 0; e5 < t4.length; ++e5) t4[e5] |= n4[e5];
        else if ("^=" === i4) for (let e5 = 0; e5 < t4.length; ++e5) t4[e5] ^= n4[e5];
        else if ("<<=" === i4) for (let e5 = 0; e5 < t4.length; ++e5) t4[e5] <<= n4[e5];
        else if (">>=" === i4) for (let e5 = 0; e5 < t4.length; ++e5) t4[e5] >>= n4[e5];
        else console.error(`Invalid operator ${i4}. Line ${e4.line}`);
      } else {
        if (!(s4 instanceof Be && a3 instanceof Be)) return void console.error(`Invalid type for ${e4.operator} operator. Line ${e4.line}`);
        "+=" === i4 ? s4.value += a3.value : "-=" === i4 ? s4.value -= a3.value : "*=" === i4 ? s4.value *= a3.value : "/=" === i4 ? s4.value /= a3.value : "%=" === i4 ? s4.value %= a3.value : "&=" === i4 ? s4.value &= a3.value : "|=" === i4 ? s4.value |= a3.value : "^=" === i4 ? s4.value ^= a3.value : "<<=" === i4 ? s4.value <<= a3.value : ">>=" === i4 ? s4.value >>= a3.value : console.error(`Invalid operator ${i4}. Line ${e4.line}`);
      }
      return void (n3 instanceof Pe && n3.setDataValue(this, s4, r3, t3));
    }
    if (n3 instanceof Pe) n3.setDataValue(this, a3, r3, t3);
    else if (r3) {
      if (!(n3 instanceof Me || n3 instanceof Ue)) return void console.error(`Variable ${s3} is not a vector or matrix. Line ${e4.line}`);
      if (r3 instanceof ve) {
        const i5 = this.evalExpression(r3.index, t3).value;
        if (n3 instanceof Me) {
          if (!(a3 instanceof Be)) return void console.error(`Invalid assignment to ${s3}. Line ${e4.line}`);
          n3.data[i5] = a3.value;
        } else {
          if (!(n3 instanceof Ue)) return void console.error(`Invalid assignment to ${s3}. Line ${e4.line}`);
          {
            const i6 = this.evalExpression(r3.index, t3).value;
            if (i6 < 0) return void console.error(`Invalid assignment to ${s3}. Line ${e4.line}`);
            if (!(a3 instanceof Me)) return void console.error(`Invalid assignment to ${s3}. Line ${e4.line}`);
            {
              const t4 = n3.typeInfo.getTypeName();
              if ("mat2x2" === t4 || "mat2x2f" === t4 || "mat2x2h" === t4) {
                if (!(i6 < 2 && 2 === a3.data.length)) return void console.error(`Invalid assignment to ${s3}. Line ${e4.line}`);
                n3.data[2 * i6] = a3.data[0], n3.data[2 * i6 + 1] = a3.data[1];
              } else if ("mat2x3" === t4 || "mat2x3f" === t4 || "mat2x3h" === t4) {
                if (!(i6 < 2 && 3 === a3.data.length)) return void console.error(`Invalid assignment to ${s3}. Line ${e4.line}`);
                n3.data[3 * i6] = a3.data[0], n3.data[3 * i6 + 1] = a3.data[1], n3.data[3 * i6 + 2] = a3.data[2];
              } else if ("mat2x4" === t4 || "mat2x4f" === t4 || "mat2x4h" === t4) {
                if (!(i6 < 2 && 4 === a3.data.length)) return void console.error(`Invalid assignment to ${s3}. Line ${e4.line}`);
                n3.data[4 * i6] = a3.data[0], n3.data[4 * i6 + 1] = a3.data[1], n3.data[4 * i6 + 2] = a3.data[2], n3.data[4 * i6 + 3] = a3.data[3];
              } else if ("mat3x2" === t4 || "mat3x2f" === t4 || "mat3x2h" === t4) {
                if (!(i6 < 3 && 2 === a3.data.length)) return void console.error(`Invalid assignment to ${s3}. Line ${e4.line}`);
                n3.data[2 * i6] = a3.data[0], n3.data[2 * i6 + 1] = a3.data[1];
              } else if ("mat3x3" === t4 || "mat3x3f" === t4 || "mat3x3h" === t4) {
                if (!(i6 < 3 && 3 === a3.data.length)) return void console.error(`Invalid assignment to ${s3}. Line ${e4.line}`);
                n3.data[3 * i6] = a3.data[0], n3.data[3 * i6 + 1] = a3.data[1], n3.data[3 * i6 + 2] = a3.data[2];
              } else if ("mat3x4" === t4 || "mat3x4f" === t4 || "mat3x4h" === t4) {
                if (!(i6 < 3 && 4 === a3.data.length)) return void console.error(`Invalid assignment to ${s3}. Line ${e4.line}`);
                n3.data[4 * i6] = a3.data[0], n3.data[4 * i6 + 1] = a3.data[1], n3.data[4 * i6 + 2] = a3.data[2], n3.data[4 * i6 + 3] = a3.data[3];
              } else if ("mat4x2" === t4 || "mat4x2f" === t4 || "mat4x2h" === t4) {
                if (!(i6 < 4 && 2 === a3.data.length)) return void console.error(`Invalid assignment to ${s3}. Line ${e4.line}`);
                n3.data[2 * i6] = a3.data[0], n3.data[2 * i6 + 1] = a3.data[1];
              } else if ("mat4x3" === t4 || "mat4x3f" === t4 || "mat4x3h" === t4) {
                if (!(i6 < 4 && 3 === a3.data.length)) return void console.error(`Invalid assignment to ${s3}. Line ${e4.line}`);
                n3.data[3 * i6] = a3.data[0], n3.data[3 * i6 + 1] = a3.data[1], n3.data[3 * i6 + 2] = a3.data[2];
              } else {
                if ("mat4x4" !== t4 && "mat4x4f" !== t4 && "mat4x4h" !== t4) return void console.error(`Invalid assignment to ${s3}. Line ${e4.line}`);
                if (!(i6 < 4 && 4 === a3.data.length)) return void console.error(`Invalid assignment to ${s3}. Line ${e4.line}`);
                n3.data[4 * i6] = a3.data[0], n3.data[4 * i6 + 1] = a3.data[1], n3.data[4 * i6 + 2] = a3.data[2], n3.data[4 * i6 + 3] = a3.data[3];
              }
            }
          }
        }
      } else if (r3 instanceof pe) {
        const t4 = r3.value;
        if (!(n3 instanceof Me)) return void console.error(`Invalid assignment to ${t4}. Variable ${s3} is not a vector. Line ${e4.line}`);
        if (a3 instanceof Be) {
          if (t4.length > 1) return void console.error(`Invalid assignment to ${t4} for variable ${s3}. Line ${e4.line}`);
          if ("x" === t4) n3.data[0] = a3.value;
          else if ("y" === t4) {
            if (n3.data.length < 2) return void console.error(`Invalid assignment to ${t4} for variable ${s3}. Line ${e4.line}`);
            n3.data[1] = a3.value;
          } else if ("z" === t4) {
            if (n3.data.length < 3) return void console.error(`Invalid assignment to ${t4} for variable ${s3}. Line ${e4.line}`);
            n3.data[2] = a3.value;
          } else if ("w" === t4) {
            if (n3.data.length < 4) return void console.error(`Invalid assignment to ${t4} for variable ${s3}. Line ${e4.line}`);
            n3.data[3] = a3.value;
          }
        } else {
          if (!(a3 instanceof Me)) return void console.error(`Invalid assignment to ${s3}. Line ${e4.line}`);
          if (t4.length !== a3.data.length) return void console.error(`Invalid assignment to ${t4} for variable ${s3}. Line ${e4.line}`);
          for (let r4 = 0; r4 < t4.length; ++r4) {
            const i5 = t4[r4];
            if ("x" === i5 || "r" === i5) n3.data[0] = a3.data[r4];
            else if ("y" === i5 || "g" === i5) {
              if (a3.data.length < 2) return void console.error(`Invalid assignment to ${i5} for variable ${s3}. Line ${e4.line}`);
              n3.data[1] = a3.data[r4];
            } else if ("z" === i5 || "b" === i5) {
              if (a3.data.length < 3) return void console.error(`Invalid assignment to ${i5} for variable ${s3}. Line ${e4.line}`);
              n3.data[2] = a3.data[r4];
            } else {
              if ("w" !== i5 && "a" !== i5) return void console.error(`Invalid assignment to ${i5} for variable ${s3}. Line ${e4.line}`);
              if (a3.data.length < 4) return void console.error(`Invalid assignment to ${i5} for variable ${s3}. Line ${e4.line}`);
              n3.data[3] = a3.data[r4];
            }
          }
        }
      }
    } else n3 instanceof Be && a3 instanceof Be ? n3.value = a3.value : n3 instanceof Me && a3 instanceof Me || n3 instanceof Ue && a3 instanceof Ue ? n3.data.set(a3.data) : console.error(`Invalid assignment to ${s3}. Line ${e4.line}`);
  }
  _function(e4, t3) {
    const n3 = new ct(e4);
    t3.functions.set(e4.name, n3);
  }
  _const(e4, t3) {
    let n3 = null;
    null !== e4.value && (n3 = this.evalExpression(e4.value, t3)), t3.createVariable(e4.name, n3, e4);
  }
  _let(e4, t3) {
    let n3 = null;
    if (null !== e4.value) {
      if (n3 = this.evalExpression(e4.value, t3), null === n3) return void console.error(`Invalid value for variable ${e4.name}. Line ${e4.line}`);
      e4.value instanceof ke || (n3 = n3.clone());
    } else {
      const s3 = e4.type.name;
      if ("f32" === s3 || "i32" === s3 || "u32" === s3 || "bool" === s3 || "f16" === s3 || "vec2" === s3 || "vec3" === s3 || "vec4" === s3 || "vec2f" === s3 || "vec3f" === s3 || "vec4f" === s3 || "vec2i" === s3 || "vec3i" === s3 || "vec4i" === s3 || "vec2u" === s3 || "vec3u" === s3 || "vec4u" === s3 || "vec2h" === s3 || "vec3h" === s3 || "vec4h" === s3 || "vec2b" === s3 || "vec3b" === s3 || "vec4b" === s3 || "mat2x2" === s3 || "mat2x3" === s3 || "mat2x4" === s3 || "mat3x2" === s3 || "mat3x3" === s3 || "mat3x4" === s3 || "mat4x2" === s3 || "mat4x3" === s3 || "mat4x4" === s3 || "mat2x2f" === s3 || "mat2x3f" === s3 || "mat2x4f" === s3 || "mat3x2f" === s3 || "mat3x3f" === s3 || "mat3x4f" === s3 || "mat4x2f" === s3 || "mat4x3f" === s3 || "mat4x4f" === s3 || "mat2x2h" === s3 || "mat2x3h" === s3 || "mat2x4h" === s3 || "mat3x2h" === s3 || "mat3x3h" === s3 || "mat3x4h" === s3 || "mat4x2h" === s3 || "mat4x3h" === s3 || "mat4x4h" === s3 || "array" === s3) {
        const s4 = new de(e4.type, []);
        n3 = this._evalCreate(s4, t3);
      }
    }
    t3.createVariable(e4.name, n3, e4);
  }
  _var(e4, t3) {
    let n3 = null;
    if (null !== e4.value) {
      if (n3 = this.evalExpression(e4.value, t3), null === n3) return void console.error(`Invalid value for variable ${e4.name}. Line ${e4.line}`);
      e4.value instanceof ke || (n3 = n3.clone());
    } else {
      if (null === e4.type) return void console.error(`Variable ${e4.name} has no type. Line ${e4.line}`);
      const s3 = e4.type.name;
      if ("f32" === s3 || "i32" === s3 || "u32" === s3 || "bool" === s3 || "f16" === s3 || "vec2" === s3 || "vec3" === s3 || "vec4" === s3 || "vec2f" === s3 || "vec3f" === s3 || "vec4f" === s3 || "vec2i" === s3 || "vec3i" === s3 || "vec4i" === s3 || "vec2u" === s3 || "vec3u" === s3 || "vec4u" === s3 || "vec2h" === s3 || "vec3h" === s3 || "vec4h" === s3 || "vec2b" === s3 || "vec3b" === s3 || "vec4b" === s3 || "mat2x2" === s3 || "mat2x3" === s3 || "mat2x4" === s3 || "mat3x2" === s3 || "mat3x3" === s3 || "mat3x4" === s3 || "mat4x2" === s3 || "mat4x3" === s3 || "mat4x4" === s3 || "mat2x2f" === s3 || "mat2x3f" === s3 || "mat2x4f" === s3 || "mat3x2f" === s3 || "mat3x3f" === s3 || "mat3x4f" === s3 || "mat4x2f" === s3 || "mat4x3f" === s3 || "mat4x4f" === s3 || "mat2x2h" === s3 || "mat2x3h" === s3 || "mat2x4h" === s3 || "mat3x2h" === s3 || "mat3x3h" === s3 || "mat3x4h" === s3 || "mat4x2h" === s3 || "mat4x3h" === s3 || "mat4x4h" === s3 || e4.type instanceof ue || e4.type instanceof oe || e4.type instanceof ce) {
        const s4 = new de(e4.type, []);
        n3 = this._evalCreate(s4, t3);
      }
    }
    t3.createVariable(e4.name, n3, e4);
  }
  _switch(e4, t3) {
    t3 = t3.clone();
    const n3 = this.evalExpression(e4.condition, t3);
    if (!(n3 instanceof Be)) return console.error(`Invalid if condition. Line ${e4.line}`), null;
    let s3 = null;
    for (const r3 of e4.cases) if (r3 instanceof Ae) for (const a3 of r3.selectors) {
      if (a3 instanceof Se) {
        s3 = r3;
        continue;
      }
      const i4 = this.evalExpression(a3, t3);
      if (!(i4 instanceof Be)) return console.error(`Invalid case selector. Line ${e4.line}`), null;
      if (i4.value === n3.value) return this._execStatements(r3.body, t3);
    }
    else r3 instanceof Ee && (s3 = r3);
    return s3 ? this._execStatements(s3.body, t3) : null;
  }
  _if(e4, t3) {
    t3 = t3.clone();
    const n3 = this.evalExpression(e4.condition, t3);
    if (!(n3 instanceof Be)) return console.error(`Invalid if condition. Line ${e4.line}`), null;
    if (n3.value) return this._execStatements(e4.body, t3);
    for (const n4 of e4.elseif) {
      const s3 = this.evalExpression(n4.condition, t3);
      if (!(s3 instanceof Be)) return console.error(`Invalid if condition. Line ${e4.line}`), null;
      if (s3.value) return this._execStatements(n4.body, t3);
    }
    return e4.else ? this._execStatements(e4.else, t3) : null;
  }
  _getScalarValue(e4) {
    return e4 instanceof Be ? e4.value : (console.error("Expected scalar value.", e4), 0);
  }
  _for(e4, t3) {
    for (t3 = t3.clone(), this.execStatement(e4.init, t3); this._getScalarValue(this.evalExpression(e4.condition, t3)); ) {
      const n3 = this._execStatements(e4.body, t3);
      if (n3 === _dt._breakObj) break;
      if (null !== n3 && n3 !== _dt._continueObj) return n3;
      this.execStatement(e4.increment, t3);
    }
    return null;
  }
  _loop(e4, t3) {
    for (t3 = t3.clone(); ; ) {
      const n3 = this._execStatements(e4.body, t3);
      if (n3 === _dt._breakObj) break;
      if (n3 === _dt._continueObj) {
        if (e4.continuing) {
          if (this._execStatements(e4.continuing.body, t3) === _dt._breakObj) break;
        }
      } else if (null !== n3) return n3;
    }
    return null;
  }
  _while(e4, t3) {
    for (t3 = t3.clone(); this._getScalarValue(this.evalExpression(e4.condition, t3)); ) {
      const n3 = this._execStatements(e4.body, t3);
      if (n3 === _dt._breakObj) break;
      if (n3 !== _dt._continueObj && null !== n3) return n3;
    }
    return null;
  }
  _evalBitcast(e4, t3) {
    const n3 = this.evalExpression(e4.value, t3), s3 = e4.type;
    if (n3 instanceof Be) {
      const e5 = nt(n3.value, n3.typeInfo.name, s3.name);
      return new Be(e5, this.getTypeInfo(s3));
    }
    if (n3 instanceof Me) {
      const t4 = n3.typeInfo.getTypeName();
      let r3 = "";
      if (t4.endsWith("f")) r3 = "f32";
      else if (t4.endsWith("i")) r3 = "i32";
      else if (t4.endsWith("u")) r3 = "u32";
      else if (t4.endsWith("b")) r3 = "bool";
      else {
        if (!t4.endsWith("h")) return console.error(`Unknown vector type ${t4}. Line ${e4.line}`), null;
        r3 = "f16";
      }
      const a3 = s3.getTypeName();
      let i4 = "";
      if (a3.endsWith("f")) i4 = "f32";
      else if (a3.endsWith("i")) i4 = "i32";
      else if (a3.endsWith("u")) i4 = "u32";
      else if (a3.endsWith("b")) i4 = "bool";
      else {
        if (!a3.endsWith("h")) return console.error(`Unknown vector type ${i4}. Line ${e4.line}`), null;
        i4 = "f16";
      }
      const o3 = (function(e5, t5, n4) {
        if (t5 === n4) return e5;
        const s4 = new Array(e5.length);
        for (let r4 = 0; r4 < e5.length; r4++) s4[r4] = nt(e5[r4], t5, n4);
        return s4;
      })(Array.from(n3.data), r3, i4);
      return new Me(o3, this.getTypeInfo(s3));
    }
    return console.error(`TODO: bitcast for ${n3.typeInfo.name}. Line ${e4.line}`), null;
  }
  _evalConst(e4, t3) {
    return t3.getVariableValue(e4.name).clone().getSubData(this, e4.postfix, t3);
  }
  _evalCreate(e4, t3) {
    var r3;
    if (e4 instanceof de) {
      if (null === e4.type) return Ve.void;
      switch (e4.type.getTypeName()) {
        case "bool":
        case "i32":
        case "u32":
        case "f32":
        case "f16":
          return this._callConstructorValue(e4, t3);
        case "vec2":
        case "vec3":
        case "vec4":
        case "vec2f":
        case "vec3f":
        case "vec4f":
        case "vec2h":
        case "vec3h":
        case "vec4h":
        case "vec2i":
        case "vec3i":
        case "vec4i":
        case "vec2u":
        case "vec3u":
        case "vec4u":
        case "vec2b":
        case "vec3b":
        case "vec4b":
          return this._callConstructorVec(e4, t3);
        case "mat2x2":
        case "mat2x2f":
        case "mat2x2h":
        case "mat2x3":
        case "mat2x3f":
        case "mat2x3h":
        case "mat2x4":
        case "mat2x4f":
        case "mat2x4h":
        case "mat3x2":
        case "mat3x2f":
        case "mat3x2h":
        case "mat3x3":
        case "mat3x3f":
        case "mat3x3h":
        case "mat3x4":
        case "mat3x4f":
        case "mat3x4h":
        case "mat4x2":
        case "mat4x2f":
        case "mat4x2h":
        case "mat4x3":
        case "mat4x3f":
        case "mat4x3h":
        case "mat4x4":
        case "mat4x4f":
        case "mat4x4h":
          return this._callConstructorMatrix(e4, t3);
      }
    }
    const a3 = e4 instanceof de ? e4.type.name : e4.name, i4 = e4 instanceof de ? this.getTypeInfo(e4.type) : this.getTypeInfo(e4.name);
    if (null === i4) return console.error(`Unknown type ${a3}. Line ${e4.line}`), null;
    if (0 === i4.size) return null;
    const o3 = new Pe(new ArrayBuffer(i4.size), i4, 0);
    if (i4 instanceof n) {
      if (e4.args) for (let n3 = 0; n3 < e4.args.length; ++n3) {
        const s3 = i4.members[n3], r4 = e4.args[n3], a4 = this.evalExpression(r4, t3);
        o3.setData(this, a4, s3.type, s3.offset, t3);
      }
    } else if (i4 instanceof s) {
      let n3 = 0;
      if (e4.args) for (let s3 = 0; s3 < e4.args.length; ++s3) {
        const a4 = e4.args[s3], c3 = this.evalExpression(a4, t3);
        null === i4.format && ("x32" === (null === (r3 = c3.typeInfo) || void 0 === r3 ? void 0 : r3.name) ? i4.format = this.getTypeInfo("i32") : i4.format = c3.typeInfo), o3.setData(this, c3, i4.format, n3, t3), n3 += i4.stride;
      }
    } else console.error(`Unknown type "${a3}". Line ${e4.line}`);
    return e4 instanceof de ? o3.getSubData(this, e4.postfix, t3) : o3;
  }
  _evalLiteral(e4, t3) {
    const n3 = this.getTypeInfo(e4.type), s3 = n3.name;
    if ("x32" === s3 || "u32" === s3 || "f32" === s3 || "f16" === s3 || "i32" === s3 || "bool" === s3) {
      return new Be(e4.scalarValue, n3);
    }
    return "vec2" === s3 || "vec3" === s3 || "vec4" === s3 || "vec2f" === s3 || "vec3f" === s3 || "vec4f" === s3 || "vec2h" === s3 || "vec3h" === s3 || "vec4h" === s3 || "vec2i" === s3 || "vec3i" === s3 || "vec4i" === s3 || "vec2u" === s3 || "vec3u" === s3 || "vec4u" === s3 ? this._callConstructorVec(e4, t3) : "mat2x2" === s3 || "mat2x3" === s3 || "mat2x4" === s3 || "mat3x2" === s3 || "mat3x3" === s3 || "mat3x4" === s3 || "mat4x2" === s3 || "mat4x3" === s3 || "mat4x4" === s3 || "mat2x2f" === s3 || "mat2x3f" === s3 || "mat2x4f" === s3 || "mat3x2f" === s3 || "mat3x3f" === s3 || "mat3x4f" === s3 || "mat4x2f" === s3 || "mat4x3f" === s3 || "mat4x4f" === s3 || "mat2x2h" === s3 || "mat2x3h" === s3 || "mat2x4h" === s3 || "mat3x2h" === s3 || "mat3x3h" === s3 || "mat3x4h" === s3 || "mat4x2h" === s3 || "mat4x3h" === s3 || "mat4x4h" === s3 ? this._callConstructorMatrix(e4, t3) : e4.value;
  }
  _evalVariable(e4, t3) {
    const n3 = t3.getVariableValue(e4.name);
    return null === n3 ? n3 : n3.getSubData(this, e4.postfix, t3);
  }
  _maxFormatTypeInfo(e4) {
    let t3 = e4[0];
    if ("f32" === t3.name) return t3;
    for (let n3 = 1; n3 < e4.length; ++n3) {
      const s3 = _dt._priority.get(t3.name);
      _dt._priority.get(e4[n3].name) < s3 && (t3 = e4[n3]);
    }
    return "x32" === t3.name ? this.getTypeInfo("i32") : t3;
  }
  _evalUnaryOp(e4, t3) {
    const n3 = this.evalExpression(e4.right, t3);
    if ("&" === e4.operator) return new Oe(n3);
    if ("*" === e4.operator) return n3 instanceof Oe ? n3.reference.getSubData(this, e4.postfix, t3) : (console.error(`Invalid dereference. Line ${e4.line}`), null);
    const s3 = n3 instanceof Be ? n3.value : n3 instanceof Me ? Array.from(n3.data) : null;
    switch (e4.operator) {
      case "+": {
        if (Ge(s3)) {
          const e6 = s3.map((e7, t5) => +e7);
          return new Me(e6, n3.typeInfo);
        }
        const e5 = s3, t4 = this._maxFormatTypeInfo([n3.typeInfo, n3.typeInfo]);
        return new Be(+e5, t4);
      }
      case "-": {
        if (Ge(s3)) {
          const e6 = s3.map((e7, t5) => -e7);
          return new Me(e6, n3.typeInfo);
        }
        const e5 = s3, t4 = this._maxFormatTypeInfo([n3.typeInfo, n3.typeInfo]);
        return new Be(-e5, t4);
      }
      case "!": {
        if (Ge(s3)) {
          const e6 = s3.map((e7, t5) => e7 ? 0 : 1);
          return new Me(e6, n3.typeInfo);
        }
        const e5 = s3, t4 = this._maxFormatTypeInfo([n3.typeInfo, n3.typeInfo]);
        return new Be(e5 ? 0 : 1, t4);
      }
      case "~": {
        if (Ge(s3)) {
          const e6 = s3.map((e7, t5) => ~e7);
          return new Me(e6, n3.typeInfo);
        }
        const e5 = s3, t4 = this._maxFormatTypeInfo([n3.typeInfo, n3.typeInfo]);
        return new Be(~e5, t4);
      }
    }
    return console.error(`Invalid unary operator ${e4.operator}. Line ${e4.line}`), null;
  }
  _evalBinaryOp(e4, t3) {
    const n3 = this.evalExpression(e4.left, t3), s3 = this.evalExpression(e4.right, t3), r3 = n3 instanceof Be ? n3.value : n3 instanceof Me || n3 instanceof Ue ? Array.from(n3.data) : null, a3 = s3 instanceof Be ? s3.value : s3 instanceof Me || s3 instanceof Ue ? Array.from(s3.data) : null;
    switch (e4.operator) {
      case "+": {
        if (Ge(r3) && Ge(a3)) {
          const t5 = r3, s4 = a3;
          if (t5.length !== s4.length) return console.error(`Vector length mismatch. Line ${e4.line}.`), null;
          const i5 = t5.map((e5, t6) => e5 + s4[t6]);
          return new Me(i5, n3.typeInfo);
        }
        if (Ge(r3)) {
          const e5 = a3, t5 = r3.map((t6, n4) => t6 + e5);
          return new Me(t5, n3.typeInfo);
        }
        if (Ge(a3)) {
          const e5 = r3, t5 = a3.map((t6, n4) => e5 + t6);
          return new Me(t5, s3.typeInfo);
        }
        const t4 = r3, i4 = a3, o3 = this._maxFormatTypeInfo([n3.typeInfo, s3.typeInfo]);
        return new Be(t4 + i4, o3);
      }
      case "-": {
        if (Ge(r3) && Ge(a3)) {
          const t5 = r3, s4 = a3;
          if (t5.length !== s4.length) return console.error(`Vector length mismatch. Line ${e4.line}.`), null;
          const i5 = t5.map((e5, t6) => e5 - s4[t6]);
          return new Me(i5, n3.typeInfo);
        }
        if (Ge(r3)) {
          const e5 = a3, t5 = r3.map((t6, n4) => t6 - e5);
          return new Me(t5, n3.typeInfo);
        }
        if (Ge(a3)) {
          const e5 = r3, t5 = a3.map((t6, n4) => e5 - t6);
          return new Me(t5, s3.typeInfo);
        }
        const t4 = r3, i4 = a3, o3 = this._maxFormatTypeInfo([n3.typeInfo, s3.typeInfo]);
        return new Be(t4 - i4, o3);
      }
      case "*": {
        if (Ge(r3) && Ge(a3)) {
          const t5 = r3, i5 = a3;
          if (n3 instanceof Ue && s3 instanceof Ue) {
            const r4 = (function(e5, t6, n4, s4) {
              if (void 0 === pt[t6.name] || void 0 === pt[s4.name]) return null;
              const r5 = pt[t6.name][0], a5 = pt[t6.name][1], i6 = pt[s4.name][0];
              if (r5 !== pt[s4.name][1]) return null;
              const o5 = new Array(i6 * a5);
              for (let t7 = 0; t7 < a5; t7++) for (let s5 = 0; s5 < i6; s5++) {
                let c4 = 0;
                for (let i7 = 0; i7 < r5; i7++) c4 += e5[i7 * a5 + t7] * n4[s5 * r5 + i7];
                o5[t7 * i6 + s5] = c4;
              }
              return o5;
            })(t5, n3.typeInfo, i5, s3.typeInfo);
            if (null === r4) return console.error(`Matrix multiplication failed. Line ${e4.line}.`), null;
            const a4 = pt[s3.typeInfo.name][0], o4 = pt[n3.typeInfo.name][1], c3 = this.getTypeInfo(`mat${a4}x${o4}f`);
            return new Ue(r4, c3);
          }
          if (n3 instanceof Ue && s3 instanceof Me) {
            const r4 = (function(e5, t6, n4, s4) {
              if (void 0 === pt[t6.name] || void 0 === ft[s4.name]) return null;
              const r5 = pt[t6.name][0], a4 = pt[t6.name][1];
              if (r5 !== n4.length) return null;
              const i6 = new Array(a4);
              for (let t7 = 0; t7 < a4; t7++) {
                let s5 = 0;
                for (let i7 = 0; i7 < r5; i7++) s5 += e5[i7 * a4 + t7] * n4[i7];
                i6[t7] = s5;
              }
              return i6;
            })(t5, n3.typeInfo, i5, s3.typeInfo);
            return null === r4 ? (console.error(`Matrix vector multiplication failed. Line ${e4.line}.`), null) : new Me(r4, s3.typeInfo);
          }
          if (n3 instanceof Me && s3 instanceof Ue) {
            const r4 = (function(e5, t6, n4, s4) {
              if (void 0 === ft[t6.name] || void 0 === pt[s4.name]) return null;
              const r5 = pt[s4.name][0], a4 = pt[s4.name][1];
              if (a4 !== e5.length) return null;
              const i6 = [];
              for (let t7 = 0; t7 < r5; t7++) {
                let s5 = 0;
                for (let i7 = 0; i7 < a4; i7++) s5 += e5[i7] * n4[i7 * r5 + t7];
                i6[t7] = s5;
              }
              return i6;
            })(t5, n3.typeInfo, i5, s3.typeInfo);
            return null === r4 ? (console.error(`Matrix vector multiplication failed. Line ${e4.line}.`), null) : new Me(r4, n3.typeInfo);
          }
          {
            if (t5.length !== i5.length) return console.error(`Vector length mismatch. Line ${e4.line}.`), null;
            const s4 = t5.map((e5, t6) => e5 * i5[t6]);
            return new Me(s4, n3.typeInfo);
          }
        }
        if (Ge(r3)) {
          const e5 = a3, t5 = r3.map((t6, n4) => t6 * e5);
          return n3 instanceof Ue ? new Ue(t5, n3.typeInfo) : new Me(t5, n3.typeInfo);
        }
        if (Ge(a3)) {
          const e5 = r3, t5 = a3.map((t6, n4) => e5 * t6);
          return s3 instanceof Ue ? new Ue(t5, s3.typeInfo) : new Me(t5, s3.typeInfo);
        }
        const t4 = r3, i4 = a3, o3 = this._maxFormatTypeInfo([n3.typeInfo, s3.typeInfo]);
        return new Be(t4 * i4, o3);
      }
      case "%": {
        if (Ge(r3) && Ge(a3)) {
          const t5 = r3, s4 = a3;
          if (t5.length !== s4.length) return console.error(`Vector length mismatch. Line ${e4.line}.`), null;
          const i5 = t5.map((e5, t6) => e5 % s4[t6]);
          return new Me(i5, n3.typeInfo);
        }
        if (Ge(r3)) {
          const e5 = a3, t5 = r3.map((t6, n4) => t6 % e5);
          return new Me(t5, n3.typeInfo);
        }
        if (Ge(a3)) {
          const e5 = r3, t5 = a3.map((t6, n4) => e5 % t6);
          return new Me(t5, s3.typeInfo);
        }
        const t4 = r3, i4 = a3, o3 = this._maxFormatTypeInfo([n3.typeInfo, s3.typeInfo]);
        return new Be(t4 % i4, o3);
      }
      case "/": {
        if (Ge(r3) && Ge(a3)) {
          const t5 = r3, s4 = a3;
          if (t5.length !== s4.length) return console.error(`Vector length mismatch. Line ${e4.line}.`), null;
          const i5 = t5.map((e5, t6) => e5 / s4[t6]);
          return new Me(i5, n3.typeInfo);
        }
        if (Ge(r3)) {
          const e5 = a3, t5 = r3.map((t6, n4) => t6 / e5);
          return new Me(t5, n3.typeInfo);
        }
        if (Ge(a3)) {
          const e5 = r3, t5 = a3.map((t6, n4) => e5 / t6);
          return new Me(t5, s3.typeInfo);
        }
        const t4 = r3, i4 = a3, o3 = this._maxFormatTypeInfo([n3.typeInfo, s3.typeInfo]);
        return new Be(t4 / i4, o3);
      }
      case "&": {
        if (Ge(r3) && Ge(a3)) {
          const t5 = r3, s4 = a3;
          if (t5.length !== s4.length) return console.error(`Vector length mismatch. Line ${e4.line}.`), null;
          const i5 = t5.map((e5, t6) => e5 & s4[t6]);
          return new Me(i5, n3.typeInfo);
        }
        if (Ge(r3)) {
          const e5 = a3, t5 = r3.map((t6, n4) => t6 & e5);
          return new Me(t5, n3.typeInfo);
        }
        if (Ge(a3)) {
          const e5 = r3, t5 = a3.map((t6, n4) => e5 & t6);
          return new Me(t5, s3.typeInfo);
        }
        const t4 = r3, i4 = a3, o3 = this._maxFormatTypeInfo([n3.typeInfo, s3.typeInfo]);
        return new Be(t4 & i4, o3);
      }
      case "|": {
        if (Ge(r3) && Ge(a3)) {
          const t5 = r3, s4 = a3;
          if (t5.length !== s4.length) return console.error(`Vector length mismatch. Line ${e4.line}.`), null;
          const i5 = t5.map((e5, t6) => e5 | s4[t6]);
          return new Me(i5, n3.typeInfo);
        }
        if (Ge(r3)) {
          const e5 = a3, t5 = r3.map((t6, n4) => t6 | e5);
          return new Me(t5, n3.typeInfo);
        }
        if (Ge(a3)) {
          const e5 = r3, t5 = a3.map((t6, n4) => e5 | t6);
          return new Me(t5, s3.typeInfo);
        }
        const t4 = r3, i4 = a3, o3 = this._maxFormatTypeInfo([n3.typeInfo, s3.typeInfo]);
        return new Be(t4 | i4, o3);
      }
      case "^": {
        if (Ge(r3) && Ge(a3)) {
          const t5 = r3, s4 = a3;
          if (t5.length !== s4.length) return console.error(`Vector length mismatch. Line ${e4.line}.`), null;
          const i5 = t5.map((e5, t6) => e5 ^ s4[t6]);
          return new Me(i5, n3.typeInfo);
        }
        if (Ge(r3)) {
          const e5 = a3, t5 = r3.map((t6, n4) => t6 ^ e5);
          return new Me(t5, n3.typeInfo);
        }
        if (Ge(a3)) {
          const e5 = r3, t5 = a3.map((t6, n4) => e5 ^ t6);
          return new Me(t5, s3.typeInfo);
        }
        const t4 = r3, i4 = a3, o3 = this._maxFormatTypeInfo([n3.typeInfo, s3.typeInfo]);
        return new Be(t4 ^ i4, o3);
      }
      case "<<": {
        if (Ge(r3) && Ge(a3)) {
          const t5 = r3, s4 = a3;
          if (t5.length !== s4.length) return console.error(`Vector length mismatch. Line ${e4.line}.`), null;
          const i5 = t5.map((e5, t6) => e5 << s4[t6]);
          return new Me(i5, n3.typeInfo);
        }
        if (Ge(r3)) {
          const e5 = a3, t5 = r3.map((t6, n4) => t6 << e5);
          return new Me(t5, n3.typeInfo);
        }
        if (Ge(a3)) {
          const e5 = r3, t5 = a3.map((t6, n4) => e5 << t6);
          return new Me(t5, s3.typeInfo);
        }
        const t4 = r3, i4 = a3, o3 = this._maxFormatTypeInfo([n3.typeInfo, s3.typeInfo]);
        return new Be(t4 << i4, o3);
      }
      case ">>": {
        if (Ge(r3) && Ge(a3)) {
          const t5 = r3, s4 = a3;
          if (t5.length !== s4.length) return console.error(`Vector length mismatch. Line ${e4.line}.`), null;
          const i5 = t5.map((e5, t6) => e5 >> s4[t6]);
          return new Me(i5, n3.typeInfo);
        }
        if (Ge(r3)) {
          const e5 = a3, t5 = r3.map((t6, n4) => t6 >> e5);
          return new Me(t5, n3.typeInfo);
        }
        if (Ge(a3)) {
          const e5 = r3, t5 = a3.map((t6, n4) => e5 >> t6);
          return new Me(t5, s3.typeInfo);
        }
        const t4 = r3, i4 = a3, o3 = this._maxFormatTypeInfo([n3.typeInfo, s3.typeInfo]);
        return new Be(t4 >> i4, o3);
      }
      case ">":
        if (Ge(r3) && Ge(a3)) {
          const t4 = r3, s4 = a3;
          if (t4.length !== s4.length) return console.error(`Vector length mismatch. Line ${e4.line}.`), null;
          const i4 = t4.map((e5, t5) => e5 > s4[t5] ? 1 : 0);
          return new Me(i4, n3.typeInfo);
        }
        if (Ge(r3)) {
          const e5 = a3, t4 = r3.map((t5, n4) => t5 > e5 ? 1 : 0);
          return new Me(t4, n3.typeInfo);
        }
        if (Ge(a3)) {
          const e5 = r3, t4 = a3.map((t5, n4) => e5 > t5 ? 1 : 0);
          return new Me(t4, s3.typeInfo);
        }
        return new Be(r3 > a3 ? 1 : 0, this.getTypeInfo("bool"));
      case "<":
        if (Ge(r3) && Ge(a3)) {
          const t4 = r3, s4 = a3;
          if (t4.length !== s4.length) return console.error(`Vector length mismatch. Line ${e4.line}.`), null;
          const i4 = t4.map((e5, t5) => e5 < s4[t5] ? 1 : 0);
          return new Me(i4, n3.typeInfo);
        }
        if (Ge(r3)) {
          const e5 = a3, t4 = r3.map((t5, n4) => t5 < e5 ? 1 : 0);
          return new Me(t4, n3.typeInfo);
        }
        if (Ge(a3)) {
          const e5 = r3, t4 = a3.map((t5, n4) => e5 < t5 ? 1 : 0);
          return new Me(t4, s3.typeInfo);
        }
        return new Be(r3 < a3 ? 1 : 0, this.getTypeInfo("bool"));
      case "==":
        if (Ge(r3) && Ge(a3)) {
          const t4 = r3, s4 = a3;
          if (t4.length !== s4.length) return console.error(`Vector length mismatch. Line ${e4.line}.`), null;
          const i4 = t4.map((e5, t5) => e5 === s4[t5] ? 1 : 0);
          return new Me(i4, n3.typeInfo);
        }
        if (Ge(r3)) {
          const e5 = a3, t4 = r3.map((t5, n4) => t5 == e5 ? 1 : 0);
          return new Me(t4, n3.typeInfo);
        }
        if (Ge(a3)) {
          const e5 = r3, t4 = a3.map((t5, n4) => e5 == t5 ? 1 : 0);
          return new Me(t4, s3.typeInfo);
        }
        return new Be(r3 === a3 ? 1 : 0, this.getTypeInfo("bool"));
      case "!=":
        if (Ge(r3) && Ge(a3)) {
          const t4 = r3, s4 = a3;
          if (t4.length !== s4.length) return console.error(`Vector length mismatch. Line ${e4.line}.`), null;
          const i4 = t4.map((e5, t5) => e5 !== s4[t5] ? 1 : 0);
          return new Me(i4, n3.typeInfo);
        }
        if (Ge(r3)) {
          const e5 = a3, t4 = r3.map((t5, n4) => t5 !== e5 ? 1 : 0);
          return new Me(t4, n3.typeInfo);
        }
        if (Ge(a3)) {
          const e5 = r3, t4 = a3.map((t5, n4) => e5 !== t5 ? 1 : 0);
          return new Me(t4, s3.typeInfo);
        }
        return new Be(r3 !== a3 ? 1 : 0, this.getTypeInfo("bool"));
      case ">=":
        if (Ge(r3) && Ge(a3)) {
          const t4 = r3, s4 = a3;
          if (t4.length !== s4.length) return console.error(`Vector length mismatch. Line ${e4.line}.`), null;
          const i4 = t4.map((e5, t5) => e5 >= s4[t5] ? 1 : 0);
          return new Me(i4, n3.typeInfo);
        }
        if (Ge(r3)) {
          const e5 = a3, t4 = r3.map((t5, n4) => t5 >= e5 ? 1 : 0);
          return new Me(t4, n3.typeInfo);
        }
        if (Ge(a3)) {
          const e5 = r3, t4 = a3.map((t5, n4) => e5 >= t5 ? 1 : 0);
          return new Me(t4, s3.typeInfo);
        }
        return new Be(r3 >= a3 ? 1 : 0, this.getTypeInfo("bool"));
      case "<=":
        if (Ge(r3) && Ge(a3)) {
          const t4 = r3, s4 = a3;
          if (t4.length !== s4.length) return console.error(`Vector length mismatch. Line ${e4.line}.`), null;
          const i4 = t4.map((e5, t5) => e5 <= s4[t5] ? 1 : 0);
          return new Me(i4, n3.typeInfo);
        }
        if (Ge(r3)) {
          const e5 = a3, t4 = r3.map((t5, n4) => t5 <= e5 ? 1 : 0);
          return new Me(t4, n3.typeInfo);
        }
        if (Ge(a3)) {
          const e5 = r3, t4 = a3.map((t5, n4) => e5 <= t5 ? 1 : 0);
          return new Me(t4, s3.typeInfo);
        }
        return new Be(r3 <= a3 ? 1 : 0, this.getTypeInfo("bool"));
      case "&&":
        if (Ge(r3) && Ge(a3)) {
          const t4 = r3, s4 = a3;
          if (t4.length !== s4.length) return console.error(`Vector length mismatch. Line ${e4.line}.`), null;
          const i4 = t4.map((e5, t5) => e5 && s4[t5] ? 1 : 0);
          return new Me(i4, n3.typeInfo);
        }
        if (Ge(r3)) {
          const e5 = a3, t4 = r3.map((t5, n4) => t5 && e5 ? 1 : 0);
          return new Me(t4, n3.typeInfo);
        }
        if (Ge(a3)) {
          const e5 = r3, t4 = a3.map((t5, n4) => e5 && t5 ? 1 : 0);
          return new Me(t4, s3.typeInfo);
        }
        return new Be(r3 && a3 ? 1 : 0, this.getTypeInfo("bool"));
      case "||":
        if (Ge(r3) && Ge(a3)) {
          const t4 = r3, s4 = a3;
          if (t4.length !== s4.length) return console.error(`Vector length mismatch. Line ${e4.line}.`), null;
          const i4 = t4.map((e5, t5) => e5 || s4[t5] ? 1 : 0);
          return new Me(i4, n3.typeInfo);
        }
        if (Ge(r3)) {
          const e5 = a3, t4 = r3.map((t5, n4) => t5 || e5 ? 1 : 0);
          return new Me(t4, n3.typeInfo);
        }
        if (Ge(a3)) {
          const e5 = r3, t4 = a3.map((t5, n4) => e5 || t5 ? 1 : 0);
          return new Me(t4, s3.typeInfo);
        }
        return new Be(r3 || a3 ? 1 : 0, this.getTypeInfo("bool"));
    }
    return console.error(`Unknown operator ${e4.operator}. Line ${e4.line}`), null;
  }
  _evalCall(e4, t3) {
    if (null !== e4.cachedReturnValue) return e4.cachedReturnValue;
    const n3 = t3.clone();
    n3.currentFunctionName = e4.name;
    const s3 = t3.getFunction(e4.name);
    if (!s3) {
      if (e4.isBuiltin) return this._callBuiltinFunction(e4, n3);
      return this.getTypeInfo(e4.name) ? this._evalCreate(e4, t3) : (console.error(`Unknown function "${e4.name}". Line ${e4.line}`), null);
    }
    for (let t4 = 0; t4 < s3.node.args.length; ++t4) {
      const r3 = s3.node.args[t4], a3 = this.evalExpression(e4.args[t4], n3);
      n3.createVariable(r3.name, a3, r3);
    }
    return this._execStatements(s3.node.body, n3);
  }
  _callBuiltinFunction(e4, t3) {
    switch (e4.name) {
      case "all":
        return this.builtins.All(e4, t3);
      case "any":
        return this.builtins.Any(e4, t3);
      case "select":
        return this.builtins.Select(e4, t3);
      case "arrayLength":
        return this.builtins.ArrayLength(e4, t3);
      case "abs":
        return this.builtins.Abs(e4, t3);
      case "acos":
        return this.builtins.Acos(e4, t3);
      case "acosh":
        return this.builtins.Acosh(e4, t3);
      case "asin":
        return this.builtins.Asin(e4, t3);
      case "asinh":
        return this.builtins.Asinh(e4, t3);
      case "atan":
        return this.builtins.Atan(e4, t3);
      case "atanh":
        return this.builtins.Atanh(e4, t3);
      case "atan2":
        return this.builtins.Atan2(e4, t3);
      case "ceil":
        return this.builtins.Ceil(e4, t3);
      case "clamp":
        return this.builtins.Clamp(e4, t3);
      case "cos":
        return this.builtins.Cos(e4, t3);
      case "cosh":
        return this.builtins.Cosh(e4, t3);
      case "countLeadingZeros":
        return this.builtins.CountLeadingZeros(e4, t3);
      case "countOneBits":
        return this.builtins.CountOneBits(e4, t3);
      case "countTrailingZeros":
        return this.builtins.CountTrailingZeros(e4, t3);
      case "cross":
        return this.builtins.Cross(e4, t3);
      case "degrees":
        return this.builtins.Degrees(e4, t3);
      case "determinant":
        return this.builtins.Determinant(e4, t3);
      case "distance":
        return this.builtins.Distance(e4, t3);
      case "dot":
        return this.builtins.Dot(e4, t3);
      case "dot4U8Packed":
        return this.builtins.Dot4U8Packed(e4, t3);
      case "dot4I8Packed":
        return this.builtins.Dot4I8Packed(e4, t3);
      case "exp":
        return this.builtins.Exp(e4, t3);
      case "exp2":
        return this.builtins.Exp2(e4, t3);
      case "extractBits":
        return this.builtins.ExtractBits(e4, t3);
      case "faceForward":
        return this.builtins.FaceForward(e4, t3);
      case "firstLeadingBit":
        return this.builtins.FirstLeadingBit(e4, t3);
      case "firstTrailingBit":
        return this.builtins.FirstTrailingBit(e4, t3);
      case "floor":
        return this.builtins.Floor(e4, t3);
      case "fma":
        return this.builtins.Fma(e4, t3);
      case "fract":
        return this.builtins.Fract(e4, t3);
      case "frexp":
        return this.builtins.Frexp(e4, t3);
      case "insertBits":
        return this.builtins.InsertBits(e4, t3);
      case "inverseSqrt":
        return this.builtins.InverseSqrt(e4, t3);
      case "ldexp":
        return this.builtins.Ldexp(e4, t3);
      case "length":
        return this.builtins.Length(e4, t3);
      case "log":
        return this.builtins.Log(e4, t3);
      case "log2":
        return this.builtins.Log2(e4, t3);
      case "max":
        return this.builtins.Max(e4, t3);
      case "min":
        return this.builtins.Min(e4, t3);
      case "mix":
        return this.builtins.Mix(e4, t3);
      case "modf":
        return this.builtins.Modf(e4, t3);
      case "normalize":
        return this.builtins.Normalize(e4, t3);
      case "pow":
        return this.builtins.Pow(e4, t3);
      case "quantizeToF16":
        return this.builtins.QuantizeToF16(e4, t3);
      case "radians":
        return this.builtins.Radians(e4, t3);
      case "reflect":
        return this.builtins.Reflect(e4, t3);
      case "refract":
        return this.builtins.Refract(e4, t3);
      case "reverseBits":
        return this.builtins.ReverseBits(e4, t3);
      case "round":
        return this.builtins.Round(e4, t3);
      case "saturate":
        return this.builtins.Saturate(e4, t3);
      case "sign":
        return this.builtins.Sign(e4, t3);
      case "sin":
        return this.builtins.Sin(e4, t3);
      case "sinh":
        return this.builtins.Sinh(e4, t3);
      case "smoothstep":
        return this.builtins.SmoothStep(e4, t3);
      case "sqrt":
        return this.builtins.Sqrt(e4, t3);
      case "step":
        return this.builtins.Step(e4, t3);
      case "tan":
        return this.builtins.Tan(e4, t3);
      case "tanh":
        return this.builtins.Tanh(e4, t3);
      case "transpose":
        return this.builtins.Transpose(e4, t3);
      case "trunc":
        return this.builtins.Trunc(e4, t3);
      case "dpdx":
        return this.builtins.Dpdx(e4, t3);
      case "dpdxCoarse":
        return this.builtins.DpdxCoarse(e4, t3);
      case "dpdxFine":
        return this.builtins.DpdxFine(e4, t3);
      case "dpdy":
        return this.builtins.Dpdy(e4, t3);
      case "dpdyCoarse":
        return this.builtins.DpdyCoarse(e4, t3);
      case "dpdyFine":
        return this.builtins.DpdyFine(e4, t3);
      case "fwidth":
        return this.builtins.Fwidth(e4, t3);
      case "fwidthCoarse":
        return this.builtins.FwidthCoarse(e4, t3);
      case "fwidthFine":
        return this.builtins.FwidthFine(e4, t3);
      case "textureDimensions":
        return this.builtins.TextureDimensions(e4, t3);
      case "textureGather":
        return this.builtins.TextureGather(e4, t3);
      case "textureGatherCompare":
        return this.builtins.TextureGatherCompare(e4, t3);
      case "textureLoad":
        return this.builtins.TextureLoad(e4, t3);
      case "textureNumLayers":
        return this.builtins.TextureNumLayers(e4, t3);
      case "textureNumLevels":
        return this.builtins.TextureNumLevels(e4, t3);
      case "textureNumSamples":
        return this.builtins.TextureNumSamples(e4, t3);
      case "textureSample":
        return this.builtins.TextureSample(e4, t3);
      case "textureSampleBias":
        return this.builtins.TextureSampleBias(e4, t3);
      case "textureSampleCompare":
        return this.builtins.TextureSampleCompare(e4, t3);
      case "textureSampleCompareLevel":
        return this.builtins.TextureSampleCompareLevel(e4, t3);
      case "textureSampleGrad":
        return this.builtins.TextureSampleGrad(e4, t3);
      case "textureSampleLevel":
        return this.builtins.TextureSampleLevel(e4, t3);
      case "textureSampleBaseClampToEdge":
        return this.builtins.TextureSampleBaseClampToEdge(e4, t3);
      case "textureStore":
        return this.builtins.TextureStore(e4, t3);
      case "atomicLoad":
        return this.builtins.AtomicLoad(e4, t3);
      case "atomicStore":
        return this.builtins.AtomicStore(e4, t3);
      case "atomicAdd":
        return this.builtins.AtomicAdd(e4, t3);
      case "atomicSub":
        return this.builtins.AtomicSub(e4, t3);
      case "atomicMax":
        return this.builtins.AtomicMax(e4, t3);
      case "atomicMin":
        return this.builtins.AtomicMin(e4, t3);
      case "atomicAnd":
        return this.builtins.AtomicAnd(e4, t3);
      case "atomicOr":
        return this.builtins.AtomicOr(e4, t3);
      case "atomicXor":
        return this.builtins.AtomicXor(e4, t3);
      case "atomicExchange":
        return this.builtins.AtomicExchange(e4, t3);
      case "atomicCompareExchangeWeak":
        return this.builtins.AtomicCompareExchangeWeak(e4, t3);
      case "pack4x8snorm":
        return this.builtins.Pack4x8snorm(e4, t3);
      case "pack4x8unorm":
        return this.builtins.Pack4x8unorm(e4, t3);
      case "pack4xI8":
        return this.builtins.Pack4xI8(e4, t3);
      case "pack4xU8":
        return this.builtins.Pack4xU8(e4, t3);
      case "pack4x8Clamp":
        return this.builtins.Pack4x8Clamp(e4, t3);
      case "pack4xU8Clamp":
        return this.builtins.Pack4xU8Clamp(e4, t3);
      case "pack2x16snorm":
        return this.builtins.Pack2x16snorm(e4, t3);
      case "pack2x16unorm":
        return this.builtins.Pack2x16unorm(e4, t3);
      case "pack2x16float":
        return this.builtins.Pack2x16float(e4, t3);
      case "unpack4x8snorm":
        return this.builtins.Unpack4x8snorm(e4, t3);
      case "unpack4x8unorm":
        return this.builtins.Unpack4x8unorm(e4, t3);
      case "unpack4xI8":
        return this.builtins.Unpack4xI8(e4, t3);
      case "unpack4xU8":
        return this.builtins.Unpack4xU8(e4, t3);
      case "unpack2x16snorm":
        return this.builtins.Unpack2x16snorm(e4, t3);
      case "unpack2x16unorm":
        return this.builtins.Unpack2x16unorm(e4, t3);
      case "unpack2x16float":
        return this.builtins.Unpack2x16float(e4, t3);
      case "storageBarrier":
        return this.builtins.StorageBarrier(e4, t3);
      case "textureBarrier":
        return this.builtins.TextureBarrier(e4, t3);
      case "workgroupBarrier":
        return this.builtins.WorkgroupBarrier(e4, t3);
      case "workgroupUniformLoad":
        return this.builtins.WorkgroupUniformLoad(e4, t3);
      case "subgroupAdd":
        return this.builtins.SubgroupAdd(e4, t3);
      case "subgroupExclusiveAdd":
        return this.builtins.SubgroupExclusiveAdd(e4, t3);
      case "subgroupInclusiveAdd":
        return this.builtins.SubgroupInclusiveAdd(e4, t3);
      case "subgroupAll":
        return this.builtins.SubgroupAll(e4, t3);
      case "subgroupAnd":
        return this.builtins.SubgroupAnd(e4, t3);
      case "subgroupAny":
        return this.builtins.SubgroupAny(e4, t3);
      case "subgroupBallot":
        return this.builtins.SubgroupBallot(e4, t3);
      case "subgroupBroadcast":
        return this.builtins.SubgroupBroadcast(e4, t3);
      case "subgroupBroadcastFirst":
        return this.builtins.SubgroupBroadcastFirst(e4, t3);
      case "subgroupElect":
        return this.builtins.SubgroupElect(e4, t3);
      case "subgroupMax":
        return this.builtins.SubgroupMax(e4, t3);
      case "subgroupMin":
        return this.builtins.SubgroupMin(e4, t3);
      case "subgroupMul":
        return this.builtins.SubgroupMul(e4, t3);
      case "subgroupExclusiveMul":
        return this.builtins.SubgroupExclusiveMul(e4, t3);
      case "subgroupInclusiveMul":
        return this.builtins.SubgroupInclusiveMul(e4, t3);
      case "subgroupOr":
        return this.builtins.SubgroupOr(e4, t3);
      case "subgroupShuffle":
        return this.builtins.SubgroupShuffle(e4, t3);
      case "subgroupShuffleDown":
        return this.builtins.SubgroupShuffleDown(e4, t3);
      case "subgroupShuffleUp":
        return this.builtins.SubgroupShuffleUp(e4, t3);
      case "subgroupShuffleXor":
        return this.builtins.SubgroupShuffleXor(e4, t3);
      case "subgroupXor":
        return this.builtins.SubgroupXor(e4, t3);
      case "quadBroadcast":
        return this.builtins.QuadBroadcast(e4, t3);
      case "quadSwapDiagonal":
        return this.builtins.QuadSwapDiagonal(e4, t3);
      case "quadSwapX":
        return this.builtins.QuadSwapX(e4, t3);
      case "quadSwapY":
        return this.builtins.QuadSwapY(e4, t3);
    }
    const n3 = t3.getFunction(e4.name);
    if (n3) {
      const s3 = t3.clone();
      for (let t4 = 0; t4 < n3.node.args.length; ++t4) {
        const r3 = n3.node.args[t4], a3 = this.evalExpression(e4.args[t4], s3);
        s3.setVariable(r3.name, a3, r3);
      }
      return this._execStatements(n3.node.body, s3);
    }
    return null;
  }
  _callConstructorValue(e4, t3) {
    if (!e4.args || 0 === e4.args.length) return new Be(0, this.getTypeInfo(e4.type));
    const n3 = this.evalExpression(e4.args[0], t3);
    return n3.typeInfo = this.getTypeInfo(e4.type), n3.getSubData(this, e4.postfix, t3).clone();
  }
  _callConstructorVec(e4, t3) {
    const n3 = this.getTypeInfo(e4.type), s3 = e4.type.getTypeName(), r3 = ft[s3];
    if (void 0 === r3) return console.error(`Invalid vec constructor ${s3}. Line ${e4.line}`), null;
    const a3 = [];
    if (e4 instanceof xe) if (e4.isVector) {
      const t4 = e4.vectorValue;
      for (const e5 of t4) a3.push(e5);
    } else a3.push(e4.scalarValue);
    else if (e4.args) for (const n4 of e4.args) {
      const e5 = this.evalExpression(n4, t3);
      if (e5 instanceof Me) {
        const t4 = e5.data;
        for (let e6 = 0; e6 < t4.length; ++e6) {
          let n5 = t4[e6];
          a3.push(n5);
        }
      } else if (e5 instanceof Be) {
        let t4 = e5.value;
        a3.push(t4);
      }
    }
    if (e4.type instanceof ce && null === e4.type.format && (e4.type.format = ce.f32), 0 === a3.length) {
      const s4 = new Array(r3).fill(0);
      return new Me(s4, n3).getSubData(this, e4.postfix, t3);
    }
    if (1 === a3.length) for (; a3.length < r3; ) a3.push(a3[0]);
    if (a3.length < r3) return console.error(`Invalid vec constructor. Line ${e4.line}`), null;
    return new Me(a3.length > r3 ? a3.slice(0, r3) : a3, n3).getSubData(this, e4.postfix, t3);
  }
  _callConstructorMatrix(e4, t3) {
    const n3 = this.getTypeInfo(e4.type), s3 = e4.type.getTypeName(), r3 = pt[s3];
    if (void 0 === r3) return console.error(`Invalid matrix constructor ${s3}. Line ${e4.line}`), null;
    const i4 = [];
    if (e4 instanceof xe) if (e4.isVector) {
      const t4 = e4.vectorValue;
      for (const e5 of t4) i4.push(e5);
    } else i4.push(e4.scalarValue);
    else if (e4.args) for (const n4 of e4.args) {
      const e5 = this.evalExpression(n4, t3);
      e5 instanceof Me ? i4.push(...e5.data) : e5 instanceof Be ? i4.push(e5.value) : e5 instanceof Ue && i4.push(...e5.data);
    }
    if (n3 instanceof a && null === n3.format && (n3.format = this.getTypeInfo("f32")), 0 === i4.length) {
      const s4 = new Array(r3[2]).fill(0);
      return new Ue(s4, n3).getSubData(this, e4.postfix, t3);
    }
    return i4.length !== r3[2] ? (console.error(`Invalid matrix constructor. Line ${e4.line}`), null) : new Ue(i4, n3).getSubData(this, e4.postfix, t3);
  }
};
dt._breakObj = new Ne(new e("BREAK", null), null), dt._continueObj = new Ne(new e("CONTINUE", null), null), dt._priority = /* @__PURE__ */ new Map([["f32", 0], ["f16", 1], ["u32", 2], ["i32", 3], ["x32", 3]]);
var mt = class {
  constructor() {
    this.constants = /* @__PURE__ */ new Map(), this.aliases = /* @__PURE__ */ new Map(), this.structs = /* @__PURE__ */ new Map();
  }
};
var gt = class {
  constructor() {
    this._tokens = [], this._current = 0, this._currentLine = 1, this._deferArrayCountEval = [], this._currentLoop = [], this._context = new mt(), this._exec = new dt(), this._forwardTypeCount = 0;
  }
  parse(e4) {
    this._initialize(e4), this._deferArrayCountEval.length = 0;
    const t3 = [];
    for (; !this._isAtEnd(); ) {
      const e5 = this._global_decl_or_directive();
      if (!e5) break;
      t3.push(e5);
    }
    if (this._deferArrayCountEval.length > 0) {
      for (const e5 of this._deferArrayCountEval) {
        const t4 = e5.arrayType, n3 = e5.countNode;
        if (n3 instanceof ge) {
          const e6 = n3.name, s3 = this._context.constants.get(e6);
          if (s3) try {
            const e7 = s3.constEvaluate(this._exec);
            t4.count = e7;
          } catch (e7) {
          }
        }
      }
      this._deferArrayCountEval.length = 0;
    }
    if (this._forwardTypeCount > 0) for (const e5 of t3) e5.search((e6) => {
      e6 instanceof Ce || e6 instanceof le ? e6.type = this._forwardType(e6.type) : e6 instanceof ue ? e6.format = this._forwardType(e6.format) : e6 instanceof F || e6 instanceof U || e6 instanceof P ? e6.type = this._forwardType(e6.type) : e6 instanceof D ? e6.returnType = this._forwardType(e6.returnType) : e6 instanceof $e && (e6.type = this._forwardType(e6.type));
    });
    return t3;
  }
  _forwardType(e4) {
    if (e4 instanceof ie) {
      const t3 = this._getType(e4.name);
      if (t3) return t3;
    } else e4 instanceof le ? e4.type = this._forwardType(e4.type) : e4 instanceof ue && (e4.format = this._forwardType(e4.format));
    return e4;
  }
  _initialize(e4) {
    if (e4) if ("string" == typeof e4) {
      const t3 = new Re(e4);
      this._tokens = t3.scanTokens();
    } else this._tokens = e4;
    else this._tokens = [];
    this._current = 0;
  }
  _updateNode(e4, t3) {
    return e4.line = null != t3 ? t3 : this._currentLine, e4;
  }
  _error(e4, t3) {
    return { token: e4, message: t3, toString: () => `${t3}` };
  }
  _isAtEnd() {
    return this._current >= this._tokens.length || this._peek().type == He.eof;
  }
  _match(e4) {
    if (e4 instanceof qe) return !!this._check(e4) && (this._advance(), true);
    for (let t3 = 0, n3 = e4.length; t3 < n3; ++t3) {
      const n4 = e4[t3];
      if (this._check(n4)) return this._advance(), true;
    }
    return false;
  }
  _consume(e4, t3) {
    if (this._check(e4)) return this._advance();
    throw this._error(this._peek(), `${t3}. Line:${this._currentLine}`);
  }
  _check(e4) {
    if (this._isAtEnd()) return false;
    const t3 = this._peek();
    if (e4 instanceof Array) {
      const n3 = t3.type;
      let s3 = false;
      for (const t4 of e4) {
        if (n3 === t4) return true;
        t4 === He.tokens.name && (s3 = true);
      }
      if (s3) {
        const e5 = He.tokens.name.rule.exec(t3.lexeme);
        if (e5 && 0 == e5.index && e5[0] == t3.lexeme) return true;
      }
      return false;
    }
    if (t3.type === e4) return true;
    if (e4 === He.tokens.name) {
      const e5 = He.tokens.name.rule.exec(t3.lexeme);
      return e5 && 0 == e5.index && e5[0] == t3.lexeme;
    }
    return false;
  }
  _advance() {
    var e4, t3;
    return this._currentLine = null !== (t3 = null === (e4 = this._peek()) || void 0 === e4 ? void 0 : e4.line) && void 0 !== t3 ? t3 : -1, this._isAtEnd() || this._current++, this._previous();
  }
  _peek() {
    return this._tokens[this._current];
  }
  _previous() {
    return this._tokens[this._current - 1];
  }
  _global_decl_or_directive() {
    for (; this._match(He.tokens.semicolon) && !this._isAtEnd(); ) ;
    if (this._match(He.keywords.alias)) {
      const e5 = this._type_alias();
      return this._consume(He.tokens.semicolon, "Expected ';'"), this._exec.reflection.updateAST([e5]), e5;
    }
    if (this._match(He.keywords.diagnostic)) {
      const e5 = this._diagnostic();
      return this._consume(He.tokens.semicolon, "Expected ';'"), this._exec.reflection.updateAST([e5]), e5;
    }
    if (this._match(He.keywords.requires)) {
      const e5 = this._requires_directive();
      return this._consume(He.tokens.semicolon, "Expected ';'"), this._exec.reflection.updateAST([e5]), e5;
    }
    if (this._match(He.keywords.enable)) {
      const e5 = this._enable_directive();
      return this._consume(He.tokens.semicolon, "Expected ';'"), this._exec.reflection.updateAST([e5]), e5;
    }
    const e4 = this._attribute();
    if (this._check(He.keywords.var)) {
      const t3 = this._global_variable_decl();
      return null != t3 && (t3.attributes = e4), this._consume(He.tokens.semicolon, "Expected ';'."), this._exec.reflection.updateAST([t3]), t3;
    }
    if (this._check(He.keywords.override)) {
      const t3 = this._override_variable_decl();
      return null != t3 && (t3.attributes = e4), this._consume(He.tokens.semicolon, "Expected ';'."), this._exec.reflection.updateAST([t3]), t3;
    }
    if (this._check(He.keywords.let)) {
      const t3 = this._global_let_decl();
      return null != t3 && (t3.attributes = e4), this._consume(He.tokens.semicolon, "Expected ';'."), this._exec.reflection.updateAST([t3]), t3;
    }
    if (this._check(He.keywords.const)) {
      const t3 = this._global_const_decl();
      return null != t3 && (t3.attributes = e4), this._consume(He.tokens.semicolon, "Expected ';'."), this._exec.reflection.updateAST([t3]), t3;
    }
    if (this._check(He.keywords.struct)) {
      const t3 = this._struct_decl();
      return null != t3 && (t3.attributes = e4), this._exec.reflection.updateAST([t3]), t3;
    }
    if (this._check(He.keywords.fn)) {
      const t3 = this._function_decl();
      return null != t3 && (t3.attributes = e4), this._exec.reflection.updateAST([t3]), t3;
    }
    return null;
  }
  _function_decl() {
    if (!this._match(He.keywords.fn)) return null;
    const e4 = this._currentLine, t3 = this._consume(He.tokens.ident, "Expected function name.").toString();
    this._consume(He.tokens.paren_left, "Expected '(' for function arguments.");
    const n3 = [];
    if (!this._check(He.tokens.paren_right)) do {
      if (this._check(He.tokens.paren_right)) break;
      const e5 = this._attribute(), t4 = this._consume(He.tokens.name, "Expected argument name.").toString();
      this._consume(He.tokens.colon, "Expected ':' for argument type.");
      const s4 = this._attribute(), r4 = this._type_decl();
      null != r4 && (r4.attributes = s4, n3.push(this._updateNode(new $e(t4, r4, e5))));
    } while (this._match(He.tokens.comma));
    this._consume(He.tokens.paren_right, "Expected ')' after function arguments.");
    let s3 = null;
    if (this._match(He.tokens.arrow)) {
      const e5 = this._attribute();
      s3 = this._type_decl(), null != s3 && (s3.attributes = e5);
    }
    const r3 = this._compound_statement(), a3 = this._currentLine;
    return this._updateNode(new D(t3, n3, s3, r3, e4, a3), e4);
  }
  _compound_statement() {
    const e4 = [];
    for (this._consume(He.tokens.brace_left, "Expected '{' for block."); !this._check(He.tokens.brace_right); ) {
      const t3 = this._statement();
      null !== t3 && e4.push(t3);
    }
    return this._consume(He.tokens.brace_right, "Expected '}' for block."), e4;
  }
  _statement() {
    for (; this._match(He.tokens.semicolon) && !this._isAtEnd(); ) ;
    if (this._check(He.tokens.attr) && this._attribute(), this._check(He.keywords.if)) return this._if_statement();
    if (this._check(He.keywords.switch)) return this._switch_statement();
    if (this._check(He.keywords.loop)) return this._loop_statement();
    if (this._check(He.keywords.for)) return this._for_statement();
    if (this._check(He.keywords.while)) return this._while_statement();
    if (this._check(He.keywords.continuing)) return this._continuing_statement();
    if (this._check(He.keywords.static_assert)) return this._static_assert_statement();
    if (this._check(He.tokens.brace_left)) return this._compound_statement();
    let e4 = null;
    if (this._check(He.keywords.return)) e4 = this._return_statement();
    else if (this._check([He.keywords.var, He.keywords.let, He.keywords.const])) e4 = this._variable_statement();
    else if (this._match(He.keywords.discard)) e4 = this._updateNode(new ne());
    else if (this._match(He.keywords.break)) {
      const t3 = this._updateNode(new se());
      if (this._currentLoop.length > 0) {
        const e5 = this._currentLoop[this._currentLoop.length - 1];
        t3.loopId = e5.id;
      }
      e4 = t3, this._check(He.keywords.if) && (this._advance(), t3.condition = this._optional_paren_expression());
    } else if (this._match(He.keywords.continue)) {
      const t3 = this._updateNode(new re());
      if (!(this._currentLoop.length > 0)) throw this._error(this._peek(), `Continue statement must be inside a loop. Line: ${t3.line}`);
      {
        const e5 = this._currentLoop[this._currentLoop.length - 1];
        t3.loopId = e5.id;
      }
      e4 = t3;
    } else e4 = this._increment_decrement_statement() || this._func_call_statement() || this._assignment_statement();
    return null != e4 && this._consume(He.tokens.semicolon, "Expected ';' after statement."), e4;
  }
  _static_assert_statement() {
    if (!this._match(He.keywords.static_assert)) return null;
    const e4 = this._currentLine, t3 = this._optional_paren_expression();
    return this._updateNode(new N(t3), e4);
  }
  _while_statement() {
    if (!this._match(He.keywords.while)) return null;
    const e4 = this._updateNode(new V(null, null));
    return this._currentLoop.push(e4), e4.condition = this._optional_paren_expression(), this._check(He.tokens.attr) && this._attribute(), e4.body = this._compound_statement(), this._currentLoop.pop(), e4;
  }
  _continuing_statement() {
    const e4 = this._currentLoop.length > 0 ? this._currentLoop[this._currentLoop.length - 1].id : -1;
    if (!this._match(He.keywords.continuing)) return null;
    const t3 = this._currentLine, n3 = this._compound_statement();
    return this._updateNode(new O(n3, e4), t3);
  }
  _for_statement() {
    if (!this._match(He.keywords.for)) return null;
    this._consume(He.tokens.paren_left, "Expected '('.");
    const e4 = this._updateNode(new B(null, null, null, null));
    return this._currentLoop.push(e4), e4.init = this._check(He.tokens.semicolon) ? null : this._for_init(), this._consume(He.tokens.semicolon, "Expected ';'."), e4.condition = this._check(He.tokens.semicolon) ? null : this._short_circuit_or_expression(), this._consume(He.tokens.semicolon, "Expected ';'."), e4.increment = this._check(He.tokens.paren_right) ? null : this._for_increment(), this._consume(He.tokens.paren_right, "Expected ')'."), this._check(He.tokens.attr) && this._attribute(), e4.body = this._compound_statement(), this._currentLoop.pop(), e4;
  }
  _for_init() {
    return this._variable_statement() || this._func_call_statement() || this._assignment_statement();
  }
  _for_increment() {
    return this._func_call_statement() || this._increment_decrement_statement() || this._assignment_statement();
  }
  _variable_statement() {
    if (this._check(He.keywords.var)) {
      const e4 = this._variable_decl();
      if (null === e4) throw this._error(this._peek(), "Variable declaration expected.");
      let t3 = null;
      return this._match(He.tokens.equal) && (t3 = this._short_circuit_or_expression()), this._updateNode(new F(e4.name, e4.type, e4.storage, e4.access, t3), e4.line);
    }
    if (this._match(He.keywords.let)) {
      const e4 = this._currentLine, t3 = this._consume(He.tokens.name, "Expected name for let.").toString();
      let n3 = null;
      if (this._match(He.tokens.colon)) {
        const e5 = this._attribute();
        n3 = this._type_decl(), null != n3 && (n3.attributes = e5);
      }
      this._consume(He.tokens.equal, "Expected '=' for let.");
      const s3 = this._short_circuit_or_expression();
      return this._updateNode(new U(t3, n3, null, null, s3), e4);
    }
    if (this._match(He.keywords.const)) {
      const e4 = this._currentLine, t3 = this._consume(He.tokens.name, "Expected name for const.").toString();
      let n3 = null;
      if (this._match(He.tokens.colon)) {
        const e5 = this._attribute();
        n3 = this._type_decl(), null != n3 && (n3.attributes = e5);
      }
      this._consume(He.tokens.equal, "Expected '=' for const.");
      const s3 = this._short_circuit_or_expression();
      return null === n3 && s3 instanceof xe && (n3 = s3.type), this._updateNode(new P(t3, n3, null, null, s3), e4);
    }
    return null;
  }
  _increment_decrement_statement() {
    const e4 = this._current, t3 = this._unary_expression();
    if (null == t3) return null;
    if (!this._check(He.increment_operators)) return this._current = e4, null;
    const n3 = this._consume(He.increment_operators, "Expected increment operator");
    return this._updateNode(new R(n3.type === He.tokens.plus_plus ? W.increment : W.decrement, t3));
  }
  _assignment_statement() {
    let e4 = null;
    const t3 = this._currentLine;
    if (this._check(He.tokens.brace_right)) return null;
    let n3 = this._match(He.tokens.underscore);
    if (n3 || (e4 = this._unary_expression()), !n3 && null == e4) return null;
    const s3 = this._consume(He.assignment_operators, "Expected assignment operator."), r3 = this._short_circuit_or_expression();
    return this._updateNode(new G(q.parse(s3.lexeme), e4, r3), t3);
  }
  _func_call_statement() {
    if (!this._check(He.tokens.ident)) return null;
    const e4 = this._currentLine, t3 = this._current, n3 = this._consume(He.tokens.ident, "Expected function name."), s3 = this._argument_expression_list();
    return null === s3 ? (this._current = t3, null) : this._updateNode(new X(n3.lexeme, s3), e4);
  }
  _loop_statement() {
    if (!this._match(He.keywords.loop)) return null;
    this._check(He.tokens.attr) && this._attribute(), this._consume(He.tokens.brace_left, "Expected '{' for loop.");
    const e4 = this._updateNode(new j([], null));
    this._currentLoop.push(e4);
    let t3 = this._statement();
    for (; null !== t3; ) {
      if (Array.isArray(t3)) for (let n3 of t3) e4.body.push(n3);
      else e4.body.push(t3);
      if (t3 instanceof O) {
        e4.continuing = t3;
        break;
      }
      t3 = this._statement();
    }
    return this._currentLoop.pop(), this._consume(He.tokens.brace_right, "Expected '}' for loop."), e4;
  }
  _switch_statement() {
    if (!this._match(He.keywords.switch)) return null;
    const e4 = this._updateNode(new Z(null, []));
    if (this._currentLoop.push(e4), e4.condition = this._optional_paren_expression(), this._check(He.tokens.attr) && this._attribute(), this._consume(He.tokens.brace_left, "Expected '{' for switch."), e4.cases = this._switch_body(), null == e4.cases || 0 == e4.cases.length) throw this._error(this._previous(), "Expected 'case' or 'default'.");
    return this._consume(He.tokens.brace_right, "Expected '}' for switch."), this._currentLoop.pop(), e4;
  }
  _switch_body() {
    const e4 = [];
    let t3 = false;
    for (; this._check([He.keywords.default, He.keywords.case]); ) {
      if (this._match(He.keywords.case)) {
        const n3 = this._case_selectors();
        for (const e5 of n3) if (e5 instanceof Se) {
          if (t3) throw this._error(this._previous(), "Multiple default cases in switch statement.");
          t3 = true;
          break;
        }
        this._match(He.tokens.colon), this._check(He.tokens.attr) && this._attribute(), this._consume(He.tokens.brace_left, "Exected '{' for switch case.");
        const s3 = this._case_body();
        this._consume(He.tokens.brace_right, "Exected '}' for switch case."), e4.push(this._updateNode(new Ae(n3, s3)));
      }
      if (this._match(He.keywords.default)) {
        if (t3) throw this._error(this._previous(), "Multiple default cases in switch statement.");
        this._match(He.tokens.colon), this._check(He.tokens.attr) && this._attribute(), this._consume(He.tokens.brace_left, "Exected '{' for switch default.");
        const n3 = this._case_body();
        this._consume(He.tokens.brace_right, "Exected '}' for switch default."), e4.push(this._updateNode(new Ee(n3)));
      }
    }
    return e4;
  }
  _case_selectors() {
    const e4 = [];
    for (this._match(He.keywords.default) ? e4.push(this._updateNode(new Se())) : e4.push(this._shift_expression()); this._match(He.tokens.comma); ) this._match(He.keywords.default) ? e4.push(this._updateNode(new Se())) : e4.push(this._shift_expression());
    return e4;
  }
  _case_body() {
    if (this._match(He.keywords.fallthrough)) return this._consume(He.tokens.semicolon, "Expected ';'"), [];
    let e4 = this._statement();
    if (null == e4) return [];
    e4 instanceof Array || (e4 = [e4]);
    const t3 = this._case_body();
    return 0 == t3.length ? e4 : [...e4, t3[0]];
  }
  _if_statement() {
    if (!this._match(He.keywords.if)) return null;
    const e4 = this._currentLine, t3 = this._optional_paren_expression();
    this._check(He.tokens.attr) && this._attribute();
    const n3 = this._compound_statement();
    let s3 = [];
    this._match_elseif() && (this._check(He.tokens.attr) && this._attribute(), s3 = this._elseif_statement(s3));
    let r3 = null;
    return this._match(He.keywords.else) && (this._check(He.tokens.attr) && this._attribute(), r3 = this._compound_statement()), this._updateNode(new Q(t3, n3, s3, r3), e4);
  }
  _match_elseif() {
    return this._tokens[this._current].type === He.keywords.else && this._tokens[this._current + 1].type === He.keywords.if && (this._advance(), this._advance(), true);
  }
  _elseif_statement(e4 = []) {
    const t3 = this._optional_paren_expression(), n3 = this._compound_statement();
    return e4.push(this._updateNode(new Le(t3, n3))), this._match_elseif() && (this._check(He.tokens.attr) && this._attribute(), this._elseif_statement(e4)), e4;
  }
  _return_statement() {
    if (!this._match(He.keywords.return)) return null;
    const e4 = this._short_circuit_or_expression();
    return this._updateNode(new Y(e4));
  }
  _short_circuit_or_expression() {
    let e4 = this._short_circuit_and_expr();
    for (; this._match(He.tokens.or_or); ) e4 = this._updateNode(new Ie(this._previous().toString(), e4, this._short_circuit_and_expr()));
    return e4;
  }
  _short_circuit_and_expr() {
    let e4 = this._inclusive_or_expression();
    for (; this._match(He.tokens.and_and); ) e4 = this._updateNode(new Ie(this._previous().toString(), e4, this._inclusive_or_expression()));
    return e4;
  }
  _inclusive_or_expression() {
    let e4 = this._exclusive_or_expression();
    for (; this._match(He.tokens.or); ) e4 = this._updateNode(new Ie(this._previous().toString(), e4, this._exclusive_or_expression()));
    return e4;
  }
  _exclusive_or_expression() {
    let e4 = this._and_expression();
    for (; this._match(He.tokens.xor); ) e4 = this._updateNode(new Ie(this._previous().toString(), e4, this._and_expression()));
    return e4;
  }
  _and_expression() {
    let e4 = this._equality_expression();
    for (; this._match(He.tokens.and); ) e4 = this._updateNode(new Ie(this._previous().toString(), e4, this._equality_expression()));
    return e4;
  }
  _equality_expression() {
    const e4 = this._relational_expression();
    return this._match([He.tokens.equal_equal, He.tokens.not_equal]) ? this._updateNode(new Ie(this._previous().toString(), e4, this._relational_expression())) : e4;
  }
  _relational_expression() {
    let e4 = this._shift_expression();
    for (; this._match([He.tokens.less_than, He.tokens.greater_than, He.tokens.less_than_equal, He.tokens.greater_than_equal]); ) e4 = this._updateNode(new Ie(this._previous().toString(), e4, this._shift_expression()));
    return e4;
  }
  _shift_expression() {
    let e4 = this._additive_expression();
    for (; this._match([He.tokens.shift_left, He.tokens.shift_right]); ) e4 = this._updateNode(new Ie(this._previous().toString(), e4, this._additive_expression()));
    return e4;
  }
  _additive_expression() {
    let e4 = this._multiplicative_expression();
    for (; this._match([He.tokens.plus, He.tokens.minus]); ) e4 = this._updateNode(new Ie(this._previous().toString(), e4, this._multiplicative_expression()));
    return e4;
  }
  _multiplicative_expression() {
    let e4 = this._unary_expression();
    for (; this._match([He.tokens.star, He.tokens.forward_slash, He.tokens.modulo]); ) e4 = this._updateNode(new Ie(this._previous().toString(), e4, this._unary_expression()));
    return e4;
  }
  _unary_expression() {
    return this._match([He.tokens.minus, He.tokens.bang, He.tokens.tilde, He.tokens.star, He.tokens.and]) ? this._updateNode(new ke(this._previous().toString(), this._unary_expression())) : this._singular_expression();
  }
  _singular_expression() {
    const e4 = this._primary_expression(), t3 = this._postfix_expression();
    return t3 && (e4.postfix = t3), e4;
  }
  _postfix_expression() {
    if (this._match(He.tokens.bracket_left)) {
      const e4 = this._short_circuit_or_expression();
      this._consume(He.tokens.bracket_right, "Expected ']'.");
      const t3 = this._updateNode(new ve(e4)), n3 = this._postfix_expression();
      return n3 && (t3.postfix = n3), t3;
    }
    if (this._match(He.tokens.period)) {
      const e4 = this._consume(He.tokens.name, "Expected member name."), t3 = this._postfix_expression(), n3 = this._updateNode(new pe(e4.lexeme));
      return t3 && (n3.postfix = t3), n3;
    }
    return null;
  }
  _getStruct(e4) {
    if (this._context.aliases.has(e4)) {
      return this._context.aliases.get(e4).type;
    }
    if (this._context.structs.has(e4)) {
      return this._context.structs.get(e4);
    }
    return null;
  }
  _getType(e4) {
    const t3 = this._getStruct(e4);
    if (null !== t3) return t3;
    switch (e4) {
      case "void":
        return ae.void;
      case "bool":
        return ae.bool;
      case "i32":
        return ae.i32;
      case "u32":
        return ae.u32;
      case "f32":
        return ae.f32;
      case "f16":
        return ae.f16;
      case "vec2f":
        return ce.vec2f;
      case "vec3f":
        return ce.vec3f;
      case "vec4f":
        return ce.vec4f;
      case "vec2i":
        return ce.vec2i;
      case "vec3i":
        return ce.vec3i;
      case "vec4i":
        return ce.vec4i;
      case "vec2u":
        return ce.vec2u;
      case "vec3u":
        return ce.vec3u;
      case "vec4u":
        return ce.vec4u;
      case "vec2h":
        return ce.vec2h;
      case "vec3h":
        return ce.vec3h;
      case "vec4h":
        return ce.vec4h;
      case "mat2x2f":
        return ce.mat2x2f;
      case "mat2x3f":
        return ce.mat2x3f;
      case "mat2x4f":
        return ce.mat2x4f;
      case "mat3x2f":
        return ce.mat3x2f;
      case "mat3x3f":
        return ce.mat3x3f;
      case "mat3x4f":
        return ce.mat3x4f;
      case "mat4x2f":
        return ce.mat4x2f;
      case "mat4x3f":
        return ce.mat4x3f;
      case "mat4x4f":
        return ce.mat4x4f;
      case "mat2x2h":
        return ce.mat2x2h;
      case "mat2x3h":
        return ce.mat2x3h;
      case "mat2x4h":
        return ce.mat2x4h;
      case "mat3x2h":
        return ce.mat3x2h;
      case "mat3x3h":
        return ce.mat3x3h;
      case "mat3x4h":
        return ce.mat3x4h;
      case "mat4x2h":
        return ce.mat4x2h;
      case "mat4x3h":
        return ce.mat4x3h;
      case "mat4x4h":
        return ce.mat4x4h;
      case "mat2x2i":
        return ce.mat2x2i;
      case "mat2x3i":
        return ce.mat2x3i;
      case "mat2x4i":
        return ce.mat2x4i;
      case "mat3x2i":
        return ce.mat3x2i;
      case "mat3x3i":
        return ce.mat3x3i;
      case "mat3x4i":
        return ce.mat3x4i;
      case "mat4x2i":
        return ce.mat4x2i;
      case "mat4x3i":
        return ce.mat4x3i;
      case "mat4x4i":
        return ce.mat4x4i;
      case "mat2x2u":
        return ce.mat2x2u;
      case "mat2x3u":
        return ce.mat2x3u;
      case "mat2x4u":
        return ce.mat2x4u;
      case "mat3x2u":
        return ce.mat3x2u;
      case "mat3x3u":
        return ce.mat3x3u;
      case "mat3x4u":
        return ce.mat3x4u;
      case "mat4x2u":
        return ce.mat4x2u;
      case "mat4x3u":
        return ce.mat4x3u;
      case "mat4x4u":
        return ce.mat4x4u;
    }
    return null;
  }
  _validateTypeRange(e4, t3) {
    if ("i32" === t3.name) {
      if (e4 < -2147483648 || e4 > 2147483647) throw this._error(this._previous(), `Value out of range for i32: ${e4}. Line: ${this._currentLine}.`);
    } else if ("u32" === t3.name && (e4 < 0 || e4 > 4294967295)) throw this._error(this._previous(), `Value out of range for u32: ${e4}. Line: ${this._currentLine}.`);
  }
  _primary_expression() {
    if (this._match(He.tokens.ident)) {
      const e5 = this._previous().toString();
      if (this._check(He.tokens.paren_left)) {
        const t4 = this._argument_expression_list(), n3 = this._getType(e5);
        return null !== n3 ? this._updateNode(new de(n3, t4)) : this._updateNode(new me(e5, t4));
      }
      if (this._context.constants.has(e5)) {
        const t4 = this._context.constants.get(e5);
        return this._updateNode(new _e(e5, t4.value));
      }
      return this._updateNode(new ge(e5));
    }
    if (this._match(He.tokens.int_literal)) {
      const e5 = this._previous().toString();
      let t4 = e5.endsWith("i") || e5.endsWith("i") ? ae.i32 : e5.endsWith("u") || e5.endsWith("U") ? ae.u32 : ae.x32;
      const n3 = parseInt(e5);
      return this._validateTypeRange(n3, t4), this._updateNode(new xe(new Be(n3, this._exec.getTypeInfo(t4)), t4));
    }
    if (this._match(He.tokens.uint_literal)) {
      const e5 = parseInt(this._previous().toString());
      return this._validateTypeRange(e5, ae.u32), this._updateNode(new xe(new Be(e5, this._exec.getTypeInfo(ae.u32)), ae.u32));
    }
    if (this._match([He.tokens.decimal_float_literal, He.tokens.hex_float_literal])) {
      let e5 = this._previous().toString(), t4 = e5.endsWith("h");
      t4 && (e5 = e5.substring(0, e5.length - 1));
      const n3 = parseFloat(e5);
      this._validateTypeRange(n3, t4 ? ae.f16 : ae.f32);
      const s3 = t4 ? ae.f16 : ae.f32;
      return this._updateNode(new xe(new Be(n3, this._exec.getTypeInfo(s3)), s3));
    }
    if (this._match([He.keywords.true, He.keywords.false])) {
      let e5 = this._previous().toString() === He.keywords.true.rule;
      return this._updateNode(new xe(new Be(e5 ? 1 : 0, this._exec.getTypeInfo(ae.bool)), ae.bool));
    }
    if (this._check(He.tokens.paren_left)) return this._paren_expression();
    if (this._match(He.keywords.bitcast)) {
      this._consume(He.tokens.less_than, "Expected '<'.");
      const e5 = this._type_decl();
      this._consume(He.tokens.greater_than, "Expected '>'.");
      const t4 = this._paren_expression();
      return this._updateNode(new ye(e5, t4));
    }
    const e4 = this._type_decl(), t3 = this._argument_expression_list();
    return this._updateNode(new de(e4, t3));
  }
  _argument_expression_list() {
    if (!this._match(He.tokens.paren_left)) return null;
    const e4 = [];
    do {
      if (this._check(He.tokens.paren_right)) break;
      const t3 = this._short_circuit_or_expression();
      e4.push(t3);
    } while (this._match(He.tokens.comma));
    return this._consume(He.tokens.paren_right, "Expected ')' for agument list"), e4;
  }
  _optional_paren_expression() {
    this._match(He.tokens.paren_left);
    const e4 = this._short_circuit_or_expression();
    return this._match(He.tokens.paren_right), e4;
  }
  _paren_expression() {
    this._consume(He.tokens.paren_left, "Expected '('.");
    const e4 = this._short_circuit_or_expression();
    return this._consume(He.tokens.paren_right, "Expected ')'."), e4;
  }
  _struct_decl() {
    if (!this._match(He.keywords.struct)) return null;
    const e4 = this._currentLine, t3 = this._consume(He.tokens.ident, "Expected name for struct.").toString();
    this._consume(He.tokens.brace_left, "Expected '{' for struct body.");
    const n3 = [];
    for (; !this._check(He.tokens.brace_right); ) {
      const e5 = this._attribute(), t4 = this._consume(He.tokens.name, "Expected variable name.").toString();
      this._consume(He.tokens.colon, "Expected ':' for struct member type.");
      const s4 = this._attribute(), r4 = this._type_decl();
      null != r4 && (r4.attributes = s4), this._check(He.tokens.brace_right) ? this._match(He.tokens.comma) : this._consume(He.tokens.comma, "Expected ',' for struct member."), n3.push(this._updateNode(new Ce(t4, r4, e5)));
    }
    this._consume(He.tokens.brace_right, "Expected '}' after struct body.");
    const s3 = this._currentLine, r3 = this._updateNode(new oe(t3, n3, e4, s3), e4);
    return this._context.structs.set(t3, r3), r3;
  }
  _global_variable_decl() {
    const e4 = this._variable_decl();
    if (!e4) return null;
    if (this._match(He.tokens.equal)) {
      const t3 = this._const_expression();
      e4.value = t3;
    }
    if (null !== e4.type && e4.value instanceof xe) {
      if ("x32" !== e4.value.type.name) {
        if (e4.type.getTypeName() !== e4.value.type.getTypeName()) throw this._error(this._peek(), `Invalid cast from ${e4.value.type.name} to ${e4.type.name}. Line:${this._currentLine}`);
      }
      e4.value.isScalar && this._validateTypeRange(e4.value.scalarValue, e4.type), e4.value.type = e4.type;
    } else null === e4.type && e4.value instanceof xe && (e4.type = "x32" === e4.value.type.name ? ae.i32 : e4.value.type, e4.value.isScalar && this._validateTypeRange(e4.value.scalarValue, e4.type));
    return e4;
  }
  _override_variable_decl() {
    const e4 = this._override_decl();
    return e4 && this._match(He.tokens.equal) && (e4.value = this._const_expression()), e4;
  }
  _global_const_decl() {
    var e4;
    if (!this._match(He.keywords.const)) return null;
    const t3 = this._consume(He.tokens.name, "Expected variable name"), n3 = this._currentLine;
    let s3 = null;
    if (this._match(He.tokens.colon)) {
      const e5 = this._attribute();
      s3 = this._type_decl(), null != s3 && (s3.attributes = e5);
    }
    let r3 = null;
    this._consume(He.tokens.equal, "const declarations require an assignment");
    const i4 = this._short_circuit_or_expression();
    try {
      let e5 = [ae.f32], n4 = i4.constEvaluate(this._exec, e5);
      n4 instanceof Be && this._validateTypeRange(n4.value, e5[0]), e5[0] instanceof ce && null === e5[0].format && n4.typeInfo instanceof a && null !== n4.typeInfo.format && ("f16" === n4.typeInfo.format.name ? e5[0].format = ae.f16 : "f32" === n4.typeInfo.format.name ? e5[0].format = ae.f32 : "i32" === n4.typeInfo.format.name ? e5[0].format = ae.i32 : "u32" === n4.typeInfo.format.name ? e5[0].format = ae.u32 : "bool" === n4.typeInfo.format.name ? e5[0].format = ae.bool : console.error(`TODO: impelement template format type ${n4.typeInfo.format.name}`)), r3 = this._updateNode(new xe(n4, e5[0])), this._exec.context.setVariable(t3.toString(), n4);
    } catch (e5) {
      r3 = i4;
    }
    if (null !== s3 && r3 instanceof xe) {
      if ("x32" !== r3.type.name) {
        if (s3.getTypeName() !== r3.type.getTypeName()) throw this._error(this._peek(), `Invalid cast from ${r3.type.name} to ${s3.name}. Line:${this._currentLine}`);
      }
      r3.type = s3, r3.isScalar && this._validateTypeRange(r3.scalarValue, r3.type);
    } else null === s3 && r3 instanceof xe && (s3 = null !== (e4 = null == r3 ? void 0 : r3.type) && void 0 !== e4 ? e4 : ae.f32, s3 === ae.x32 && (s3 = ae.i32));
    const o3 = this._updateNode(new P(t3.toString(), s3, "", "", r3), n3);
    return this._context.constants.set(o3.name, o3), o3;
  }
  _global_let_decl() {
    if (!this._match(He.keywords.let)) return null;
    const e4 = this._currentLine, t3 = this._consume(He.tokens.name, "Expected variable name");
    let n3 = null;
    if (this._match(He.tokens.colon)) {
      const e5 = this._attribute();
      n3 = this._type_decl(), null != n3 && (n3.attributes = e5);
    }
    let s3 = null;
    if (this._match(He.tokens.equal) && (s3 = this._const_expression()), null !== n3 && s3 instanceof xe) {
      if ("x32" !== s3.type.name) {
        if (n3.getTypeName() !== s3.type.getTypeName()) throw this._error(this._peek(), `Invalid cast from ${s3.type.name} to ${n3.name}. Line:${this._currentLine}`);
      }
      s3.type = n3;
    } else null === n3 && s3 instanceof xe && (n3 = "x32" === s3.type.name ? ae.i32 : s3.type);
    return s3 instanceof xe && s3.isScalar && this._validateTypeRange(s3.scalarValue, n3), this._updateNode(new U(t3.toString(), n3, "", "", s3), e4);
  }
  _const_expression() {
    return this._short_circuit_or_expression();
  }
  _variable_decl() {
    if (!this._match(He.keywords.var)) return null;
    const e4 = this._currentLine;
    let t3 = "", n3 = "";
    this._match(He.tokens.less_than) && (t3 = this._consume(He.storage_class, "Expected storage_class.").toString(), this._match(He.tokens.comma) && (n3 = this._consume(He.access_mode, "Expected access_mode.").toString()), this._consume(He.tokens.greater_than, "Expected '>'."));
    const s3 = this._consume(He.tokens.name, "Expected variable name");
    let r3 = null;
    if (this._match(He.tokens.colon)) {
      const e5 = this._attribute();
      r3 = this._type_decl(), null != r3 && (r3.attributes = e5);
    }
    return this._updateNode(new F(s3.toString(), r3, t3, n3, null), e4);
  }
  _override_decl() {
    if (!this._match(He.keywords.override)) return null;
    const e4 = this._consume(He.tokens.name, "Expected variable name");
    let t3 = null;
    if (this._match(He.tokens.colon)) {
      const e5 = this._attribute();
      t3 = this._type_decl(), null != t3 && (t3.attributes = e5);
    }
    return this._updateNode(new M(e4.toString(), t3, null));
  }
  _diagnostic() {
    this._consume(He.tokens.paren_left, "Expected '('");
    const e4 = this._consume(He.tokens.ident, "Expected severity control name.");
    this._consume(He.tokens.comma, "Expected ','");
    let t3 = this._consume(He.tokens.ident, "Expected diagnostic rule name.").toString();
    if (this._match(He.tokens.period)) {
      t3 += `.${this._consume(He.tokens.ident, "Expected diagnostic message.").toString()}`;
    }
    return this._consume(He.tokens.paren_right, "Expected ')'"), this._updateNode(new ee(e4.toString(), t3));
  }
  _enable_directive() {
    const e4 = this._consume(He.tokens.ident, "identity expected.");
    return this._updateNode(new K(e4.toString()));
  }
  _requires_directive() {
    const e4 = [this._consume(He.tokens.ident, "identity expected.").toString()];
    for (; this._match(He.tokens.comma); ) {
      const t3 = this._consume(He.tokens.ident, "identity expected.");
      e4.push(t3.toString());
    }
    return this._updateNode(new J(e4));
  }
  _type_alias() {
    const e4 = this._consume(He.tokens.ident, "identity expected.");
    this._consume(He.tokens.equal, "Expected '=' for type alias.");
    let t3 = this._type_decl();
    if (null === t3) throw this._error(this._peek(), "Expected Type for Alias.");
    this._context.aliases.has(t3.name) && (t3 = this._context.aliases.get(t3.name).type);
    const n3 = this._updateNode(new te(e4.toString(), t3));
    return this._context.aliases.set(n3.name, n3), n3;
  }
  _type_decl() {
    if (this._check([He.tokens.ident, ...He.texel_format, He.keywords.bool, He.keywords.f32, He.keywords.i32, He.keywords.u32])) {
      const e5 = this._advance().toString();
      if (this._context.structs.has(e5)) return this._context.structs.get(e5);
      if (this._context.aliases.has(e5)) return this._context.aliases.get(e5).type;
      if (!this._getType(e5)) {
        const t4 = this._updateNode(new ie(e5));
        return this._forwardTypeCount++, t4;
      }
      return this._updateNode(new ae(e5));
    }
    let e4 = this._texture_sampler_types();
    if (e4) return e4;
    if (this._check(He.template_types)) {
      let e5 = this._advance().toString(), t4 = null, n3 = null;
      this._match(He.tokens.less_than) && (t4 = this._type_decl(), n3 = null, this._match(He.tokens.comma) && (n3 = this._consume(He.access_mode, "Expected access_mode for pointer").toString()), this._consume(He.tokens.greater_than, "Expected '>' for type."));
      return this._updateNode(new ce(e5, t4, n3));
    }
    if (this._match(He.keywords.ptr)) {
      let e5 = this._previous().toString();
      this._consume(He.tokens.less_than, "Expected '<' for pointer.");
      const t4 = this._consume(He.storage_class, "Expected storage_class for pointer");
      this._consume(He.tokens.comma, "Expected ',' for pointer.");
      const n3 = this._type_decl();
      let s3 = null;
      this._match(He.tokens.comma) && (s3 = this._consume(He.access_mode, "Expected access_mode for pointer").toString()), this._consume(He.tokens.greater_than, "Expected '>' for pointer.");
      return this._updateNode(new le(e5, t4.toString(), n3, s3));
    }
    const t3 = this._attribute();
    if (this._match(He.keywords.array)) {
      let e5 = null, n3 = -1;
      const s3 = this._previous();
      let r3 = null;
      if (this._match(He.tokens.less_than)) {
        e5 = this._type_decl(), this._context.aliases.has(e5.name) && (e5 = this._context.aliases.get(e5.name).type);
        let t4 = "";
        if (this._match(He.tokens.comma)) {
          r3 = this._shift_expression();
          try {
            t4 = r3.constEvaluate(this._exec).toString(), r3 = null;
          } catch (e6) {
            t4 = "1";
          }
        }
        this._consume(He.tokens.greater_than, "Expected '>' for array."), n3 = t4 ? parseInt(t4) : 0;
      }
      const a3 = this._updateNode(new ue(s3.toString(), t3, e5, n3));
      return r3 && this._deferArrayCountEval.push({ arrayType: a3, countNode: r3 }), a3;
    }
    return null;
  }
  _texture_sampler_types() {
    if (this._match(He.sampler_type)) return this._updateNode(new he(this._previous().toString(), null, null));
    if (this._match(He.depth_texture_type)) return this._updateNode(new he(this._previous().toString(), null, null));
    if (this._match(He.sampled_texture_type) || this._match(He.multisampled_texture_type)) {
      const e4 = this._previous();
      this._consume(He.tokens.less_than, "Expected '<' for sampler type.");
      const t3 = this._type_decl();
      return this._consume(He.tokens.greater_than, "Expected '>' for sampler type."), this._updateNode(new he(e4.toString(), t3, null));
    }
    if (this._match(He.storage_texture_type)) {
      const e4 = this._previous();
      this._consume(He.tokens.less_than, "Expected '<' for sampler type.");
      const t3 = this._consume(He.texel_format, "Invalid texel format.").toString();
      this._consume(He.tokens.comma, "Expected ',' after texel format.");
      const n3 = this._consume(He.access_mode, "Expected access mode for storage texture type.").toString();
      return this._consume(He.tokens.greater_than, "Expected '>' for sampler type."), this._updateNode(new he(e4.toString(), t3, n3));
    }
    return null;
  }
  _attribute() {
    let e4 = [];
    for (; this._match(He.tokens.attr); ) {
      const t3 = this._consume(He.attribute_name, "Expected attribute name"), n3 = this._updateNode(new De(t3.toString(), null));
      if (this._match(He.tokens.paren_left)) {
        if (n3.value = this._consume(He.literal_or_ident, "Expected attribute value").toString(), this._check(He.tokens.comma)) {
          this._advance();
          do {
            const e5 = this._consume(He.literal_or_ident, "Expected attribute value").toString();
            n3.value instanceof Array || (n3.value = [n3.value]), n3.value.push(e5);
          } while (this._match(He.tokens.comma));
        }
        this._consume(He.tokens.paren_right, "Expected ')'");
      }
      e4.push(n3);
    }
    return 0 == e4.length ? null : e4;
  }
};
var _t = class extends at {
  constructor(e4) {
    super(), e4 && this.update(e4);
  }
  update(e4) {
    const t3 = new gt().parse(e4);
    this.updateAST(t3);
  }
};

// .yarn/__virtual__/@luma.gl-shadertools-virtual-ed2a1ebd80/4/.yarn/berry/cache/@luma.gl-shadertools-npm-9.1.9-81b6398d54-10c0.zip/node_modules/@luma.gl/shadertools/dist/lib/wgsl/get-shader-layout-wgsl.js
function getShaderLayoutFromWGSL(source4) {
  var _a3;
  const shaderLayout = { attributes: [], bindings: [] };
  let parsedWGSL;
  try {
    parsedWGSL = parseWGSL(source4);
  } catch (error) {
    log2.error(error.message)();
    return shaderLayout;
  }
  for (const uniform of parsedWGSL.uniforms) {
    const members = [];
    for (const attribute of ((_a3 = uniform.type) == null ? void 0 : _a3.members) || []) {
      members.push({
        name: attribute.name,
        type: getType(attribute.type)
      });
    }
    shaderLayout.bindings.push({
      type: "uniform",
      name: uniform.name,
      group: uniform.group,
      location: uniform.binding,
      // @ts-expect-error TODO - unused for now but needs fixing
      members
    });
  }
  for (const texture of parsedWGSL.textures) {
    shaderLayout.bindings.push({
      type: "texture",
      name: texture.name,
      group: texture.group,
      location: texture.binding
    });
  }
  for (const sampler of parsedWGSL.samplers) {
    shaderLayout.bindings.push({
      type: "sampler",
      name: sampler.name,
      group: sampler.group,
      location: sampler.binding
    });
  }
  const vertex2 = parsedWGSL.entry.vertex[0];
  const attributeCount = (vertex2 == null ? void 0 : vertex2.inputs.length) || 0;
  for (let i4 = 0; i4 < attributeCount; i4++) {
    const wgslAttribute = vertex2.inputs[i4];
    if (wgslAttribute.locationType === "location") {
      const type = getType(wgslAttribute.type);
      shaderLayout.attributes.push({
        name: wgslAttribute.name,
        location: Number(wgslAttribute.location),
        type
      });
    }
  }
  return shaderLayout;
}
function getType(type) {
  return type.format ? `${type.name}<${type.format.name}>` : type.name;
}
function parseWGSL(source4) {
  try {
    return new _t(source4);
  } catch (error) {
    if (error instanceof Error) {
      throw error;
    }
    let message2 = "WGSL parse error";
    if (typeof error === "object" && (error == null ? void 0 : error.message)) {
      message2 += `: ${error.message} `;
    }
    if (typeof error === "object" && (error == null ? void 0 : error.token)) {
      message2 += error.token.line || "";
    }
    throw new Error(message2, { cause: error });
  }
}

// ../../../.yarn/berry/cache/@math.gl-core-npm-4.1.0-f2844e4336-10c0.zip/node_modules/@math.gl/core/dist/lib/common.js
var RADIANS_TO_DEGREES = 1 / Math.PI * 180;
var DEGREES_TO_RADIANS = 1 / 180 * Math.PI;
var DEFAULT_CONFIG = {
  EPSILON: 1e-12,
  debug: false,
  precision: 4,
  printTypes: false,
  printDegrees: false,
  printRowMajor: true,
  _cartographicRadians: false
};
globalThis.mathgl = globalThis.mathgl || { config: { ...DEFAULT_CONFIG } };
var config = globalThis.mathgl.config;
function formatValue(value, { precision = config.precision } = {}) {
  value = round(value);
  return `${parseFloat(value.toPrecision(precision))}`;
}
function isArray(value) {
  return Array.isArray(value) || ArrayBuffer.isView(value) && !(value instanceof DataView);
}
function radians(degrees2, result) {
  return map(degrees2, (degrees3) => degrees3 * DEGREES_TO_RADIANS, result);
}
function degrees(radians2, result) {
  return map(radians2, (radians3) => radians3 * RADIANS_TO_DEGREES, result);
}
function clamp(value, min4, max4) {
  return map(value, (value2) => Math.max(min4, Math.min(max4, value2)));
}
function lerp(a3, b2, t3) {
  if (isArray(a3)) {
    return a3.map((ai, i4) => lerp(ai, b2[i4], t3));
  }
  return t3 * b2 + (1 - t3) * a3;
}
function equals(a3, b2, epsilon) {
  const oldEpsilon = config.EPSILON;
  if (epsilon) {
    config.EPSILON = epsilon;
  }
  try {
    if (a3 === b2) {
      return true;
    }
    if (isArray(a3) && isArray(b2)) {
      if (a3.length !== b2.length) {
        return false;
      }
      for (let i4 = 0; i4 < a3.length; ++i4) {
        if (!equals(a3[i4], b2[i4])) {
          return false;
        }
      }
      return true;
    }
    if (a3 && a3.equals) {
      return a3.equals(b2);
    }
    if (b2 && b2.equals) {
      return b2.equals(a3);
    }
    if (typeof a3 === "number" && typeof b2 === "number") {
      return Math.abs(a3 - b2) <= config.EPSILON * Math.max(1, Math.abs(a3), Math.abs(b2));
    }
    return false;
  } finally {
    config.EPSILON = oldEpsilon;
  }
}
function round(value) {
  return Math.round(value / config.EPSILON) * config.EPSILON;
}
function duplicateArray(array) {
  return array.clone ? array.clone() : new Array(array.length);
}
function map(value, func, result) {
  if (isArray(value)) {
    const array = value;
    result = result || duplicateArray(array);
    for (let i4 = 0; i4 < result.length && i4 < array.length; ++i4) {
      const val = typeof value === "number" ? value : value[i4];
      result[i4] = func(val, i4, result);
    }
    return result;
  }
  return func(value);
}

// ../../../.yarn/berry/cache/@math.gl-core-npm-4.1.0-f2844e4336-10c0.zip/node_modules/@math.gl/core/dist/classes/base/math-array.js
var MathArray = class extends Array {
  // Common methods
  /**
   * Clone the current object
   * @returns a new copy of this object
   */
  clone() {
    return new this.constructor().copy(this);
  }
  fromArray(array, offset = 0) {
    for (let i4 = 0; i4 < this.ELEMENTS; ++i4) {
      this[i4] = array[i4 + offset];
    }
    return this.check();
  }
  toArray(targetArray = [], offset = 0) {
    for (let i4 = 0; i4 < this.ELEMENTS; ++i4) {
      targetArray[offset + i4] = this[i4];
    }
    return targetArray;
  }
  toObject(targetObject) {
    return targetObject;
  }
  from(arrayOrObject) {
    return Array.isArray(arrayOrObject) ? this.copy(arrayOrObject) : (
      // @ts-ignore
      this.fromObject(arrayOrObject)
    );
  }
  to(arrayOrObject) {
    if (arrayOrObject === this) {
      return this;
    }
    return isArray(arrayOrObject) ? this.toArray(arrayOrObject) : this.toObject(arrayOrObject);
  }
  toTarget(target2) {
    return target2 ? this.to(target2) : this;
  }
  /** @deprecated */
  toFloat32Array() {
    return new Float32Array(this);
  }
  toString() {
    return this.formatString(config);
  }
  /** Formats string according to options */
  formatString(opts) {
    let string = "";
    for (let i4 = 0; i4 < this.ELEMENTS; ++i4) {
      string += (i4 > 0 ? ", " : "") + formatValue(this[i4], opts);
    }
    return `${opts.printTypes ? this.constructor.name : ""}[${string}]`;
  }
  equals(array) {
    if (!array || this.length !== array.length) {
      return false;
    }
    for (let i4 = 0; i4 < this.ELEMENTS; ++i4) {
      if (!equals(this[i4], array[i4])) {
        return false;
      }
    }
    return true;
  }
  exactEquals(array) {
    if (!array || this.length !== array.length) {
      return false;
    }
    for (let i4 = 0; i4 < this.ELEMENTS; ++i4) {
      if (this[i4] !== array[i4]) {
        return false;
      }
    }
    return true;
  }
  // Modifiers
  /** Negates all values in this object */
  negate() {
    for (let i4 = 0; i4 < this.ELEMENTS; ++i4) {
      this[i4] = -this[i4];
    }
    return this.check();
  }
  lerp(a3, b2, t3) {
    if (t3 === void 0) {
      return this.lerp(this, a3, b2);
    }
    for (let i4 = 0; i4 < this.ELEMENTS; ++i4) {
      const ai = a3[i4];
      const endValue = typeof b2 === "number" ? b2 : b2[i4];
      this[i4] = ai + t3 * (endValue - ai);
    }
    return this.check();
  }
  /** Minimal */
  min(vector) {
    for (let i4 = 0; i4 < this.ELEMENTS; ++i4) {
      this[i4] = Math.min(vector[i4], this[i4]);
    }
    return this.check();
  }
  /** Maximal */
  max(vector) {
    for (let i4 = 0; i4 < this.ELEMENTS; ++i4) {
      this[i4] = Math.max(vector[i4], this[i4]);
    }
    return this.check();
  }
  clamp(minVector, maxVector) {
    for (let i4 = 0; i4 < this.ELEMENTS; ++i4) {
      this[i4] = Math.min(Math.max(this[i4], minVector[i4]), maxVector[i4]);
    }
    return this.check();
  }
  add(...vectors) {
    for (const vector of vectors) {
      for (let i4 = 0; i4 < this.ELEMENTS; ++i4) {
        this[i4] += vector[i4];
      }
    }
    return this.check();
  }
  subtract(...vectors) {
    for (const vector of vectors) {
      for (let i4 = 0; i4 < this.ELEMENTS; ++i4) {
        this[i4] -= vector[i4];
      }
    }
    return this.check();
  }
  scale(scale7) {
    if (typeof scale7 === "number") {
      for (let i4 = 0; i4 < this.ELEMENTS; ++i4) {
        this[i4] *= scale7;
      }
    } else {
      for (let i4 = 0; i4 < this.ELEMENTS && i4 < scale7.length; ++i4) {
        this[i4] *= scale7[i4];
      }
    }
    return this.check();
  }
  /**
   * Multiplies all elements by `scale`
   * Note: `Matrix4.multiplyByScalar` only scales its 3x3 "minor"
   */
  multiplyByScalar(scalar) {
    for (let i4 = 0; i4 < this.ELEMENTS; ++i4) {
      this[i4] *= scalar;
    }
    return this.check();
  }
  // Debug checks
  /** Throws an error if array length is incorrect or contains illegal values */
  check() {
    if (config.debug && !this.validate()) {
      throw new Error(`math.gl: ${this.constructor.name} some fields set to invalid numbers'`);
    }
    return this;
  }
  /** Returns false if the array length is incorrect or contains illegal values */
  validate() {
    let valid = this.length === this.ELEMENTS;
    for (let i4 = 0; i4 < this.ELEMENTS; ++i4) {
      valid = valid && Number.isFinite(this[i4]);
    }
    return valid;
  }
  // three.js compatibility
  /** @deprecated */
  sub(a3) {
    return this.subtract(a3);
  }
  /** @deprecated */
  setScalar(a3) {
    for (let i4 = 0; i4 < this.ELEMENTS; ++i4) {
      this[i4] = a3;
    }
    return this.check();
  }
  /** @deprecated */
  addScalar(a3) {
    for (let i4 = 0; i4 < this.ELEMENTS; ++i4) {
      this[i4] += a3;
    }
    return this.check();
  }
  /** @deprecated */
  subScalar(a3) {
    return this.addScalar(-a3);
  }
  /** @deprecated */
  multiplyScalar(scalar) {
    for (let i4 = 0; i4 < this.ELEMENTS; ++i4) {
      this[i4] *= scalar;
    }
    return this.check();
  }
  /** @deprecated */
  divideScalar(a3) {
    return this.multiplyByScalar(1 / a3);
  }
  /** @deprecated */
  clampScalar(min4, max4) {
    for (let i4 = 0; i4 < this.ELEMENTS; ++i4) {
      this[i4] = Math.min(Math.max(this[i4], min4), max4);
    }
    return this.check();
  }
  /** @deprecated */
  get elements() {
    return this;
  }
};

// ../../../.yarn/berry/cache/@math.gl-core-npm-4.1.0-f2844e4336-10c0.zip/node_modules/@math.gl/core/dist/lib/validators.js
function validateVector(v3, length5) {
  if (v3.length !== length5) {
    return false;
  }
  for (let i4 = 0; i4 < v3.length; ++i4) {
    if (!Number.isFinite(v3[i4])) {
      return false;
    }
  }
  return true;
}
function checkNumber(value) {
  if (!Number.isFinite(value)) {
    throw new Error(`Invalid number ${JSON.stringify(value)}`);
  }
  return value;
}
function checkVector(v3, length5, callerName = "") {
  if (config.debug && !validateVector(v3, length5)) {
    throw new Error(`math.gl: ${callerName} some fields set to invalid numbers'`);
  }
  return v3;
}

// ../../../.yarn/berry/cache/@math.gl-core-npm-4.1.0-f2844e4336-10c0.zip/node_modules/@math.gl/core/dist/lib/assert.js
function assert6(condition, message2) {
  if (!condition) {
    throw new Error(`math.gl assertion ${message2}`);
  }
}

// ../../../.yarn/berry/cache/@math.gl-core-npm-4.1.0-f2844e4336-10c0.zip/node_modules/@math.gl/core/dist/classes/base/vector.js
var Vector = class extends MathArray {
  // ACCESSORS
  get x() {
    return this[0];
  }
  set x(value) {
    this[0] = checkNumber(value);
  }
  get y() {
    return this[1];
  }
  set y(value) {
    this[1] = checkNumber(value);
  }
  /**
   * Returns the length of the vector from the origin to the point described by this vector
   *
   * @note `length` is a reserved word for Arrays, so `v.length()` will return number of elements
   * Instead we provide `len` and `magnitude`
   */
  len() {
    return Math.sqrt(this.lengthSquared());
  }
  /**
   * Returns the length of the vector from the origin to the point described by this vector
   */
  magnitude() {
    return this.len();
  }
  /**
   * Returns the squared length of the vector from the origin to the point described by this vector
   */
  lengthSquared() {
    let length5 = 0;
    for (let i4 = 0; i4 < this.ELEMENTS; ++i4) {
      length5 += this[i4] * this[i4];
    }
    return length5;
  }
  /**
   * Returns the squared length of the vector from the origin to the point described by this vector
   */
  magnitudeSquared() {
    return this.lengthSquared();
  }
  distance(mathArray) {
    return Math.sqrt(this.distanceSquared(mathArray));
  }
  distanceSquared(mathArray) {
    let length5 = 0;
    for (let i4 = 0; i4 < this.ELEMENTS; ++i4) {
      const dist4 = this[i4] - mathArray[i4];
      length5 += dist4 * dist4;
    }
    return checkNumber(length5);
  }
  dot(mathArray) {
    let product = 0;
    for (let i4 = 0; i4 < this.ELEMENTS; ++i4) {
      product += this[i4] * mathArray[i4];
    }
    return checkNumber(product);
  }
  // MODIFIERS
  normalize() {
    const length5 = this.magnitude();
    if (length5 !== 0) {
      for (let i4 = 0; i4 < this.ELEMENTS; ++i4) {
        this[i4] /= length5;
      }
    }
    return this.check();
  }
  multiply(...vectors) {
    for (const vector of vectors) {
      for (let i4 = 0; i4 < this.ELEMENTS; ++i4) {
        this[i4] *= vector[i4];
      }
    }
    return this.check();
  }
  divide(...vectors) {
    for (const vector of vectors) {
      for (let i4 = 0; i4 < this.ELEMENTS; ++i4) {
        this[i4] /= vector[i4];
      }
    }
    return this.check();
  }
  // THREE.js compatibility
  lengthSq() {
    return this.lengthSquared();
  }
  distanceTo(vector) {
    return this.distance(vector);
  }
  distanceToSquared(vector) {
    return this.distanceSquared(vector);
  }
  getComponent(i4) {
    assert6(i4 >= 0 && i4 < this.ELEMENTS, "index is out of range");
    return checkNumber(this[i4]);
  }
  setComponent(i4, value) {
    assert6(i4 >= 0 && i4 < this.ELEMENTS, "index is out of range");
    this[i4] = value;
    return this.check();
  }
  addVectors(a3, b2) {
    return this.copy(a3).add(b2);
  }
  subVectors(a3, b2) {
    return this.copy(a3).subtract(b2);
  }
  multiplyVectors(a3, b2) {
    return this.copy(a3).multiply(b2);
  }
  addScaledVector(a3, b2) {
    return this.add(new this.constructor(a3).multiplyScalar(b2));
  }
};

// ../../../.yarn/berry/cache/@math.gl-core-npm-4.1.0-f2844e4336-10c0.zip/node_modules/@math.gl/core/dist/gl-matrix/vec2.js
var vec2_exports = {};
__export(vec2_exports, {
  add: () => add,
  angle: () => angle,
  ceil: () => ceil,
  clone: () => clone,
  copy: () => copy,
  create: () => create,
  cross: () => cross,
  dist: () => dist,
  distance: () => distance,
  div: () => div,
  divide: () => divide,
  dot: () => dot,
  equals: () => equals2,
  exactEquals: () => exactEquals,
  floor: () => floor,
  forEach: () => forEach2,
  fromValues: () => fromValues,
  inverse: () => inverse,
  len: () => len,
  length: () => length,
  lerp: () => lerp2,
  max: () => max,
  min: () => min,
  mul: () => mul,
  multiply: () => multiply,
  negate: () => negate,
  normalize: () => normalize,
  random: () => random,
  rotate: () => rotate,
  round: () => round3,
  scale: () => scale,
  scaleAndAdd: () => scaleAndAdd,
  set: () => set,
  sqrDist: () => sqrDist,
  sqrLen: () => sqrLen,
  squaredDistance: () => squaredDistance,
  squaredLength: () => squaredLength,
  str: () => str,
  sub: () => sub,
  subtract: () => subtract,
  transformMat2: () => transformMat2,
  transformMat2d: () => transformMat2d,
  transformMat3: () => transformMat3,
  transformMat4: () => transformMat4,
  zero: () => zero
});

// ../../../.yarn/berry/cache/@math.gl-core-npm-4.1.0-f2844e4336-10c0.zip/node_modules/@math.gl/core/dist/gl-matrix/common.js
var EPSILON = 1e-6;
var ARRAY_TYPE = typeof Float32Array !== "undefined" ? Float32Array : Array;
var RANDOM = Math.random;
function round2(a3) {
  if (a3 >= 0)
    return Math.round(a3);
  return a3 % 0.5 === 0 ? Math.floor(a3) : Math.round(a3);
}
var degree = Math.PI / 180;

// ../../../.yarn/berry/cache/@math.gl-core-npm-4.1.0-f2844e4336-10c0.zip/node_modules/@math.gl/core/dist/gl-matrix/vec2.js
function create() {
  const out = new ARRAY_TYPE(2);
  if (ARRAY_TYPE != Float32Array) {
    out[0] = 0;
    out[1] = 0;
  }
  return out;
}
function clone(a3) {
  const out = new ARRAY_TYPE(2);
  out[0] = a3[0];
  out[1] = a3[1];
  return out;
}
function fromValues(x3, y3) {
  const out = new ARRAY_TYPE(2);
  out[0] = x3;
  out[1] = y3;
  return out;
}
function copy(out, a3) {
  out[0] = a3[0];
  out[1] = a3[1];
  return out;
}
function set(out, x3, y3) {
  out[0] = x3;
  out[1] = y3;
  return out;
}
function add(out, a3, b2) {
  out[0] = a3[0] + b2[0];
  out[1] = a3[1] + b2[1];
  return out;
}
function subtract(out, a3, b2) {
  out[0] = a3[0] - b2[0];
  out[1] = a3[1] - b2[1];
  return out;
}
function multiply(out, a3, b2) {
  out[0] = a3[0] * b2[0];
  out[1] = a3[1] * b2[1];
  return out;
}
function divide(out, a3, b2) {
  out[0] = a3[0] / b2[0];
  out[1] = a3[1] / b2[1];
  return out;
}
function ceil(out, a3) {
  out[0] = Math.ceil(a3[0]);
  out[1] = Math.ceil(a3[1]);
  return out;
}
function floor(out, a3) {
  out[0] = Math.floor(a3[0]);
  out[1] = Math.floor(a3[1]);
  return out;
}
function min(out, a3, b2) {
  out[0] = Math.min(a3[0], b2[0]);
  out[1] = Math.min(a3[1], b2[1]);
  return out;
}
function max(out, a3, b2) {
  out[0] = Math.max(a3[0], b2[0]);
  out[1] = Math.max(a3[1], b2[1]);
  return out;
}
function round3(out, a3) {
  out[0] = round2(a3[0]);
  out[1] = round2(a3[1]);
  return out;
}
function scale(out, a3, b2) {
  out[0] = a3[0] * b2;
  out[1] = a3[1] * b2;
  return out;
}
function scaleAndAdd(out, a3, b2, scale7) {
  out[0] = a3[0] + b2[0] * scale7;
  out[1] = a3[1] + b2[1] * scale7;
  return out;
}
function distance(a3, b2) {
  const x3 = b2[0] - a3[0];
  const y3 = b2[1] - a3[1];
  return Math.sqrt(x3 * x3 + y3 * y3);
}
function squaredDistance(a3, b2) {
  const x3 = b2[0] - a3[0];
  const y3 = b2[1] - a3[1];
  return x3 * x3 + y3 * y3;
}
function length(a3) {
  const x3 = a3[0];
  const y3 = a3[1];
  return Math.sqrt(x3 * x3 + y3 * y3);
}
function squaredLength(a3) {
  const x3 = a3[0];
  const y3 = a3[1];
  return x3 * x3 + y3 * y3;
}
function negate(out, a3) {
  out[0] = -a3[0];
  out[1] = -a3[1];
  return out;
}
function inverse(out, a3) {
  out[0] = 1 / a3[0];
  out[1] = 1 / a3[1];
  return out;
}
function normalize(out, a3) {
  const x3 = a3[0];
  const y3 = a3[1];
  let len5 = x3 * x3 + y3 * y3;
  if (len5 > 0) {
    len5 = 1 / Math.sqrt(len5);
  }
  out[0] = a3[0] * len5;
  out[1] = a3[1] * len5;
  return out;
}
function dot(a3, b2) {
  return a3[0] * b2[0] + a3[1] * b2[1];
}
function cross(out, a3, b2) {
  const z3 = a3[0] * b2[1] - a3[1] * b2[0];
  out[0] = out[1] = 0;
  out[2] = z3;
  return out;
}
function lerp2(out, a3, b2, t3) {
  const ax = a3[0];
  const ay = a3[1];
  out[0] = ax + t3 * (b2[0] - ax);
  out[1] = ay + t3 * (b2[1] - ay);
  return out;
}
function random(out, scale7) {
  scale7 = scale7 === void 0 ? 1 : scale7;
  const r3 = RANDOM() * 2 * Math.PI;
  out[0] = Math.cos(r3) * scale7;
  out[1] = Math.sin(r3) * scale7;
  return out;
}
function transformMat2(out, a3, m3) {
  const x3 = a3[0];
  const y3 = a3[1];
  out[0] = m3[0] * x3 + m3[2] * y3;
  out[1] = m3[1] * x3 + m3[3] * y3;
  return out;
}
function transformMat2d(out, a3, m3) {
  const x3 = a3[0];
  const y3 = a3[1];
  out[0] = m3[0] * x3 + m3[2] * y3 + m3[4];
  out[1] = m3[1] * x3 + m3[3] * y3 + m3[5];
  return out;
}
function transformMat3(out, a3, m3) {
  const x3 = a3[0];
  const y3 = a3[1];
  out[0] = m3[0] * x3 + m3[3] * y3 + m3[6];
  out[1] = m3[1] * x3 + m3[4] * y3 + m3[7];
  return out;
}
function transformMat4(out, a3, m3) {
  const x3 = a3[0];
  const y3 = a3[1];
  out[0] = m3[0] * x3 + m3[4] * y3 + m3[12];
  out[1] = m3[1] * x3 + m3[5] * y3 + m3[13];
  return out;
}
function rotate(out, a3, b2, rad) {
  const p0 = a3[0] - b2[0];
  const p1 = a3[1] - b2[1];
  const sinC = Math.sin(rad);
  const cosC = Math.cos(rad);
  out[0] = p0 * cosC - p1 * sinC + b2[0];
  out[1] = p0 * sinC + p1 * cosC + b2[1];
  return out;
}
function angle(a3, b2) {
  const x1 = a3[0];
  const y1 = a3[1];
  const x22 = b2[0];
  const y22 = b2[1];
  const mag = Math.sqrt((x1 * x1 + y1 * y1) * (x22 * x22 + y22 * y22));
  const cosine = mag && (x1 * x22 + y1 * y22) / mag;
  return Math.acos(Math.min(Math.max(cosine, -1), 1));
}
function zero(out) {
  out[0] = 0;
  out[1] = 0;
  return out;
}
function str(a3) {
  return `vec2(${a3[0]}, ${a3[1]})`;
}
function exactEquals(a3, b2) {
  return a3[0] === b2[0] && a3[1] === b2[1];
}
function equals2(a3, b2) {
  const a0 = a3[0];
  const a1 = a3[1];
  const b0 = b2[0];
  const b1 = b2[1];
  return Math.abs(a0 - b0) <= EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1));
}
var len = length;
var sub = subtract;
var mul = multiply;
var div = divide;
var dist = distance;
var sqrDist = squaredDistance;
var sqrLen = squaredLength;
var forEach2 = (function() {
  const vec = create();
  return function(a3, stride, offset, count2, fn, arg) {
    let i4;
    let l3;
    if (!stride) {
      stride = 2;
    }
    if (!offset) {
      offset = 0;
    }
    if (count2) {
      l3 = Math.min(count2 * stride + offset, a3.length);
    } else {
      l3 = a3.length;
    }
    for (i4 = offset; i4 < l3; i4 += stride) {
      vec[0] = a3[i4];
      vec[1] = a3[i4 + 1];
      fn(vec, vec, arg);
      a3[i4] = vec[0];
      a3[i4 + 1] = vec[1];
    }
    return a3;
  };
})();

// ../../../.yarn/berry/cache/@math.gl-core-npm-4.1.0-f2844e4336-10c0.zip/node_modules/@math.gl/core/dist/lib/gl-matrix-extras.js
function vec2_transformMat4AsVector(out, a3, m3) {
  const x3 = a3[0];
  const y3 = a3[1];
  const w3 = m3[3] * x3 + m3[7] * y3 || 1;
  out[0] = (m3[0] * x3 + m3[4] * y3) / w3;
  out[1] = (m3[1] * x3 + m3[5] * y3) / w3;
  return out;
}
function vec3_transformMat4AsVector(out, a3, m3) {
  const x3 = a3[0];
  const y3 = a3[1];
  const z3 = a3[2];
  const w3 = m3[3] * x3 + m3[7] * y3 + m3[11] * z3 || 1;
  out[0] = (m3[0] * x3 + m3[4] * y3 + m3[8] * z3) / w3;
  out[1] = (m3[1] * x3 + m3[5] * y3 + m3[9] * z3) / w3;
  out[2] = (m3[2] * x3 + m3[6] * y3 + m3[10] * z3) / w3;
  return out;
}
function vec3_transformMat2(out, a3, m3) {
  const x3 = a3[0];
  const y3 = a3[1];
  out[0] = m3[0] * x3 + m3[2] * y3;
  out[1] = m3[1] * x3 + m3[3] * y3;
  out[2] = a3[2];
  return out;
}

// ../../../.yarn/berry/cache/@math.gl-core-npm-4.1.0-f2844e4336-10c0.zip/node_modules/@math.gl/core/dist/gl-matrix/vec3.js
var vec3_exports = {};
__export(vec3_exports, {
  add: () => add2,
  angle: () => angle2,
  bezier: () => bezier,
  ceil: () => ceil2,
  clone: () => clone2,
  copy: () => copy2,
  create: () => create2,
  cross: () => cross2,
  dist: () => dist2,
  distance: () => distance2,
  div: () => div2,
  divide: () => divide2,
  dot: () => dot2,
  equals: () => equals3,
  exactEquals: () => exactEquals2,
  floor: () => floor2,
  forEach: () => forEach3,
  fromValues: () => fromValues2,
  hermite: () => hermite,
  inverse: () => inverse2,
  len: () => len2,
  length: () => length2,
  lerp: () => lerp3,
  max: () => max2,
  min: () => min2,
  mul: () => mul2,
  multiply: () => multiply2,
  negate: () => negate2,
  normalize: () => normalize2,
  random: () => random2,
  rotateX: () => rotateX,
  rotateY: () => rotateY,
  rotateZ: () => rotateZ,
  round: () => round4,
  scale: () => scale2,
  scaleAndAdd: () => scaleAndAdd2,
  set: () => set2,
  slerp: () => slerp,
  sqrDist: () => sqrDist2,
  sqrLen: () => sqrLen2,
  squaredDistance: () => squaredDistance2,
  squaredLength: () => squaredLength2,
  str: () => str2,
  sub: () => sub2,
  subtract: () => subtract2,
  transformMat3: () => transformMat32,
  transformMat4: () => transformMat42,
  transformQuat: () => transformQuat,
  zero: () => zero2
});
function create2() {
  const out = new ARRAY_TYPE(3);
  if (ARRAY_TYPE != Float32Array) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
  }
  return out;
}
function clone2(a3) {
  const out = new ARRAY_TYPE(3);
  out[0] = a3[0];
  out[1] = a3[1];
  out[2] = a3[2];
  return out;
}
function length2(a3) {
  const x3 = a3[0];
  const y3 = a3[1];
  const z3 = a3[2];
  return Math.sqrt(x3 * x3 + y3 * y3 + z3 * z3);
}
function fromValues2(x3, y3, z3) {
  const out = new ARRAY_TYPE(3);
  out[0] = x3;
  out[1] = y3;
  out[2] = z3;
  return out;
}
function copy2(out, a3) {
  out[0] = a3[0];
  out[1] = a3[1];
  out[2] = a3[2];
  return out;
}
function set2(out, x3, y3, z3) {
  out[0] = x3;
  out[1] = y3;
  out[2] = z3;
  return out;
}
function add2(out, a3, b2) {
  out[0] = a3[0] + b2[0];
  out[1] = a3[1] + b2[1];
  out[2] = a3[2] + b2[2];
  return out;
}
function subtract2(out, a3, b2) {
  out[0] = a3[0] - b2[0];
  out[1] = a3[1] - b2[1];
  out[2] = a3[2] - b2[2];
  return out;
}
function multiply2(out, a3, b2) {
  out[0] = a3[0] * b2[0];
  out[1] = a3[1] * b2[1];
  out[2] = a3[2] * b2[2];
  return out;
}
function divide2(out, a3, b2) {
  out[0] = a3[0] / b2[0];
  out[1] = a3[1] / b2[1];
  out[2] = a3[2] / b2[2];
  return out;
}
function ceil2(out, a3) {
  out[0] = Math.ceil(a3[0]);
  out[1] = Math.ceil(a3[1]);
  out[2] = Math.ceil(a3[2]);
  return out;
}
function floor2(out, a3) {
  out[0] = Math.floor(a3[0]);
  out[1] = Math.floor(a3[1]);
  out[2] = Math.floor(a3[2]);
  return out;
}
function min2(out, a3, b2) {
  out[0] = Math.min(a3[0], b2[0]);
  out[1] = Math.min(a3[1], b2[1]);
  out[2] = Math.min(a3[2], b2[2]);
  return out;
}
function max2(out, a3, b2) {
  out[0] = Math.max(a3[0], b2[0]);
  out[1] = Math.max(a3[1], b2[1]);
  out[2] = Math.max(a3[2], b2[2]);
  return out;
}
function round4(out, a3) {
  out[0] = round2(a3[0]);
  out[1] = round2(a3[1]);
  out[2] = round2(a3[2]);
  return out;
}
function scale2(out, a3, b2) {
  out[0] = a3[0] * b2;
  out[1] = a3[1] * b2;
  out[2] = a3[2] * b2;
  return out;
}
function scaleAndAdd2(out, a3, b2, scale7) {
  out[0] = a3[0] + b2[0] * scale7;
  out[1] = a3[1] + b2[1] * scale7;
  out[2] = a3[2] + b2[2] * scale7;
  return out;
}
function distance2(a3, b2) {
  const x3 = b2[0] - a3[0];
  const y3 = b2[1] - a3[1];
  const z3 = b2[2] - a3[2];
  return Math.sqrt(x3 * x3 + y3 * y3 + z3 * z3);
}
function squaredDistance2(a3, b2) {
  const x3 = b2[0] - a3[0];
  const y3 = b2[1] - a3[1];
  const z3 = b2[2] - a3[2];
  return x3 * x3 + y3 * y3 + z3 * z3;
}
function squaredLength2(a3) {
  const x3 = a3[0];
  const y3 = a3[1];
  const z3 = a3[2];
  return x3 * x3 + y3 * y3 + z3 * z3;
}
function negate2(out, a3) {
  out[0] = -a3[0];
  out[1] = -a3[1];
  out[2] = -a3[2];
  return out;
}
function inverse2(out, a3) {
  out[0] = 1 / a3[0];
  out[1] = 1 / a3[1];
  out[2] = 1 / a3[2];
  return out;
}
function normalize2(out, a3) {
  const x3 = a3[0];
  const y3 = a3[1];
  const z3 = a3[2];
  let len5 = x3 * x3 + y3 * y3 + z3 * z3;
  if (len5 > 0) {
    len5 = 1 / Math.sqrt(len5);
  }
  out[0] = a3[0] * len5;
  out[1] = a3[1] * len5;
  out[2] = a3[2] * len5;
  return out;
}
function dot2(a3, b2) {
  return a3[0] * b2[0] + a3[1] * b2[1] + a3[2] * b2[2];
}
function cross2(out, a3, b2) {
  const ax = a3[0];
  const ay = a3[1];
  const az = a3[2];
  const bx = b2[0];
  const by = b2[1];
  const bz = b2[2];
  out[0] = ay * bz - az * by;
  out[1] = az * bx - ax * bz;
  out[2] = ax * by - ay * bx;
  return out;
}
function lerp3(out, a3, b2, t3) {
  const ax = a3[0];
  const ay = a3[1];
  const az = a3[2];
  out[0] = ax + t3 * (b2[0] - ax);
  out[1] = ay + t3 * (b2[1] - ay);
  out[2] = az + t3 * (b2[2] - az);
  return out;
}
function slerp(out, a3, b2, t3) {
  const angle3 = Math.acos(Math.min(Math.max(dot2(a3, b2), -1), 1));
  const sinTotal = Math.sin(angle3);
  const ratioA = Math.sin((1 - t3) * angle3) / sinTotal;
  const ratioB = Math.sin(t3 * angle3) / sinTotal;
  out[0] = ratioA * a3[0] + ratioB * b2[0];
  out[1] = ratioA * a3[1] + ratioB * b2[1];
  out[2] = ratioA * a3[2] + ratioB * b2[2];
  return out;
}
function hermite(out, a3, b2, c3, d3, t3) {
  const factorTimes2 = t3 * t3;
  const factor1 = factorTimes2 * (2 * t3 - 3) + 1;
  const factor2 = factorTimes2 * (t3 - 2) + t3;
  const factor3 = factorTimes2 * (t3 - 1);
  const factor4 = factorTimes2 * (3 - 2 * t3);
  out[0] = a3[0] * factor1 + b2[0] * factor2 + c3[0] * factor3 + d3[0] * factor4;
  out[1] = a3[1] * factor1 + b2[1] * factor2 + c3[1] * factor3 + d3[1] * factor4;
  out[2] = a3[2] * factor1 + b2[2] * factor2 + c3[2] * factor3 + d3[2] * factor4;
  return out;
}
function bezier(out, a3, b2, c3, d3, t3) {
  const inverseFactor = 1 - t3;
  const inverseFactorTimesTwo = inverseFactor * inverseFactor;
  const factorTimes2 = t3 * t3;
  const factor1 = inverseFactorTimesTwo * inverseFactor;
  const factor2 = 3 * t3 * inverseFactorTimesTwo;
  const factor3 = 3 * factorTimes2 * inverseFactor;
  const factor4 = factorTimes2 * t3;
  out[0] = a3[0] * factor1 + b2[0] * factor2 + c3[0] * factor3 + d3[0] * factor4;
  out[1] = a3[1] * factor1 + b2[1] * factor2 + c3[1] * factor3 + d3[1] * factor4;
  out[2] = a3[2] * factor1 + b2[2] * factor2 + c3[2] * factor3 + d3[2] * factor4;
  return out;
}
function random2(out, scale7) {
  scale7 = scale7 === void 0 ? 1 : scale7;
  const r3 = RANDOM() * 2 * Math.PI;
  const z3 = RANDOM() * 2 - 1;
  const zScale = Math.sqrt(1 - z3 * z3) * scale7;
  out[0] = Math.cos(r3) * zScale;
  out[1] = Math.sin(r3) * zScale;
  out[2] = z3 * scale7;
  return out;
}
function transformMat42(out, a3, m3) {
  const x3 = a3[0];
  const y3 = a3[1];
  const z3 = a3[2];
  let w3 = m3[3] * x3 + m3[7] * y3 + m3[11] * z3 + m3[15];
  w3 = w3 || 1;
  out[0] = (m3[0] * x3 + m3[4] * y3 + m3[8] * z3 + m3[12]) / w3;
  out[1] = (m3[1] * x3 + m3[5] * y3 + m3[9] * z3 + m3[13]) / w3;
  out[2] = (m3[2] * x3 + m3[6] * y3 + m3[10] * z3 + m3[14]) / w3;
  return out;
}
function transformMat32(out, a3, m3) {
  const x3 = a3[0];
  const y3 = a3[1];
  const z3 = a3[2];
  out[0] = x3 * m3[0] + y3 * m3[3] + z3 * m3[6];
  out[1] = x3 * m3[1] + y3 * m3[4] + z3 * m3[7];
  out[2] = x3 * m3[2] + y3 * m3[5] + z3 * m3[8];
  return out;
}
function transformQuat(out, a3, q3) {
  const qx = q3[0];
  const qy = q3[1];
  const qz = q3[2];
  const qw = q3[3];
  const x3 = a3[0];
  const y3 = a3[1];
  const z3 = a3[2];
  let uvx = qy * z3 - qz * y3;
  let uvy = qz * x3 - qx * z3;
  let uvz = qx * y3 - qy * x3;
  let uuvx = qy * uvz - qz * uvy;
  let uuvy = qz * uvx - qx * uvz;
  let uuvz = qx * uvy - qy * uvx;
  const w22 = qw * 2;
  uvx *= w22;
  uvy *= w22;
  uvz *= w22;
  uuvx *= 2;
  uuvy *= 2;
  uuvz *= 2;
  out[0] = x3 + uvx + uuvx;
  out[1] = y3 + uvy + uuvy;
  out[2] = z3 + uvz + uuvz;
  return out;
}
function rotateX(out, a3, b2, rad) {
  const p3 = [];
  const r3 = [];
  p3[0] = a3[0] - b2[0];
  p3[1] = a3[1] - b2[1];
  p3[2] = a3[2] - b2[2];
  r3[0] = p3[0];
  r3[1] = p3[1] * Math.cos(rad) - p3[2] * Math.sin(rad);
  r3[2] = p3[1] * Math.sin(rad) + p3[2] * Math.cos(rad);
  out[0] = r3[0] + b2[0];
  out[1] = r3[1] + b2[1];
  out[2] = r3[2] + b2[2];
  return out;
}
function rotateY(out, a3, b2, rad) {
  const p3 = [];
  const r3 = [];
  p3[0] = a3[0] - b2[0];
  p3[1] = a3[1] - b2[1];
  p3[2] = a3[2] - b2[2];
  r3[0] = p3[2] * Math.sin(rad) + p3[0] * Math.cos(rad);
  r3[1] = p3[1];
  r3[2] = p3[2] * Math.cos(rad) - p3[0] * Math.sin(rad);
  out[0] = r3[0] + b2[0];
  out[1] = r3[1] + b2[1];
  out[2] = r3[2] + b2[2];
  return out;
}
function rotateZ(out, a3, b2, rad) {
  const p3 = [];
  const r3 = [];
  p3[0] = a3[0] - b2[0];
  p3[1] = a3[1] - b2[1];
  p3[2] = a3[2] - b2[2];
  r3[0] = p3[0] * Math.cos(rad) - p3[1] * Math.sin(rad);
  r3[1] = p3[0] * Math.sin(rad) + p3[1] * Math.cos(rad);
  r3[2] = p3[2];
  out[0] = r3[0] + b2[0];
  out[1] = r3[1] + b2[1];
  out[2] = r3[2] + b2[2];
  return out;
}
function angle2(a3, b2) {
  const ax = a3[0];
  const ay = a3[1];
  const az = a3[2];
  const bx = b2[0];
  const by = b2[1];
  const bz = b2[2];
  const mag = Math.sqrt((ax * ax + ay * ay + az * az) * (bx * bx + by * by + bz * bz));
  const cosine = mag && dot2(a3, b2) / mag;
  return Math.acos(Math.min(Math.max(cosine, -1), 1));
}
function zero2(out) {
  out[0] = 0;
  out[1] = 0;
  out[2] = 0;
  return out;
}
function str2(a3) {
  return `vec3(${a3[0]}, ${a3[1]}, ${a3[2]})`;
}
function exactEquals2(a3, b2) {
  return a3[0] === b2[0] && a3[1] === b2[1] && a3[2] === b2[2];
}
function equals3(a3, b2) {
  const a0 = a3[0];
  const a1 = a3[1];
  const a22 = a3[2];
  const b0 = b2[0];
  const b1 = b2[1];
  const b22 = b2[2];
  return Math.abs(a0 - b0) <= EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) && Math.abs(a22 - b22) <= EPSILON * Math.max(1, Math.abs(a22), Math.abs(b22));
}
var sub2 = subtract2;
var mul2 = multiply2;
var div2 = divide2;
var dist2 = distance2;
var sqrDist2 = squaredDistance2;
var len2 = length2;
var sqrLen2 = squaredLength2;
var forEach3 = (function() {
  const vec = create2();
  return function(a3, stride, offset, count2, fn, arg) {
    let i4;
    let l3;
    if (!stride) {
      stride = 3;
    }
    if (!offset) {
      offset = 0;
    }
    if (count2) {
      l3 = Math.min(count2 * stride + offset, a3.length);
    } else {
      l3 = a3.length;
    }
    for (i4 = offset; i4 < l3; i4 += stride) {
      vec[0] = a3[i4];
      vec[1] = a3[i4 + 1];
      vec[2] = a3[i4 + 2];
      fn(vec, vec, arg);
      a3[i4] = vec[0];
      a3[i4 + 1] = vec[1];
      a3[i4 + 2] = vec[2];
    }
    return a3;
  };
})();

// ../../../.yarn/berry/cache/@math.gl-core-npm-4.1.0-f2844e4336-10c0.zip/node_modules/@math.gl/core/dist/classes/vector3.js
var ORIGIN = [0, 0, 0];
var ZERO;
var Vector3 = class _Vector3 extends Vector {
  static get ZERO() {
    if (!ZERO) {
      ZERO = new _Vector3(0, 0, 0);
      Object.freeze(ZERO);
    }
    return ZERO;
  }
  /**
   * @class
   * @param x
   * @param y
   * @param z
   */
  constructor(x3 = 0, y3 = 0, z3 = 0) {
    super(-0, -0, -0);
    if (arguments.length === 1 && isArray(x3)) {
      this.copy(x3);
    } else {
      if (config.debug) {
        checkNumber(x3);
        checkNumber(y3);
        checkNumber(z3);
      }
      this[0] = x3;
      this[1] = y3;
      this[2] = z3;
    }
  }
  set(x3, y3, z3) {
    this[0] = x3;
    this[1] = y3;
    this[2] = z3;
    return this.check();
  }
  copy(array) {
    this[0] = array[0];
    this[1] = array[1];
    this[2] = array[2];
    return this.check();
  }
  fromObject(object) {
    if (config.debug) {
      checkNumber(object.x);
      checkNumber(object.y);
      checkNumber(object.z);
    }
    this[0] = object.x;
    this[1] = object.y;
    this[2] = object.z;
    return this.check();
  }
  toObject(object) {
    object.x = this[0];
    object.y = this[1];
    object.z = this[2];
    return object;
  }
  // Getters/setters
  get ELEMENTS() {
    return 3;
  }
  get z() {
    return this[2];
  }
  set z(value) {
    this[2] = checkNumber(value);
  }
  // ACCESSORS
  angle(vector) {
    return angle2(this, vector);
  }
  // MODIFIERS
  cross(vector) {
    cross2(this, this, vector);
    return this.check();
  }
  rotateX({ radians: radians2, origin = ORIGIN }) {
    rotateX(this, this, origin, radians2);
    return this.check();
  }
  rotateY({ radians: radians2, origin = ORIGIN }) {
    rotateY(this, this, origin, radians2);
    return this.check();
  }
  rotateZ({ radians: radians2, origin = ORIGIN }) {
    rotateZ(this, this, origin, radians2);
    return this.check();
  }
  // Transforms
  // transforms as point (4th component is implicitly 1)
  transform(matrix4) {
    return this.transformAsPoint(matrix4);
  }
  // transforms as point (4th component is implicitly 1)
  transformAsPoint(matrix4) {
    transformMat42(this, this, matrix4);
    return this.check();
  }
  // transforms as vector  (4th component is implicitly 0, ignores translation. slightly faster)
  transformAsVector(matrix4) {
    vec3_transformMat4AsVector(this, this, matrix4);
    return this.check();
  }
  transformByMatrix3(matrix3) {
    transformMat32(this, this, matrix3);
    return this.check();
  }
  transformByMatrix2(matrix2) {
    vec3_transformMat2(this, this, matrix2);
    return this.check();
  }
  transformByQuaternion(quaternion) {
    transformQuat(this, this, quaternion);
    return this.check();
  }
};

// ../../../.yarn/berry/cache/@math.gl-core-npm-4.1.0-f2844e4336-10c0.zip/node_modules/@math.gl/core/dist/classes/base/matrix.js
var Matrix = class extends MathArray {
  // fromObject(object) {
  //   const array = object.elements;
  //   return this.fromRowMajor(array);
  // }
  // toObject(object) {
  //   const array = object.elements;
  //   this.toRowMajor(array);
  //   return object;
  // }
  // TODO better override formatString?
  toString() {
    let string = "[";
    if (config.printRowMajor) {
      string += "row-major:";
      for (let row = 0; row < this.RANK; ++row) {
        for (let col = 0; col < this.RANK; ++col) {
          string += ` ${this[col * this.RANK + row]}`;
        }
      }
    } else {
      string += "column-major:";
      for (let i4 = 0; i4 < this.ELEMENTS; ++i4) {
        string += ` ${this[i4]}`;
      }
    }
    string += "]";
    return string;
  }
  getElementIndex(row, col) {
    return col * this.RANK + row;
  }
  // By default assumes row major indices
  getElement(row, col) {
    return this[col * this.RANK + row];
  }
  // By default assumes row major indices
  setElement(row, col, value) {
    this[col * this.RANK + row] = checkNumber(value);
    return this;
  }
  getColumn(columnIndex, result = new Array(this.RANK).fill(-0)) {
    const firstIndex = columnIndex * this.RANK;
    for (let i4 = 0; i4 < this.RANK; ++i4) {
      result[i4] = this[firstIndex + i4];
    }
    return result;
  }
  setColumn(columnIndex, columnVector) {
    const firstIndex = columnIndex * this.RANK;
    for (let i4 = 0; i4 < this.RANK; ++i4) {
      this[firstIndex + i4] = columnVector[i4];
    }
    return this;
  }
};

// ../../../.yarn/berry/cache/@math.gl-core-npm-4.1.0-f2844e4336-10c0.zip/node_modules/@math.gl/core/dist/gl-matrix/mat3.js
var mat3_exports = {};
__export(mat3_exports, {
  add: () => add3,
  adjoint: () => adjoint,
  clone: () => clone3,
  copy: () => copy3,
  create: () => create3,
  determinant: () => determinant,
  equals: () => equals4,
  exactEquals: () => exactEquals3,
  frob: () => frob,
  fromMat2d: () => fromMat2d,
  fromMat4: () => fromMat4,
  fromQuat: () => fromQuat,
  fromRotation: () => fromRotation,
  fromScaling: () => fromScaling,
  fromTranslation: () => fromTranslation,
  fromValues: () => fromValues3,
  identity: () => identity,
  invert: () => invert,
  mul: () => mul3,
  multiply: () => multiply3,
  multiplyScalar: () => multiplyScalar,
  multiplyScalarAndAdd: () => multiplyScalarAndAdd,
  normalFromMat4: () => normalFromMat4,
  projection: () => projection,
  rotate: () => rotate2,
  scale: () => scale3,
  set: () => set3,
  str: () => str3,
  sub: () => sub3,
  subtract: () => subtract3,
  translate: () => translate,
  transpose: () => transpose
});
function create3() {
  const out = new ARRAY_TYPE(9);
  if (ARRAY_TYPE != Float32Array) {
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[5] = 0;
    out[6] = 0;
    out[7] = 0;
  }
  out[0] = 1;
  out[4] = 1;
  out[8] = 1;
  return out;
}
function fromMat4(out, a3) {
  out[0] = a3[0];
  out[1] = a3[1];
  out[2] = a3[2];
  out[3] = a3[4];
  out[4] = a3[5];
  out[5] = a3[6];
  out[6] = a3[8];
  out[7] = a3[9];
  out[8] = a3[10];
  return out;
}
function clone3(a3) {
  const out = new ARRAY_TYPE(9);
  out[0] = a3[0];
  out[1] = a3[1];
  out[2] = a3[2];
  out[3] = a3[3];
  out[4] = a3[4];
  out[5] = a3[5];
  out[6] = a3[6];
  out[7] = a3[7];
  out[8] = a3[8];
  return out;
}
function copy3(out, a3) {
  out[0] = a3[0];
  out[1] = a3[1];
  out[2] = a3[2];
  out[3] = a3[3];
  out[4] = a3[4];
  out[5] = a3[5];
  out[6] = a3[6];
  out[7] = a3[7];
  out[8] = a3[8];
  return out;
}
function fromValues3(m00, m01, m02, m10, m11, m12, m20, m21, m22) {
  const out = new ARRAY_TYPE(9);
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m10;
  out[4] = m11;
  out[5] = m12;
  out[6] = m20;
  out[7] = m21;
  out[8] = m22;
  return out;
}
function set3(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m10;
  out[4] = m11;
  out[5] = m12;
  out[6] = m20;
  out[7] = m21;
  out[8] = m22;
  return out;
}
function identity(out) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 1;
  out[5] = 0;
  out[6] = 0;
  out[7] = 0;
  out[8] = 1;
  return out;
}
function transpose(out, a3) {
  if (out === a3) {
    const a01 = a3[1];
    const a02 = a3[2];
    const a12 = a3[5];
    out[1] = a3[3];
    out[2] = a3[6];
    out[3] = a01;
    out[5] = a3[7];
    out[6] = a02;
    out[7] = a12;
  } else {
    out[0] = a3[0];
    out[1] = a3[3];
    out[2] = a3[6];
    out[3] = a3[1];
    out[4] = a3[4];
    out[5] = a3[7];
    out[6] = a3[2];
    out[7] = a3[5];
    out[8] = a3[8];
  }
  return out;
}
function invert(out, a3) {
  const a00 = a3[0];
  const a01 = a3[1];
  const a02 = a3[2];
  const a10 = a3[3];
  const a11 = a3[4];
  const a12 = a3[5];
  const a20 = a3[6];
  const a21 = a3[7];
  const a22 = a3[8];
  const b01 = a22 * a11 - a12 * a21;
  const b11 = -a22 * a10 + a12 * a20;
  const b21 = a21 * a10 - a11 * a20;
  let det = a00 * b01 + a01 * b11 + a02 * b21;
  if (!det) {
    return null;
  }
  det = 1 / det;
  out[0] = b01 * det;
  out[1] = (-a22 * a01 + a02 * a21) * det;
  out[2] = (a12 * a01 - a02 * a11) * det;
  out[3] = b11 * det;
  out[4] = (a22 * a00 - a02 * a20) * det;
  out[5] = (-a12 * a00 + a02 * a10) * det;
  out[6] = b21 * det;
  out[7] = (-a21 * a00 + a01 * a20) * det;
  out[8] = (a11 * a00 - a01 * a10) * det;
  return out;
}
function adjoint(out, a3) {
  const a00 = a3[0];
  const a01 = a3[1];
  const a02 = a3[2];
  const a10 = a3[3];
  const a11 = a3[4];
  const a12 = a3[5];
  const a20 = a3[6];
  const a21 = a3[7];
  const a22 = a3[8];
  out[0] = a11 * a22 - a12 * a21;
  out[1] = a02 * a21 - a01 * a22;
  out[2] = a01 * a12 - a02 * a11;
  out[3] = a12 * a20 - a10 * a22;
  out[4] = a00 * a22 - a02 * a20;
  out[5] = a02 * a10 - a00 * a12;
  out[6] = a10 * a21 - a11 * a20;
  out[7] = a01 * a20 - a00 * a21;
  out[8] = a00 * a11 - a01 * a10;
  return out;
}
function determinant(a3) {
  const a00 = a3[0];
  const a01 = a3[1];
  const a02 = a3[2];
  const a10 = a3[3];
  const a11 = a3[4];
  const a12 = a3[5];
  const a20 = a3[6];
  const a21 = a3[7];
  const a22 = a3[8];
  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);
}
function multiply3(out, a3, b2) {
  const a00 = a3[0];
  const a01 = a3[1];
  const a02 = a3[2];
  const a10 = a3[3];
  const a11 = a3[4];
  const a12 = a3[5];
  const a20 = a3[6];
  const a21 = a3[7];
  const a22 = a3[8];
  const b00 = b2[0];
  const b01 = b2[1];
  const b02 = b2[2];
  const b10 = b2[3];
  const b11 = b2[4];
  const b12 = b2[5];
  const b20 = b2[6];
  const b21 = b2[7];
  const b22 = b2[8];
  out[0] = b00 * a00 + b01 * a10 + b02 * a20;
  out[1] = b00 * a01 + b01 * a11 + b02 * a21;
  out[2] = b00 * a02 + b01 * a12 + b02 * a22;
  out[3] = b10 * a00 + b11 * a10 + b12 * a20;
  out[4] = b10 * a01 + b11 * a11 + b12 * a21;
  out[5] = b10 * a02 + b11 * a12 + b12 * a22;
  out[6] = b20 * a00 + b21 * a10 + b22 * a20;
  out[7] = b20 * a01 + b21 * a11 + b22 * a21;
  out[8] = b20 * a02 + b21 * a12 + b22 * a22;
  return out;
}
function translate(out, a3, v3) {
  const a00 = a3[0];
  const a01 = a3[1];
  const a02 = a3[2];
  const a10 = a3[3];
  const a11 = a3[4];
  const a12 = a3[5];
  const a20 = a3[6];
  const a21 = a3[7];
  const a22 = a3[8];
  const x3 = v3[0];
  const y3 = v3[1];
  out[0] = a00;
  out[1] = a01;
  out[2] = a02;
  out[3] = a10;
  out[4] = a11;
  out[5] = a12;
  out[6] = x3 * a00 + y3 * a10 + a20;
  out[7] = x3 * a01 + y3 * a11 + a21;
  out[8] = x3 * a02 + y3 * a12 + a22;
  return out;
}
function rotate2(out, a3, rad) {
  const a00 = a3[0];
  const a01 = a3[1];
  const a02 = a3[2];
  const a10 = a3[3];
  const a11 = a3[4];
  const a12 = a3[5];
  const a20 = a3[6];
  const a21 = a3[7];
  const a22 = a3[8];
  const s3 = Math.sin(rad);
  const c3 = Math.cos(rad);
  out[0] = c3 * a00 + s3 * a10;
  out[1] = c3 * a01 + s3 * a11;
  out[2] = c3 * a02 + s3 * a12;
  out[3] = c3 * a10 - s3 * a00;
  out[4] = c3 * a11 - s3 * a01;
  out[5] = c3 * a12 - s3 * a02;
  out[6] = a20;
  out[7] = a21;
  out[8] = a22;
  return out;
}
function scale3(out, a3, v3) {
  const x3 = v3[0];
  const y3 = v3[1];
  out[0] = x3 * a3[0];
  out[1] = x3 * a3[1];
  out[2] = x3 * a3[2];
  out[3] = y3 * a3[3];
  out[4] = y3 * a3[4];
  out[5] = y3 * a3[5];
  out[6] = a3[6];
  out[7] = a3[7];
  out[8] = a3[8];
  return out;
}
function fromTranslation(out, v3) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 1;
  out[5] = 0;
  out[6] = v3[0];
  out[7] = v3[1];
  out[8] = 1;
  return out;
}
function fromRotation(out, rad) {
  const s3 = Math.sin(rad);
  const c3 = Math.cos(rad);
  out[0] = c3;
  out[1] = s3;
  out[2] = 0;
  out[3] = -s3;
  out[4] = c3;
  out[5] = 0;
  out[6] = 0;
  out[7] = 0;
  out[8] = 1;
  return out;
}
function fromScaling(out, v3) {
  out[0] = v3[0];
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = v3[1];
  out[5] = 0;
  out[6] = 0;
  out[7] = 0;
  out[8] = 1;
  return out;
}
function fromMat2d(out, a3) {
  out[0] = a3[0];
  out[1] = a3[1];
  out[2] = 0;
  out[3] = a3[2];
  out[4] = a3[3];
  out[5] = 0;
  out[6] = a3[4];
  out[7] = a3[5];
  out[8] = 1;
  return out;
}
function fromQuat(out, q3) {
  const x3 = q3[0];
  const y3 = q3[1];
  const z3 = q3[2];
  const w3 = q3[3];
  const x22 = x3 + x3;
  const y22 = y3 + y3;
  const z22 = z3 + z3;
  const xx = x3 * x22;
  const yx = y3 * x22;
  const yy = y3 * y22;
  const zx = z3 * x22;
  const zy = z3 * y22;
  const zz = z3 * z22;
  const wx = w3 * x22;
  const wy = w3 * y22;
  const wz = w3 * z22;
  out[0] = 1 - yy - zz;
  out[3] = yx - wz;
  out[6] = zx + wy;
  out[1] = yx + wz;
  out[4] = 1 - xx - zz;
  out[7] = zy - wx;
  out[2] = zx - wy;
  out[5] = zy + wx;
  out[8] = 1 - xx - yy;
  return out;
}
function normalFromMat4(out, a3) {
  const a00 = a3[0];
  const a01 = a3[1];
  const a02 = a3[2];
  const a03 = a3[3];
  const a10 = a3[4];
  const a11 = a3[5];
  const a12 = a3[6];
  const a13 = a3[7];
  const a20 = a3[8];
  const a21 = a3[9];
  const a22 = a3[10];
  const a23 = a3[11];
  const a30 = a3[12];
  const a31 = a3[13];
  const a32 = a3[14];
  const a33 = a3[15];
  const b00 = a00 * a11 - a01 * a10;
  const b01 = a00 * a12 - a02 * a10;
  const b02 = a00 * a13 - a03 * a10;
  const b03 = a01 * a12 - a02 * a11;
  const b04 = a01 * a13 - a03 * a11;
  const b05 = a02 * a13 - a03 * a12;
  const b06 = a20 * a31 - a21 * a30;
  const b07 = a20 * a32 - a22 * a30;
  const b08 = a20 * a33 - a23 * a30;
  const b09 = a21 * a32 - a22 * a31;
  const b10 = a21 * a33 - a23 * a31;
  const b11 = a22 * a33 - a23 * a32;
  let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
  if (!det) {
    return null;
  }
  det = 1 / det;
  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
  return out;
}
function projection(out, width, height) {
  out[0] = 2 / width;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = -2 / height;
  out[5] = 0;
  out[6] = -1;
  out[7] = 1;
  out[8] = 1;
  return out;
}
function str3(a3) {
  return `mat3(${a3[0]}, ${a3[1]}, ${a3[2]}, ${a3[3]}, ${a3[4]}, ${a3[5]}, ${a3[6]}, ${a3[7]}, ${a3[8]})`;
}
function frob(a3) {
  return Math.sqrt(a3[0] * a3[0] + a3[1] * a3[1] + a3[2] * a3[2] + a3[3] * a3[3] + a3[4] * a3[4] + a3[5] * a3[5] + a3[6] * a3[6] + a3[7] * a3[7] + a3[8] * a3[8]);
}
function add3(out, a3, b2) {
  out[0] = a3[0] + b2[0];
  out[1] = a3[1] + b2[1];
  out[2] = a3[2] + b2[2];
  out[3] = a3[3] + b2[3];
  out[4] = a3[4] + b2[4];
  out[5] = a3[5] + b2[5];
  out[6] = a3[6] + b2[6];
  out[7] = a3[7] + b2[7];
  out[8] = a3[8] + b2[8];
  return out;
}
function subtract3(out, a3, b2) {
  out[0] = a3[0] - b2[0];
  out[1] = a3[1] - b2[1];
  out[2] = a3[2] - b2[2];
  out[3] = a3[3] - b2[3];
  out[4] = a3[4] - b2[4];
  out[5] = a3[5] - b2[5];
  out[6] = a3[6] - b2[6];
  out[7] = a3[7] - b2[7];
  out[8] = a3[8] - b2[8];
  return out;
}
function multiplyScalar(out, a3, b2) {
  out[0] = a3[0] * b2;
  out[1] = a3[1] * b2;
  out[2] = a3[2] * b2;
  out[3] = a3[3] * b2;
  out[4] = a3[4] * b2;
  out[5] = a3[5] * b2;
  out[6] = a3[6] * b2;
  out[7] = a3[7] * b2;
  out[8] = a3[8] * b2;
  return out;
}
function multiplyScalarAndAdd(out, a3, b2, scale7) {
  out[0] = a3[0] + b2[0] * scale7;
  out[1] = a3[1] + b2[1] * scale7;
  out[2] = a3[2] + b2[2] * scale7;
  out[3] = a3[3] + b2[3] * scale7;
  out[4] = a3[4] + b2[4] * scale7;
  out[5] = a3[5] + b2[5] * scale7;
  out[6] = a3[6] + b2[6] * scale7;
  out[7] = a3[7] + b2[7] * scale7;
  out[8] = a3[8] + b2[8] * scale7;
  return out;
}
function exactEquals3(a3, b2) {
  return a3[0] === b2[0] && a3[1] === b2[1] && a3[2] === b2[2] && a3[3] === b2[3] && a3[4] === b2[4] && a3[5] === b2[5] && a3[6] === b2[6] && a3[7] === b2[7] && a3[8] === b2[8];
}
function equals4(a3, b2) {
  const a0 = a3[0];
  const a1 = a3[1];
  const a22 = a3[2];
  const a32 = a3[3];
  const a4 = a3[4];
  const a5 = a3[5];
  const a6 = a3[6];
  const a7 = a3[7];
  const a8 = a3[8];
  const b0 = b2[0];
  const b1 = b2[1];
  const b22 = b2[2];
  const b3 = b2[3];
  const b4 = b2[4];
  const b5 = b2[5];
  const b6 = b2[6];
  const b7 = b2[7];
  const b8 = b2[8];
  return Math.abs(a0 - b0) <= EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) && Math.abs(a22 - b22) <= EPSILON * Math.max(1, Math.abs(a22), Math.abs(b22)) && Math.abs(a32 - b3) <= EPSILON * Math.max(1, Math.abs(a32), Math.abs(b3)) && Math.abs(a4 - b4) <= EPSILON * Math.max(1, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= EPSILON * Math.max(1, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= EPSILON * Math.max(1, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= EPSILON * Math.max(1, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= EPSILON * Math.max(1, Math.abs(a8), Math.abs(b8));
}
var mul3 = multiply3;
var sub3 = subtract3;

// ../../../.yarn/berry/cache/@math.gl-core-npm-4.1.0-f2844e4336-10c0.zip/node_modules/@math.gl/core/dist/classes/matrix3.js
var INDICES;
(function(INDICES3) {
  INDICES3[INDICES3["COL0ROW0"] = 0] = "COL0ROW0";
  INDICES3[INDICES3["COL0ROW1"] = 1] = "COL0ROW1";
  INDICES3[INDICES3["COL0ROW2"] = 2] = "COL0ROW2";
  INDICES3[INDICES3["COL1ROW0"] = 3] = "COL1ROW0";
  INDICES3[INDICES3["COL1ROW1"] = 4] = "COL1ROW1";
  INDICES3[INDICES3["COL1ROW2"] = 5] = "COL1ROW2";
  INDICES3[INDICES3["COL2ROW0"] = 6] = "COL2ROW0";
  INDICES3[INDICES3["COL2ROW1"] = 7] = "COL2ROW1";
  INDICES3[INDICES3["COL2ROW2"] = 8] = "COL2ROW2";
})(INDICES || (INDICES = {}));
var IDENTITY_MATRIX = Object.freeze([1, 0, 0, 0, 1, 0, 0, 0, 1]);

// ../../../.yarn/berry/cache/@math.gl-core-npm-4.1.0-f2844e4336-10c0.zip/node_modules/@math.gl/core/dist/gl-matrix/mat4.js
var mat4_exports = {};
__export(mat4_exports, {
  add: () => add4,
  adjoint: () => adjoint2,
  clone: () => clone4,
  copy: () => copy4,
  create: () => create4,
  decompose: () => decompose,
  determinant: () => determinant2,
  equals: () => equals5,
  exactEquals: () => exactEquals4,
  frob: () => frob2,
  fromQuat: () => fromQuat3,
  fromQuat2: () => fromQuat2,
  fromRotation: () => fromRotation2,
  fromRotationTranslation: () => fromRotationTranslation,
  fromRotationTranslationScale: () => fromRotationTranslationScale,
  fromRotationTranslationScaleOrigin: () => fromRotationTranslationScaleOrigin,
  fromScaling: () => fromScaling2,
  fromTranslation: () => fromTranslation2,
  fromValues: () => fromValues4,
  fromXRotation: () => fromXRotation,
  fromYRotation: () => fromYRotation,
  fromZRotation: () => fromZRotation,
  frustum: () => frustum,
  getRotation: () => getRotation,
  getScaling: () => getScaling,
  getTranslation: () => getTranslation,
  identity: () => identity2,
  invert: () => invert2,
  lookAt: () => lookAt,
  mul: () => mul4,
  multiply: () => multiply4,
  multiplyScalar: () => multiplyScalar2,
  multiplyScalarAndAdd: () => multiplyScalarAndAdd2,
  ortho: () => ortho,
  orthoNO: () => orthoNO,
  orthoZO: () => orthoZO,
  perspective: () => perspective,
  perspectiveFromFieldOfView: () => perspectiveFromFieldOfView,
  perspectiveNO: () => perspectiveNO,
  perspectiveZO: () => perspectiveZO,
  rotate: () => rotate3,
  rotateX: () => rotateX2,
  rotateY: () => rotateY2,
  rotateZ: () => rotateZ2,
  scale: () => scale4,
  set: () => set4,
  str: () => str4,
  sub: () => sub4,
  subtract: () => subtract4,
  targetTo: () => targetTo,
  translate: () => translate2,
  transpose: () => transpose2
});
function create4() {
  const out = new ARRAY_TYPE(16);
  if (ARRAY_TYPE != Float32Array) {
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
  }
  out[0] = 1;
  out[5] = 1;
  out[10] = 1;
  out[15] = 1;
  return out;
}
function clone4(a3) {
  const out = new ARRAY_TYPE(16);
  out[0] = a3[0];
  out[1] = a3[1];
  out[2] = a3[2];
  out[3] = a3[3];
  out[4] = a3[4];
  out[5] = a3[5];
  out[6] = a3[6];
  out[7] = a3[7];
  out[8] = a3[8];
  out[9] = a3[9];
  out[10] = a3[10];
  out[11] = a3[11];
  out[12] = a3[12];
  out[13] = a3[13];
  out[14] = a3[14];
  out[15] = a3[15];
  return out;
}
function copy4(out, a3) {
  out[0] = a3[0];
  out[1] = a3[1];
  out[2] = a3[2];
  out[3] = a3[3];
  out[4] = a3[4];
  out[5] = a3[5];
  out[6] = a3[6];
  out[7] = a3[7];
  out[8] = a3[8];
  out[9] = a3[9];
  out[10] = a3[10];
  out[11] = a3[11];
  out[12] = a3[12];
  out[13] = a3[13];
  out[14] = a3[14];
  out[15] = a3[15];
  return out;
}
function fromValues4(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
  const out = new ARRAY_TYPE(16);
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m03;
  out[4] = m10;
  out[5] = m11;
  out[6] = m12;
  out[7] = m13;
  out[8] = m20;
  out[9] = m21;
  out[10] = m22;
  out[11] = m23;
  out[12] = m30;
  out[13] = m31;
  out[14] = m32;
  out[15] = m33;
  return out;
}
function set4(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m03;
  out[4] = m10;
  out[5] = m11;
  out[6] = m12;
  out[7] = m13;
  out[8] = m20;
  out[9] = m21;
  out[10] = m22;
  out[11] = m23;
  out[12] = m30;
  out[13] = m31;
  out[14] = m32;
  out[15] = m33;
  return out;
}
function identity2(out) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = 1;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 1;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
function transpose2(out, a3) {
  if (out === a3) {
    const a01 = a3[1];
    const a02 = a3[2];
    const a03 = a3[3];
    const a12 = a3[6];
    const a13 = a3[7];
    const a23 = a3[11];
    out[1] = a3[4];
    out[2] = a3[8];
    out[3] = a3[12];
    out[4] = a01;
    out[6] = a3[9];
    out[7] = a3[13];
    out[8] = a02;
    out[9] = a12;
    out[11] = a3[14];
    out[12] = a03;
    out[13] = a13;
    out[14] = a23;
  } else {
    out[0] = a3[0];
    out[1] = a3[4];
    out[2] = a3[8];
    out[3] = a3[12];
    out[4] = a3[1];
    out[5] = a3[5];
    out[6] = a3[9];
    out[7] = a3[13];
    out[8] = a3[2];
    out[9] = a3[6];
    out[10] = a3[10];
    out[11] = a3[14];
    out[12] = a3[3];
    out[13] = a3[7];
    out[14] = a3[11];
    out[15] = a3[15];
  }
  return out;
}
function invert2(out, a3) {
  const a00 = a3[0];
  const a01 = a3[1];
  const a02 = a3[2];
  const a03 = a3[3];
  const a10 = a3[4];
  const a11 = a3[5];
  const a12 = a3[6];
  const a13 = a3[7];
  const a20 = a3[8];
  const a21 = a3[9];
  const a22 = a3[10];
  const a23 = a3[11];
  const a30 = a3[12];
  const a31 = a3[13];
  const a32 = a3[14];
  const a33 = a3[15];
  const b00 = a00 * a11 - a01 * a10;
  const b01 = a00 * a12 - a02 * a10;
  const b02 = a00 * a13 - a03 * a10;
  const b03 = a01 * a12 - a02 * a11;
  const b04 = a01 * a13 - a03 * a11;
  const b05 = a02 * a13 - a03 * a12;
  const b06 = a20 * a31 - a21 * a30;
  const b07 = a20 * a32 - a22 * a30;
  const b08 = a20 * a33 - a23 * a30;
  const b09 = a21 * a32 - a22 * a31;
  const b10 = a21 * a33 - a23 * a31;
  const b11 = a22 * a33 - a23 * a32;
  let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
  if (!det) {
    return null;
  }
  det = 1 / det;
  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;
  return out;
}
function adjoint2(out, a3) {
  const a00 = a3[0];
  const a01 = a3[1];
  const a02 = a3[2];
  const a03 = a3[3];
  const a10 = a3[4];
  const a11 = a3[5];
  const a12 = a3[6];
  const a13 = a3[7];
  const a20 = a3[8];
  const a21 = a3[9];
  const a22 = a3[10];
  const a23 = a3[11];
  const a30 = a3[12];
  const a31 = a3[13];
  const a32 = a3[14];
  const a33 = a3[15];
  const b00 = a00 * a11 - a01 * a10;
  const b01 = a00 * a12 - a02 * a10;
  const b02 = a00 * a13 - a03 * a10;
  const b03 = a01 * a12 - a02 * a11;
  const b04 = a01 * a13 - a03 * a11;
  const b05 = a02 * a13 - a03 * a12;
  const b06 = a20 * a31 - a21 * a30;
  const b07 = a20 * a32 - a22 * a30;
  const b08 = a20 * a33 - a23 * a30;
  const b09 = a21 * a32 - a22 * a31;
  const b10 = a21 * a33 - a23 * a31;
  const b11 = a22 * a33 - a23 * a32;
  out[0] = a11 * b11 - a12 * b10 + a13 * b09;
  out[1] = a02 * b10 - a01 * b11 - a03 * b09;
  out[2] = a31 * b05 - a32 * b04 + a33 * b03;
  out[3] = a22 * b04 - a21 * b05 - a23 * b03;
  out[4] = a12 * b08 - a10 * b11 - a13 * b07;
  out[5] = a00 * b11 - a02 * b08 + a03 * b07;
  out[6] = a32 * b02 - a30 * b05 - a33 * b01;
  out[7] = a20 * b05 - a22 * b02 + a23 * b01;
  out[8] = a10 * b10 - a11 * b08 + a13 * b06;
  out[9] = a01 * b08 - a00 * b10 - a03 * b06;
  out[10] = a30 * b04 - a31 * b02 + a33 * b00;
  out[11] = a21 * b02 - a20 * b04 - a23 * b00;
  out[12] = a11 * b07 - a10 * b09 - a12 * b06;
  out[13] = a00 * b09 - a01 * b07 + a02 * b06;
  out[14] = a31 * b01 - a30 * b03 - a32 * b00;
  out[15] = a20 * b03 - a21 * b01 + a22 * b00;
  return out;
}
function determinant2(a3) {
  const a00 = a3[0];
  const a01 = a3[1];
  const a02 = a3[2];
  const a03 = a3[3];
  const a10 = a3[4];
  const a11 = a3[5];
  const a12 = a3[6];
  const a13 = a3[7];
  const a20 = a3[8];
  const a21 = a3[9];
  const a22 = a3[10];
  const a23 = a3[11];
  const a30 = a3[12];
  const a31 = a3[13];
  const a32 = a3[14];
  const a33 = a3[15];
  const b0 = a00 * a11 - a01 * a10;
  const b1 = a00 * a12 - a02 * a10;
  const b2 = a01 * a12 - a02 * a11;
  const b3 = a20 * a31 - a21 * a30;
  const b4 = a20 * a32 - a22 * a30;
  const b5 = a21 * a32 - a22 * a31;
  const b6 = a00 * b5 - a01 * b4 + a02 * b3;
  const b7 = a10 * b5 - a11 * b4 + a12 * b3;
  const b8 = a20 * b2 - a21 * b1 + a22 * b0;
  const b9 = a30 * b2 - a31 * b1 + a32 * b0;
  return a13 * b6 - a03 * b7 + a33 * b8 - a23 * b9;
}
function multiply4(out, a3, b2) {
  const a00 = a3[0];
  const a01 = a3[1];
  const a02 = a3[2];
  const a03 = a3[3];
  const a10 = a3[4];
  const a11 = a3[5];
  const a12 = a3[6];
  const a13 = a3[7];
  const a20 = a3[8];
  const a21 = a3[9];
  const a22 = a3[10];
  const a23 = a3[11];
  const a30 = a3[12];
  const a31 = a3[13];
  const a32 = a3[14];
  const a33 = a3[15];
  let b0 = b2[0];
  let b1 = b2[1];
  let b22 = b2[2];
  let b3 = b2[3];
  out[0] = b0 * a00 + b1 * a10 + b22 * a20 + b3 * a30;
  out[1] = b0 * a01 + b1 * a11 + b22 * a21 + b3 * a31;
  out[2] = b0 * a02 + b1 * a12 + b22 * a22 + b3 * a32;
  out[3] = b0 * a03 + b1 * a13 + b22 * a23 + b3 * a33;
  b0 = b2[4];
  b1 = b2[5];
  b22 = b2[6];
  b3 = b2[7];
  out[4] = b0 * a00 + b1 * a10 + b22 * a20 + b3 * a30;
  out[5] = b0 * a01 + b1 * a11 + b22 * a21 + b3 * a31;
  out[6] = b0 * a02 + b1 * a12 + b22 * a22 + b3 * a32;
  out[7] = b0 * a03 + b1 * a13 + b22 * a23 + b3 * a33;
  b0 = b2[8];
  b1 = b2[9];
  b22 = b2[10];
  b3 = b2[11];
  out[8] = b0 * a00 + b1 * a10 + b22 * a20 + b3 * a30;
  out[9] = b0 * a01 + b1 * a11 + b22 * a21 + b3 * a31;
  out[10] = b0 * a02 + b1 * a12 + b22 * a22 + b3 * a32;
  out[11] = b0 * a03 + b1 * a13 + b22 * a23 + b3 * a33;
  b0 = b2[12];
  b1 = b2[13];
  b22 = b2[14];
  b3 = b2[15];
  out[12] = b0 * a00 + b1 * a10 + b22 * a20 + b3 * a30;
  out[13] = b0 * a01 + b1 * a11 + b22 * a21 + b3 * a31;
  out[14] = b0 * a02 + b1 * a12 + b22 * a22 + b3 * a32;
  out[15] = b0 * a03 + b1 * a13 + b22 * a23 + b3 * a33;
  return out;
}
function translate2(out, a3, v3) {
  const x3 = v3[0];
  const y3 = v3[1];
  const z3 = v3[2];
  let a00;
  let a01;
  let a02;
  let a03;
  let a10;
  let a11;
  let a12;
  let a13;
  let a20;
  let a21;
  let a22;
  let a23;
  if (a3 === out) {
    out[12] = a3[0] * x3 + a3[4] * y3 + a3[8] * z3 + a3[12];
    out[13] = a3[1] * x3 + a3[5] * y3 + a3[9] * z3 + a3[13];
    out[14] = a3[2] * x3 + a3[6] * y3 + a3[10] * z3 + a3[14];
    out[15] = a3[3] * x3 + a3[7] * y3 + a3[11] * z3 + a3[15];
  } else {
    a00 = a3[0];
    a01 = a3[1];
    a02 = a3[2];
    a03 = a3[3];
    a10 = a3[4];
    a11 = a3[5];
    a12 = a3[6];
    a13 = a3[7];
    a20 = a3[8];
    a21 = a3[9];
    a22 = a3[10];
    a23 = a3[11];
    out[0] = a00;
    out[1] = a01;
    out[2] = a02;
    out[3] = a03;
    out[4] = a10;
    out[5] = a11;
    out[6] = a12;
    out[7] = a13;
    out[8] = a20;
    out[9] = a21;
    out[10] = a22;
    out[11] = a23;
    out[12] = a00 * x3 + a10 * y3 + a20 * z3 + a3[12];
    out[13] = a01 * x3 + a11 * y3 + a21 * z3 + a3[13];
    out[14] = a02 * x3 + a12 * y3 + a22 * z3 + a3[14];
    out[15] = a03 * x3 + a13 * y3 + a23 * z3 + a3[15];
  }
  return out;
}
function scale4(out, a3, v3) {
  const x3 = v3[0];
  const y3 = v3[1];
  const z3 = v3[2];
  out[0] = a3[0] * x3;
  out[1] = a3[1] * x3;
  out[2] = a3[2] * x3;
  out[3] = a3[3] * x3;
  out[4] = a3[4] * y3;
  out[5] = a3[5] * y3;
  out[6] = a3[6] * y3;
  out[7] = a3[7] * y3;
  out[8] = a3[8] * z3;
  out[9] = a3[9] * z3;
  out[10] = a3[10] * z3;
  out[11] = a3[11] * z3;
  out[12] = a3[12];
  out[13] = a3[13];
  out[14] = a3[14];
  out[15] = a3[15];
  return out;
}
function rotate3(out, a3, rad, axis) {
  let x3 = axis[0];
  let y3 = axis[1];
  let z3 = axis[2];
  let len5 = Math.sqrt(x3 * x3 + y3 * y3 + z3 * z3);
  let c3;
  let s3;
  let t3;
  let a00;
  let a01;
  let a02;
  let a03;
  let a10;
  let a11;
  let a12;
  let a13;
  let a20;
  let a21;
  let a22;
  let a23;
  let b00;
  let b01;
  let b02;
  let b10;
  let b11;
  let b12;
  let b20;
  let b21;
  let b22;
  if (len5 < EPSILON) {
    return null;
  }
  len5 = 1 / len5;
  x3 *= len5;
  y3 *= len5;
  z3 *= len5;
  s3 = Math.sin(rad);
  c3 = Math.cos(rad);
  t3 = 1 - c3;
  a00 = a3[0];
  a01 = a3[1];
  a02 = a3[2];
  a03 = a3[3];
  a10 = a3[4];
  a11 = a3[5];
  a12 = a3[6];
  a13 = a3[7];
  a20 = a3[8];
  a21 = a3[9];
  a22 = a3[10];
  a23 = a3[11];
  b00 = x3 * x3 * t3 + c3;
  b01 = y3 * x3 * t3 + z3 * s3;
  b02 = z3 * x3 * t3 - y3 * s3;
  b10 = x3 * y3 * t3 - z3 * s3;
  b11 = y3 * y3 * t3 + c3;
  b12 = z3 * y3 * t3 + x3 * s3;
  b20 = x3 * z3 * t3 + y3 * s3;
  b21 = y3 * z3 * t3 - x3 * s3;
  b22 = z3 * z3 * t3 + c3;
  out[0] = a00 * b00 + a10 * b01 + a20 * b02;
  out[1] = a01 * b00 + a11 * b01 + a21 * b02;
  out[2] = a02 * b00 + a12 * b01 + a22 * b02;
  out[3] = a03 * b00 + a13 * b01 + a23 * b02;
  out[4] = a00 * b10 + a10 * b11 + a20 * b12;
  out[5] = a01 * b10 + a11 * b11 + a21 * b12;
  out[6] = a02 * b10 + a12 * b11 + a22 * b12;
  out[7] = a03 * b10 + a13 * b11 + a23 * b12;
  out[8] = a00 * b20 + a10 * b21 + a20 * b22;
  out[9] = a01 * b20 + a11 * b21 + a21 * b22;
  out[10] = a02 * b20 + a12 * b21 + a22 * b22;
  out[11] = a03 * b20 + a13 * b21 + a23 * b22;
  if (a3 !== out) {
    out[12] = a3[12];
    out[13] = a3[13];
    out[14] = a3[14];
    out[15] = a3[15];
  }
  return out;
}
function rotateX2(out, a3, rad) {
  const s3 = Math.sin(rad);
  const c3 = Math.cos(rad);
  const a10 = a3[4];
  const a11 = a3[5];
  const a12 = a3[6];
  const a13 = a3[7];
  const a20 = a3[8];
  const a21 = a3[9];
  const a22 = a3[10];
  const a23 = a3[11];
  if (a3 !== out) {
    out[0] = a3[0];
    out[1] = a3[1];
    out[2] = a3[2];
    out[3] = a3[3];
    out[12] = a3[12];
    out[13] = a3[13];
    out[14] = a3[14];
    out[15] = a3[15];
  }
  out[4] = a10 * c3 + a20 * s3;
  out[5] = a11 * c3 + a21 * s3;
  out[6] = a12 * c3 + a22 * s3;
  out[7] = a13 * c3 + a23 * s3;
  out[8] = a20 * c3 - a10 * s3;
  out[9] = a21 * c3 - a11 * s3;
  out[10] = a22 * c3 - a12 * s3;
  out[11] = a23 * c3 - a13 * s3;
  return out;
}
function rotateY2(out, a3, rad) {
  const s3 = Math.sin(rad);
  const c3 = Math.cos(rad);
  const a00 = a3[0];
  const a01 = a3[1];
  const a02 = a3[2];
  const a03 = a3[3];
  const a20 = a3[8];
  const a21 = a3[9];
  const a22 = a3[10];
  const a23 = a3[11];
  if (a3 !== out) {
    out[4] = a3[4];
    out[5] = a3[5];
    out[6] = a3[6];
    out[7] = a3[7];
    out[12] = a3[12];
    out[13] = a3[13];
    out[14] = a3[14];
    out[15] = a3[15];
  }
  out[0] = a00 * c3 - a20 * s3;
  out[1] = a01 * c3 - a21 * s3;
  out[2] = a02 * c3 - a22 * s3;
  out[3] = a03 * c3 - a23 * s3;
  out[8] = a00 * s3 + a20 * c3;
  out[9] = a01 * s3 + a21 * c3;
  out[10] = a02 * s3 + a22 * c3;
  out[11] = a03 * s3 + a23 * c3;
  return out;
}
function rotateZ2(out, a3, rad) {
  const s3 = Math.sin(rad);
  const c3 = Math.cos(rad);
  const a00 = a3[0];
  const a01 = a3[1];
  const a02 = a3[2];
  const a03 = a3[3];
  const a10 = a3[4];
  const a11 = a3[5];
  const a12 = a3[6];
  const a13 = a3[7];
  if (a3 !== out) {
    out[8] = a3[8];
    out[9] = a3[9];
    out[10] = a3[10];
    out[11] = a3[11];
    out[12] = a3[12];
    out[13] = a3[13];
    out[14] = a3[14];
    out[15] = a3[15];
  }
  out[0] = a00 * c3 + a10 * s3;
  out[1] = a01 * c3 + a11 * s3;
  out[2] = a02 * c3 + a12 * s3;
  out[3] = a03 * c3 + a13 * s3;
  out[4] = a10 * c3 - a00 * s3;
  out[5] = a11 * c3 - a01 * s3;
  out[6] = a12 * c3 - a02 * s3;
  out[7] = a13 * c3 - a03 * s3;
  return out;
}
function fromTranslation2(out, v3) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = 1;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 1;
  out[11] = 0;
  out[12] = v3[0];
  out[13] = v3[1];
  out[14] = v3[2];
  out[15] = 1;
  return out;
}
function fromScaling2(out, v3) {
  out[0] = v3[0];
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = v3[1];
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = v3[2];
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
function fromRotation2(out, rad, axis) {
  let x3 = axis[0];
  let y3 = axis[1];
  let z3 = axis[2];
  let len5 = Math.sqrt(x3 * x3 + y3 * y3 + z3 * z3);
  let c3;
  let s3;
  let t3;
  if (len5 < EPSILON) {
    return null;
  }
  len5 = 1 / len5;
  x3 *= len5;
  y3 *= len5;
  z3 *= len5;
  s3 = Math.sin(rad);
  c3 = Math.cos(rad);
  t3 = 1 - c3;
  out[0] = x3 * x3 * t3 + c3;
  out[1] = y3 * x3 * t3 + z3 * s3;
  out[2] = z3 * x3 * t3 - y3 * s3;
  out[3] = 0;
  out[4] = x3 * y3 * t3 - z3 * s3;
  out[5] = y3 * y3 * t3 + c3;
  out[6] = z3 * y3 * t3 + x3 * s3;
  out[7] = 0;
  out[8] = x3 * z3 * t3 + y3 * s3;
  out[9] = y3 * z3 * t3 - x3 * s3;
  out[10] = z3 * z3 * t3 + c3;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
function fromXRotation(out, rad) {
  const s3 = Math.sin(rad);
  const c3 = Math.cos(rad);
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = c3;
  out[6] = s3;
  out[7] = 0;
  out[8] = 0;
  out[9] = -s3;
  out[10] = c3;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
function fromYRotation(out, rad) {
  const s3 = Math.sin(rad);
  const c3 = Math.cos(rad);
  out[0] = c3;
  out[1] = 0;
  out[2] = -s3;
  out[3] = 0;
  out[4] = 0;
  out[5] = 1;
  out[6] = 0;
  out[7] = 0;
  out[8] = s3;
  out[9] = 0;
  out[10] = c3;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
function fromZRotation(out, rad) {
  const s3 = Math.sin(rad);
  const c3 = Math.cos(rad);
  out[0] = c3;
  out[1] = s3;
  out[2] = 0;
  out[3] = 0;
  out[4] = -s3;
  out[5] = c3;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 1;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
function fromRotationTranslation(out, q3, v3) {
  const x3 = q3[0];
  const y3 = q3[1];
  const z3 = q3[2];
  const w3 = q3[3];
  const x22 = x3 + x3;
  const y22 = y3 + y3;
  const z22 = z3 + z3;
  const xx = x3 * x22;
  const xy = x3 * y22;
  const xz = x3 * z22;
  const yy = y3 * y22;
  const yz = y3 * z22;
  const zz = z3 * z22;
  const wx = w3 * x22;
  const wy = w3 * y22;
  const wz = w3 * z22;
  out[0] = 1 - (yy + zz);
  out[1] = xy + wz;
  out[2] = xz - wy;
  out[3] = 0;
  out[4] = xy - wz;
  out[5] = 1 - (xx + zz);
  out[6] = yz + wx;
  out[7] = 0;
  out[8] = xz + wy;
  out[9] = yz - wx;
  out[10] = 1 - (xx + yy);
  out[11] = 0;
  out[12] = v3[0];
  out[13] = v3[1];
  out[14] = v3[2];
  out[15] = 1;
  return out;
}
function fromQuat2(out, a3) {
  const translation = new ARRAY_TYPE(3);
  const bx = -a3[0];
  const by = -a3[1];
  const bz = -a3[2];
  const bw = a3[3];
  const ax = a3[4];
  const ay = a3[5];
  const az = a3[6];
  const aw = a3[7];
  const magnitude = bx * bx + by * by + bz * bz + bw * bw;
  if (magnitude > 0) {
    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;
    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;
    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;
  } else {
    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;
    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;
    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;
  }
  fromRotationTranslation(out, a3, translation);
  return out;
}
function getTranslation(out, mat) {
  out[0] = mat[12];
  out[1] = mat[13];
  out[2] = mat[14];
  return out;
}
function getScaling(out, mat) {
  const m11 = mat[0];
  const m12 = mat[1];
  const m13 = mat[2];
  const m21 = mat[4];
  const m22 = mat[5];
  const m23 = mat[6];
  const m31 = mat[8];
  const m32 = mat[9];
  const m33 = mat[10];
  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);
  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);
  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);
  return out;
}
function getRotation(out, mat) {
  const scaling = new ARRAY_TYPE(3);
  getScaling(scaling, mat);
  const is1 = 1 / scaling[0];
  const is2 = 1 / scaling[1];
  const is3 = 1 / scaling[2];
  const sm11 = mat[0] * is1;
  const sm12 = mat[1] * is2;
  const sm13 = mat[2] * is3;
  const sm21 = mat[4] * is1;
  const sm22 = mat[5] * is2;
  const sm23 = mat[6] * is3;
  const sm31 = mat[8] * is1;
  const sm32 = mat[9] * is2;
  const sm33 = mat[10] * is3;
  const trace = sm11 + sm22 + sm33;
  let S3 = 0;
  if (trace > 0) {
    S3 = Math.sqrt(trace + 1) * 2;
    out[3] = 0.25 * S3;
    out[0] = (sm23 - sm32) / S3;
    out[1] = (sm31 - sm13) / S3;
    out[2] = (sm12 - sm21) / S3;
  } else if (sm11 > sm22 && sm11 > sm33) {
    S3 = Math.sqrt(1 + sm11 - sm22 - sm33) * 2;
    out[3] = (sm23 - sm32) / S3;
    out[0] = 0.25 * S3;
    out[1] = (sm12 + sm21) / S3;
    out[2] = (sm31 + sm13) / S3;
  } else if (sm22 > sm33) {
    S3 = Math.sqrt(1 + sm22 - sm11 - sm33) * 2;
    out[3] = (sm31 - sm13) / S3;
    out[0] = (sm12 + sm21) / S3;
    out[1] = 0.25 * S3;
    out[2] = (sm23 + sm32) / S3;
  } else {
    S3 = Math.sqrt(1 + sm33 - sm11 - sm22) * 2;
    out[3] = (sm12 - sm21) / S3;
    out[0] = (sm31 + sm13) / S3;
    out[1] = (sm23 + sm32) / S3;
    out[2] = 0.25 * S3;
  }
  return out;
}
function decompose(out_r, out_t, out_s, mat) {
  out_t[0] = mat[12];
  out_t[1] = mat[13];
  out_t[2] = mat[14];
  const m11 = mat[0];
  const m12 = mat[1];
  const m13 = mat[2];
  const m21 = mat[4];
  const m22 = mat[5];
  const m23 = mat[6];
  const m31 = mat[8];
  const m32 = mat[9];
  const m33 = mat[10];
  out_s[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);
  out_s[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);
  out_s[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);
  const is1 = 1 / out_s[0];
  const is2 = 1 / out_s[1];
  const is3 = 1 / out_s[2];
  const sm11 = m11 * is1;
  const sm12 = m12 * is2;
  const sm13 = m13 * is3;
  const sm21 = m21 * is1;
  const sm22 = m22 * is2;
  const sm23 = m23 * is3;
  const sm31 = m31 * is1;
  const sm32 = m32 * is2;
  const sm33 = m33 * is3;
  const trace = sm11 + sm22 + sm33;
  let S3 = 0;
  if (trace > 0) {
    S3 = Math.sqrt(trace + 1) * 2;
    out_r[3] = 0.25 * S3;
    out_r[0] = (sm23 - sm32) / S3;
    out_r[1] = (sm31 - sm13) / S3;
    out_r[2] = (sm12 - sm21) / S3;
  } else if (sm11 > sm22 && sm11 > sm33) {
    S3 = Math.sqrt(1 + sm11 - sm22 - sm33) * 2;
    out_r[3] = (sm23 - sm32) / S3;
    out_r[0] = 0.25 * S3;
    out_r[1] = (sm12 + sm21) / S3;
    out_r[2] = (sm31 + sm13) / S3;
  } else if (sm22 > sm33) {
    S3 = Math.sqrt(1 + sm22 - sm11 - sm33) * 2;
    out_r[3] = (sm31 - sm13) / S3;
    out_r[0] = (sm12 + sm21) / S3;
    out_r[1] = 0.25 * S3;
    out_r[2] = (sm23 + sm32) / S3;
  } else {
    S3 = Math.sqrt(1 + sm33 - sm11 - sm22) * 2;
    out_r[3] = (sm12 - sm21) / S3;
    out_r[0] = (sm31 + sm13) / S3;
    out_r[1] = (sm23 + sm32) / S3;
    out_r[2] = 0.25 * S3;
  }
  return out_r;
}
function fromRotationTranslationScale(out, q3, v3, s3) {
  const x3 = q3[0];
  const y3 = q3[1];
  const z3 = q3[2];
  const w3 = q3[3];
  const x22 = x3 + x3;
  const y22 = y3 + y3;
  const z22 = z3 + z3;
  const xx = x3 * x22;
  const xy = x3 * y22;
  const xz = x3 * z22;
  const yy = y3 * y22;
  const yz = y3 * z22;
  const zz = z3 * z22;
  const wx = w3 * x22;
  const wy = w3 * y22;
  const wz = w3 * z22;
  const sx = s3[0];
  const sy = s3[1];
  const sz = s3[2];
  out[0] = (1 - (yy + zz)) * sx;
  out[1] = (xy + wz) * sx;
  out[2] = (xz - wy) * sx;
  out[3] = 0;
  out[4] = (xy - wz) * sy;
  out[5] = (1 - (xx + zz)) * sy;
  out[6] = (yz + wx) * sy;
  out[7] = 0;
  out[8] = (xz + wy) * sz;
  out[9] = (yz - wx) * sz;
  out[10] = (1 - (xx + yy)) * sz;
  out[11] = 0;
  out[12] = v3[0];
  out[13] = v3[1];
  out[14] = v3[2];
  out[15] = 1;
  return out;
}
function fromRotationTranslationScaleOrigin(out, q3, v3, s3, o3) {
  const x3 = q3[0];
  const y3 = q3[1];
  const z3 = q3[2];
  const w3 = q3[3];
  const x22 = x3 + x3;
  const y22 = y3 + y3;
  const z22 = z3 + z3;
  const xx = x3 * x22;
  const xy = x3 * y22;
  const xz = x3 * z22;
  const yy = y3 * y22;
  const yz = y3 * z22;
  const zz = z3 * z22;
  const wx = w3 * x22;
  const wy = w3 * y22;
  const wz = w3 * z22;
  const sx = s3[0];
  const sy = s3[1];
  const sz = s3[2];
  const ox = o3[0];
  const oy = o3[1];
  const oz = o3[2];
  const out0 = (1 - (yy + zz)) * sx;
  const out1 = (xy + wz) * sx;
  const out2 = (xz - wy) * sx;
  const out4 = (xy - wz) * sy;
  const out5 = (1 - (xx + zz)) * sy;
  const out6 = (yz + wx) * sy;
  const out8 = (xz + wy) * sz;
  const out9 = (yz - wx) * sz;
  const out10 = (1 - (xx + yy)) * sz;
  out[0] = out0;
  out[1] = out1;
  out[2] = out2;
  out[3] = 0;
  out[4] = out4;
  out[5] = out5;
  out[6] = out6;
  out[7] = 0;
  out[8] = out8;
  out[9] = out9;
  out[10] = out10;
  out[11] = 0;
  out[12] = v3[0] + ox - (out0 * ox + out4 * oy + out8 * oz);
  out[13] = v3[1] + oy - (out1 * ox + out5 * oy + out9 * oz);
  out[14] = v3[2] + oz - (out2 * ox + out6 * oy + out10 * oz);
  out[15] = 1;
  return out;
}
function fromQuat3(out, q3) {
  const x3 = q3[0];
  const y3 = q3[1];
  const z3 = q3[2];
  const w3 = q3[3];
  const x22 = x3 + x3;
  const y22 = y3 + y3;
  const z22 = z3 + z3;
  const xx = x3 * x22;
  const yx = y3 * x22;
  const yy = y3 * y22;
  const zx = z3 * x22;
  const zy = z3 * y22;
  const zz = z3 * z22;
  const wx = w3 * x22;
  const wy = w3 * y22;
  const wz = w3 * z22;
  out[0] = 1 - yy - zz;
  out[1] = yx + wz;
  out[2] = zx - wy;
  out[3] = 0;
  out[4] = yx - wz;
  out[5] = 1 - xx - zz;
  out[6] = zy + wx;
  out[7] = 0;
  out[8] = zx + wy;
  out[9] = zy - wx;
  out[10] = 1 - xx - yy;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
function frustum(out, left, right, bottom, top, near, far) {
  const rl = 1 / (right - left);
  const tb = 1 / (top - bottom);
  const nf = 1 / (near - far);
  out[0] = near * 2 * rl;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = near * 2 * tb;
  out[6] = 0;
  out[7] = 0;
  out[8] = (right + left) * rl;
  out[9] = (top + bottom) * tb;
  out[10] = (far + near) * nf;
  out[11] = -1;
  out[12] = 0;
  out[13] = 0;
  out[14] = far * near * 2 * nf;
  out[15] = 0;
  return out;
}
function perspectiveNO(out, fovy, aspect, near, far) {
  const f4 = 1 / Math.tan(fovy / 2);
  out[0] = f4 / aspect;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = f4;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[11] = -1;
  out[12] = 0;
  out[13] = 0;
  out[15] = 0;
  if (far != null && far !== Infinity) {
    const nf = 1 / (near - far);
    out[10] = (far + near) * nf;
    out[14] = 2 * far * near * nf;
  } else {
    out[10] = -1;
    out[14] = -2 * near;
  }
  return out;
}
var perspective = perspectiveNO;
function perspectiveZO(out, fovy, aspect, near, far) {
  const f4 = 1 / Math.tan(fovy / 2);
  out[0] = f4 / aspect;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = f4;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[11] = -1;
  out[12] = 0;
  out[13] = 0;
  out[15] = 0;
  if (far != null && far !== Infinity) {
    const nf = 1 / (near - far);
    out[10] = far * nf;
    out[14] = far * near * nf;
  } else {
    out[10] = -1;
    out[14] = -near;
  }
  return out;
}
function perspectiveFromFieldOfView(out, fov, near, far) {
  const upTan = Math.tan(fov.upDegrees * Math.PI / 180);
  const downTan = Math.tan(fov.downDegrees * Math.PI / 180);
  const leftTan = Math.tan(fov.leftDegrees * Math.PI / 180);
  const rightTan = Math.tan(fov.rightDegrees * Math.PI / 180);
  const xScale = 2 / (leftTan + rightTan);
  const yScale = 2 / (upTan + downTan);
  out[0] = xScale;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = yScale;
  out[6] = 0;
  out[7] = 0;
  out[8] = -((leftTan - rightTan) * xScale * 0.5);
  out[9] = (upTan - downTan) * yScale * 0.5;
  out[10] = far / (near - far);
  out[11] = -1;
  out[12] = 0;
  out[13] = 0;
  out[14] = far * near / (near - far);
  out[15] = 0;
  return out;
}
function orthoNO(out, left, right, bottom, top, near, far) {
  const lr = 1 / (left - right);
  const bt = 1 / (bottom - top);
  const nf = 1 / (near - far);
  out[0] = -2 * lr;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = -2 * bt;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 2 * nf;
  out[11] = 0;
  out[12] = (left + right) * lr;
  out[13] = (top + bottom) * bt;
  out[14] = (far + near) * nf;
  out[15] = 1;
  return out;
}
var ortho = orthoNO;
function orthoZO(out, left, right, bottom, top, near, far) {
  const lr = 1 / (left - right);
  const bt = 1 / (bottom - top);
  const nf = 1 / (near - far);
  out[0] = -2 * lr;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = -2 * bt;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = nf;
  out[11] = 0;
  out[12] = (left + right) * lr;
  out[13] = (top + bottom) * bt;
  out[14] = near * nf;
  out[15] = 1;
  return out;
}
function lookAt(out, eye, center, up) {
  let len5;
  let x0;
  let x1;
  let x22;
  let y0;
  let y1;
  let y22;
  let z0;
  let z1;
  let z22;
  const eyex = eye[0];
  const eyey = eye[1];
  const eyez = eye[2];
  const upx = up[0];
  const upy = up[1];
  const upz = up[2];
  const centerx = center[0];
  const centery = center[1];
  const centerz = center[2];
  if (Math.abs(eyex - centerx) < EPSILON && Math.abs(eyey - centery) < EPSILON && Math.abs(eyez - centerz) < EPSILON) {
    return identity2(out);
  }
  z0 = eyex - centerx;
  z1 = eyey - centery;
  z22 = eyez - centerz;
  len5 = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z22 * z22);
  z0 *= len5;
  z1 *= len5;
  z22 *= len5;
  x0 = upy * z22 - upz * z1;
  x1 = upz * z0 - upx * z22;
  x22 = upx * z1 - upy * z0;
  len5 = Math.sqrt(x0 * x0 + x1 * x1 + x22 * x22);
  if (!len5) {
    x0 = 0;
    x1 = 0;
    x22 = 0;
  } else {
    len5 = 1 / len5;
    x0 *= len5;
    x1 *= len5;
    x22 *= len5;
  }
  y0 = z1 * x22 - z22 * x1;
  y1 = z22 * x0 - z0 * x22;
  y22 = z0 * x1 - z1 * x0;
  len5 = Math.sqrt(y0 * y0 + y1 * y1 + y22 * y22);
  if (!len5) {
    y0 = 0;
    y1 = 0;
    y22 = 0;
  } else {
    len5 = 1 / len5;
    y0 *= len5;
    y1 *= len5;
    y22 *= len5;
  }
  out[0] = x0;
  out[1] = y0;
  out[2] = z0;
  out[3] = 0;
  out[4] = x1;
  out[5] = y1;
  out[6] = z1;
  out[7] = 0;
  out[8] = x22;
  out[9] = y22;
  out[10] = z22;
  out[11] = 0;
  out[12] = -(x0 * eyex + x1 * eyey + x22 * eyez);
  out[13] = -(y0 * eyex + y1 * eyey + y22 * eyez);
  out[14] = -(z0 * eyex + z1 * eyey + z22 * eyez);
  out[15] = 1;
  return out;
}
function targetTo(out, eye, target2, up) {
  const eyex = eye[0];
  const eyey = eye[1];
  const eyez = eye[2];
  const upx = up[0];
  const upy = up[1];
  const upz = up[2];
  let z0 = eyex - target2[0];
  let z1 = eyey - target2[1];
  let z22 = eyez - target2[2];
  let len5 = z0 * z0 + z1 * z1 + z22 * z22;
  if (len5 > 0) {
    len5 = 1 / Math.sqrt(len5);
    z0 *= len5;
    z1 *= len5;
    z22 *= len5;
  }
  let x0 = upy * z22 - upz * z1;
  let x1 = upz * z0 - upx * z22;
  let x22 = upx * z1 - upy * z0;
  len5 = x0 * x0 + x1 * x1 + x22 * x22;
  if (len5 > 0) {
    len5 = 1 / Math.sqrt(len5);
    x0 *= len5;
    x1 *= len5;
    x22 *= len5;
  }
  out[0] = x0;
  out[1] = x1;
  out[2] = x22;
  out[3] = 0;
  out[4] = z1 * x22 - z22 * x1;
  out[5] = z22 * x0 - z0 * x22;
  out[6] = z0 * x1 - z1 * x0;
  out[7] = 0;
  out[8] = z0;
  out[9] = z1;
  out[10] = z22;
  out[11] = 0;
  out[12] = eyex;
  out[13] = eyey;
  out[14] = eyez;
  out[15] = 1;
  return out;
}
function str4(a3) {
  return `mat4(${a3[0]}, ${a3[1]}, ${a3[2]}, ${a3[3]}, ${a3[4]}, ${a3[5]}, ${a3[6]}, ${a3[7]}, ${a3[8]}, ${a3[9]}, ${a3[10]}, ${a3[11]}, ${a3[12]}, ${a3[13]}, ${a3[14]}, ${a3[15]})`;
}
function frob2(a3) {
  return Math.sqrt(a3[0] * a3[0] + a3[1] * a3[1] + a3[2] * a3[2] + a3[3] * a3[3] + a3[4] * a3[4] + a3[5] * a3[5] + a3[6] * a3[6] + a3[7] * a3[7] + a3[8] * a3[8] + a3[9] * a3[9] + a3[10] * a3[10] + a3[11] * a3[11] + a3[12] * a3[12] + a3[13] * a3[13] + a3[14] * a3[14] + a3[15] * a3[15]);
}
function add4(out, a3, b2) {
  out[0] = a3[0] + b2[0];
  out[1] = a3[1] + b2[1];
  out[2] = a3[2] + b2[2];
  out[3] = a3[3] + b2[3];
  out[4] = a3[4] + b2[4];
  out[5] = a3[5] + b2[5];
  out[6] = a3[6] + b2[6];
  out[7] = a3[7] + b2[7];
  out[8] = a3[8] + b2[8];
  out[9] = a3[9] + b2[9];
  out[10] = a3[10] + b2[10];
  out[11] = a3[11] + b2[11];
  out[12] = a3[12] + b2[12];
  out[13] = a3[13] + b2[13];
  out[14] = a3[14] + b2[14];
  out[15] = a3[15] + b2[15];
  return out;
}
function subtract4(out, a3, b2) {
  out[0] = a3[0] - b2[0];
  out[1] = a3[1] - b2[1];
  out[2] = a3[2] - b2[2];
  out[3] = a3[3] - b2[3];
  out[4] = a3[4] - b2[4];
  out[5] = a3[5] - b2[5];
  out[6] = a3[6] - b2[6];
  out[7] = a3[7] - b2[7];
  out[8] = a3[8] - b2[8];
  out[9] = a3[9] - b2[9];
  out[10] = a3[10] - b2[10];
  out[11] = a3[11] - b2[11];
  out[12] = a3[12] - b2[12];
  out[13] = a3[13] - b2[13];
  out[14] = a3[14] - b2[14];
  out[15] = a3[15] - b2[15];
  return out;
}
function multiplyScalar2(out, a3, b2) {
  out[0] = a3[0] * b2;
  out[1] = a3[1] * b2;
  out[2] = a3[2] * b2;
  out[3] = a3[3] * b2;
  out[4] = a3[4] * b2;
  out[5] = a3[5] * b2;
  out[6] = a3[6] * b2;
  out[7] = a3[7] * b2;
  out[8] = a3[8] * b2;
  out[9] = a3[9] * b2;
  out[10] = a3[10] * b2;
  out[11] = a3[11] * b2;
  out[12] = a3[12] * b2;
  out[13] = a3[13] * b2;
  out[14] = a3[14] * b2;
  out[15] = a3[15] * b2;
  return out;
}
function multiplyScalarAndAdd2(out, a3, b2, scale7) {
  out[0] = a3[0] + b2[0] * scale7;
  out[1] = a3[1] + b2[1] * scale7;
  out[2] = a3[2] + b2[2] * scale7;
  out[3] = a3[3] + b2[3] * scale7;
  out[4] = a3[4] + b2[4] * scale7;
  out[5] = a3[5] + b2[5] * scale7;
  out[6] = a3[6] + b2[6] * scale7;
  out[7] = a3[7] + b2[7] * scale7;
  out[8] = a3[8] + b2[8] * scale7;
  out[9] = a3[9] + b2[9] * scale7;
  out[10] = a3[10] + b2[10] * scale7;
  out[11] = a3[11] + b2[11] * scale7;
  out[12] = a3[12] + b2[12] * scale7;
  out[13] = a3[13] + b2[13] * scale7;
  out[14] = a3[14] + b2[14] * scale7;
  out[15] = a3[15] + b2[15] * scale7;
  return out;
}
function exactEquals4(a3, b2) {
  return a3[0] === b2[0] && a3[1] === b2[1] && a3[2] === b2[2] && a3[3] === b2[3] && a3[4] === b2[4] && a3[5] === b2[5] && a3[6] === b2[6] && a3[7] === b2[7] && a3[8] === b2[8] && a3[9] === b2[9] && a3[10] === b2[10] && a3[11] === b2[11] && a3[12] === b2[12] && a3[13] === b2[13] && a3[14] === b2[14] && a3[15] === b2[15];
}
function equals5(a3, b2) {
  const a0 = a3[0];
  const a1 = a3[1];
  const a22 = a3[2];
  const a32 = a3[3];
  const a4 = a3[4];
  const a5 = a3[5];
  const a6 = a3[6];
  const a7 = a3[7];
  const a8 = a3[8];
  const a9 = a3[9];
  const a10 = a3[10];
  const a11 = a3[11];
  const a12 = a3[12];
  const a13 = a3[13];
  const a14 = a3[14];
  const a15 = a3[15];
  const b0 = b2[0];
  const b1 = b2[1];
  const b22 = b2[2];
  const b3 = b2[3];
  const b4 = b2[4];
  const b5 = b2[5];
  const b6 = b2[6];
  const b7 = b2[7];
  const b8 = b2[8];
  const b9 = b2[9];
  const b10 = b2[10];
  const b11 = b2[11];
  const b12 = b2[12];
  const b13 = b2[13];
  const b14 = b2[14];
  const b15 = b2[15];
  return Math.abs(a0 - b0) <= EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) && Math.abs(a22 - b22) <= EPSILON * Math.max(1, Math.abs(a22), Math.abs(b22)) && Math.abs(a32 - b3) <= EPSILON * Math.max(1, Math.abs(a32), Math.abs(b3)) && Math.abs(a4 - b4) <= EPSILON * Math.max(1, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= EPSILON * Math.max(1, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= EPSILON * Math.max(1, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= EPSILON * Math.max(1, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= EPSILON * Math.max(1, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= EPSILON * Math.max(1, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= EPSILON * Math.max(1, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= EPSILON * Math.max(1, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= EPSILON * Math.max(1, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= EPSILON * Math.max(1, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= EPSILON * Math.max(1, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= EPSILON * Math.max(1, Math.abs(a15), Math.abs(b15));
}
var mul4 = multiply4;
var sub4 = subtract4;

// ../../../.yarn/berry/cache/@math.gl-core-npm-4.1.0-f2844e4336-10c0.zip/node_modules/@math.gl/core/dist/gl-matrix/vec4.js
var vec4_exports = {};
__export(vec4_exports, {
  add: () => add5,
  ceil: () => ceil3,
  clone: () => clone5,
  copy: () => copy5,
  create: () => create5,
  cross: () => cross3,
  dist: () => dist3,
  distance: () => distance3,
  div: () => div3,
  divide: () => divide3,
  dot: () => dot3,
  equals: () => equals6,
  exactEquals: () => exactEquals5,
  floor: () => floor3,
  forEach: () => forEach4,
  fromValues: () => fromValues5,
  inverse: () => inverse3,
  len: () => len3,
  length: () => length3,
  lerp: () => lerp4,
  max: () => max3,
  min: () => min3,
  mul: () => mul5,
  multiply: () => multiply5,
  negate: () => negate3,
  normalize: () => normalize3,
  random: () => random3,
  round: () => round5,
  scale: () => scale5,
  scaleAndAdd: () => scaleAndAdd3,
  set: () => set5,
  sqrDist: () => sqrDist3,
  sqrLen: () => sqrLen3,
  squaredDistance: () => squaredDistance3,
  squaredLength: () => squaredLength3,
  str: () => str5,
  sub: () => sub5,
  subtract: () => subtract5,
  transformMat4: () => transformMat43,
  transformQuat: () => transformQuat2,
  zero: () => zero3
});
function create5() {
  const out = new ARRAY_TYPE(4);
  if (ARRAY_TYPE != Float32Array) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
  }
  return out;
}
function clone5(a3) {
  const out = new ARRAY_TYPE(4);
  out[0] = a3[0];
  out[1] = a3[1];
  out[2] = a3[2];
  out[3] = a3[3];
  return out;
}
function fromValues5(x3, y3, z3, w3) {
  const out = new ARRAY_TYPE(4);
  out[0] = x3;
  out[1] = y3;
  out[2] = z3;
  out[3] = w3;
  return out;
}
function copy5(out, a3) {
  out[0] = a3[0];
  out[1] = a3[1];
  out[2] = a3[2];
  out[3] = a3[3];
  return out;
}
function set5(out, x3, y3, z3, w3) {
  out[0] = x3;
  out[1] = y3;
  out[2] = z3;
  out[3] = w3;
  return out;
}
function add5(out, a3, b2) {
  out[0] = a3[0] + b2[0];
  out[1] = a3[1] + b2[1];
  out[2] = a3[2] + b2[2];
  out[3] = a3[3] + b2[3];
  return out;
}
function subtract5(out, a3, b2) {
  out[0] = a3[0] - b2[0];
  out[1] = a3[1] - b2[1];
  out[2] = a3[2] - b2[2];
  out[3] = a3[3] - b2[3];
  return out;
}
function multiply5(out, a3, b2) {
  out[0] = a3[0] * b2[0];
  out[1] = a3[1] * b2[1];
  out[2] = a3[2] * b2[2];
  out[3] = a3[3] * b2[3];
  return out;
}
function divide3(out, a3, b2) {
  out[0] = a3[0] / b2[0];
  out[1] = a3[1] / b2[1];
  out[2] = a3[2] / b2[2];
  out[3] = a3[3] / b2[3];
  return out;
}
function ceil3(out, a3) {
  out[0] = Math.ceil(a3[0]);
  out[1] = Math.ceil(a3[1]);
  out[2] = Math.ceil(a3[2]);
  out[3] = Math.ceil(a3[3]);
  return out;
}
function floor3(out, a3) {
  out[0] = Math.floor(a3[0]);
  out[1] = Math.floor(a3[1]);
  out[2] = Math.floor(a3[2]);
  out[3] = Math.floor(a3[3]);
  return out;
}
function min3(out, a3, b2) {
  out[0] = Math.min(a3[0], b2[0]);
  out[1] = Math.min(a3[1], b2[1]);
  out[2] = Math.min(a3[2], b2[2]);
  out[3] = Math.min(a3[3], b2[3]);
  return out;
}
function max3(out, a3, b2) {
  out[0] = Math.max(a3[0], b2[0]);
  out[1] = Math.max(a3[1], b2[1]);
  out[2] = Math.max(a3[2], b2[2]);
  out[3] = Math.max(a3[3], b2[3]);
  return out;
}
function round5(out, a3) {
  out[0] = round2(a3[0]);
  out[1] = round2(a3[1]);
  out[2] = round2(a3[2]);
  out[3] = round2(a3[3]);
  return out;
}
function scale5(out, a3, b2) {
  out[0] = a3[0] * b2;
  out[1] = a3[1] * b2;
  out[2] = a3[2] * b2;
  out[3] = a3[3] * b2;
  return out;
}
function scaleAndAdd3(out, a3, b2, scale7) {
  out[0] = a3[0] + b2[0] * scale7;
  out[1] = a3[1] + b2[1] * scale7;
  out[2] = a3[2] + b2[2] * scale7;
  out[3] = a3[3] + b2[3] * scale7;
  return out;
}
function distance3(a3, b2) {
  const x3 = b2[0] - a3[0];
  const y3 = b2[1] - a3[1];
  const z3 = b2[2] - a3[2];
  const w3 = b2[3] - a3[3];
  return Math.sqrt(x3 * x3 + y3 * y3 + z3 * z3 + w3 * w3);
}
function squaredDistance3(a3, b2) {
  const x3 = b2[0] - a3[0];
  const y3 = b2[1] - a3[1];
  const z3 = b2[2] - a3[2];
  const w3 = b2[3] - a3[3];
  return x3 * x3 + y3 * y3 + z3 * z3 + w3 * w3;
}
function length3(a3) {
  const x3 = a3[0];
  const y3 = a3[1];
  const z3 = a3[2];
  const w3 = a3[3];
  return Math.sqrt(x3 * x3 + y3 * y3 + z3 * z3 + w3 * w3);
}
function squaredLength3(a3) {
  const x3 = a3[0];
  const y3 = a3[1];
  const z3 = a3[2];
  const w3 = a3[3];
  return x3 * x3 + y3 * y3 + z3 * z3 + w3 * w3;
}
function negate3(out, a3) {
  out[0] = -a3[0];
  out[1] = -a3[1];
  out[2] = -a3[2];
  out[3] = -a3[3];
  return out;
}
function inverse3(out, a3) {
  out[0] = 1 / a3[0];
  out[1] = 1 / a3[1];
  out[2] = 1 / a3[2];
  out[3] = 1 / a3[3];
  return out;
}
function normalize3(out, a3) {
  const x3 = a3[0];
  const y3 = a3[1];
  const z3 = a3[2];
  const w3 = a3[3];
  let len5 = x3 * x3 + y3 * y3 + z3 * z3 + w3 * w3;
  if (len5 > 0) {
    len5 = 1 / Math.sqrt(len5);
  }
  out[0] = x3 * len5;
  out[1] = y3 * len5;
  out[2] = z3 * len5;
  out[3] = w3 * len5;
  return out;
}
function dot3(a3, b2) {
  return a3[0] * b2[0] + a3[1] * b2[1] + a3[2] * b2[2] + a3[3] * b2[3];
}
function cross3(out, u4, v3, w3) {
  const A3 = v3[0] * w3[1] - v3[1] * w3[0];
  const B3 = v3[0] * w3[2] - v3[2] * w3[0];
  const C3 = v3[0] * w3[3] - v3[3] * w3[0];
  const D3 = v3[1] * w3[2] - v3[2] * w3[1];
  const E3 = v3[1] * w3[3] - v3[3] * w3[1];
  const F3 = v3[2] * w3[3] - v3[3] * w3[2];
  const G3 = u4[0];
  const H2 = u4[1];
  const I3 = u4[2];
  const J2 = u4[3];
  out[0] = H2 * F3 - I3 * E3 + J2 * D3;
  out[1] = -(G3 * F3) + I3 * C3 - J2 * B3;
  out[2] = G3 * E3 - H2 * C3 + J2 * A3;
  out[3] = -(G3 * D3) + H2 * B3 - I3 * A3;
  return out;
}
function lerp4(out, a3, b2, t3) {
  const ax = a3[0];
  const ay = a3[1];
  const az = a3[2];
  const aw = a3[3];
  out[0] = ax + t3 * (b2[0] - ax);
  out[1] = ay + t3 * (b2[1] - ay);
  out[2] = az + t3 * (b2[2] - az);
  out[3] = aw + t3 * (b2[3] - aw);
  return out;
}
function random3(out, scale7) {
  scale7 = scale7 === void 0 ? 1 : scale7;
  let v1;
  let v22;
  let v3;
  let v4;
  let s1;
  let s22;
  do {
    v1 = RANDOM() * 2 - 1;
    v22 = RANDOM() * 2 - 1;
    s1 = v1 * v1 + v22 * v22;
  } while (s1 >= 1);
  do {
    v3 = RANDOM() * 2 - 1;
    v4 = RANDOM() * 2 - 1;
    s22 = v3 * v3 + v4 * v4;
  } while (s22 >= 1);
  const d3 = Math.sqrt((1 - s1) / s22);
  out[0] = scale7 * v1;
  out[1] = scale7 * v22;
  out[2] = scale7 * v3 * d3;
  out[3] = scale7 * v4 * d3;
  return out;
}
function transformMat43(out, a3, m3) {
  const x3 = a3[0];
  const y3 = a3[1];
  const z3 = a3[2];
  const w3 = a3[3];
  out[0] = m3[0] * x3 + m3[4] * y3 + m3[8] * z3 + m3[12] * w3;
  out[1] = m3[1] * x3 + m3[5] * y3 + m3[9] * z3 + m3[13] * w3;
  out[2] = m3[2] * x3 + m3[6] * y3 + m3[10] * z3 + m3[14] * w3;
  out[3] = m3[3] * x3 + m3[7] * y3 + m3[11] * z3 + m3[15] * w3;
  return out;
}
function transformQuat2(out, a3, q3) {
  const x3 = a3[0];
  const y3 = a3[1];
  const z3 = a3[2];
  const qx = q3[0];
  const qy = q3[1];
  const qz = q3[2];
  const qw = q3[3];
  const ix = qw * x3 + qy * z3 - qz * y3;
  const iy = qw * y3 + qz * x3 - qx * z3;
  const iz = qw * z3 + qx * y3 - qy * x3;
  const iw = -qx * x3 - qy * y3 - qz * z3;
  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
  out[3] = a3[3];
  return out;
}
function zero3(out) {
  out[0] = 0;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  return out;
}
function str5(a3) {
  return `vec4(${a3[0]}, ${a3[1]}, ${a3[2]}, ${a3[3]})`;
}
function exactEquals5(a3, b2) {
  return a3[0] === b2[0] && a3[1] === b2[1] && a3[2] === b2[2] && a3[3] === b2[3];
}
function equals6(a3, b2) {
  const a0 = a3[0];
  const a1 = a3[1];
  const a22 = a3[2];
  const a32 = a3[3];
  const b0 = b2[0];
  const b1 = b2[1];
  const b22 = b2[2];
  const b3 = b2[3];
  return Math.abs(a0 - b0) <= EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) && Math.abs(a22 - b22) <= EPSILON * Math.max(1, Math.abs(a22), Math.abs(b22)) && Math.abs(a32 - b3) <= EPSILON * Math.max(1, Math.abs(a32), Math.abs(b3));
}
var sub5 = subtract5;
var mul5 = multiply5;
var div3 = divide3;
var dist3 = distance3;
var sqrDist3 = squaredDistance3;
var len3 = length3;
var sqrLen3 = squaredLength3;
var forEach4 = (function() {
  const vec = create5();
  return function(a3, stride, offset, count2, fn, arg) {
    let i4;
    let l3;
    if (!stride) {
      stride = 4;
    }
    if (!offset) {
      offset = 0;
    }
    if (count2) {
      l3 = Math.min(count2 * stride + offset, a3.length);
    } else {
      l3 = a3.length;
    }
    for (i4 = offset; i4 < l3; i4 += stride) {
      vec[0] = a3[i4];
      vec[1] = a3[i4 + 1];
      vec[2] = a3[i4 + 2];
      vec[3] = a3[i4 + 3];
      fn(vec, vec, arg);
      a3[i4] = vec[0];
      a3[i4 + 1] = vec[1];
      a3[i4 + 2] = vec[2];
      a3[i4 + 3] = vec[3];
    }
    return a3;
  };
})();

// ../../../.yarn/berry/cache/@math.gl-core-npm-4.1.0-f2844e4336-10c0.zip/node_modules/@math.gl/core/dist/classes/matrix4.js
var INDICES2;
(function(INDICES3) {
  INDICES3[INDICES3["COL0ROW0"] = 0] = "COL0ROW0";
  INDICES3[INDICES3["COL0ROW1"] = 1] = "COL0ROW1";
  INDICES3[INDICES3["COL0ROW2"] = 2] = "COL0ROW2";
  INDICES3[INDICES3["COL0ROW3"] = 3] = "COL0ROW3";
  INDICES3[INDICES3["COL1ROW0"] = 4] = "COL1ROW0";
  INDICES3[INDICES3["COL1ROW1"] = 5] = "COL1ROW1";
  INDICES3[INDICES3["COL1ROW2"] = 6] = "COL1ROW2";
  INDICES3[INDICES3["COL1ROW3"] = 7] = "COL1ROW3";
  INDICES3[INDICES3["COL2ROW0"] = 8] = "COL2ROW0";
  INDICES3[INDICES3["COL2ROW1"] = 9] = "COL2ROW1";
  INDICES3[INDICES3["COL2ROW2"] = 10] = "COL2ROW2";
  INDICES3[INDICES3["COL2ROW3"] = 11] = "COL2ROW3";
  INDICES3[INDICES3["COL3ROW0"] = 12] = "COL3ROW0";
  INDICES3[INDICES3["COL3ROW1"] = 13] = "COL3ROW1";
  INDICES3[INDICES3["COL3ROW2"] = 14] = "COL3ROW2";
  INDICES3[INDICES3["COL3ROW3"] = 15] = "COL3ROW3";
})(INDICES2 || (INDICES2 = {}));
var DEFAULT_FOVY = 45 * Math.PI / 180;
var DEFAULT_ASPECT = 1;
var DEFAULT_NEAR = 0.1;
var DEFAULT_FAR = 500;
var IDENTITY_MATRIX2 = Object.freeze([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);
var Matrix4 = class extends Matrix {
  static get IDENTITY() {
    return getIdentityMatrix();
  }
  static get ZERO() {
    return getZeroMatrix();
  }
  get ELEMENTS() {
    return 16;
  }
  get RANK() {
    return 4;
  }
  get INDICES() {
    return INDICES2;
  }
  constructor(array) {
    super(-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0);
    if (arguments.length === 1 && Array.isArray(array)) {
      this.copy(array);
    } else {
      this.identity();
    }
  }
  copy(array) {
    this[0] = array[0];
    this[1] = array[1];
    this[2] = array[2];
    this[3] = array[3];
    this[4] = array[4];
    this[5] = array[5];
    this[6] = array[6];
    this[7] = array[7];
    this[8] = array[8];
    this[9] = array[9];
    this[10] = array[10];
    this[11] = array[11];
    this[12] = array[12];
    this[13] = array[13];
    this[14] = array[14];
    this[15] = array[15];
    return this.check();
  }
  // eslint-disable-next-line max-params
  set(m00, m10, m20, m30, m01, m11, m21, m31, m02, m12, m22, m32, m03, m13, m23, m33) {
    this[0] = m00;
    this[1] = m10;
    this[2] = m20;
    this[3] = m30;
    this[4] = m01;
    this[5] = m11;
    this[6] = m21;
    this[7] = m31;
    this[8] = m02;
    this[9] = m12;
    this[10] = m22;
    this[11] = m32;
    this[12] = m03;
    this[13] = m13;
    this[14] = m23;
    this[15] = m33;
    return this.check();
  }
  // accepts row major order, stores as column major
  // eslint-disable-next-line max-params
  setRowMajor(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
    this[0] = m00;
    this[1] = m10;
    this[2] = m20;
    this[3] = m30;
    this[4] = m01;
    this[5] = m11;
    this[6] = m21;
    this[7] = m31;
    this[8] = m02;
    this[9] = m12;
    this[10] = m22;
    this[11] = m32;
    this[12] = m03;
    this[13] = m13;
    this[14] = m23;
    this[15] = m33;
    return this.check();
  }
  toRowMajor(result) {
    result[0] = this[0];
    result[1] = this[4];
    result[2] = this[8];
    result[3] = this[12];
    result[4] = this[1];
    result[5] = this[5];
    result[6] = this[9];
    result[7] = this[13];
    result[8] = this[2];
    result[9] = this[6];
    result[10] = this[10];
    result[11] = this[14];
    result[12] = this[3];
    result[13] = this[7];
    result[14] = this[11];
    result[15] = this[15];
    return result;
  }
  // Constructors
  /** Set to identity matrix */
  identity() {
    return this.copy(IDENTITY_MATRIX2);
  }
  /**
   *
   * @param object
   * @returns self
   */
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  fromObject(object) {
    return this.check();
  }
  /**
   * Calculates a 4x4 matrix from the given quaternion
   * @param quaternion Quaternion to create matrix from
   * @returns self
   */
  fromQuaternion(quaternion) {
    fromQuat3(this, quaternion);
    return this.check();
  }
  /**
   * Generates a frustum matrix with the given bounds
   * @param view.left - Left bound of the frustum
   * @param view.right - Right bound of the frustum
   * @param view.bottom - Bottom bound of the frustum
   * @param view.top - Top bound of the frustum
   * @param view.near - Near bound of the frustum
   * @param view.far - Far bound of the frustum. Can be set to Infinity.
   * @returns self
   */
  frustum(view) {
    const { left, right, bottom, top, near = DEFAULT_NEAR, far = DEFAULT_FAR } = view;
    if (far === Infinity) {
      computeInfinitePerspectiveOffCenter(this, left, right, bottom, top, near);
    } else {
      frustum(this, left, right, bottom, top, near, far);
    }
    return this.check();
  }
  /**
   * Generates a look-at matrix with the given eye position, focal point,
   * and up axis
   * @param view.eye - (vector) Position of the viewer
   * @param view.center - (vector) Point the viewer is looking at
   * @param view.up - (vector) Up axis
   * @returns self
   */
  lookAt(view) {
    const { eye, center = [0, 0, 0], up = [0, 1, 0] } = view;
    lookAt(this, eye, center, up);
    return this.check();
  }
  /**
   * Generates a orthogonal projection matrix with the given bounds
   * from "traditional" view space parameters
   * @param view.left - Left bound of the frustum
   * @param view.right number  Right bound of the frustum
   * @param view.bottom - Bottom bound of the frustum
   * @param view.top number  Top bound of the frustum
   * @param view.near - Near bound of the frustum
   * @param view.far number  Far bound of the frustum
   * @returns self
   */
  ortho(view) {
    const { left, right, bottom, top, near = DEFAULT_NEAR, far = DEFAULT_FAR } = view;
    ortho(this, left, right, bottom, top, near, far);
    return this.check();
  }
  /**
   * Generates an orthogonal projection matrix with the same parameters
   * as a perspective matrix (plus focalDistance)
   * @param view.fovy Vertical field of view in radians
   * @param view.aspect Aspect ratio. Typically viewport width / viewport height
   * @param view.focalDistance Distance in the view frustum used for extent calculations
   * @param view.near Near bound of the frustum
   * @param view.far Far bound of the frustum
   * @returns self
   */
  orthographic(view) {
    const { fovy = DEFAULT_FOVY, aspect = DEFAULT_ASPECT, focalDistance = 1, near = DEFAULT_NEAR, far = DEFAULT_FAR } = view;
    checkRadians(fovy);
    const halfY = fovy / 2;
    const top = focalDistance * Math.tan(halfY);
    const right = top * aspect;
    return this.ortho({
      left: -right,
      right,
      bottom: -top,
      top,
      near,
      far
    });
  }
  /**
   * Generates a perspective projection matrix with the given bounds
   * @param view.fovy Vertical field of view in radians
   * @param view.aspect Aspect ratio. typically viewport width/height
   * @param view.near Near bound of the frustum
   * @param view.far Far bound of the frustum
   * @returns self
   */
  perspective(view) {
    const { fovy = 45 * Math.PI / 180, aspect = 1, near = 0.1, far = 500 } = view;
    checkRadians(fovy);
    perspective(this, fovy, aspect, near, far);
    return this.check();
  }
  // Accessors
  determinant() {
    return determinant2(this);
  }
  /**
   * Extracts the non-uniform scale assuming the matrix is an affine transformation.
   * The scales are the "lengths" of the column vectors in the upper-left 3x3 matrix.
   * @param result
   * @returns self
   */
  getScale(result = [-0, -0, -0]) {
    result[0] = Math.sqrt(this[0] * this[0] + this[1] * this[1] + this[2] * this[2]);
    result[1] = Math.sqrt(this[4] * this[4] + this[5] * this[5] + this[6] * this[6]);
    result[2] = Math.sqrt(this[8] * this[8] + this[9] * this[9] + this[10] * this[10]);
    return result;
  }
  /**
   * Gets the translation portion, assuming the matrix is a affine transformation matrix.
   * @param result
   * @returns self
   */
  getTranslation(result = [-0, -0, -0]) {
    result[0] = this[12];
    result[1] = this[13];
    result[2] = this[14];
    return result;
  }
  /**
   * Gets upper left 3x3 pure rotation matrix (non-scaling), assume affine transformation matrix
   * @param result
   * @param scaleResult
   * @returns self
   */
  getRotation(result, scaleResult) {
    result = result || [-0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0, -0];
    scaleResult = scaleResult || [-0, -0, -0];
    const scale7 = this.getScale(scaleResult);
    const inverseScale0 = 1 / scale7[0];
    const inverseScale1 = 1 / scale7[1];
    const inverseScale2 = 1 / scale7[2];
    result[0] = this[0] * inverseScale0;
    result[1] = this[1] * inverseScale1;
    result[2] = this[2] * inverseScale2;
    result[3] = 0;
    result[4] = this[4] * inverseScale0;
    result[5] = this[5] * inverseScale1;
    result[6] = this[6] * inverseScale2;
    result[7] = 0;
    result[8] = this[8] * inverseScale0;
    result[9] = this[9] * inverseScale1;
    result[10] = this[10] * inverseScale2;
    result[11] = 0;
    result[12] = 0;
    result[13] = 0;
    result[14] = 0;
    result[15] = 1;
    return result;
  }
  /**
   *
   * @param result
   * @param scaleResult
   * @returns self
   */
  getRotationMatrix3(result, scaleResult) {
    result = result || [-0, -0, -0, -0, -0, -0, -0, -0, -0];
    scaleResult = scaleResult || [-0, -0, -0];
    const scale7 = this.getScale(scaleResult);
    const inverseScale0 = 1 / scale7[0];
    const inverseScale1 = 1 / scale7[1];
    const inverseScale2 = 1 / scale7[2];
    result[0] = this[0] * inverseScale0;
    result[1] = this[1] * inverseScale1;
    result[2] = this[2] * inverseScale2;
    result[3] = this[4] * inverseScale0;
    result[4] = this[5] * inverseScale1;
    result[5] = this[6] * inverseScale2;
    result[6] = this[8] * inverseScale0;
    result[7] = this[9] * inverseScale1;
    result[8] = this[10] * inverseScale2;
    return result;
  }
  // Modifiers
  transpose() {
    transpose2(this, this);
    return this.check();
  }
  invert() {
    invert2(this, this);
    return this.check();
  }
  // Operations
  multiplyLeft(a3) {
    multiply4(this, a3, this);
    return this.check();
  }
  multiplyRight(a3) {
    multiply4(this, this, a3);
    return this.check();
  }
  // Rotates a matrix by the given angle around the X axis
  rotateX(radians2) {
    rotateX2(this, this, radians2);
    return this.check();
  }
  // Rotates a matrix by the given angle around the Y axis.
  rotateY(radians2) {
    rotateY2(this, this, radians2);
    return this.check();
  }
  /**
   * Rotates a matrix by the given angle around the Z axis.
   * @param radians
   * @returns self
   */
  rotateZ(radians2) {
    rotateZ2(this, this, radians2);
    return this.check();
  }
  /**
   *
   * @param param0
   * @returns self
   */
  rotateXYZ(angleXYZ) {
    return this.rotateX(angleXYZ[0]).rotateY(angleXYZ[1]).rotateZ(angleXYZ[2]);
  }
  /**
   *
   * @param radians
   * @param axis
   * @returns self
   */
  rotateAxis(radians2, axis) {
    rotate3(this, this, radians2, axis);
    return this.check();
  }
  /**
   *
   * @param factor
   * @returns self
   */
  scale(factor) {
    scale4(this, this, Array.isArray(factor) ? factor : [factor, factor, factor]);
    return this.check();
  }
  /**
   *
   * @param vec
   * @returns self
   */
  translate(vector) {
    translate2(this, this, vector);
    return this.check();
  }
  // Transforms
  /**
   * Transforms any 2, 3 or 4 element vector. 2 and 3 elements are treated as points
   * @param vector
   * @param result
   * @returns self
   */
  transform(vector, result) {
    if (vector.length === 4) {
      result = transformMat43(result || [-0, -0, -0, -0], vector, this);
      checkVector(result, 4);
      return result;
    }
    return this.transformAsPoint(vector, result);
  }
  /**
   * Transforms any 2 or 3 element array as point (w implicitly 1)
   * @param vector
   * @param result
   * @returns self
   */
  transformAsPoint(vector, result) {
    const { length: length5 } = vector;
    let out;
    switch (length5) {
      case 2:
        out = transformMat4(result || [-0, -0], vector, this);
        break;
      case 3:
        out = transformMat42(result || [-0, -0, -0], vector, this);
        break;
      default:
        throw new Error("Illegal vector");
    }
    checkVector(out, vector.length);
    return out;
  }
  /**
   * Transforms any 2 or 3 element array as vector (w implicitly 0)
   * @param vector
   * @param result
   * @returns self
   */
  transformAsVector(vector, result) {
    let out;
    switch (vector.length) {
      case 2:
        out = vec2_transformMat4AsVector(result || [-0, -0], vector, this);
        break;
      case 3:
        out = vec3_transformMat4AsVector(result || [-0, -0, -0], vector, this);
        break;
      default:
        throw new Error("Illegal vector");
    }
    checkVector(out, vector.length);
    return out;
  }
  /** @deprecated */
  transformPoint(vector, result) {
    return this.transformAsPoint(vector, result);
  }
  /** @deprecated */
  transformVector(vector, result) {
    return this.transformAsPoint(vector, result);
  }
  /** @deprecated */
  transformDirection(vector, result) {
    return this.transformAsVector(vector, result);
  }
  // three.js math API compatibility
  makeRotationX(radians2) {
    return this.identity().rotateX(radians2);
  }
  makeTranslation(x3, y3, z3) {
    return this.identity().translate([x3, y3, z3]);
  }
};
var ZERO2;
var IDENTITY;
function getZeroMatrix() {
  if (!ZERO2) {
    ZERO2 = new Matrix4([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
    Object.freeze(ZERO2);
  }
  return ZERO2;
}
function getIdentityMatrix() {
  if (!IDENTITY) {
    IDENTITY = new Matrix4();
    Object.freeze(IDENTITY);
  }
  return IDENTITY;
}
function checkRadians(possiblyDegrees) {
  if (possiblyDegrees > Math.PI * 2) {
    throw Error("expected radians");
  }
}
function computeInfinitePerspectiveOffCenter(result, left, right, bottom, top, near) {
  const column0Row0 = 2 * near / (right - left);
  const column1Row1 = 2 * near / (top - bottom);
  const column2Row0 = (right + left) / (right - left);
  const column2Row1 = (top + bottom) / (top - bottom);
  const column2Row2 = -1;
  const column2Row3 = -1;
  const column3Row2 = -2 * near;
  result[0] = column0Row0;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  result[4] = 0;
  result[5] = column1Row1;
  result[6] = 0;
  result[7] = 0;
  result[8] = column2Row0;
  result[9] = column2Row1;
  result[10] = column2Row2;
  result[11] = column2Row3;
  result[12] = 0;
  result[13] = 0;
  result[14] = column3Row2;
  result[15] = 0;
  return result;
}

// ../../../.yarn/berry/cache/@math.gl-core-npm-4.1.0-f2844e4336-10c0.zip/node_modules/@math.gl/core/dist/gl-matrix/quat.js
var quat_exports = {};
__export(quat_exports, {
  add: () => add6,
  calculateW: () => calculateW,
  clone: () => clone6,
  conjugate: () => conjugate,
  copy: () => copy6,
  create: () => create6,
  dot: () => dot4,
  equals: () => equals7,
  exactEquals: () => exactEquals6,
  exp: () => exp,
  fromMat3: () => fromMat3,
  fromValues: () => fromValues6,
  getAngle: () => getAngle,
  getAxisAngle: () => getAxisAngle,
  identity: () => identity3,
  invert: () => invert3,
  len: () => len4,
  length: () => length4,
  lerp: () => lerp5,
  ln: () => ln,
  mul: () => mul6,
  multiply: () => multiply6,
  normalize: () => normalize4,
  pow: () => pow,
  rotateX: () => rotateX3,
  rotateY: () => rotateY3,
  rotateZ: () => rotateZ3,
  rotationTo: () => rotationTo,
  scale: () => scale6,
  set: () => set6,
  setAxes: () => setAxes,
  setAxisAngle: () => setAxisAngle,
  slerp: () => slerp2,
  sqlerp: () => sqlerp,
  sqrLen: () => sqrLen4,
  squaredLength: () => squaredLength4,
  str: () => str6
});
function create6() {
  const out = new ARRAY_TYPE(4);
  if (ARRAY_TYPE != Float32Array) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
  }
  out[3] = 1;
  return out;
}
function identity3(out) {
  out[0] = 0;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  return out;
}
function setAxisAngle(out, axis, rad) {
  rad = rad * 0.5;
  const s3 = Math.sin(rad);
  out[0] = s3 * axis[0];
  out[1] = s3 * axis[1];
  out[2] = s3 * axis[2];
  out[3] = Math.cos(rad);
  return out;
}
function getAxisAngle(out_axis, q3) {
  const rad = Math.acos(q3[3]) * 2;
  const s3 = Math.sin(rad / 2);
  if (s3 > EPSILON) {
    out_axis[0] = q3[0] / s3;
    out_axis[1] = q3[1] / s3;
    out_axis[2] = q3[2] / s3;
  } else {
    out_axis[0] = 1;
    out_axis[1] = 0;
    out_axis[2] = 0;
  }
  return rad;
}
function getAngle(a3, b2) {
  const dotproduct = dot4(a3, b2);
  return Math.acos(2 * dotproduct * dotproduct - 1);
}
function multiply6(out, a3, b2) {
  const ax = a3[0];
  const ay = a3[1];
  const az = a3[2];
  const aw = a3[3];
  const bx = b2[0];
  const by = b2[1];
  const bz = b2[2];
  const bw = b2[3];
  out[0] = ax * bw + aw * bx + ay * bz - az * by;
  out[1] = ay * bw + aw * by + az * bx - ax * bz;
  out[2] = az * bw + aw * bz + ax * by - ay * bx;
  out[3] = aw * bw - ax * bx - ay * by - az * bz;
  return out;
}
function rotateX3(out, a3, rad) {
  rad *= 0.5;
  const ax = a3[0];
  const ay = a3[1];
  const az = a3[2];
  const aw = a3[3];
  const bx = Math.sin(rad);
  const bw = Math.cos(rad);
  out[0] = ax * bw + aw * bx;
  out[1] = ay * bw + az * bx;
  out[2] = az * bw - ay * bx;
  out[3] = aw * bw - ax * bx;
  return out;
}
function rotateY3(out, a3, rad) {
  rad *= 0.5;
  const ax = a3[0];
  const ay = a3[1];
  const az = a3[2];
  const aw = a3[3];
  const by = Math.sin(rad);
  const bw = Math.cos(rad);
  out[0] = ax * bw - az * by;
  out[1] = ay * bw + aw * by;
  out[2] = az * bw + ax * by;
  out[3] = aw * bw - ay * by;
  return out;
}
function rotateZ3(out, a3, rad) {
  rad *= 0.5;
  const ax = a3[0];
  const ay = a3[1];
  const az = a3[2];
  const aw = a3[3];
  const bz = Math.sin(rad);
  const bw = Math.cos(rad);
  out[0] = ax * bw + ay * bz;
  out[1] = ay * bw - ax * bz;
  out[2] = az * bw + aw * bz;
  out[3] = aw * bw - az * bz;
  return out;
}
function calculateW(out, a3) {
  const x3 = a3[0];
  const y3 = a3[1];
  const z3 = a3[2];
  out[0] = x3;
  out[1] = y3;
  out[2] = z3;
  out[3] = Math.sqrt(Math.abs(1 - x3 * x3 - y3 * y3 - z3 * z3));
  return out;
}
function exp(out, a3) {
  const x3 = a3[0];
  const y3 = a3[1];
  const z3 = a3[2];
  const w3 = a3[3];
  const r3 = Math.sqrt(x3 * x3 + y3 * y3 + z3 * z3);
  const et2 = Math.exp(w3);
  const s3 = r3 > 0 ? et2 * Math.sin(r3) / r3 : 0;
  out[0] = x3 * s3;
  out[1] = y3 * s3;
  out[2] = z3 * s3;
  out[3] = et2 * Math.cos(r3);
  return out;
}
function ln(out, a3) {
  const x3 = a3[0];
  const y3 = a3[1];
  const z3 = a3[2];
  const w3 = a3[3];
  const r3 = Math.sqrt(x3 * x3 + y3 * y3 + z3 * z3);
  const t3 = r3 > 0 ? Math.atan2(r3, w3) / r3 : 0;
  out[0] = x3 * t3;
  out[1] = y3 * t3;
  out[2] = z3 * t3;
  out[3] = 0.5 * Math.log(x3 * x3 + y3 * y3 + z3 * z3 + w3 * w3);
  return out;
}
function pow(out, a3, b2) {
  ln(out, a3);
  scale6(out, out, b2);
  exp(out, out);
  return out;
}
function slerp2(out, a3, b2, t3) {
  const ax = a3[0];
  const ay = a3[1];
  const az = a3[2];
  const aw = a3[3];
  let bx = b2[0];
  let by = b2[1];
  let bz = b2[2];
  let bw = b2[3];
  let cosom;
  let omega;
  let scale0;
  let scale1;
  let sinom;
  cosom = ax * bx + ay * by + az * bz + aw * bw;
  if (cosom < 0) {
    cosom = -cosom;
    bx = -bx;
    by = -by;
    bz = -bz;
    bw = -bw;
  }
  if (1 - cosom > EPSILON) {
    omega = Math.acos(cosom);
    sinom = Math.sin(omega);
    scale0 = Math.sin((1 - t3) * omega) / sinom;
    scale1 = Math.sin(t3 * omega) / sinom;
  } else {
    scale0 = 1 - t3;
    scale1 = t3;
  }
  out[0] = scale0 * ax + scale1 * bx;
  out[1] = scale0 * ay + scale1 * by;
  out[2] = scale0 * az + scale1 * bz;
  out[3] = scale0 * aw + scale1 * bw;
  return out;
}
function invert3(out, a3) {
  const a0 = a3[0];
  const a1 = a3[1];
  const a22 = a3[2];
  const a32 = a3[3];
  const dot5 = a0 * a0 + a1 * a1 + a22 * a22 + a32 * a32;
  const invDot = dot5 ? 1 / dot5 : 0;
  out[0] = -a0 * invDot;
  out[1] = -a1 * invDot;
  out[2] = -a22 * invDot;
  out[3] = a32 * invDot;
  return out;
}
function conjugate(out, a3) {
  out[0] = -a3[0];
  out[1] = -a3[1];
  out[2] = -a3[2];
  out[3] = a3[3];
  return out;
}
function fromMat3(out, m3) {
  const fTrace = m3[0] + m3[4] + m3[8];
  let fRoot;
  if (fTrace > 0) {
    fRoot = Math.sqrt(fTrace + 1);
    out[3] = 0.5 * fRoot;
    fRoot = 0.5 / fRoot;
    out[0] = (m3[5] - m3[7]) * fRoot;
    out[1] = (m3[6] - m3[2]) * fRoot;
    out[2] = (m3[1] - m3[3]) * fRoot;
  } else {
    let i4 = 0;
    if (m3[4] > m3[0])
      i4 = 1;
    if (m3[8] > m3[i4 * 3 + i4])
      i4 = 2;
    const j3 = (i4 + 1) % 3;
    const k3 = (i4 + 2) % 3;
    fRoot = Math.sqrt(m3[i4 * 3 + i4] - m3[j3 * 3 + j3] - m3[k3 * 3 + k3] + 1);
    out[i4] = 0.5 * fRoot;
    fRoot = 0.5 / fRoot;
    out[3] = (m3[j3 * 3 + k3] - m3[k3 * 3 + j3]) * fRoot;
    out[j3] = (m3[j3 * 3 + i4] + m3[i4 * 3 + j3]) * fRoot;
    out[k3] = (m3[k3 * 3 + i4] + m3[i4 * 3 + k3]) * fRoot;
  }
  return out;
}
function str6(a3) {
  return `quat(${a3[0]}, ${a3[1]}, ${a3[2]}, ${a3[3]})`;
}
var clone6 = clone5;
var fromValues6 = fromValues5;
var copy6 = copy5;
var set6 = set5;
var add6 = add5;
var mul6 = multiply6;
var scale6 = scale5;
var dot4 = dot3;
var lerp5 = lerp4;
var length4 = length3;
var len4 = length4;
var squaredLength4 = squaredLength3;
var sqrLen4 = squaredLength4;
var normalize4 = normalize3;
var exactEquals6 = exactEquals5;
function equals7(a3, b2) {
  return Math.abs(dot3(a3, b2)) >= 1 - EPSILON;
}
var rotationTo = (function() {
  const tmpvec3 = create2();
  const xUnitVec3 = fromValues2(1, 0, 0);
  const yUnitVec3 = fromValues2(0, 1, 0);
  return function(out, a3, b2) {
    const dot5 = dot2(a3, b2);
    if (dot5 < -0.999999) {
      cross2(tmpvec3, xUnitVec3, a3);
      if (len2(tmpvec3) < 1e-6)
        cross2(tmpvec3, yUnitVec3, a3);
      normalize2(tmpvec3, tmpvec3);
      setAxisAngle(out, tmpvec3, Math.PI);
      return out;
    } else if (dot5 > 0.999999) {
      out[0] = 0;
      out[1] = 0;
      out[2] = 0;
      out[3] = 1;
      return out;
    }
    cross2(tmpvec3, a3, b2);
    out[0] = tmpvec3[0];
    out[1] = tmpvec3[1];
    out[2] = tmpvec3[2];
    out[3] = 1 + dot5;
    return normalize4(out, out);
  };
})();
var sqlerp = (function() {
  const temp1 = create6();
  const temp2 = create6();
  return function(out, a3, b2, c3, d3, t3) {
    slerp2(temp1, a3, d3, t3);
    slerp2(temp2, b2, c3, t3);
    slerp2(out, temp1, temp2, 2 * t3 * (1 - t3));
    return out;
  };
})();
var setAxes = (function() {
  const matr = create3();
  return function(out, view, right, up) {
    matr[0] = right[0];
    matr[3] = right[1];
    matr[6] = right[2];
    matr[1] = up[0];
    matr[4] = up[1];
    matr[7] = up[2];
    matr[2] = -view[0];
    matr[5] = -view[1];
    matr[8] = -view[2];
    return normalize4(out, fromMat3(out, matr));
  };
})();

// ../../../.yarn/berry/cache/@math.gl-core-npm-4.1.0-f2844e4336-10c0.zip/node_modules/@math.gl/core/dist/classes/spherical-coordinates.js
var EPSILON2 = 1e-6;
var EARTH_RADIUS_METERS = 6371e3;
var SphericalCoordinates = class _SphericalCoordinates {
  // bearing: number;
  // pitch: number;
  // altitude: number;
  // lnglatZ coordinates
  // longitude: number;
  // latitude: number;
  // lng: number;
  // lat: number;
  // z: number;
  /**
   * Creates a new SphericalCoordinates object
   * @param options
   * @param [options.phi] =0 - rotation around X (latitude)
   * @param [options.theta] =0 - rotation around Y (longitude)
   * @param [options.radius] =1 - Distance from center
   * @param [options.bearing]
   * @param [options.pitch]
   * @param [options.altitude]
   * @param [options.radiusScale] =1
   */
  // eslint-disable-next-line complexity
  constructor({ phi = 0, theta = 0, radius = 1, bearing, pitch, altitude, radiusScale = EARTH_RADIUS_METERS } = {}) {
    this.phi = phi;
    this.theta = theta;
    this.radius = radius || altitude || 1;
    this.radiusScale = radiusScale || 1;
    if (bearing !== void 0) {
      this.bearing = bearing;
    }
    if (pitch !== void 0) {
      this.pitch = pitch;
    }
    this.check();
  }
  toString() {
    return this.formatString(config);
  }
  formatString({ printTypes = false }) {
    const f4 = formatValue;
    return `${printTypes ? "Spherical" : ""}[rho:${f4(this.radius)},theta:${f4(this.theta)},phi:${f4(this.phi)}]`;
  }
  equals(other) {
    return equals(this.radius, other.radius) && equals(this.theta, other.theta) && equals(this.phi, other.phi);
  }
  exactEquals(other) {
    return this.radius === other.radius && this.theta === other.theta && this.phi === other.phi;
  }
  /* eslint-disable brace-style */
  // Cartographic (bearing 0 north, pitch 0 look from above)
  get bearing() {
    return 180 - degrees(this.phi);
  }
  set bearing(v3) {
    this.phi = Math.PI - radians(v3);
  }
  get pitch() {
    return degrees(this.theta);
  }
  set pitch(v3) {
    this.theta = radians(v3);
  }
  // get pitch() { return 90 - degrees(this.phi); }
  // set pitch(v) { this.phi = radians(v) + Math.PI / 2; }
  // get altitude() { return this.radius - 1; } // relative altitude
  // lnglatZ coordinates
  get longitude() {
    return degrees(this.phi);
  }
  get latitude() {
    return degrees(this.theta);
  }
  get lng() {
    return degrees(this.phi);
  }
  get lat() {
    return degrees(this.theta);
  }
  get z() {
    return (this.radius - 1) * this.radiusScale;
  }
  /* eslint-enable brace-style */
  set(radius, phi, theta) {
    this.radius = radius;
    this.phi = phi;
    this.theta = theta;
    return this.check();
  }
  clone() {
    return new _SphericalCoordinates().copy(this);
  }
  copy(other) {
    this.radius = other.radius;
    this.phi = other.phi;
    this.theta = other.theta;
    return this.check();
  }
  fromLngLatZ([lng, lat, z3]) {
    this.radius = 1 + z3 / this.radiusScale;
    this.phi = radians(lat);
    this.theta = radians(lng);
    return this.check();
  }
  fromVector3(v3) {
    this.radius = length2(v3);
    if (this.radius > 0) {
      this.theta = Math.atan2(v3[0], v3[1]);
      this.phi = Math.acos(clamp(v3[2] / this.radius, -1, 1));
    }
    return this.check();
  }
  toVector3() {
    return new Vector3(0, 0, this.radius).rotateX({ radians: this.theta }).rotateZ({ radians: this.phi });
  }
  // restrict phi to be betwee EPS and PI-EPS
  makeSafe() {
    this.phi = Math.max(EPSILON2, Math.min(Math.PI - EPSILON2, this.phi));
    return this;
  }
  check() {
    if (!Number.isFinite(this.phi) || !Number.isFinite(this.theta) || !(this.radius > 0)) {
      throw new Error("SphericalCoordinates: some fields set to invalid numbers");
    }
    return this;
  }
};

// ../../../.yarn/berry/cache/@math.gl-core-npm-4.1.0-f2844e4336-10c0.zip/node_modules/@math.gl/core/dist/classes/euler.js
var RotationOrder;
(function(RotationOrder2) {
  RotationOrder2[RotationOrder2["ZYX"] = 0] = "ZYX";
  RotationOrder2[RotationOrder2["YXZ"] = 1] = "YXZ";
  RotationOrder2[RotationOrder2["XZY"] = 2] = "XZY";
  RotationOrder2[RotationOrder2["ZXY"] = 3] = "ZXY";
  RotationOrder2[RotationOrder2["YZX"] = 4] = "YZX";
  RotationOrder2[RotationOrder2["XYZ"] = 5] = "XYZ";
})(RotationOrder || (RotationOrder = {}));

// ../../../.yarn/berry/cache/@math.gl-core-npm-4.1.0-f2844e4336-10c0.zip/node_modules/@math.gl/core/dist/lib/math-utils.js
var math_utils_exports = {};
__export(math_utils_exports, {
  EPSILON1: () => EPSILON1,
  EPSILON10: () => EPSILON10,
  EPSILON11: () => EPSILON11,
  EPSILON12: () => EPSILON12,
  EPSILON13: () => EPSILON13,
  EPSILON14: () => EPSILON14,
  EPSILON15: () => EPSILON15,
  EPSILON16: () => EPSILON16,
  EPSILON17: () => EPSILON17,
  EPSILON18: () => EPSILON18,
  EPSILON19: () => EPSILON19,
  EPSILON2: () => EPSILON22,
  EPSILON20: () => EPSILON20,
  EPSILON3: () => EPSILON3,
  EPSILON4: () => EPSILON4,
  EPSILON5: () => EPSILON5,
  EPSILON6: () => EPSILON6,
  EPSILON7: () => EPSILON7,
  EPSILON8: () => EPSILON8,
  EPSILON9: () => EPSILON9,
  PI_OVER_FOUR: () => PI_OVER_FOUR,
  PI_OVER_SIX: () => PI_OVER_SIX,
  PI_OVER_TWO: () => PI_OVER_TWO,
  TWO_PI: () => TWO_PI
});
var EPSILON1 = 0.1;
var EPSILON22 = 0.01;
var EPSILON3 = 1e-3;
var EPSILON4 = 1e-4;
var EPSILON5 = 1e-5;
var EPSILON6 = 1e-6;
var EPSILON7 = 1e-7;
var EPSILON8 = 1e-8;
var EPSILON9 = 1e-9;
var EPSILON10 = 1e-10;
var EPSILON11 = 1e-11;
var EPSILON12 = 1e-12;
var EPSILON13 = 1e-13;
var EPSILON14 = 1e-14;
var EPSILON15 = 1e-15;
var EPSILON16 = 1e-16;
var EPSILON17 = 1e-17;
var EPSILON18 = 1e-18;
var EPSILON19 = 1e-19;
var EPSILON20 = 1e-20;
var PI_OVER_TWO = Math.PI / 2;
var PI_OVER_FOUR = Math.PI / 4;
var PI_OVER_SIX = Math.PI / 6;
var TWO_PI = Math.PI * 2;

// .yarn/__virtual__/@luma.gl-shadertools-virtual-ed2a1ebd80/4/.yarn/berry/cache/@luma.gl-shadertools-npm-9.1.9-81b6398d54-10c0.zip/node_modules/@luma.gl/shadertools/dist/modules/math/fp16/fp16-utils.js
var buffer = new ArrayBuffer(4);
var floatView = new Float32Array(buffer);
var uint32View = new Uint32Array(buffer);

// .yarn/__virtual__/@luma.gl-shadertools-virtual-ed2a1ebd80/4/.yarn/berry/cache/@luma.gl-shadertools-npm-9.1.9-81b6398d54-10c0.zip/node_modules/@luma.gl/shadertools/dist/modules/math/fp64/fp64-utils.js
function fp64ify(a3, out = [], startIndex = 0) {
  const hiPart = Math.fround(a3);
  const loPart = a3 - hiPart;
  out[startIndex] = hiPart;
  out[startIndex + 1] = loPart;
  return out;
}
function fp64LowPart(a3) {
  return a3 - Math.fround(a3);
}
function fp64ifyMatrix4(matrix) {
  const matrixFP64 = new Float32Array(32);
  for (let i4 = 0; i4 < 4; ++i4) {
    for (let j3 = 0; j3 < 4; ++j3) {
      const index = i4 * 4 + j3;
      fp64ify(matrix[j3 * 4 + i4], matrixFP64, index * 2);
    }
  }
  return matrixFP64;
}

// .yarn/__virtual__/@luma.gl-shadertools-virtual-ed2a1ebd80/4/.yarn/berry/cache/@luma.gl-shadertools-npm-9.1.9-81b6398d54-10c0.zip/node_modules/@luma.gl/shadertools/dist/modules/math/fp32/fp32.js
var fp32shader = (
  /* glsl */
  `#ifdef LUMA_FP32_TAN_PRECISION_WORKAROUND

// All these functions are for substituting tan() function from Intel GPU only
const float TWO_PI = 6.2831854820251465;
const float PI_2 = 1.5707963705062866;
const float PI_16 = 0.1963495463132858;

const float SIN_TABLE_0 = 0.19509032368659973;
const float SIN_TABLE_1 = 0.3826834261417389;
const float SIN_TABLE_2 = 0.5555702447891235;
const float SIN_TABLE_3 = 0.7071067690849304;

const float COS_TABLE_0 = 0.9807852506637573;
const float COS_TABLE_1 = 0.9238795042037964;
const float COS_TABLE_2 = 0.8314695954322815;
const float COS_TABLE_3 = 0.7071067690849304;

const float INVERSE_FACTORIAL_3 = 1.666666716337204e-01; // 1/3!
const float INVERSE_FACTORIAL_5 = 8.333333767950535e-03; // 1/5!
const float INVERSE_FACTORIAL_7 = 1.9841270113829523e-04; // 1/7!
const float INVERSE_FACTORIAL_9 = 2.75573188446287533e-06; // 1/9!

float sin_taylor_fp32(float a) {
  float r, s, t, x;

  if (a == 0.0) {
    return 0.0;
  }

  x = -a * a;
  s = a;
  r = a;

  r = r * x;
  t = r * INVERSE_FACTORIAL_3;
  s = s + t;

  r = r * x;
  t = r * INVERSE_FACTORIAL_5;
  s = s + t;

  r = r * x;
  t = r * INVERSE_FACTORIAL_7;
  s = s + t;

  r = r * x;
  t = r * INVERSE_FACTORIAL_9;
  s = s + t;

  return s;
}

void sincos_taylor_fp32(float a, out float sin_t, out float cos_t) {
  if (a == 0.0) {
    sin_t = 0.0;
    cos_t = 1.0;
  }
  sin_t = sin_taylor_fp32(a);
  cos_t = sqrt(1.0 - sin_t * sin_t);
}

float tan_taylor_fp32(float a) {
    float sin_a;
    float cos_a;

    if (a == 0.0) {
        return 0.0;
    }

    // 2pi range reduction
    float z = floor(a / TWO_PI);
    float r = a - TWO_PI * z;

    float t;
    float q = floor(r / PI_2 + 0.5);
    int j = int(q);

    if (j < -2 || j > 2) {
        return 1.0 / 0.0;
    }

    t = r - PI_2 * q;

    q = floor(t / PI_16 + 0.5);
    int k = int(q);
    int abs_k = int(abs(float(k)));

    if (abs_k > 4) {
        return 1.0 / 0.0;
    } else {
        t = t - PI_16 * q;
    }

    float u = 0.0;
    float v = 0.0;

    float sin_t, cos_t;
    float s, c;
    sincos_taylor_fp32(t, sin_t, cos_t);

    if (k == 0) {
        s = sin_t;
        c = cos_t;
    } else {
        if (abs(float(abs_k) - 1.0) < 0.5) {
            u = COS_TABLE_0;
            v = SIN_TABLE_0;
        } else if (abs(float(abs_k) - 2.0) < 0.5) {
            u = COS_TABLE_1;
            v = SIN_TABLE_1;
        } else if (abs(float(abs_k) - 3.0) < 0.5) {
            u = COS_TABLE_2;
            v = SIN_TABLE_2;
        } else if (abs(float(abs_k) - 4.0) < 0.5) {
            u = COS_TABLE_3;
            v = SIN_TABLE_3;
        }
        if (k > 0) {
            s = u * sin_t + v * cos_t;
            c = u * cos_t - v * sin_t;
        } else {
            s = u * sin_t - v * cos_t;
            c = u * cos_t + v * sin_t;
        }
    }

    if (j == 0) {
        sin_a = s;
        cos_a = c;
    } else if (j == 1) {
        sin_a = c;
        cos_a = -s;
    } else if (j == -1) {
        sin_a = -c;
        cos_a = s;
    } else {
        sin_a = -s;
        cos_a = -c;
    }
    return sin_a / cos_a;
}
#endif

float tan_fp32(float a) {
#ifdef LUMA_FP32_TAN_PRECISION_WORKAROUND
  return tan_taylor_fp32(a);
#else
  return tan(a);
#endif
}
`
);
var fp32 = {
  name: "fp32",
  vs: fp32shader
};

// .yarn/__virtual__/@luma.gl-shadertools-virtual-ed2a1ebd80/4/.yarn/berry/cache/@luma.gl-shadertools-npm-9.1.9-81b6398d54-10c0.zip/node_modules/@luma.gl/shadertools/dist/modules/math/fp64/fp64-arithmetic-glsl.js
var fp64arithmeticShader = (
  /* glsl */
  `
uniform fp64arithmeticUniforms {
  uniform float ONE;
} fp64;

/*
About LUMA_FP64_CODE_ELIMINATION_WORKAROUND

The purpose of this workaround is to prevent shader compilers from
optimizing away necessary arithmetic operations by swapping their sequences
or transform the equation to some 'equivalent' form.

The method is to multiply an artifical variable, ONE, which will be known to
the compiler to be 1 only at runtime. The whole expression is then represented
as a polynomial with respective to ONE. In the coefficients of all terms, only one a
and one b should appear

err = (a + b) * ONE^6 - a * ONE^5 - (a + b) * ONE^4 + a * ONE^3 - b - (a + b) * ONE^2 + a * ONE
*/

// Divide float number to high and low floats to extend fraction bits
vec2 split(float a) {
  const float SPLIT = 4097.0;
  float t = a * SPLIT;
#if defined(LUMA_FP64_CODE_ELIMINATION_WORKAROUND)
  float a_hi = t * fp64.ONE - (t - a);
  float a_lo = a * fp64.ONE - a_hi;
#else
  float a_hi = t - (t - a);
  float a_lo = a - a_hi;
#endif
  return vec2(a_hi, a_lo);
}

// Divide float number again when high float uses too many fraction bits
vec2 split2(vec2 a) {
  vec2 b = split(a.x);
  b.y += a.y;
  return b;
}

// Special sum operation when a > b
vec2 quickTwoSum(float a, float b) {
#if defined(LUMA_FP64_CODE_ELIMINATION_WORKAROUND)
  float sum = (a + b) * fp64.ONE;
  float err = b - (sum - a) * fp64.ONE;
#else
  float sum = a + b;
  float err = b - (sum - a);
#endif
  return vec2(sum, err);
}

// General sum operation
vec2 twoSum(float a, float b) {
  float s = (a + b);
#if defined(LUMA_FP64_CODE_ELIMINATION_WORKAROUND)
  float v = (s * fp64.ONE - a) * fp64.ONE;
  float err = (a - (s - v) * fp64.ONE) * fp64.ONE * fp64.ONE * fp64.ONE + (b - v);
#else
  float v = s - a;
  float err = (a - (s - v)) + (b - v);
#endif
  return vec2(s, err);
}

vec2 twoSub(float a, float b) {
  float s = (a - b);
#if defined(LUMA_FP64_CODE_ELIMINATION_WORKAROUND)
  float v = (s * fp64.ONE - a) * fp64.ONE;
  float err = (a - (s - v) * fp64.ONE) * fp64.ONE * fp64.ONE * fp64.ONE - (b + v);
#else
  float v = s - a;
  float err = (a - (s - v)) - (b + v);
#endif
  return vec2(s, err);
}

vec2 twoSqr(float a) {
  float prod = a * a;
  vec2 a_fp64 = split(a);
#if defined(LUMA_FP64_CODE_ELIMINATION_WORKAROUND)
  float err = ((a_fp64.x * a_fp64.x - prod) * fp64.ONE + 2.0 * a_fp64.x *
    a_fp64.y * fp64.ONE * fp64.ONE) + a_fp64.y * a_fp64.y * fp64.ONE * fp64.ONE * fp64.ONE;
#else
  float err = ((a_fp64.x * a_fp64.x - prod) + 2.0 * a_fp64.x * a_fp64.y) + a_fp64.y * a_fp64.y;
#endif
  return vec2(prod, err);
}

vec2 twoProd(float a, float b) {
  float prod = a * b;
  vec2 a_fp64 = split(a);
  vec2 b_fp64 = split(b);
  float err = ((a_fp64.x * b_fp64.x - prod) + a_fp64.x * b_fp64.y +
    a_fp64.y * b_fp64.x) + a_fp64.y * b_fp64.y;
  return vec2(prod, err);
}

vec2 sum_fp64(vec2 a, vec2 b) {
  vec2 s, t;
  s = twoSum(a.x, b.x);
  t = twoSum(a.y, b.y);
  s.y += t.x;
  s = quickTwoSum(s.x, s.y);
  s.y += t.y;
  s = quickTwoSum(s.x, s.y);
  return s;
}

vec2 sub_fp64(vec2 a, vec2 b) {
  vec2 s, t;
  s = twoSub(a.x, b.x);
  t = twoSub(a.y, b.y);
  s.y += t.x;
  s = quickTwoSum(s.x, s.y);
  s.y += t.y;
  s = quickTwoSum(s.x, s.y);
  return s;
}

vec2 mul_fp64(vec2 a, vec2 b) {
  vec2 prod = twoProd(a.x, b.x);
  // y component is for the error
  prod.y += a.x * b.y;
#if defined(LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND)
  prod = split2(prod);
#endif
  prod = quickTwoSum(prod.x, prod.y);
  prod.y += a.y * b.x;
#if defined(LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND)
  prod = split2(prod);
#endif
  prod = quickTwoSum(prod.x, prod.y);
  return prod;
}

vec2 div_fp64(vec2 a, vec2 b) {
  float xn = 1.0 / b.x;
#if defined(LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND)
  vec2 yn = mul_fp64(a, vec2(xn, 0));
#else
  vec2 yn = a * xn;
#endif
  float diff = (sub_fp64(a, mul_fp64(b, yn))).x;
  vec2 prod = twoProd(xn, diff);
  return sum_fp64(yn, prod);
}

vec2 sqrt_fp64(vec2 a) {
  if (a.x == 0.0 && a.y == 0.0) return vec2(0.0, 0.0);
  if (a.x < 0.0) return vec2(0.0 / 0.0, 0.0 / 0.0);

  float x = 1.0 / sqrt(a.x);
  float yn = a.x * x;
#if defined(LUMA_FP64_CODE_ELIMINATION_WORKAROUND)
  vec2 yn_sqr = twoSqr(yn) * fp64.ONE;
#else
  vec2 yn_sqr = twoSqr(yn);
#endif
  float diff = sub_fp64(a, yn_sqr).x;
  vec2 prod = twoProd(x * 0.5, diff);
#if defined(LUMA_FP64_HIGH_BITS_OVERFLOW_WORKAROUND)
  return sum_fp64(split(yn), prod);
#else
  return sum_fp64(vec2(yn, 0.0), prod);
#endif
}
`
);

// .yarn/__virtual__/@luma.gl-shadertools-virtual-ed2a1ebd80/4/.yarn/berry/cache/@luma.gl-shadertools-npm-9.1.9-81b6398d54-10c0.zip/node_modules/@luma.gl/shadertools/dist/modules/math/fp64/fp64.js
var defaultUniforms = {
  // Used in LUMA_FP64_CODE_ELIMINATION_WORKAROUND
  ONE: 1
};
var fp64arithmetic = {
  name: "fp64arithmetic",
  vs: fp64arithmeticShader,
  defaultUniforms,
  uniformTypes: { ONE: "f32" },
  // Additional Functions
  fp64ify,
  fp64LowPart,
  fp64ifyMatrix4
};

// .yarn/__virtual__/@luma.gl-shadertools-virtual-ed2a1ebd80/4/.yarn/berry/cache/@luma.gl-shadertools-npm-9.1.9-81b6398d54-10c0.zip/node_modules/@luma.gl/shadertools/dist/modules/engine/picking/picking.js
var DEFAULT_HIGHLIGHT_COLOR = [0, 1, 1, 1];
var vs = (
  /* glsl */
  `uniform pickingUniforms {
  float isActive;
  float isAttribute;
  float isHighlightActive;
  float useFloatColors;
  vec3 highlightedObjectColor;
  vec4 highlightColor;
} picking;

out vec4 picking_vRGBcolor_Avalid;

// Normalize unsigned byte color to 0-1 range
vec3 picking_normalizeColor(vec3 color) {
  return picking.useFloatColors > 0.5 ? color : color / 255.0;
}

// Normalize unsigned byte color to 0-1 range
vec4 picking_normalizeColor(vec4 color) {
  return picking.useFloatColors > 0.5 ? color : color / 255.0;
}

bool picking_isColorZero(vec3 color) {
  return dot(color, vec3(1.0)) < 0.00001;
}

bool picking_isColorValid(vec3 color) {
  return dot(color, vec3(1.0)) > 0.00001;
}

// Check if this vertex is highlighted 
bool isVertexHighlighted(vec3 vertexColor) {
  vec3 highlightedObjectColor = picking_normalizeColor(picking.highlightedObjectColor);
  return
    bool(picking.isHighlightActive) && picking_isColorZero(abs(vertexColor - highlightedObjectColor));
}

// Set the current picking color
void picking_setPickingColor(vec3 pickingColor) {
  pickingColor = picking_normalizeColor(pickingColor);

  if (bool(picking.isActive)) {
    // Use alpha as the validity flag. If pickingColor is [0, 0, 0] fragment is non-pickable
    picking_vRGBcolor_Avalid.a = float(picking_isColorValid(pickingColor));

    if (!bool(picking.isAttribute)) {
      // Stores the picking color so that the fragment shader can render it during picking
      picking_vRGBcolor_Avalid.rgb = pickingColor;
    }
  } else {
    // Do the comparison with selected item color in vertex shader as it should mean fewer compares
    picking_vRGBcolor_Avalid.a = float(isVertexHighlighted(pickingColor));
  }
}

void picking_setPickingAttribute(float value) {
  if (bool(picking.isAttribute)) {
    picking_vRGBcolor_Avalid.r = value;
  }
}

void picking_setPickingAttribute(vec2 value) {
  if (bool(picking.isAttribute)) {
    picking_vRGBcolor_Avalid.rg = value;
  }
}

void picking_setPickingAttribute(vec3 value) {
  if (bool(picking.isAttribute)) {
    picking_vRGBcolor_Avalid.rgb = value;
  }
}
`
);
var fs = (
  /* glsl */
  `uniform pickingUniforms {
  float isActive;
  float isAttribute;
  float isHighlightActive;
  float useFloatColors;
  vec3 highlightedObjectColor;
  vec4 highlightColor;
} picking;

in vec4 picking_vRGBcolor_Avalid;

/*
 * Returns highlight color if this item is selected.
 */
vec4 picking_filterHighlightColor(vec4 color) {
  // If we are still picking, we don't highlight
  if (picking.isActive > 0.5) {
    return color;
  }

  bool selected = bool(picking_vRGBcolor_Avalid.a);

  if (selected) {
    // Blend in highlight color based on its alpha value
    float highLightAlpha = picking.highlightColor.a;
    float blendedAlpha = highLightAlpha + color.a * (1.0 - highLightAlpha);
    float highLightRatio = highLightAlpha / blendedAlpha;

    vec3 blendedRGB = mix(color.rgb, picking.highlightColor.rgb, highLightRatio);
    return vec4(blendedRGB, blendedAlpha);
  } else {
    return color;
  }
}

/*
 * Returns picking color if picking enabled else unmodified argument.
 */
vec4 picking_filterPickingColor(vec4 color) {
  if (bool(picking.isActive)) {
    if (picking_vRGBcolor_Avalid.a == 0.0) {
      discard;
    }
    return picking_vRGBcolor_Avalid;
  }
  return color;
}

/*
 * Returns picking color if picking is enabled if not
 * highlight color if this item is selected, otherwise unmodified argument.
 */
vec4 picking_filterColor(vec4 color) {
  vec4 highlightColor = picking_filterHighlightColor(color);
  return picking_filterPickingColor(highlightColor);
}
`
);
var picking = {
  props: {},
  uniforms: {},
  name: "picking",
  uniformTypes: {
    isActive: "f32",
    isAttribute: "f32",
    isHighlightActive: "f32",
    useFloatColors: "f32",
    highlightedObjectColor: "vec3<f32>",
    highlightColor: "vec4<f32>"
  },
  defaultUniforms: {
    isActive: false,
    isAttribute: false,
    isHighlightActive: false,
    useFloatColors: true,
    highlightedObjectColor: [0, 0, 0],
    highlightColor: DEFAULT_HIGHLIGHT_COLOR
  },
  vs,
  fs,
  getUniforms
};
function getUniforms(opts = {}, prevUniforms) {
  const uniforms = {};
  if (opts.highlightedObjectColor === void 0) {
  } else if (opts.highlightedObjectColor === null) {
    uniforms.isHighlightActive = false;
  } else {
    uniforms.isHighlightActive = true;
    const highlightedObjectColor = opts.highlightedObjectColor.slice(0, 3);
    uniforms.highlightedObjectColor = highlightedObjectColor;
  }
  if (opts.highlightColor) {
    const color = Array.from(opts.highlightColor, (x3) => x3 / 255);
    if (!Number.isFinite(color[3])) {
      color[3] = 1;
    }
    uniforms.highlightColor = color;
  }
  if (opts.isActive !== void 0) {
    uniforms.isActive = Boolean(opts.isActive);
    uniforms.isAttribute = Boolean(opts.isAttribute);
  }
  if (opts.useFloatColors !== void 0) {
    uniforms.useFloatColors = Boolean(opts.useFloatColors);
  }
  return uniforms;
}

// .yarn/__virtual__/@luma.gl-shadertools-virtual-ed2a1ebd80/4/.yarn/berry/cache/@luma.gl-shadertools-npm-9.1.9-81b6398d54-10c0.zip/node_modules/@luma.gl/shadertools/dist/modules/lighting/lights/lighting-uniforms-glsl.js
var lightingUniformsGLSL = (
  /* glsl */
  `precision highp int;

// #if (defined(SHADER_TYPE_FRAGMENT) && defined(LIGHTING_FRAGMENT)) || (defined(SHADER_TYPE_VERTEX) && defined(LIGHTING_VERTEX))
struct AmbientLight {
  vec3 color;
};

struct PointLight {
  vec3 color;
  vec3 position;
  vec3 attenuation; // 2nd order x:Constant-y:Linear-z:Exponential
};

struct DirectionalLight {
  vec3 color;
  vec3 direction;
};

uniform lightingUniforms {
  int enabled;
  int lightType;

  int directionalLightCount;
  int pointLightCount;

  vec3 ambientColor;

  vec3 lightColor0;
  vec3 lightPosition0;
  vec3 lightDirection0;
  vec3 lightAttenuation0;

  vec3 lightColor1;
  vec3 lightPosition1;
  vec3 lightDirection1;
  vec3 lightAttenuation1;

  vec3 lightColor2;
  vec3 lightPosition2;
  vec3 lightDirection2;
  vec3 lightAttenuation2;
} lighting;

PointLight lighting_getPointLight(int index) {
  switch (index) {
    case 0:
      return PointLight(lighting.lightColor0, lighting.lightPosition0, lighting.lightAttenuation0);
    case 1:
      return PointLight(lighting.lightColor1, lighting.lightPosition1, lighting.lightAttenuation1);
    case 2:
    default:  
      return PointLight(lighting.lightColor2, lighting.lightPosition2, lighting.lightAttenuation2);
  }
}

DirectionalLight lighting_getDirectionalLight(int index) {
  switch (index) {
    case 0:
      return DirectionalLight(lighting.lightColor0, lighting.lightDirection0);
    case 1:
      return DirectionalLight(lighting.lightColor1, lighting.lightDirection1);
    case 2:
    default:   
      return DirectionalLight(lighting.lightColor2, lighting.lightDirection2);
  }
} 

float getPointLightAttenuation(PointLight pointLight, float distance) {
  return pointLight.attenuation.x
       + pointLight.attenuation.y * distance
       + pointLight.attenuation.z * distance * distance;
}

// #endif
`
);

// .yarn/__virtual__/@luma.gl-shadertools-virtual-ed2a1ebd80/4/.yarn/berry/cache/@luma.gl-shadertools-npm-9.1.9-81b6398d54-10c0.zip/node_modules/@luma.gl/shadertools/dist/modules/lighting/lights/lighting-uniforms-wgsl.js
var lightingUniformsWGSL = (
  /* wgsl */
  `// #if (defined(SHADER_TYPE_FRAGMENT) && defined(LIGHTING_FRAGMENT)) || (defined(SHADER_TYPE_VERTEX) && defined(LIGHTING_VERTEX))
struct AmbientLight {
  color: vec3<f32>,
};

struct PointLight {
  color: vec3<f32>,
  position: vec3<f32>,
  attenuation: vec3<f32>, // 2nd order x:Constant-y:Linear-z:Exponential
};

struct DirectionalLight {
  color: vec3<f32>,
  direction: vec3<f32>,
};

struct lightingUniforms {
  enabled: i32,
  pointLightCount: i32,
  directionalLightCount: i32,

  ambientColor: vec3<f32>,

  // TODO - support multiple lights by uncommenting arrays below
  lightType: i32,
  lightColor: vec3<f32>,
  lightDirection: vec3<f32>,
  lightPosition: vec3<f32>,
  lightAttenuation: vec3<f32>,

  // AmbientLight ambientLight;
  // PointLight pointLight[MAX_LIGHTS];
  // DirectionalLight directionalLight[MAX_LIGHTS];
};

// Binding 0:1 is reserved for lighting (Note: could go into separate bind group as it is stable across draw calls)
@binding(1) @group(0) var<uniform> lighting : lightingUniforms;

fn lighting_getPointLight(index: i32) -> PointLight {
  return PointLight(lighting.lightColor, lighting.lightPosition, lighting.lightAttenuation);
}

fn lighting_getDirectionalLight(index: i32) -> DirectionalLight {
  return DirectionalLight(lighting.lightColor, lighting.lightDirection);
} 

fn getPointLightAttenuation(pointLight: PointLight, distance: f32) -> f32 {
  return pointLight.attenuation.x
       + pointLight.attenuation.y * distance
       + pointLight.attenuation.z * distance * distance;
}
`
);

// .yarn/__virtual__/@luma.gl-shadertools-virtual-ed2a1ebd80/4/.yarn/berry/cache/@luma.gl-shadertools-npm-9.1.9-81b6398d54-10c0.zip/node_modules/@luma.gl/shadertools/dist/modules/lighting/lights/lighting.js
var MAX_LIGHTS = 3;
var COLOR_FACTOR = 255;
var LIGHT_TYPE;
(function(LIGHT_TYPE2) {
  LIGHT_TYPE2[LIGHT_TYPE2["POINT"] = 0] = "POINT";
  LIGHT_TYPE2[LIGHT_TYPE2["DIRECTIONAL"] = 1] = "DIRECTIONAL";
})(LIGHT_TYPE || (LIGHT_TYPE = {}));
var lighting = {
  props: {},
  uniforms: {},
  name: "lighting",
  defines: {
    MAX_LIGHTS
  },
  uniformTypes: {
    enabled: "i32",
    lightType: "i32",
    directionalLightCount: "i32",
    pointLightCount: "i32",
    ambientLightColor: "vec3<f32>",
    // TODO define as arrays once we have appropriate uniformTypes
    lightColor0: "vec3<f32>",
    lightPosition0: "vec3<f32>",
    // TODO - could combine direction and attenuation
    lightDirection0: "vec3<f32>",
    lightAttenuation0: "vec3<f32>",
    lightColor1: "vec3<f32>",
    lightPosition1: "vec3<f32>",
    lightDirection1: "vec3<f32>",
    lightAttenuation1: "vec3<f32>",
    lightColor2: "vec3<f32>",
    lightPosition2: "vec3<f32>",
    lightDirection2: "vec3<f32>",
    lightAttenuation2: "vec3<f32>"
  },
  defaultUniforms: {
    enabled: 1,
    lightType: LIGHT_TYPE.POINT,
    directionalLightCount: 0,
    pointLightCount: 0,
    ambientLightColor: [0.1, 0.1, 0.1],
    lightColor0: [1, 1, 1],
    lightPosition0: [1, 1, 2],
    // TODO - could combine direction and attenuation
    lightDirection0: [1, 1, 1],
    lightAttenuation0: [1, 0, 0],
    lightColor1: [1, 1, 1],
    lightPosition1: [1, 1, 2],
    lightDirection1: [1, 1, 1],
    lightAttenuation1: [1, 0, 0],
    lightColor2: [1, 1, 1],
    lightPosition2: [1, 1, 2],
    lightDirection2: [1, 1, 1],
    lightAttenuation2: [1, 0, 0]
  },
  source: lightingUniformsWGSL,
  vs: lightingUniformsGLSL,
  fs: lightingUniformsGLSL,
  getUniforms: getUniforms2
};
function getUniforms2(props, prevUniforms = {}) {
  props = props ? { ...props } : props;
  if (!props) {
    return { ...lighting.defaultUniforms };
  }
  if (props.lights) {
    props = { ...props, ...extractLightTypes(props.lights), lights: void 0 };
  }
  const { ambientLight, pointLights, directionalLights } = props || {};
  const hasLights = ambientLight || pointLights && pointLights.length > 0 || directionalLights && directionalLights.length > 0;
  if (!hasLights) {
    return { ...lighting.defaultUniforms, enabled: 0 };
  }
  const uniforms = {
    ...lighting.defaultUniforms,
    ...prevUniforms,
    ...getLightSourceUniforms({ ambientLight, pointLights, directionalLights })
  };
  if (props.enabled !== void 0) {
    uniforms.enabled = props.enabled ? 1 : 0;
  }
  return uniforms;
}
function getLightSourceUniforms({ ambientLight, pointLights = [], directionalLights = [] }) {
  const lightSourceUniforms = {};
  lightSourceUniforms.ambientLightColor = convertColor(ambientLight);
  let currentLight = 0;
  for (const pointLight of pointLights) {
    lightSourceUniforms.lightType = LIGHT_TYPE.POINT;
    const i4 = currentLight;
    lightSourceUniforms[`lightColor${i4}`] = convertColor(pointLight);
    lightSourceUniforms[`lightPosition${i4}`] = pointLight.position;
    lightSourceUniforms[`lightAttenuation${i4}`] = pointLight.attenuation || [1, 0, 0];
    currentLight++;
  }
  for (const directionalLight of directionalLights) {
    lightSourceUniforms.lightType = LIGHT_TYPE.DIRECTIONAL;
    const i4 = currentLight;
    lightSourceUniforms[`lightColor${i4}`] = convertColor(directionalLight);
    lightSourceUniforms[`lightDirection${i4}`] = directionalLight.direction;
    currentLight++;
  }
  if (currentLight > MAX_LIGHTS) {
    log2.warn("MAX_LIGHTS exceeded")();
  }
  lightSourceUniforms.directionalLightCount = directionalLights.length;
  lightSourceUniforms.pointLightCount = pointLights.length;
  return lightSourceUniforms;
}
function extractLightTypes(lights2) {
  var _a3, _b;
  const lightSources = { pointLights: [], directionalLights: [] };
  for (const light of lights2 || []) {
    switch (light.type) {
      case "ambient":
        lightSources.ambientLight = light;
        break;
      case "directional":
        (_a3 = lightSources.directionalLights) == null ? void 0 : _a3.push(light);
        break;
      case "point":
        (_b = lightSources.pointLights) == null ? void 0 : _b.push(light);
        break;
      default:
    }
  }
  return lightSources;
}
function convertColor(colorDef = {}) {
  const { color = [0, 0, 0], intensity = 1 } = colorDef;
  return color.map((component) => component * intensity / COLOR_FACTOR);
}

// .yarn/__virtual__/@luma.gl-shadertools-virtual-ed2a1ebd80/4/.yarn/berry/cache/@luma.gl-shadertools-npm-9.1.9-81b6398d54-10c0.zip/node_modules/@luma.gl/shadertools/dist/modules/lighting/phong-material/phong-shaders-glsl.js
var PHONG_VS = (
  /* glsl */
  `uniform phongMaterialUniforms {
  uniform float ambient;
  uniform float diffuse;
  uniform float shininess;
  uniform vec3  specularColor;
} material;
`
);
var PHONG_FS = (
  /* glsl */
  `uniform phongMaterialUniforms {
  uniform float ambient;
  uniform float diffuse;
  uniform float shininess;
  uniform vec3  specularColor;
} material;

vec3 lighting_getLightColor(vec3 surfaceColor, vec3 light_direction, vec3 view_direction, vec3 normal_worldspace, vec3 color) {
  vec3 halfway_direction = normalize(light_direction + view_direction);
  float lambertian = dot(light_direction, normal_worldspace);
  float specular = 0.0;
  if (lambertian > 0.0) {
    float specular_angle = max(dot(normal_worldspace, halfway_direction), 0.0);
    specular = pow(specular_angle, material.shininess);
  }
  lambertian = max(lambertian, 0.0);
  return (lambertian * material.diffuse * surfaceColor + specular * material.specularColor) * color;
}

vec3 lighting_getLightColor(vec3 surfaceColor, vec3 cameraPosition, vec3 position_worldspace, vec3 normal_worldspace) {
  vec3 lightColor = surfaceColor;

  if (lighting.enabled == 0) {
    return lightColor;
  }

  vec3 view_direction = normalize(cameraPosition - position_worldspace);
  lightColor = material.ambient * surfaceColor * lighting.ambientColor;

  for (int i = 0; i < lighting.pointLightCount; i++) {
    PointLight pointLight = lighting_getPointLight(i);
    vec3 light_position_worldspace = pointLight.position;
    vec3 light_direction = normalize(light_position_worldspace - position_worldspace);
    float light_attenuation = getPointLightAttenuation(pointLight, distance(light_position_worldspace, position_worldspace));
    lightColor += lighting_getLightColor(surfaceColor, light_direction, view_direction, normal_worldspace, pointLight.color / light_attenuation);
  }

  int totalLights = min(MAX_LIGHTS, lighting.pointLightCount + lighting.directionalLightCount);
  for (int i = lighting.pointLightCount; i < totalLights; i++) {
    DirectionalLight directionalLight = lighting_getDirectionalLight(i);
    lightColor += lighting_getLightColor(surfaceColor, -directionalLight.direction, view_direction, normal_worldspace, directionalLight.color);
  }
  
  return lightColor;
}
`
);

// .yarn/__virtual__/@luma.gl-shadertools-virtual-ed2a1ebd80/4/.yarn/berry/cache/@luma.gl-shadertools-npm-9.1.9-81b6398d54-10c0.zip/node_modules/@luma.gl/shadertools/dist/modules/lighting/phong-material/phong-shaders-wgsl.js
var PHONG_WGSL = (
  /* wgsl */
  `struct phongMaterialUniforms {
  ambient: f32,
  diffuse: f32,
  shininess: f32,
  specularColor: vec3<f32>,
};

@binding(2) @group(0) var<uniform> phongMaterial : phongMaterialUniforms;

fn lighting_getLightColor(surfaceColor: vec3<f32>, light_direction: vec3<f32>, view_direction: vec3<f32>, normal_worldspace: vec3<f32>, color: vec3<f32>) -> vec3<f32> {
  let halfway_direction: vec3<f32> = normalize(light_direction + view_direction);
  var lambertian: f32 = dot(light_direction, normal_worldspace);
  var specular: f32 = 0.0;
  if (lambertian > 0.0) {
    let specular_angle = max(dot(normal_worldspace, halfway_direction), 0.0);
    specular = pow(specular_angle, phongMaterial.shininess);
  }
  lambertian = max(lambertian, 0.0);
  return (lambertian * phongMaterial.diffuse * surfaceColor + specular * phongMaterial.specularColor) * color;
}

fn lighting_getLightColor2(surfaceColor: vec3<f32>, cameraPosition: vec3<f32>, position_worldspace: vec3<f32>, normal_worldspace: vec3<f32>) -> vec3<f32> {
  var lightColor: vec3<f32> = surfaceColor;

  if (lighting.enabled == 0) {
    return lightColor;
  }

  let view_direction: vec3<f32> = normalize(cameraPosition - position_worldspace);
  lightColor = phongMaterial.ambient * surfaceColor * lighting.ambientColor;

  if (lighting.lightType == 0) {
    let pointLight: PointLight  = lighting_getPointLight(0);
    let light_position_worldspace: vec3<f32> = pointLight.position;
    let light_direction: vec3<f32> = normalize(light_position_worldspace - position_worldspace);
    lightColor += lighting_getLightColor(surfaceColor, light_direction, view_direction, normal_worldspace, pointLight.color);
  } else if (lighting.lightType == 1) {
    var directionalLight: DirectionalLight = lighting_getDirectionalLight(0);
    lightColor += lighting_getLightColor(surfaceColor, -directionalLight.direction, view_direction, normal_worldspace, directionalLight.color);
  }
  
  return lightColor;
  /*
  for (int i = 0; i < MAX_LIGHTS; i++) {
    if (i >= lighting.pointLightCount) {
      break;
    }
    PointLight pointLight = lighting.pointLight[i];
    vec3 light_position_worldspace = pointLight.position;
    vec3 light_direction = normalize(light_position_worldspace - position_worldspace);
    lightColor += lighting_getLightColor(surfaceColor, light_direction, view_direction, normal_worldspace, pointLight.color);
  }

  for (int i = 0; i < MAX_LIGHTS; i++) {
    if (i >= lighting.directionalLightCount) {
      break;
    }
    DirectionalLight directionalLight = lighting.directionalLight[i];
    lightColor += lighting_getLightColor(surfaceColor, -directionalLight.direction, view_direction, normal_worldspace, directionalLight.color);
  }
  */
}

fn lighting_getSpecularLightColor(cameraPosition: vec3<f32>, position_worldspace: vec3<f32>, normal_worldspace: vec3<f32>) -> vec3<f32>{
  var lightColor = vec3<f32>(0, 0, 0);
  let surfaceColor = vec3<f32>(0, 0, 0);

  if (lighting.enabled == 0) {
    let view_direction = normalize(cameraPosition - position_worldspace);

    switch (lighting.lightType) {
      case 0, default: {
        let pointLight: PointLight = lighting_getPointLight(0);
        let light_position_worldspace: vec3<f32> = pointLight.position;
        let light_direction: vec3<f32> = normalize(light_position_worldspace - position_worldspace);
        lightColor += lighting_getLightColor(surfaceColor, light_direction, view_direction, normal_worldspace, pointLight.color);
      }
      case 1: {
        let directionalLight: DirectionalLight = lighting_getDirectionalLight(0);
        lightColor += lighting_getLightColor(surfaceColor, -directionalLight.direction, view_direction, normal_worldspace, directionalLight.color);
      }
    }
  }
  return lightColor;
}
`
);

// .yarn/__virtual__/@luma.gl-shadertools-virtual-ed2a1ebd80/4/.yarn/berry/cache/@luma.gl-shadertools-npm-9.1.9-81b6398d54-10c0.zip/node_modules/@luma.gl/shadertools/dist/modules/lighting/gouraud-material/gouraud-material.js
var gouraudMaterial = {
  props: {},
  name: "gouraudMaterial",
  // Note these are switched between phong and gouraud
  vs: PHONG_FS.replace("phongMaterial", "gouraudMaterial"),
  fs: PHONG_VS.replace("phongMaterial", "gouraudMaterial"),
  source: PHONG_WGSL.replaceAll("phongMaterial", "gouraudMaterial"),
  defines: {
    LIGHTING_VERTEX: 1
  },
  dependencies: [lighting],
  uniformTypes: {
    ambient: "f32",
    diffuse: "f32",
    shininess: "f32",
    specularColor: "vec3<f32>"
  },
  defaultUniforms: {
    ambient: 0.35,
    diffuse: 0.6,
    shininess: 32,
    specularColor: [0.15, 0.15, 0.15]
  },
  getUniforms(props) {
    const uniforms = { ...props };
    if (uniforms.specularColor) {
      uniforms.specularColor = uniforms.specularColor.map((x3) => x3 / 255);
    }
    return { ...gouraudMaterial.defaultUniforms, ...uniforms };
  }
};

// .yarn/__virtual__/@luma.gl-shadertools-virtual-ed2a1ebd80/4/.yarn/berry/cache/@luma.gl-shadertools-npm-9.1.9-81b6398d54-10c0.zip/node_modules/@luma.gl/shadertools/dist/modules-webgl1/project/project.js
var common = (
  /* glsl */
  `varying vec4 project_vPositionWorld;
varying vec3 project_vNormalWorld;

vec4 project_getPosition_World() {
  return project_vPositionWorld;
}

vec3 project_getNormal_World() {
  return project_vNormalWorld;
}
`
);
var vs3 = `${common}

// Unprefixed uniforms
uniform mat4 modelMatrix;
uniform mat4 viewMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewProjectionMatrix;
uniform vec3 cameraPositionWorld;

struct World {
  vec3 position;
  vec3 normal;
};

World world;

void project_setPosition(vec4 position) {
  project_vPositionWorld = position;
}

void project_setNormal(vec3 normal) {
  project_vNormalWorld = normal;
}

void project_setPositionAndNormal_World(vec3 position, vec3 normal) {
  world.position = position;
  world.normal = normal;
}

void project_setPositionAndNormal_Model(vec3 position, vec3 normal) {
  world.position = (modelMatrix * vec4(position, 1.)).xyz;
  world.normal = mat3(modelMatrix) * normal;
}

vec4 project_model_to_clipspace(vec4 position) {
  return viewProjectionMatrix * modelMatrix * position;
}

vec4 project_model_to_clipspace(vec3 position) {
  return viewProjectionMatrix * modelMatrix * vec4(position, 1.);
}

vec4 project_world_to_clipspace(vec3 position) {
  return viewProjectionMatrix * vec4(position, 1.);
}

vec4 project_view_to_clipspace(vec3 position) {
  return projectionMatrix * vec4(position, 1.);
}

vec4 project_to_clipspace(vec3 position) {
  return viewProjectionMatrix * vec4(position, 1.);
}
`;
var fs3 = `
${common}`;

// .yarn/__virtual__/@luma.gl-shadertools-virtual-ed2a1ebd80/4/.yarn/berry/cache/@luma.gl-shadertools-npm-9.1.9-81b6398d54-10c0.zip/node_modules/@luma.gl/shadertools/dist/modules-webgl1/lighting/dirlight/dirlight.js
var DEFAULT_MODULE_OPTIONS = {
  lightDirection: new Float32Array([1, 1, 2])
};

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/shaderlib/misc/layer-uniforms.js
var uniformBlock = `uniform layerUniforms {
  uniform float opacity;
} layer;
`;
var layerUniforms = {
  name: "layer",
  vs: uniformBlock,
  fs: uniformBlock,
  getUniforms: (props) => {
    return {
      // apply gamma to opacity to make it visually "linear"
      // TODO - v10: use raw opacity?
      opacity: Math.pow(props.opacity, 1 / 2.2)
    };
  },
  uniformTypes: {
    opacity: "f32"
  }
};

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/shaderlib/misc/geometry.js
var source = (
  /* wgsl */
  `const SMOOTH_EDGE_RADIUS: f32 = 0.5;

struct VertexGeometry {
  position: vec4<f32>,
  worldPosition: vec3<f32>,
  worldPositionAlt: vec3<f32>,
  normal: vec3<f32>,
  uv: vec2<f32>,
  pickingColor: vec3<f32>,
};

var<private> geometry_: VertexGeometry = VertexGeometry(
  vec4<f32>(0.0, 0.0, 1.0, 0.0),
  vec3<f32>(0.0, 0.0, 0.0),
  vec3<f32>(0.0, 0.0, 0.0),
  vec3<f32>(0.0, 0.0, 0.0),
  vec2<f32>(0.0, 0.0),
  vec3<f32>(0.0, 0.0, 0.0)
);

struct FragmentGeometry {
  uv: vec2<f32>,
};

var<private> fragmentGeometry: FragmentGeometry;

fn smoothedge(edge: f32, x: f32) -> f32 {
  return smoothstep(edge - SMOOTH_EDGE_RADIUS, edge + SMOOTH_EDGE_RADIUS, x);
}
`
);
var defines = "#define SMOOTH_EDGE_RADIUS 0.5";
var vs5 = (
  /* glsl */
  `${defines}

struct VertexGeometry {
  vec4 position;
  vec3 worldPosition;
  vec3 worldPositionAlt;
  vec3 normal;
  vec2 uv;
  vec3 pickingColor;
} geometry = VertexGeometry(
  vec4(0.0, 0.0, 1.0, 0.0),
  vec3(0.0),
  vec3(0.0),
  vec3(0.0),
  vec2(0.0),
  vec3(0.0)
);
`
);
var fs5 = (
  /* glsl */
  `${defines}

struct FragmentGeometry {
  vec2 uv;
} geometry;

float smoothedge(float edge, float x) {
  return smoothstep(edge - SMOOTH_EDGE_RADIUS, edge + SMOOTH_EDGE_RADIUS, x);
}
`
);
var geometry_default = {
  name: "geometry",
  source,
  vs: vs5,
  fs: fs5
};

// ../../../.yarn/berry/cache/mjolnir.js-npm-3.0.0-56bd5d98bf-10c0.zip/node_modules/mjolnir.js/dist/hammerjs/input/input-consts.js
var COMPUTE_INTERVAL = 25;
var InputEvent;
(function(InputEvent2) {
  InputEvent2[InputEvent2["Start"] = 1] = "Start";
  InputEvent2[InputEvent2["Move"] = 2] = "Move";
  InputEvent2[InputEvent2["End"] = 4] = "End";
  InputEvent2[InputEvent2["Cancel"] = 8] = "Cancel";
})(InputEvent || (InputEvent = {}));
var InputDirection;
(function(InputDirection2) {
  InputDirection2[InputDirection2["None"] = 0] = "None";
  InputDirection2[InputDirection2["Left"] = 1] = "Left";
  InputDirection2[InputDirection2["Right"] = 2] = "Right";
  InputDirection2[InputDirection2["Up"] = 4] = "Up";
  InputDirection2[InputDirection2["Down"] = 8] = "Down";
  InputDirection2[InputDirection2["Horizontal"] = 3] = "Horizontal";
  InputDirection2[InputDirection2["Vertical"] = 12] = "Vertical";
  InputDirection2[InputDirection2["All"] = 15] = "All";
})(InputDirection || (InputDirection = {}));

// ../../../.yarn/berry/cache/mjolnir.js-npm-3.0.0-56bd5d98bf-10c0.zip/node_modules/mjolnir.js/dist/hammerjs/recognizer/recognizer-state.js
var RecognizerState;
(function(RecognizerState2) {
  RecognizerState2[RecognizerState2["Possible"] = 1] = "Possible";
  RecognizerState2[RecognizerState2["Began"] = 2] = "Began";
  RecognizerState2[RecognizerState2["Changed"] = 4] = "Changed";
  RecognizerState2[RecognizerState2["Ended"] = 8] = "Ended";
  RecognizerState2[RecognizerState2["Recognized"] = 8] = "Recognized";
  RecognizerState2[RecognizerState2["Cancelled"] = 16] = "Cancelled";
  RecognizerState2[RecognizerState2["Failed"] = 32] = "Failed";
})(RecognizerState || (RecognizerState = {}));

// ../../../.yarn/berry/cache/mjolnir.js-npm-3.0.0-56bd5d98bf-10c0.zip/node_modules/mjolnir.js/dist/hammerjs/touchaction/touchaction-Consts.js
var TOUCH_ACTION_COMPUTE = "compute";
var TOUCH_ACTION_AUTO = "auto";
var TOUCH_ACTION_MANIPULATION = "manipulation";
var TOUCH_ACTION_NONE = "none";
var TOUCH_ACTION_PAN_X = "pan-x";
var TOUCH_ACTION_PAN_Y = "pan-y";

// ../../../.yarn/berry/cache/mjolnir.js-npm-3.0.0-56bd5d98bf-10c0.zip/node_modules/mjolnir.js/dist/hammerjs/touchaction/clean-touch-actions.js
function cleanTouchActions(actions) {
  if (actions.includes(TOUCH_ACTION_NONE)) {
    return TOUCH_ACTION_NONE;
  }
  const hasPanX = actions.includes(TOUCH_ACTION_PAN_X);
  const hasPanY = actions.includes(TOUCH_ACTION_PAN_Y);
  if (hasPanX && hasPanY) {
    return TOUCH_ACTION_NONE;
  }
  if (hasPanX || hasPanY) {
    return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;
  }
  if (actions.includes(TOUCH_ACTION_MANIPULATION)) {
    return TOUCH_ACTION_MANIPULATION;
  }
  return TOUCH_ACTION_AUTO;
}

// ../../../.yarn/berry/cache/mjolnir.js-npm-3.0.0-56bd5d98bf-10c0.zip/node_modules/mjolnir.js/dist/hammerjs/touchaction/touchaction.js
var TouchAction = class {
  constructor(manager, value) {
    this.actions = "";
    this.manager = manager;
    this.set(value);
  }
  /**
   * set the touchAction value on the element or enable the polyfill
   */
  set(value) {
    if (value === TOUCH_ACTION_COMPUTE) {
      value = this.compute();
    }
    if (this.manager.element) {
      this.manager.element.style.touchAction = value;
      this.actions = value;
    }
  }
  /**
   * just re-set the touchAction value
   */
  update() {
    this.set(this.manager.options.touchAction);
  }
  /**
   * compute the value for the touchAction property based on the recognizer's settings
   */
  compute() {
    let actions = [];
    for (const recognizer of this.manager.recognizers) {
      if (recognizer.options.enable) {
        actions = actions.concat(recognizer.getTouchAction());
      }
    }
    return cleanTouchActions(actions.join(" "));
  }
};

// ../../../.yarn/berry/cache/mjolnir.js-npm-3.0.0-56bd5d98bf-10c0.zip/node_modules/mjolnir.js/dist/hammerjs/utils/split-str.js
function splitStr(str7) {
  return str7.trim().split(/\s+/g);
}

// ../../../.yarn/berry/cache/mjolnir.js-npm-3.0.0-56bd5d98bf-10c0.zip/node_modules/mjolnir.js/dist/hammerjs/utils/event-listeners.js
function addEventListeners(target2, types, handler) {
  if (!target2) {
    return;
  }
  for (const type of splitStr(types)) {
    target2.addEventListener(type, handler, false);
  }
}
function removeEventListeners(target2, types, handler) {
  if (!target2) {
    return;
  }
  for (const type of splitStr(types)) {
    target2.removeEventListener(type, handler, false);
  }
}

// ../../../.yarn/berry/cache/mjolnir.js-npm-3.0.0-56bd5d98bf-10c0.zip/node_modules/mjolnir.js/dist/hammerjs/utils/get-window-for-element.js
function getWindowForElement(element) {
  const doc = element.ownerDocument || element;
  return doc.defaultView;
}

// ../../../.yarn/berry/cache/mjolnir.js-npm-3.0.0-56bd5d98bf-10c0.zip/node_modules/mjolnir.js/dist/hammerjs/utils/has-parent.js
function hasParent(node, parent) {
  let ancestor = node;
  while (ancestor) {
    if (ancestor === parent) {
      return true;
    }
    ancestor = ancestor.parentNode;
  }
  return false;
}

// ../../../.yarn/berry/cache/mjolnir.js-npm-3.0.0-56bd5d98bf-10c0.zip/node_modules/mjolnir.js/dist/hammerjs/input/get-center.js
function getCenter(pointers) {
  const pointersLength = pointers.length;
  if (pointersLength === 1) {
    return {
      x: Math.round(pointers[0].clientX),
      y: Math.round(pointers[0].clientY)
    };
  }
  let x3 = 0;
  let y3 = 0;
  let i4 = 0;
  while (i4 < pointersLength) {
    x3 += pointers[i4].clientX;
    y3 += pointers[i4].clientY;
    i4++;
  }
  return {
    x: Math.round(x3 / pointersLength),
    y: Math.round(y3 / pointersLength)
  };
}

// ../../../.yarn/berry/cache/mjolnir.js-npm-3.0.0-56bd5d98bf-10c0.zip/node_modules/mjolnir.js/dist/hammerjs/input/simple-clone-input-data.js
function simpleCloneInputData(input) {
  const pointers = [];
  let i4 = 0;
  while (i4 < input.pointers.length) {
    pointers[i4] = {
      clientX: Math.round(input.pointers[i4].clientX),
      clientY: Math.round(input.pointers[i4].clientY)
    };
    i4++;
  }
  return {
    timeStamp: Date.now(),
    pointers,
    center: getCenter(pointers),
    deltaX: input.deltaX,
    deltaY: input.deltaY
  };
}

// ../../../.yarn/berry/cache/mjolnir.js-npm-3.0.0-56bd5d98bf-10c0.zip/node_modules/mjolnir.js/dist/hammerjs/input/get-distance.js
function getPointDistance(p1, p22) {
  const x3 = p22.x - p1.x;
  const y3 = p22.y - p1.y;
  return Math.sqrt(x3 * x3 + y3 * y3);
}
function getEventDistance(p1, p22) {
  const x3 = p22.clientX - p1.clientX;
  const y3 = p22.clientY - p1.clientY;
  return Math.sqrt(x3 * x3 + y3 * y3);
}

// ../../../.yarn/berry/cache/mjolnir.js-npm-3.0.0-56bd5d98bf-10c0.zip/node_modules/mjolnir.js/dist/hammerjs/input/get-angle.js
function getPointAngle(p1, p22) {
  const x3 = p22.x - p1.x;
  const y3 = p22.y - p1.y;
  return Math.atan2(y3, x3) * 180 / Math.PI;
}
function getEventAngle(p1, p22) {
  const x3 = p22.clientX - p1.clientX;
  const y3 = p22.clientY - p1.clientY;
  return Math.atan2(y3, x3) * 180 / Math.PI;
}

// ../../../.yarn/berry/cache/mjolnir.js-npm-3.0.0-56bd5d98bf-10c0.zip/node_modules/mjolnir.js/dist/hammerjs/input/get-direction.js
function getDirection(dx, dy) {
  if (dx === dy) {
    return InputDirection.None;
  }
  if (Math.abs(dx) >= Math.abs(dy)) {
    return dx < 0 ? InputDirection.Left : InputDirection.Right;
  }
  return dy < 0 ? InputDirection.Up : InputDirection.Down;
}

// ../../../.yarn/berry/cache/mjolnir.js-npm-3.0.0-56bd5d98bf-10c0.zip/node_modules/mjolnir.js/dist/hammerjs/input/get-delta-xy.js
function computeDeltaXY(session, input) {
  const center = input.center;
  let offset = session.offsetDelta;
  let prevDelta = session.prevDelta;
  const prevInput = session.prevInput;
  if (input.eventType === InputEvent.Start || (prevInput == null ? void 0 : prevInput.eventType) === InputEvent.End) {
    prevDelta = session.prevDelta = {
      x: (prevInput == null ? void 0 : prevInput.deltaX) || 0,
      y: (prevInput == null ? void 0 : prevInput.deltaY) || 0
    };
    offset = session.offsetDelta = {
      x: center.x,
      y: center.y
    };
  }
  return {
    deltaX: prevDelta.x + (center.x - offset.x),
    deltaY: prevDelta.y + (center.y - offset.y)
  };
}

// ../../../.yarn/berry/cache/mjolnir.js-npm-3.0.0-56bd5d98bf-10c0.zip/node_modules/mjolnir.js/dist/hammerjs/input/get-velocity.js
function getVelocity(deltaTime, x3, y3) {
  return {
    x: x3 / deltaTime || 0,
    y: y3 / deltaTime || 0
  };
}

// ../../../.yarn/berry/cache/mjolnir.js-npm-3.0.0-56bd5d98bf-10c0.zip/node_modules/mjolnir.js/dist/hammerjs/input/get-scale.js
function getScale(start, end) {
  return getEventDistance(end[0], end[1]) / getEventDistance(start[0], start[1]);
}

// ../../../.yarn/berry/cache/mjolnir.js-npm-3.0.0-56bd5d98bf-10c0.zip/node_modules/mjolnir.js/dist/hammerjs/input/get-rotation.js
function getRotation2(start, end) {
  return getEventAngle(end[1], end[0]) - getEventAngle(start[1], start[0]);
}

// ../../../.yarn/berry/cache/mjolnir.js-npm-3.0.0-56bd5d98bf-10c0.zip/node_modules/mjolnir.js/dist/hammerjs/input/compute-interval-input-data.js
function computeIntervalInputData(session, input) {
  const last = session.lastInterval || input;
  const deltaTime = input.timeStamp - last.timeStamp;
  let velocity;
  let velocityX;
  let velocityY;
  let direction;
  if (input.eventType !== InputEvent.Cancel && (deltaTime > COMPUTE_INTERVAL || last.velocity === void 0)) {
    const deltaX = input.deltaX - last.deltaX;
    const deltaY = input.deltaY - last.deltaY;
    const v3 = getVelocity(deltaTime, deltaX, deltaY);
    velocityX = v3.x;
    velocityY = v3.y;
    velocity = Math.abs(v3.x) > Math.abs(v3.y) ? v3.x : v3.y;
    direction = getDirection(deltaX, deltaY);
    session.lastInterval = input;
  } else {
    velocity = last.velocity;
    velocityX = last.velocityX;
    velocityY = last.velocityY;
    direction = last.direction;
  }
  input.velocity = velocity;
  input.velocityX = velocityX;
  input.velocityY = velocityY;
  input.direction = direction;
}

// ../../../.yarn/berry/cache/mjolnir.js-npm-3.0.0-56bd5d98bf-10c0.zip/node_modules/mjolnir.js/dist/hammerjs/input/compute-input-data.js
function computeInputData(manager, input) {
  const { session } = manager;
  const { pointers } = input;
  const { length: pointersLength } = pointers;
  if (!session.firstInput) {
    session.firstInput = simpleCloneInputData(input);
  }
  if (pointersLength > 1 && !session.firstMultiple) {
    session.firstMultiple = simpleCloneInputData(input);
  } else if (pointersLength === 1) {
    session.firstMultiple = false;
  }
  const { firstInput, firstMultiple } = session;
  const offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;
  const center = input.center = getCenter(pointers);
  input.timeStamp = Date.now();
  input.deltaTime = input.timeStamp - firstInput.timeStamp;
  input.angle = getPointAngle(offsetCenter, center);
  input.distance = getPointDistance(offsetCenter, center);
  const { deltaX, deltaY } = computeDeltaXY(session, input);
  input.deltaX = deltaX;
  input.deltaY = deltaY;
  input.offsetDirection = getDirection(input.deltaX, input.deltaY);
  const overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);
  input.overallVelocityX = overallVelocity.x;
  input.overallVelocityY = overallVelocity.y;
  input.overallVelocity = Math.abs(overallVelocity.x) > Math.abs(overallVelocity.y) ? overallVelocity.x : overallVelocity.y;
  input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;
  input.rotation = firstMultiple ? getRotation2(firstMultiple.pointers, pointers) : 0;
  input.maxPointers = !session.prevInput ? input.pointers.length : input.pointers.length > session.prevInput.maxPointers ? input.pointers.length : session.prevInput.maxPointers;
  let target2 = manager.element;
  if (hasParent(input.srcEvent.target, target2)) {
    target2 = input.srcEvent.target;
  }
  input.target = target2;
  computeIntervalInputData(session, input);
  return input;
}

// ../../../.yarn/berry/cache/mjolnir.js-npm-3.0.0-56bd5d98bf-10c0.zip/node_modules/mjolnir.js/dist/hammerjs/input/input-handler.js
function inputHandler(manager, eventType, input) {
  const pointersLen = input.pointers.length;
  const changedPointersLen = input.changedPointers.length;
  const isFirst = eventType & InputEvent.Start && pointersLen - changedPointersLen === 0;
  const isFinal = eventType & (InputEvent.End | InputEvent.Cancel) && pointersLen - changedPointersLen === 0;
  input.isFirst = Boolean(isFirst);
  input.isFinal = Boolean(isFinal);
  if (isFirst) {
    manager.session = {};
  }
  input.eventType = eventType;
  const processedInput = computeInputData(manager, input);
  manager.emit("hammer.input", processedInput);
  manager.recognize(processedInput);
  manager.session.prevInput = processedInput;
}

// ../../../.yarn/berry/cache/mjolnir.js-npm-3.0.0-56bd5d98bf-10c0.zip/node_modules/mjolnir.js/dist/hammerjs/input/input.js
var Input = class {
  constructor(manager) {
    this.evEl = "";
    this.evWin = "";
    this.evTarget = "";
    this.domHandler = (ev) => {
      if (this.manager.options.enable) {
        this.handler(ev);
      }
    };
    this.manager = manager;
    this.element = manager.element;
    this.target = manager.options.inputTarget || manager.element;
  }
  callback(eventType, input) {
    inputHandler(this.manager, eventType, input);
  }
  // eslint-disable @typescript-eslint/unbound-method
  /**
   * bind the events
   */
  init() {
    addEventListeners(this.element, this.evEl, this.domHandler);
    addEventListeners(this.target, this.evTarget, this.domHandler);
    addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
  }
  /**
   * unbind the events
   */
  destroy() {
    removeEventListeners(this.element, this.evEl, this.domHandler);
    removeEventListeners(this.target, this.evTarget, this.domHandler);
    removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);
  }
};

// ../../../.yarn/berry/cache/mjolnir.js-npm-3.0.0-56bd5d98bf-10c0.zip/node_modules/mjolnir.js/dist/hammerjs/inputs/pointerevent.js
var POINTER_INPUT_MAP = {
  pointerdown: InputEvent.Start,
  pointermove: InputEvent.Move,
  pointerup: InputEvent.End,
  pointercancel: InputEvent.Cancel,
  pointerout: InputEvent.Cancel
};
var POINTER_ELEMENT_EVENTS = "pointerdown";
var POINTER_WINDOW_EVENTS = "pointermove pointerup pointercancel";
var PointerEventInput = class extends Input {
  constructor(manager) {
    super(manager);
    this.evEl = POINTER_ELEMENT_EVENTS;
    this.evWin = POINTER_WINDOW_EVENTS;
    this.store = this.manager.session.pointerEvents = [];
    this.init();
  }
  /**
   * handle mouse events
   */
  handler(ev) {
    const { store } = this;
    let removePointer = false;
    const eventType = POINTER_INPUT_MAP[ev.type];
    const pointerType = ev.pointerType;
    const isTouch = pointerType === "touch";
    let storeIndex = store.findIndex((e4) => e4.pointerId === ev.pointerId);
    if (eventType & InputEvent.Start && (ev.buttons || isTouch)) {
      if (storeIndex < 0) {
        store.push(ev);
        storeIndex = store.length - 1;
      }
    } else if (eventType & (InputEvent.End | InputEvent.Cancel)) {
      removePointer = true;
    }
    if (storeIndex < 0) {
      return;
    }
    store[storeIndex] = ev;
    this.callback(eventType, {
      pointers: store,
      changedPointers: [ev],
      eventType,
      pointerType,
      srcEvent: ev
    });
    if (removePointer) {
      store.splice(storeIndex, 1);
    }
  }
};

// ../../../.yarn/berry/cache/mjolnir.js-npm-3.0.0-56bd5d98bf-10c0.zip/node_modules/mjolnir.js/dist/hammerjs/utils/prefixed.js
var VENDOR_PREFIXES = ["", "webkit", "Moz", "MS", "ms", "o"];
function prefixed(obj, property) {
  const camelProp = property[0].toUpperCase() + property.slice(1);
  for (const prefix of VENDOR_PREFIXES) {
    const prop = prefix ? prefix + camelProp : property;
    if (prop in obj) {
      return prop;
    }
  }
  return void 0;
}

// ../../../.yarn/berry/cache/mjolnir.js-npm-3.0.0-56bd5d98bf-10c0.zip/node_modules/mjolnir.js/dist/hammerjs/manager.js
var STOP = 1;
var FORCED_STOP = 2;
var defaultOptions = {
  touchAction: "compute",
  enable: true,
  inputTarget: null,
  cssProps: {
    /**
     * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.
     */
    userSelect: "none",
    /**
     * (Webkit) Disable default dragging behavior
     */
    // @ts-ignore
    userDrag: "none",
    /**
     * (iOS only) Disables the default callout shown when you touch and hold a touch target.
     * When you touch and hold a touch target such as a link, Safari displays
     * a callout containing information about the link. This property allows you to disable that callout.
     */
    // @ts-ignore
    touchCallout: "none",
    /**
     * (iOS only) Sets the color of the highlight that appears over a link while it's being tapped.
     */
    // @ts-ignore
    tapHighlightColor: "rgba(0,0,0,0)"
  }
};
var Manager = class {
  constructor(element, options) {
    this.options = {
      ...defaultOptions,
      ...options,
      cssProps: { ...defaultOptions.cssProps, ...options.cssProps },
      inputTarget: options.inputTarget || element
    };
    this.handlers = {};
    this.session = {};
    this.recognizers = [];
    this.oldCssProps = {};
    this.element = element;
    this.input = new PointerEventInput(this);
    this.touchAction = new TouchAction(this, this.options.touchAction);
    this.toggleCssProps(true);
  }
  /**
   * set options
   */
  set(options) {
    Object.assign(this.options, options);
    if (options.touchAction) {
      this.touchAction.update();
    }
    if (options.inputTarget) {
      this.input.destroy();
      this.input.target = options.inputTarget;
      this.input.init();
    }
    return this;
  }
  /**
   * stop recognizing for this session.
   * This session will be discarded, when a new [input]start event is fired.
   * When forced, the recognizer cycle is stopped immediately.
   */
  stop(force) {
    this.session.stopped = force ? FORCED_STOP : STOP;
  }
  /**
   * run the recognizers!
   * called by the inputHandler function on every movement of the pointers (touches)
   * it walks through all the recognizers and tries to detect the gesture that is being made
   */
  recognize(inputData) {
    const { session } = this;
    if (session.stopped) {
      return;
    }
    if (this.session.prevented) {
      inputData.srcEvent.preventDefault();
    }
    let recognizer;
    const { recognizers } = this;
    let { curRecognizer } = session;
    if (!curRecognizer || curRecognizer && curRecognizer.state & RecognizerState.Recognized) {
      curRecognizer = session.curRecognizer = null;
    }
    let i4 = 0;
    while (i4 < recognizers.length) {
      recognizer = recognizers[i4];
      if (session.stopped !== FORCED_STOP && // 1
      (!curRecognizer || recognizer === curRecognizer || // 2
      recognizer.canRecognizeWith(curRecognizer))) {
        recognizer.recognize(inputData);
      } else {
        recognizer.reset();
      }
      if (!curRecognizer && recognizer.state & (RecognizerState.Began | RecognizerState.Changed | RecognizerState.Ended)) {
        curRecognizer = session.curRecognizer = recognizer;
      }
      i4++;
    }
  }
  /**
   * get a recognizer by its event name.
   */
  get(recognizerName) {
    const { recognizers } = this;
    for (let i4 = 0; i4 < recognizers.length; i4++) {
      if (recognizers[i4].options.event === recognizerName) {
        return recognizers[i4];
      }
    }
    return null;
  }
  /**
   * add a recognizer to the manager
   * existing recognizers with the same event name will be removed
   */
  add(recognizer) {
    if (Array.isArray(recognizer)) {
      for (const item of recognizer) {
        this.add(item);
      }
      return this;
    }
    const existing = this.get(recognizer.options.event);
    if (existing) {
      this.remove(existing);
    }
    this.recognizers.push(recognizer);
    recognizer.manager = this;
    this.touchAction.update();
    return recognizer;
  }
  /**
   * remove a recognizer by name or instance
   */
  remove(recognizerOrName) {
    if (Array.isArray(recognizerOrName)) {
      for (const item of recognizerOrName) {
        this.remove(item);
      }
      return this;
    }
    const recognizer = typeof recognizerOrName === "string" ? this.get(recognizerOrName) : recognizerOrName;
    if (recognizer) {
      const { recognizers } = this;
      const index = recognizers.indexOf(recognizer);
      if (index !== -1) {
        recognizers.splice(index, 1);
        this.touchAction.update();
      }
    }
    return this;
  }
  /**
   * bind event
   */
  on(events, handler) {
    if (!events || !handler) {
      return;
    }
    const { handlers } = this;
    for (const event of splitStr(events)) {
      handlers[event] = handlers[event] || [];
      handlers[event].push(handler);
    }
  }
  /**
   * unbind event, leave hander blank to remove all handlers
   */
  off(events, handler) {
    if (!events) {
      return;
    }
    const { handlers } = this;
    for (const event of splitStr(events)) {
      if (!handler) {
        delete handlers[event];
      } else if (handlers[event]) {
        handlers[event].splice(handlers[event].indexOf(handler), 1);
      }
    }
  }
  /**
   * emit event to the listeners
   */
  emit(event, data) {
    const handlers = this.handlers[event] && this.handlers[event].slice();
    if (!handlers || !handlers.length) {
      return;
    }
    const evt = data;
    evt.type = event;
    evt.preventDefault = function() {
      data.srcEvent.preventDefault();
    };
    let i4 = 0;
    while (i4 < handlers.length) {
      handlers[i4](evt);
      i4++;
    }
  }
  /**
   * destroy the manager and unbinds all events
   * it doesn't unbind dom events, that is the user own responsibility
   */
  destroy() {
    this.toggleCssProps(false);
    this.handlers = {};
    this.session = {};
    this.input.destroy();
    this.element = null;
  }
  /**
   * add/remove the css properties as defined in manager.options.cssProps
   */
  toggleCssProps(add8) {
    const { element } = this;
    if (!element) {
      return;
    }
    for (const [name2, value] of Object.entries(this.options.cssProps)) {
      const prop = prefixed(element.style, name2);
      if (add8) {
        this.oldCssProps[prop] = element.style[prop];
        element.style[prop] = value;
      } else {
        element.style[prop] = this.oldCssProps[prop] || "";
      }
    }
    if (!add8) {
      this.oldCssProps = {};
    }
  }
};

// ../../../.yarn/berry/cache/mjolnir.js-npm-3.0.0-56bd5d98bf-10c0.zip/node_modules/mjolnir.js/dist/hammerjs/utils/unique-id.js
var _uniqueId = 1;
function uniqueId() {
  return _uniqueId++;
}

// ../../../.yarn/berry/cache/mjolnir.js-npm-3.0.0-56bd5d98bf-10c0.zip/node_modules/mjolnir.js/dist/hammerjs/recognizer/state-str.js
function stateStr(state) {
  if (state & RecognizerState.Cancelled) {
    return "cancel";
  } else if (state & RecognizerState.Ended) {
    return "end";
  } else if (state & RecognizerState.Changed) {
    return "move";
  } else if (state & RecognizerState.Began) {
    return "start";
  }
  return "";
}

// ../../../.yarn/berry/cache/mjolnir.js-npm-3.0.0-56bd5d98bf-10c0.zip/node_modules/mjolnir.js/dist/hammerjs/recognizer/recognizer.js
var Recognizer = class {
  constructor(options) {
    this.options = options;
    this.id = uniqueId();
    this.state = RecognizerState.Possible;
    this.simultaneous = {};
    this.requireFail = [];
  }
  /**
   * set options
   */
  set(options) {
    Object.assign(this.options, options);
    this.manager.touchAction.update();
    return this;
  }
  /**
   * recognize simultaneous with an other recognizer.
   */
  recognizeWith(recognizerOrName) {
    if (Array.isArray(recognizerOrName)) {
      for (const item of recognizerOrName) {
        this.recognizeWith(item);
      }
      return this;
    }
    let otherRecognizer;
    if (typeof recognizerOrName === "string") {
      otherRecognizer = this.manager.get(recognizerOrName);
      if (!otherRecognizer) {
        throw new Error(`Cannot find recognizer ${recognizerOrName}`);
      }
    } else {
      otherRecognizer = recognizerOrName;
    }
    const { simultaneous } = this;
    if (!simultaneous[otherRecognizer.id]) {
      simultaneous[otherRecognizer.id] = otherRecognizer;
      otherRecognizer.recognizeWith(this);
    }
    return this;
  }
  /**
   * drop the simultaneous link. it doesnt remove the link on the other recognizer.
   */
  dropRecognizeWith(recognizerOrName) {
    if (Array.isArray(recognizerOrName)) {
      for (const item of recognizerOrName) {
        this.dropRecognizeWith(item);
      }
      return this;
    }
    let otherRecognizer;
    if (typeof recognizerOrName === "string") {
      otherRecognizer = this.manager.get(recognizerOrName);
    } else {
      otherRecognizer = recognizerOrName;
    }
    if (otherRecognizer) {
      delete this.simultaneous[otherRecognizer.id];
    }
    return this;
  }
  /**
   * recognizer can only run when an other is failing
   */
  requireFailure(recognizerOrName) {
    if (Array.isArray(recognizerOrName)) {
      for (const item of recognizerOrName) {
        this.requireFailure(item);
      }
      return this;
    }
    let otherRecognizer;
    if (typeof recognizerOrName === "string") {
      otherRecognizer = this.manager.get(recognizerOrName);
      if (!otherRecognizer) {
        throw new Error(`Cannot find recognizer ${recognizerOrName}`);
      }
    } else {
      otherRecognizer = recognizerOrName;
    }
    const { requireFail } = this;
    if (requireFail.indexOf(otherRecognizer) === -1) {
      requireFail.push(otherRecognizer);
      otherRecognizer.requireFailure(this);
    }
    return this;
  }
  /**
   * drop the requireFailure link. it does not remove the link on the other recognizer.
   */
  dropRequireFailure(recognizerOrName) {
    if (Array.isArray(recognizerOrName)) {
      for (const item of recognizerOrName) {
        this.dropRequireFailure(item);
      }
      return this;
    }
    let otherRecognizer;
    if (typeof recognizerOrName === "string") {
      otherRecognizer = this.manager.get(recognizerOrName);
    } else {
      otherRecognizer = recognizerOrName;
    }
    if (otherRecognizer) {
      const index = this.requireFail.indexOf(otherRecognizer);
      if (index > -1) {
        this.requireFail.splice(index, 1);
      }
    }
    return this;
  }
  /**
   * has require failures boolean
   */
  hasRequireFailures() {
    return Boolean(this.requireFail.find((recognier) => recognier.options.enable));
  }
  /**
   * if the recognizer can recognize simultaneous with an other recognizer
   */
  canRecognizeWith(otherRecognizer) {
    return Boolean(this.simultaneous[otherRecognizer.id]);
  }
  /**
   * You should use `tryEmit` instead of `emit` directly to check
   * that all the needed recognizers has failed before emitting.
   */
  emit(input) {
    if (!input)
      return;
    const { state } = this;
    if (state < RecognizerState.Ended) {
      this.manager.emit(this.options.event + stateStr(state), input);
    }
    this.manager.emit(this.options.event, input);
    if (input.additionalEvent) {
      this.manager.emit(input.additionalEvent, input);
    }
    if (state >= RecognizerState.Ended) {
      this.manager.emit(this.options.event + stateStr(state), input);
    }
  }
  /**
   * Check that all the require failure recognizers has failed,
   * if true, it emits a gesture event,
   * otherwise, setup the state to FAILED.
   */
  tryEmit(input) {
    if (this.canEmit()) {
      this.emit(input);
    } else {
      this.state = RecognizerState.Failed;
    }
  }
  /**
   * can we emit?
   */
  canEmit() {
    let i4 = 0;
    while (i4 < this.requireFail.length) {
      if (!(this.requireFail[i4].state & (RecognizerState.Failed | RecognizerState.Possible))) {
        return false;
      }
      i4++;
    }
    return true;
  }
  /**
   * update the recognizer
   */
  recognize(inputData) {
    const inputDataClone = { ...inputData };
    if (!this.options.enable) {
      this.reset();
      this.state = RecognizerState.Failed;
      return;
    }
    if (this.state & (RecognizerState.Recognized | RecognizerState.Cancelled | RecognizerState.Failed)) {
      this.state = RecognizerState.Possible;
    }
    this.state = this.process(inputDataClone);
    if (this.state & (RecognizerState.Began | RecognizerState.Changed | RecognizerState.Ended | RecognizerState.Cancelled)) {
      this.tryEmit(inputDataClone);
    }
  }
  /**
   * return the event names that are emitted by this recognizer
   */
  getEventNames() {
    return [this.options.event];
  }
  /**
   * called when the gesture isn't allowed to recognize
   * like when another is being recognized or it is disabled
   */
  reset() {
  }
};

// ../../../.yarn/berry/cache/mjolnir.js-npm-3.0.0-56bd5d98bf-10c0.zip/node_modules/mjolnir.js/dist/hammerjs/recognizers/attribute.js
var AttrRecognizer = class extends Recognizer {
  /**
   * Used to check if it the recognizer receives valid input, like input.distance > 10.
   */
  attrTest(input) {
    const optionPointers = this.options.pointers;
    return optionPointers === 0 || input.pointers.length === optionPointers;
  }
  /**
   * Process the input and return the state for the recognizer
   */
  process(input) {
    const { state } = this;
    const { eventType } = input;
    const isRecognized = state & (RecognizerState.Began | RecognizerState.Changed);
    const isValid = this.attrTest(input);
    if (isRecognized && (eventType & InputEvent.Cancel || !isValid)) {
      return state | RecognizerState.Cancelled;
    } else if (isRecognized || isValid) {
      if (eventType & InputEvent.End) {
        return state | RecognizerState.Ended;
      } else if (!(state & RecognizerState.Began)) {
        return RecognizerState.Began;
      }
      return state | RecognizerState.Changed;
    }
    return RecognizerState.Failed;
  }
};

// ../../../.yarn/berry/cache/mjolnir.js-npm-3.0.0-56bd5d98bf-10c0.zip/node_modules/mjolnir.js/dist/hammerjs/recognizers/tap.js
var TapRecognizer = class extends Recognizer {
  constructor(options = {}) {
    super({
      enable: true,
      event: "tap",
      pointers: 1,
      taps: 1,
      interval: 300,
      time: 250,
      threshold: 9,
      posThreshold: 10,
      ...options
    });
    this.pTime = null;
    this.pCenter = null;
    this._timer = null;
    this._input = null;
    this.count = 0;
  }
  getTouchAction() {
    return [TOUCH_ACTION_MANIPULATION];
  }
  process(input) {
    const { options } = this;
    const validPointers = input.pointers.length === options.pointers;
    const validMovement = input.distance < options.threshold;
    const validTouchTime = input.deltaTime < options.time;
    this.reset();
    if (input.eventType & InputEvent.Start && this.count === 0) {
      return this.failTimeout();
    }
    if (validMovement && validTouchTime && validPointers) {
      if (input.eventType !== InputEvent.End) {
        return this.failTimeout();
      }
      const validInterval = this.pTime ? input.timeStamp - this.pTime < options.interval : true;
      const validMultiTap = !this.pCenter || getPointDistance(this.pCenter, input.center) < options.posThreshold;
      this.pTime = input.timeStamp;
      this.pCenter = input.center;
      if (!validMultiTap || !validInterval) {
        this.count = 1;
      } else {
        this.count += 1;
      }
      this._input = input;
      const tapCount = this.count % options.taps;
      if (tapCount === 0) {
        if (!this.hasRequireFailures()) {
          return RecognizerState.Recognized;
        }
        this._timer = setTimeout(() => {
          this.state = RecognizerState.Recognized;
          this.tryEmit(this._input);
        }, options.interval);
        return RecognizerState.Began;
      }
    }
    return RecognizerState.Failed;
  }
  failTimeout() {
    this._timer = setTimeout(() => {
      this.state = RecognizerState.Failed;
    }, this.options.interval);
    return RecognizerState.Failed;
  }
  reset() {
    clearTimeout(this._timer);
  }
  emit(input) {
    if (this.state === RecognizerState.Recognized) {
      input.tapCount = this.count;
      this.manager.emit(this.options.event, input);
    }
  }
};

// ../../../.yarn/berry/cache/mjolnir.js-npm-3.0.0-56bd5d98bf-10c0.zip/node_modules/mjolnir.js/dist/hammerjs/recognizers/pan.js
var EVENT_NAMES = ["", "start", "move", "end", "cancel", "up", "down", "left", "right"];
var PanRecognizer = class extends AttrRecognizer {
  constructor(options = {}) {
    super({
      enable: true,
      pointers: 1,
      event: "pan",
      threshold: 10,
      direction: InputDirection.All,
      ...options
    });
    this.pX = null;
    this.pY = null;
  }
  getTouchAction() {
    const { options: { direction } } = this;
    const actions = [];
    if (direction & InputDirection.Horizontal) {
      actions.push(TOUCH_ACTION_PAN_Y);
    }
    if (direction & InputDirection.Vertical) {
      actions.push(TOUCH_ACTION_PAN_X);
    }
    return actions;
  }
  getEventNames() {
    return EVENT_NAMES.map((suffix) => this.options.event + suffix);
  }
  directionTest(input) {
    const { options } = this;
    let hasMoved = true;
    let { distance: distance5 } = input;
    let { direction } = input;
    const x3 = input.deltaX;
    const y3 = input.deltaY;
    if (!(direction & options.direction)) {
      if (options.direction & InputDirection.Horizontal) {
        direction = x3 === 0 ? InputDirection.None : x3 < 0 ? InputDirection.Left : InputDirection.Right;
        hasMoved = x3 !== this.pX;
        distance5 = Math.abs(input.deltaX);
      } else {
        direction = y3 === 0 ? InputDirection.None : y3 < 0 ? InputDirection.Up : InputDirection.Down;
        hasMoved = y3 !== this.pY;
        distance5 = Math.abs(input.deltaY);
      }
    }
    input.direction = direction;
    return hasMoved && distance5 > options.threshold && Boolean(direction & options.direction);
  }
  attrTest(input) {
    return super.attrTest(input) && (Boolean(this.state & RecognizerState.Began) || !(this.state & RecognizerState.Began) && this.directionTest(input));
  }
  emit(input) {
    this.pX = input.deltaX;
    this.pY = input.deltaY;
    const direction = InputDirection[input.direction].toLowerCase();
    if (direction) {
      input.additionalEvent = this.options.event + direction;
    }
    super.emit(input);
  }
};

// ../../../.yarn/berry/cache/mjolnir.js-npm-3.0.0-56bd5d98bf-10c0.zip/node_modules/mjolnir.js/dist/hammerjs/recognizers/pinch.js
var EVENT_NAMES2 = ["", "start", "move", "end", "cancel", "in", "out"];
var PinchRecognizer = class extends AttrRecognizer {
  constructor(options = {}) {
    super({
      enable: true,
      event: "pinch",
      threshold: 0,
      pointers: 2,
      ...options
    });
  }
  getTouchAction() {
    return [TOUCH_ACTION_NONE];
  }
  getEventNames() {
    return EVENT_NAMES2.map((suffix) => this.options.event + suffix);
  }
  attrTest(input) {
    return super.attrTest(input) && (Math.abs(input.scale - 1) > this.options.threshold || Boolean(this.state & RecognizerState.Began));
  }
  emit(input) {
    if (input.scale !== 1) {
      const inOut = input.scale < 1 ? "in" : "out";
      input.additionalEvent = this.options.event + inOut;
    }
    super.emit(input);
  }
};

// ../../../.yarn/berry/cache/mjolnir.js-npm-3.0.0-56bd5d98bf-10c0.zip/node_modules/mjolnir.js/dist/inputs/input.js
var Input2 = class {
  constructor(element, callback, options) {
    this.element = element;
    this.callback = callback;
    this.options = options;
  }
};

// ../../../.yarn/berry/cache/mjolnir.js-npm-3.0.0-56bd5d98bf-10c0.zip/node_modules/mjolnir.js/dist/utils/globals.js
var userAgent = typeof navigator !== "undefined" && navigator.userAgent ? navigator.userAgent.toLowerCase() : "";
var window_4 = typeof window !== "undefined" ? window : global;

// ../../../.yarn/berry/cache/mjolnir.js-npm-3.0.0-56bd5d98bf-10c0.zip/node_modules/mjolnir.js/dist/inputs/wheel-input.js
var firefox = userAgent.indexOf("firefox") !== -1;
var WHEEL_DELTA_MAGIC_SCALER = 4.000244140625;
var WHEEL_DELTA_PER_LINE = 40;
var SHIFT_MULTIPLIER = 0.25;
var WheelInput = class extends Input2 {
  constructor(element, callback, options) {
    super(element, callback, { enable: true, ...options });
    this.handleEvent = (event) => {
      if (!this.options.enable) {
        return;
      }
      let value = event.deltaY;
      if (globalThis.WheelEvent) {
        if (firefox && event.deltaMode === globalThis.WheelEvent.DOM_DELTA_PIXEL) {
          value /= globalThis.devicePixelRatio;
        }
        if (event.deltaMode === globalThis.WheelEvent.DOM_DELTA_LINE) {
          value *= WHEEL_DELTA_PER_LINE;
        }
      }
      if (value !== 0 && value % WHEEL_DELTA_MAGIC_SCALER === 0) {
        value = Math.floor(value / WHEEL_DELTA_MAGIC_SCALER);
      }
      if (event.shiftKey && value) {
        value = value * SHIFT_MULTIPLIER;
      }
      this.callback({
        type: "wheel",
        center: {
          x: event.clientX,
          y: event.clientY
        },
        delta: -value,
        srcEvent: event,
        pointerType: "mouse",
        target: event.target
      });
    };
    element.addEventListener("wheel", this.handleEvent, { passive: false });
  }
  destroy() {
    this.element.removeEventListener("wheel", this.handleEvent);
  }
  /**
   * Enable this input (begin processing events)
   * if the specified event type is among those handled by this input.
   */
  enableEventType(eventType, enabled) {
    if (eventType === "wheel") {
      this.options.enable = enabled;
    }
  }
};

// ../../../.yarn/berry/cache/mjolnir.js-npm-3.0.0-56bd5d98bf-10c0.zip/node_modules/mjolnir.js/dist/inputs/move-input.js
var MOUSE_EVENTS = [
  "mousedown",
  "mousemove",
  "mouseup",
  "mouseover",
  "mouseout",
  "mouseleave"
];
var MoveInput = class extends Input2 {
  constructor(element, callback, options) {
    super(element, callback, { enable: true, ...options });
    this.handleEvent = (event) => {
      this.handleOverEvent(event);
      this.handleOutEvent(event);
      this.handleEnterEvent(event);
      this.handleLeaveEvent(event);
      this.handleMoveEvent(event);
    };
    this.pressed = false;
    const { enable: enable2 } = this.options;
    this.enableMoveEvent = enable2;
    this.enableLeaveEvent = enable2;
    this.enableEnterEvent = enable2;
    this.enableOutEvent = enable2;
    this.enableOverEvent = enable2;
    MOUSE_EVENTS.forEach((event) => element.addEventListener(event, this.handleEvent));
  }
  destroy() {
    MOUSE_EVENTS.forEach((event) => this.element.removeEventListener(event, this.handleEvent));
  }
  /**
   * Enable this input (begin processing events)
   * if the specified event type is among those handled by this input.
   */
  enableEventType(eventType, enabled) {
    switch (eventType) {
      case "pointermove":
        this.enableMoveEvent = enabled;
        break;
      case "pointerover":
        this.enableOverEvent = enabled;
        break;
      case "pointerout":
        this.enableOutEvent = enabled;
        break;
      case "pointerenter":
        this.enableEnterEvent = enabled;
        break;
      case "pointerleave":
        this.enableLeaveEvent = enabled;
        break;
      default:
    }
  }
  handleOverEvent(event) {
    if (this.enableOverEvent && event.type === "mouseover") {
      this._emit("pointerover", event);
    }
  }
  handleOutEvent(event) {
    if (this.enableOutEvent && event.type === "mouseout") {
      this._emit("pointerout", event);
    }
  }
  handleEnterEvent(event) {
    if (this.enableEnterEvent && event.type === "mouseenter") {
      this._emit("pointerenter", event);
    }
  }
  handleLeaveEvent(event) {
    if (this.enableLeaveEvent && event.type === "mouseleave") {
      this._emit("pointerleave", event);
    }
  }
  handleMoveEvent(event) {
    if (this.enableMoveEvent) {
      switch (event.type) {
        case "mousedown":
          if (event.button >= 0) {
            this.pressed = true;
          }
          break;
        case "mousemove":
          if (event.buttons === 0) {
            this.pressed = false;
          }
          if (!this.pressed) {
            this._emit("pointermove", event);
          }
          break;
        case "mouseup":
          this.pressed = false;
          break;
        default:
      }
    }
  }
  _emit(type, event) {
    this.callback({
      type,
      center: {
        x: event.clientX,
        y: event.clientY
      },
      srcEvent: event,
      pointerType: "mouse",
      target: event.target
    });
  }
};

// ../../../.yarn/berry/cache/mjolnir.js-npm-3.0.0-56bd5d98bf-10c0.zip/node_modules/mjolnir.js/dist/inputs/key-input.js
var KEY_EVENTS = ["keydown", "keyup"];
var KeyInput = class extends Input2 {
  constructor(element, callback, options) {
    super(element, callback, { enable: true, tabIndex: 0, ...options });
    this.handleEvent = (event) => {
      const targetElement = event.target || event.srcElement;
      if (targetElement.tagName === "INPUT" && targetElement.type === "text" || targetElement.tagName === "TEXTAREA") {
        return;
      }
      if (this.enableDownEvent && event.type === "keydown") {
        this.callback({
          type: "keydown",
          srcEvent: event,
          key: event.key,
          target: event.target
        });
      }
      if (this.enableUpEvent && event.type === "keyup") {
        this.callback({
          type: "keyup",
          srcEvent: event,
          key: event.key,
          target: event.target
        });
      }
    };
    this.enableDownEvent = this.options.enable;
    this.enableUpEvent = this.options.enable;
    element.tabIndex = this.options.tabIndex;
    element.style.outline = "none";
    KEY_EVENTS.forEach((event) => element.addEventListener(event, this.handleEvent));
  }
  destroy() {
    KEY_EVENTS.forEach((event) => this.element.removeEventListener(event, this.handleEvent));
  }
  /**
   * Enable this input (begin processing events)
   * if the specified event type is among those handled by this input.
   */
  enableEventType(eventType, enabled) {
    if (eventType === "keydown") {
      this.enableDownEvent = enabled;
    }
    if (eventType === "keyup") {
      this.enableUpEvent = enabled;
    }
  }
};

// ../../../.yarn/berry/cache/mjolnir.js-npm-3.0.0-56bd5d98bf-10c0.zip/node_modules/mjolnir.js/dist/inputs/contextmenu-input.js
var ContextmenuInput = class extends Input2 {
  constructor(element, callback, options) {
    super(element, callback, options);
    this.handleEvent = (event) => {
      if (!this.options.enable) {
        return;
      }
      this.callback({
        type: "contextmenu",
        center: {
          x: event.clientX,
          y: event.clientY
        },
        srcEvent: event,
        pointerType: "mouse",
        target: event.target
      });
    };
    element.addEventListener("contextmenu", this.handleEvent);
  }
  destroy() {
    this.element.removeEventListener("contextmenu", this.handleEvent);
  }
  /**
   * Enable this input (begin processing events)
   * if the specified event type is among those handled by this input.
   */
  enableEventType(eventType, enabled) {
    if (eventType === "contextmenu") {
      this.options.enable = enabled;
    }
  }
};

// ../../../.yarn/berry/cache/mjolnir.js-npm-3.0.0-56bd5d98bf-10c0.zip/node_modules/mjolnir.js/dist/utils/event-utils.js
var DOWN_EVENT = 1;
var MOVE_EVENT = 2;
var UP_EVENT = 4;
var MOUSE_EVENTS2 = {
  pointerdown: DOWN_EVENT,
  pointermove: MOVE_EVENT,
  pointerup: UP_EVENT,
  mousedown: DOWN_EVENT,
  mousemove: MOVE_EVENT,
  mouseup: UP_EVENT
};
var MOUSE_EVENT_BUTTON_LEFT = 0;
var MOUSE_EVENT_BUTTON_MIDDLE = 1;
var MOUSE_EVENT_BUTTON_RIGHT = 2;
var MOUSE_EVENT_BUTTONS_LEFT_MASK = 1;
var MOUSE_EVENT_BUTTONS_RIGHT_MASK = 2;
var MOUSE_EVENT_BUTTONS_MIDDLE_MASK = 4;
function whichButtons(event) {
  const eventType = MOUSE_EVENTS2[event.srcEvent.type];
  if (!eventType) {
    return null;
  }
  const { buttons, button } = event.srcEvent;
  let leftButton = false;
  let middleButton = false;
  let rightButton = false;
  if (eventType === MOVE_EVENT) {
    leftButton = Boolean(buttons & MOUSE_EVENT_BUTTONS_LEFT_MASK);
    middleButton = Boolean(buttons & MOUSE_EVENT_BUTTONS_MIDDLE_MASK);
    rightButton = Boolean(buttons & MOUSE_EVENT_BUTTONS_RIGHT_MASK);
  } else {
    leftButton = button === MOUSE_EVENT_BUTTON_LEFT;
    middleButton = button === MOUSE_EVENT_BUTTON_MIDDLE;
    rightButton = button === MOUSE_EVENT_BUTTON_RIGHT;
  }
  return { leftButton, middleButton, rightButton };
}
function getOffsetPosition(event, rootElement) {
  const center = event.center;
  if (!center) {
    return null;
  }
  const rect = rootElement.getBoundingClientRect();
  const scaleX2 = rect.width / rootElement.offsetWidth || 1;
  const scaleY2 = rect.height / rootElement.offsetHeight || 1;
  const offsetCenter = {
    x: (center.x - rect.left - rootElement.clientLeft) / scaleX2,
    y: (center.y - rect.top - rootElement.clientTop) / scaleY2
  };
  return { center, offsetCenter };
}

// ../../../.yarn/berry/cache/mjolnir.js-npm-3.0.0-56bd5d98bf-10c0.zip/node_modules/mjolnir.js/dist/utils/event-registrar.js
var DEFAULT_OPTIONS = {
  srcElement: "root",
  priority: 0
};
var EventRegistrar = class {
  constructor(eventManager, recognizerName) {
    this.handleEvent = (event) => {
      if (this.isEmpty()) {
        return;
      }
      const mjolnirEvent = this._normalizeEvent(event);
      let target2 = event.srcEvent.target;
      while (target2 && target2 !== mjolnirEvent.rootElement) {
        this._emit(mjolnirEvent, target2);
        if (mjolnirEvent.handled) {
          return;
        }
        target2 = target2.parentNode;
      }
      this._emit(mjolnirEvent, "root");
    };
    this.eventManager = eventManager;
    this.recognizerName = recognizerName;
    this.handlers = [];
    this.handlersByElement = /* @__PURE__ */ new Map();
    this._active = false;
  }
  // Returns true if there are no non-passive handlers
  isEmpty() {
    return !this._active;
  }
  add(type, handler, options, once = false, passive = false) {
    const { handlers, handlersByElement } = this;
    const opts = { ...DEFAULT_OPTIONS, ...options };
    let entries = handlersByElement.get(opts.srcElement);
    if (!entries) {
      entries = [];
      handlersByElement.set(opts.srcElement, entries);
    }
    const entry = {
      type,
      handler,
      srcElement: opts.srcElement,
      priority: opts.priority
    };
    if (once) {
      entry.once = true;
    }
    if (passive) {
      entry.passive = true;
    }
    handlers.push(entry);
    this._active = this._active || !entry.passive;
    let insertPosition = entries.length - 1;
    while (insertPosition >= 0) {
      if (entries[insertPosition].priority >= entry.priority) {
        break;
      }
      insertPosition--;
    }
    entries.splice(insertPosition + 1, 0, entry);
  }
  remove(type, handler) {
    const { handlers, handlersByElement } = this;
    for (let i4 = handlers.length - 1; i4 >= 0; i4--) {
      const entry = handlers[i4];
      if (entry.type === type && entry.handler === handler) {
        handlers.splice(i4, 1);
        const entries = handlersByElement.get(entry.srcElement);
        entries.splice(entries.indexOf(entry), 1);
        if (entries.length === 0) {
          handlersByElement.delete(entry.srcElement);
        }
      }
    }
    this._active = handlers.some((entry) => !entry.passive);
  }
  /**
   * Invoke handlers on a particular element
   */
  _emit(event, srcElement) {
    const entries = this.handlersByElement.get(srcElement);
    if (entries) {
      let immediatePropagationStopped = false;
      const stopPropagation = () => {
        event.handled = true;
      };
      const stopImmediatePropagation = () => {
        event.handled = true;
        immediatePropagationStopped = true;
      };
      const entriesToRemove = [];
      for (let i4 = 0; i4 < entries.length; i4++) {
        const { type, handler, once } = entries[i4];
        handler({
          ...event,
          type,
          stopPropagation,
          stopImmediatePropagation
        });
        if (once) {
          entriesToRemove.push(entries[i4]);
        }
        if (immediatePropagationStopped) {
          break;
        }
      }
      for (let i4 = 0; i4 < entriesToRemove.length; i4++) {
        const { type, handler } = entriesToRemove[i4];
        this.remove(type, handler);
      }
    }
  }
  /**
   * Normalizes hammerjs and custom events to have predictable fields.
   */
  _normalizeEvent(event) {
    const rootElement = this.eventManager.getElement();
    return {
      ...event,
      ...whichButtons(event),
      ...getOffsetPosition(event, rootElement),
      preventDefault: () => {
        event.srcEvent.preventDefault();
      },
      stopImmediatePropagation: null,
      stopPropagation: null,
      handled: false,
      rootElement
    };
  }
};

// ../../../.yarn/berry/cache/mjolnir.js-npm-3.0.0-56bd5d98bf-10c0.zip/node_modules/mjolnir.js/dist/event-manager.js
function normalizeRecognizer(item) {
  if ("recognizer" in item) {
    return item;
  }
  let recognizer;
  const itemArray = Array.isArray(item) ? [...item] : [item];
  if (typeof itemArray[0] === "function") {
    const RecognizerType = itemArray.shift();
    const options = itemArray.shift() || {};
    recognizer = new RecognizerType(options);
  } else {
    recognizer = itemArray.shift();
  }
  return {
    recognizer,
    recognizeWith: typeof itemArray[0] === "string" ? [itemArray[0]] : itemArray[0],
    requireFailure: typeof itemArray[1] === "string" ? [itemArray[1]] : itemArray[1]
  };
}
var EventManager = class {
  constructor(element = null, options = {}) {
    this._onBasicInput = (event) => {
      this.manager.emit(event.srcEvent.type, event);
    };
    this._onOtherEvent = (event) => {
      this.manager.emit(event.type, event);
    };
    this.options = {
      recognizers: [],
      events: {},
      touchAction: "compute",
      tabIndex: 0,
      cssProps: {},
      ...options
    };
    this.events = /* @__PURE__ */ new Map();
    this.element = element;
    if (!element)
      return;
    this.manager = new Manager(element, this.options);
    for (const item of this.options.recognizers) {
      const { recognizer, recognizeWith, requireFailure } = normalizeRecognizer(item);
      this.manager.add(recognizer);
      if (recognizeWith) {
        recognizer.recognizeWith(recognizeWith);
      }
      if (requireFailure) {
        recognizer.requireFailure(requireFailure);
      }
    }
    this.manager.on("hammer.input", this._onBasicInput);
    this.wheelInput = new WheelInput(element, this._onOtherEvent, {
      enable: false
    });
    this.moveInput = new MoveInput(element, this._onOtherEvent, {
      enable: false
    });
    this.keyInput = new KeyInput(element, this._onOtherEvent, {
      enable: false,
      tabIndex: options.tabIndex
    });
    this.contextmenuInput = new ContextmenuInput(element, this._onOtherEvent, {
      enable: false
    });
    this.on(this.options.events);
  }
  getElement() {
    return this.element;
  }
  // Tear down internal event management implementations.
  destroy() {
    if (!this.element)
      return;
    this.wheelInput.destroy();
    this.moveInput.destroy();
    this.keyInput.destroy();
    this.contextmenuInput.destroy();
    this.manager.destroy();
  }
  /** Register an event handler function to be called on `event` */
  on(event, handler, opts) {
    this._addEventHandler(event, handler, opts, false);
  }
  once(event, handler, opts) {
    this._addEventHandler(event, handler, opts, true);
  }
  watch(event, handler, opts) {
    this._addEventHandler(event, handler, opts, false, true);
  }
  off(event, handler) {
    this._removeEventHandler(event, handler);
  }
  /*
   * Enable/disable recognizer for the given event
   */
  _toggleRecognizer(name2, enabled) {
    var _a3, _b, _c, _d;
    const { manager } = this;
    if (!manager) {
      return;
    }
    const recognizer = manager.get(name2);
    if (recognizer) {
      recognizer.set({ enable: enabled });
      manager.touchAction.update();
    }
    (_a3 = this.wheelInput) == null ? void 0 : _a3.enableEventType(name2, enabled);
    (_b = this.moveInput) == null ? void 0 : _b.enableEventType(name2, enabled);
    (_c = this.keyInput) == null ? void 0 : _c.enableEventType(name2, enabled);
    (_d = this.contextmenuInput) == null ? void 0 : _d.enableEventType(name2, enabled);
  }
  /**
   * Process the event registration for a single event + handler.
   */
  _addEventHandler(event, handler, opts, once, passive) {
    if (typeof event !== "string") {
      opts = handler;
      for (const [eventName, eventHandler] of Object.entries(event)) {
        this._addEventHandler(eventName, eventHandler, opts, once, passive);
      }
      return;
    }
    const { manager, events } = this;
    if (!manager)
      return;
    let eventRegistrar = events.get(event);
    if (!eventRegistrar) {
      const recognizerName = this._getRecognizerName(event) || event;
      eventRegistrar = new EventRegistrar(this, recognizerName);
      events.set(event, eventRegistrar);
      if (manager) {
        manager.on(event, eventRegistrar.handleEvent);
      }
    }
    eventRegistrar.add(event, handler, opts, once, passive);
    if (!eventRegistrar.isEmpty()) {
      this._toggleRecognizer(eventRegistrar.recognizerName, true);
    }
  }
  /**
   * Process the event deregistration for a single event + handler.
   */
  _removeEventHandler(event, handler) {
    if (typeof event !== "string") {
      for (const [eventName, eventHandler] of Object.entries(event)) {
        this._removeEventHandler(eventName, eventHandler);
      }
      return;
    }
    const { events } = this;
    const eventRegistrar = events.get(event);
    if (!eventRegistrar) {
      return;
    }
    eventRegistrar.remove(event, handler);
    if (eventRegistrar.isEmpty()) {
      const { recognizerName } = eventRegistrar;
      let isRecognizerUsed = false;
      for (const eh of events.values()) {
        if (eh.recognizerName === recognizerName && !eh.isEmpty()) {
          isRecognizerUsed = true;
          break;
        }
      }
      if (!isRecognizerUsed) {
        this._toggleRecognizer(recognizerName, false);
      }
    }
  }
  _getRecognizerName(event) {
    var _a3;
    return (_a3 = this.manager.recognizers.find((recognizer) => {
      return recognizer.getEventNames().includes(event);
    })) == null ? void 0 : _a3.options.event;
  }
};

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/lib/constants.js
var COORDINATE_SYSTEM = {
  /**
   * `LNGLAT` if rendering into a geospatial viewport, `CARTESIAN` otherwise
   */
  DEFAULT: -1,
  /**
   * Positions are interpreted as [longitude, latitude, elevation]
   * longitude/latitude are in degrees, elevation is in meters.
   * Dimensions are in meters.
   */
  LNGLAT: 1,
  /**
   * Positions are interpreted as [x, y, z] in meter offsets from the coordinate origin.
   * Dimensions are in meters.
   */
  METER_OFFSETS: 2,
  /**
   * Positions are interpreted as [deltaLng, deltaLat, elevation] from the coordinate origin.
   * deltaLng/deltaLat are in degrees, elevation is in meters.
   * Dimensions are in meters.
   */
  LNGLAT_OFFSETS: 3,
  /**
   * Positions and dimensions are in the common units of the viewport.
   */
  CARTESIAN: 0
};
Object.defineProperty(COORDINATE_SYSTEM, "IDENTITY", {
  get: () => {
    log_default.deprecated("COORDINATE_SYSTEM.IDENTITY", "COORDINATE_SYSTEM.CARTESIAN")();
    return 0;
  }
});
var PROJECTION_MODE = {
  /**
   * Render geospatial data in Web Mercator projection
   */
  WEB_MERCATOR: 1,
  /**
   * Render geospatial data as a 3D globe
   */
  GLOBE: 2,
  /**
   * (Internal use only) Web Mercator projection at high zoom
   */
  WEB_MERCATOR_AUTO_OFFSET: 4,
  /**
   * No transformation
   */
  IDENTITY: 0
};
var UNIT = {
  common: 0,
  meters: 1,
  pixels: 2
};
var EVENT_HANDLERS = {
  click: "onClick",
  dblclick: "onClick",
  panstart: "onDragStart",
  panmove: "onDrag",
  panend: "onDragEnd"
};
var RECOGNIZERS = {
  multipan: [PanRecognizer, { threshold: 10, direction: InputDirection.Vertical, pointers: 2 }],
  pinch: [PinchRecognizer, {}, null, ["multipan"]],
  pan: [PanRecognizer, { threshold: 1 }, ["pinch"], ["multipan"]],
  dblclick: [TapRecognizer, { event: "dblclick", taps: 2 }],
  click: [TapRecognizer, { event: "click" }, null, ["dblclick"]]
};

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/utils/memoize.js
function isEqual(a3, b2) {
  if (a3 === b2) {
    return true;
  }
  if (Array.isArray(a3)) {
    const len5 = a3.length;
    if (!b2 || b2.length !== len5) {
      return false;
    }
    for (let i4 = 0; i4 < len5; i4++) {
      if (a3[i4] !== b2[i4]) {
        return false;
      }
    }
    return true;
  }
  return false;
}
function memoize(compute) {
  let cachedArgs = {};
  let cachedResult;
  return (args) => {
    for (const key in args) {
      if (!isEqual(args[key], cachedArgs[key])) {
        cachedResult = compute(args);
        cachedArgs = args;
        break;
      }
    }
    return cachedResult;
  };
}

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/shaderlib/project/viewport-uniforms.js
var ZERO_VECTOR = [0, 0, 0, 0];
var VECTOR_TO_POINT_MATRIX = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0];
var IDENTITY_MATRIX3 = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
var DEFAULT_PIXELS_PER_UNIT2 = [0, 0, 0];
var DEFAULT_COORDINATE_ORIGIN = [0, 0, 0];
var getMemoizedViewportUniforms = memoize(calculateViewportUniforms);
function getOffsetOrigin(viewport, coordinateSystem, coordinateOrigin = DEFAULT_COORDINATE_ORIGIN) {
  if (coordinateOrigin.length < 3) {
    coordinateOrigin = [coordinateOrigin[0], coordinateOrigin[1], 0];
  }
  let shaderCoordinateOrigin = coordinateOrigin;
  let geospatialOrigin;
  let offsetMode = true;
  if (coordinateSystem === COORDINATE_SYSTEM.LNGLAT_OFFSETS || coordinateSystem === COORDINATE_SYSTEM.METER_OFFSETS) {
    geospatialOrigin = coordinateOrigin;
  } else {
    geospatialOrigin = viewport.isGeospatial ? (
      // @ts-expect-error longitude and latitude are not defined on the base Viewport, but is expected on geospatial viewports
      [Math.fround(viewport.longitude), Math.fround(viewport.latitude), 0]
    ) : null;
  }
  switch (viewport.projectionMode) {
    case PROJECTION_MODE.WEB_MERCATOR:
      if (coordinateSystem === COORDINATE_SYSTEM.LNGLAT || coordinateSystem === COORDINATE_SYSTEM.CARTESIAN) {
        geospatialOrigin = [0, 0, 0];
        offsetMode = false;
      }
      break;
    case PROJECTION_MODE.WEB_MERCATOR_AUTO_OFFSET:
      if (coordinateSystem === COORDINATE_SYSTEM.LNGLAT) {
        shaderCoordinateOrigin = geospatialOrigin;
      } else if (coordinateSystem === COORDINATE_SYSTEM.CARTESIAN) {
        shaderCoordinateOrigin = [
          Math.fround(viewport.center[0]),
          Math.fround(viewport.center[1]),
          0
        ];
        geospatialOrigin = viewport.unprojectPosition(shaderCoordinateOrigin);
        shaderCoordinateOrigin[0] -= coordinateOrigin[0];
        shaderCoordinateOrigin[1] -= coordinateOrigin[1];
        shaderCoordinateOrigin[2] -= coordinateOrigin[2];
      }
      break;
    case PROJECTION_MODE.IDENTITY:
      shaderCoordinateOrigin = viewport.position.map(Math.fround);
      shaderCoordinateOrigin[2] = shaderCoordinateOrigin[2] || 0;
      break;
    case PROJECTION_MODE.GLOBE:
      offsetMode = false;
      geospatialOrigin = null;
      break;
    default:
      offsetMode = false;
  }
  return { geospatialOrigin, shaderCoordinateOrigin, offsetMode };
}
function calculateMatrixAndOffset(viewport, coordinateSystem, coordinateOrigin) {
  const { viewMatrixUncentered, projectionMatrix } = viewport;
  let { viewMatrix: viewMatrix2, viewProjectionMatrix } = viewport;
  let projectionCenter = ZERO_VECTOR;
  let originCommon = ZERO_VECTOR;
  let cameraPosCommon = viewport.cameraPosition;
  const { geospatialOrigin, shaderCoordinateOrigin, offsetMode } = getOffsetOrigin(viewport, coordinateSystem, coordinateOrigin);
  if (offsetMode) {
    originCommon = viewport.projectPosition(geospatialOrigin || shaderCoordinateOrigin);
    cameraPosCommon = [
      cameraPosCommon[0] - originCommon[0],
      cameraPosCommon[1] - originCommon[1],
      cameraPosCommon[2] - originCommon[2]
    ];
    originCommon[3] = 1;
    projectionCenter = vec4_exports.transformMat4([], originCommon, viewProjectionMatrix);
    viewMatrix2 = viewMatrixUncentered || viewMatrix2;
    viewProjectionMatrix = mat4_exports.multiply([], projectionMatrix, viewMatrix2);
    viewProjectionMatrix = mat4_exports.multiply([], viewProjectionMatrix, VECTOR_TO_POINT_MATRIX);
  }
  return {
    viewMatrix: viewMatrix2,
    viewProjectionMatrix,
    projectionCenter,
    originCommon,
    cameraPosCommon,
    shaderCoordinateOrigin,
    geospatialOrigin
  };
}
function getUniformsFromViewport({
  viewport,
  devicePixelRatio = 1,
  modelMatrix = null,
  // Match Layer.defaultProps
  coordinateSystem = COORDINATE_SYSTEM.DEFAULT,
  coordinateOrigin = DEFAULT_COORDINATE_ORIGIN,
  autoWrapLongitude = false
}) {
  if (coordinateSystem === COORDINATE_SYSTEM.DEFAULT) {
    coordinateSystem = viewport.isGeospatial ? COORDINATE_SYSTEM.LNGLAT : COORDINATE_SYSTEM.CARTESIAN;
  }
  const uniforms = getMemoizedViewportUniforms({
    viewport,
    devicePixelRatio,
    coordinateSystem,
    coordinateOrigin
  });
  uniforms.wrapLongitude = autoWrapLongitude;
  uniforms.modelMatrix = modelMatrix || IDENTITY_MATRIX3;
  return uniforms;
}
function calculateViewportUniforms({ viewport, devicePixelRatio, coordinateSystem, coordinateOrigin }) {
  const { projectionCenter, viewProjectionMatrix, originCommon, cameraPosCommon, shaderCoordinateOrigin, geospatialOrigin } = calculateMatrixAndOffset(viewport, coordinateSystem, coordinateOrigin);
  const distanceScales = viewport.getDistanceScales();
  const viewportSize = [
    viewport.width * devicePixelRatio,
    viewport.height * devicePixelRatio
  ];
  const focalDistance = vec4_exports.transformMat4([], [0, 0, -viewport.focalDistance, 1], viewport.projectionMatrix)[3] || 1;
  const uniforms = {
    // Projection mode values
    coordinateSystem,
    projectionMode: viewport.projectionMode,
    coordinateOrigin: shaderCoordinateOrigin,
    commonOrigin: originCommon.slice(0, 3),
    center: projectionCenter,
    // Backward compatibility
    // TODO: remove in v9
    // @ts-expect-error _pseudoMeters is only defined on WebMercator viewport
    pseudoMeters: Boolean(viewport._pseudoMeters),
    // Screen size
    viewportSize,
    devicePixelRatio,
    focalDistance,
    commonUnitsPerMeter: distanceScales.unitsPerMeter,
    commonUnitsPerWorldUnit: distanceScales.unitsPerMeter,
    commonUnitsPerWorldUnit2: DEFAULT_PIXELS_PER_UNIT2,
    scale: viewport.scale,
    // This is the mercator scale (2 ** zoom)
    wrapLongitude: false,
    viewProjectionMatrix,
    modelMatrix: IDENTITY_MATRIX3,
    // This is for lighting calculations
    cameraPosition: cameraPosCommon
  };
  if (geospatialOrigin) {
    const distanceScalesAtOrigin = viewport.getDistanceScales(geospatialOrigin);
    switch (coordinateSystem) {
      case COORDINATE_SYSTEM.METER_OFFSETS:
        uniforms.commonUnitsPerWorldUnit = distanceScalesAtOrigin.unitsPerMeter;
        uniforms.commonUnitsPerWorldUnit2 = distanceScalesAtOrigin.unitsPerMeter2;
        break;
      case COORDINATE_SYSTEM.LNGLAT:
      case COORDINATE_SYSTEM.LNGLAT_OFFSETS:
        if (!viewport._pseudoMeters) {
          uniforms.commonUnitsPerMeter = distanceScalesAtOrigin.unitsPerMeter;
        }
        uniforms.commonUnitsPerWorldUnit = distanceScalesAtOrigin.unitsPerDegree;
        uniforms.commonUnitsPerWorldUnit2 = distanceScalesAtOrigin.unitsPerDegree2;
        break;
      // a.k.a "preprojected" positions
      case COORDINATE_SYSTEM.CARTESIAN:
        uniforms.commonUnitsPerWorldUnit = [1, 1, distanceScalesAtOrigin.unitsPerMeter[2]];
        uniforms.commonUnitsPerWorldUnit2 = [0, 0, distanceScalesAtOrigin.unitsPerMeter2[2]];
        break;
      default:
        break;
    }
  }
  return uniforms;
}

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/shaderlib/project/project.wgsl.js
var COORDINATE_SYSTEM_WGSL_CONSTANTS = Object.keys(COORDINATE_SYSTEM).map((key) => `const COORDINATE_SYSTEM_${key}: i32 = ${COORDINATE_SYSTEM[key]};`).join("");
var PROJECTION_MODE_WGSL_CONSTANTS = Object.keys(PROJECTION_MODE).map((key) => `const PROJECTION_MODE_${key}: i32 = ${PROJECTION_MODE[key]};`).join("");
var UNIT_WGSL_CONSTANTS = Object.keys(UNIT).map((key) => `const UNIT_${key.toUpperCase()}: i32 = ${UNIT[key]};`).join("");
var projectWGSLHeader = (
  /* wgsl */
  `${COORDINATE_SYSTEM_WGSL_CONSTANTS}
${PROJECTION_MODE_WGSL_CONSTANTS}
${UNIT_WGSL_CONSTANTS}

const TILE_SIZE: f32 = 512.0;
const PI: f32 = 3.1415926536;
const WORLD_SCALE: f32 = TILE_SIZE / (PI * 2.0);
const ZERO_64_LOW: vec3<f32> = vec3<f32>(0.0, 0.0, 0.0);
const EARTH_RADIUS: f32 = 6370972.0; // meters
const GLOBE_RADIUS: f32 = 256.0;

// -----------------------------------------------------------------------------
// Uniform block (converted from GLSL uniform block)
// -----------------------------------------------------------------------------
struct ProjectUniforms {
  wrapLongitude: i32,
  coordinateSystem: i32,
  commonUnitsPerMeter: vec3<f32>,
  projectionMode: i32,
  scale: f32,
  commonUnitsPerWorldUnit: vec3<f32>,
  commonUnitsPerWorldUnit2: vec3<f32>,
  center: vec4<f32>,
  modelMatrix: mat4x4<f32>,
  viewProjectionMatrix: mat4x4<f32>,
  viewportSize: vec2<f32>,
  devicePixelRatio: f32,
  focalDistance: f32,
  cameraPosition: vec3<f32>,
  coordinateOrigin: vec3<f32>,
  commonOrigin: vec3<f32>,
  pseudoMeters: i32,
};

@group(0) @binding(0)
var<uniform> project: ProjectUniforms;

// -----------------------------------------------------------------------------
// Geometry data
// (In your GLSL code, "geometry" was assumed to be available globally. In WGSL,
// you might supply this via vertex attributes or a uniform. Here we define a
// uniform struct for demonstration.)
// -----------------------------------------------------------------------------

// Structure to carry additional geometry data used by deck.gl filters.
struct Geometry {
  worldPosition: vec3<f32>,
  worldPositionAlt: vec3<f32>,
  position: vec4<f32>,
  uv: vec2<f32>,
  pickingColor: vec3<f32>,
};

// @group(0) @binding(1)
var<private> geometry: Geometry;
`
);
var projectWGSL = (
  /* wgsl */
  `${projectWGSLHeader}

// -----------------------------------------------------------------------------
// Functions
// -----------------------------------------------------------------------------

// Returns an adjustment factor for commonUnitsPerMeter
fn _project_size_at_latitude(lat: f32) -> f32 {
  let y = clamp(lat, -89.9, 89.9);
  return 1.0 / cos(radians(y));
}

// Overloaded version: scales a value in meters at a given latitude.
fn _project_size_at_latitude_m(meters: f32, lat: f32) -> f32 {
  return meters * project.commonUnitsPerMeter.z * _project_size_at_latitude(lat);
}

// Computes a non-linear scale factor based on geometry.
// (Note: This function relies on "geometry" being provided.)
fn project_size() -> f32 {
  if (project.projectionMode == PROJECTION_MODE_WEB_MERCATOR &&
      project.coordinateSystem == COORDINATE_SYSTEM_LNGLAT &&
      project.pseudoMeters == 0) {
    if (geometry.position.w == 0.0) {
      return _project_size_at_latitude(geometry.worldPosition.y);
    }
    let y: f32 = geometry.position.y / TILE_SIZE * 2.0 - 1.0;
    let y2 = y * y;
    let y4 = y2 * y2;
    let y6 = y4 * y2;
    return 1.0 + 4.9348 * y2 + 4.0587 * y4 + 1.5642 * y6;
  }
  return 1.0;
}

// Overloads to scale offsets (meters to world units)
fn project_size_float(meters: f32) -> f32 {
  return meters * project.commonUnitsPerMeter.z * project_size();
}

fn project_size_vec2(meters: vec2<f32>) -> vec2<f32> {
  return meters * project.commonUnitsPerMeter.xy * project_size();
}

fn project_size_vec3(meters: vec3<f32>) -> vec3<f32> {
  return meters * project.commonUnitsPerMeter * project_size();
}

fn project_size_vec4(meters: vec4<f32>) -> vec4<f32> {
  return vec4<f32>(meters.xyz * project.commonUnitsPerMeter, meters.w);
}

// Returns a rotation matrix aligning the z‑axis with the given up vector.
fn project_get_orientation_matrix(up: vec3<f32>) -> mat3x3<f32> {
  let uz = normalize(up);
  let ux = select(
    vec3<f32>(1.0, 0.0, 0.0),
    normalize(vec3<f32>(uz.y, -uz.x, 0.0)),
    abs(uz.z) == 1.0
  );
  let uy = cross(uz, ux);
  return mat3x3<f32>(ux, uy, uz);
}

// Since WGSL does not support "out" parameters, we return a struct.
struct RotationResult {
  needsRotation: bool,
  transform: mat3x3<f32>,
};

fn project_needs_rotation(commonPosition: vec3<f32>) -> RotationResult {
  if (project.projectionMode == PROJECTION_MODE_GLOBE) {
    return RotationResult(true, project_get_orientation_matrix(commonPosition));
  } else {
    return RotationResult(false, mat3x3<f32>());  // identity alternative if needed
  };
}

// Projects a normal vector from the current coordinate system to world space.
fn project_normal(vector: vec3<f32>) -> vec3<f32> {
  let normal_modelspace = project.modelMatrix * vec4<f32>(vector, 0.0);
  var n = normalize(normal_modelspace.xyz * project.commonUnitsPerMeter);
  let rotResult = project_needs_rotation(geometry.position.xyz);
  if (rotResult.needsRotation) {
    n = rotResult.transform * n;
  }
  return n;
}

// Applies a scale offset based on y-offset (dy)
fn project_offset_(offset: vec4<f32>) -> vec4<f32> {
  let dy: f32 = offset.y;
  let commonUnitsPerWorldUnit = project.commonUnitsPerWorldUnit + project.commonUnitsPerWorldUnit2 * dy;
  return vec4<f32>(offset.xyz * commonUnitsPerWorldUnit, offset.w);
}

// Projects lng/lat coordinates to a unit tile [0,1]
fn project_mercator_(lnglat: vec2<f32>) -> vec2<f32> {
  var x = lnglat.x;
  if (project.wrapLongitude != 0) {
    x = ((x + 180.0) % 360.0) - 180.0;
  }
  let y = clamp(lnglat.y, -89.9, 89.9);
  return vec2<f32>(
    radians(x) + PI,
    PI + log(tan(PI * 0.25 + radians(y) * 0.5))
  ) * WORLD_SCALE;
}

// Projects lng/lat/z coordinates for a globe projection.
fn project_globe_(lnglatz: vec3<f32>) -> vec3<f32> {
  let lambda = radians(lnglatz.x);
  let phi = radians(lnglatz.y);
  let cosPhi = cos(phi);
  let D = (lnglatz.z / EARTH_RADIUS + 1.0) * GLOBE_RADIUS;
  return vec3<f32>(
    sin(lambda) * cosPhi,
    -cos(lambda) * cosPhi,
    sin(phi)
  ) * D;
}

// Projects positions (with an optional 64-bit low part) from the input
// coordinate system to the common space.
fn project_position_vec4_f64(position: vec4<f32>, position64Low: vec3<f32>) -> vec4<f32> {
  var position_world = project.modelMatrix * position;

  // Work around for a Mac+NVIDIA bug:
  if (project.projectionMode == PROJECTION_MODE_WEB_MERCATOR) {
    if (project.coordinateSystem == COORDINATE_SYSTEM_LNGLAT) {
      return vec4<f32>(
        project_mercator_(position_world.xy),
        _project_size_at_latitude_m(position_world.z, position_world.y),
        position_world.w
      );
    }
    if (project.coordinateSystem == COORDINATE_SYSTEM_CARTESIAN) {
      position_world = vec4f(position_world.xyz + project.coordinateOrigin, position_world.w);
    }
  }
  if (project.projectionMode == PROJECTION_MODE_GLOBE) {
    if (project.coordinateSystem == COORDINATE_SYSTEM_LNGLAT) {
      return vec4<f32>(
        project_globe_(position_world.xyz),
        position_world.w
      );
    }
  }
  if (project.projectionMode == PROJECTION_MODE_WEB_MERCATOR_AUTO_OFFSET) {
    if (project.coordinateSystem == COORDINATE_SYSTEM_LNGLAT) {
      if (abs(position_world.y - project.coordinateOrigin.y) > 0.25) {
        return vec4<f32>(
          project_mercator_(position_world.xy) - project.commonOrigin.xy,
          project_size_float(position_world.z),
          position_world.w
        );
      }
    }
  }
  if (project.projectionMode == PROJECTION_MODE_IDENTITY ||
      (project.projectionMode == PROJECTION_MODE_WEB_MERCATOR_AUTO_OFFSET &&
       (project.coordinateSystem == COORDINATE_SYSTEM_LNGLAT ||
        project.coordinateSystem == COORDINATE_SYSTEM_CARTESIAN))) {
    position_world = vec4f(position_world.xyz - project.coordinateOrigin, position_world.w);
  }

  return project_offset_(position_world) +
         project_offset_(project.modelMatrix * vec4<f32>(position64Low, 0.0));
}

// Overloaded versions for different input types.
fn project_position_vec4_f32(position: vec4<f32>) -> vec4<f32> {
  return project_position_vec4_f64(position, ZERO_64_LOW);
}

fn project_position_vec3_f64(position: vec3<f32>, position64Low: vec3<f32>) -> vec3<f32> {
  let projected_position = project_position_vec4_f64(vec4<f32>(position, 1.0), position64Low);
  return projected_position.xyz;
}

fn project_position_vec3_f32(position: vec3<f32>) -> vec3<f32> {
  let projected_position = project_position_vec4_f64(vec4<f32>(position, 1.0), ZERO_64_LOW);
  return projected_position.xyz;
}

fn project_position_vec2_f32(position: vec2<f32>) -> vec2<f32> {
  let projected_position = project_position_vec4_f64(vec4<f32>(position, 0.0, 1.0), ZERO_64_LOW);
  return projected_position.xy;
}

// Transforms a common space position to clip space.
fn project_common_position_to_clipspace_with_projection(position: vec4<f32>, viewProjectionMatrix: mat4x4<f32>, center: vec4<f32>) -> vec4<f32> {
  return viewProjectionMatrix * position + center;
}

// Uses the project viewProjectionMatrix and center.
fn project_common_position_to_clipspace(position: vec4<f32>) -> vec4<f32> {
  return project_common_position_to_clipspace_with_projection(position, project.viewProjectionMatrix, project.center);
}

// Returns a clip space offset corresponding to a given number of screen pixels.
fn project_pixel_size_to_clipspace(pixels: vec2<f32>) -> vec2<f32> {
  let offset = pixels / project.viewportSize * project.devicePixelRatio * 2.0;
  return offset * project.focalDistance;
}

fn project_meter_size_to_pixel(meters: f32) -> f32 {
  return project_size_float(meters) * project.scale;
}

fn project_unit_size_to_pixel(size: f32, unit: i32) -> f32 {
  if (unit == UNIT_METERS) {
    return project_meter_size_to_pixel(size);
  } else if (unit == UNIT_COMMON) {
    return size * project.scale;
  }
  // UNIT_PIXELS: no scaling applied.
  return size;
}

fn project_pixel_size_float(pixels: f32) -> f32 {
  return pixels / project.scale;
}

fn project_pixel_size_vec2(pixels: vec2<f32>) -> vec2<f32> {
  return pixels / project.scale;
}
`
);

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/shaderlib/project/project.glsl.js
var COORDINATE_SYSTEM_GLSL_CONSTANTS = Object.keys(COORDINATE_SYSTEM).map((key) => `const int COORDINATE_SYSTEM_${key} = ${COORDINATE_SYSTEM[key]};`).join("");
var PROJECTION_MODE_GLSL_CONSTANTS = Object.keys(PROJECTION_MODE).map((key) => `const int PROJECTION_MODE_${key} = ${PROJECTION_MODE[key]};`).join("");
var UNIT_GLSL_CONSTANTS = Object.keys(UNIT).map((key) => `const int UNIT_${key.toUpperCase()} = ${UNIT[key]};`).join("");
var projectGLSL = (
  /* glsl */
  `${COORDINATE_SYSTEM_GLSL_CONSTANTS}
${PROJECTION_MODE_GLSL_CONSTANTS}
${UNIT_GLSL_CONSTANTS}
uniform projectUniforms {
bool wrapLongitude;
int coordinateSystem;
vec3 commonUnitsPerMeter;
int projectionMode;
float scale;
vec3 commonUnitsPerWorldUnit;
vec3 commonUnitsPerWorldUnit2;
vec4 center;
mat4 modelMatrix;
mat4 viewProjectionMatrix;
vec2 viewportSize;
float devicePixelRatio;
float focalDistance;
vec3 cameraPosition;
vec3 coordinateOrigin;
vec3 commonOrigin;
bool pseudoMeters;
} project;
const float TILE_SIZE = 512.0;
const float PI = 3.1415926536;
const float WORLD_SCALE = TILE_SIZE / (PI * 2.0);
const vec3 ZERO_64_LOW = vec3(0.0);
const float EARTH_RADIUS = 6370972.0;
const float GLOBE_RADIUS = 256.0;
float project_size_at_latitude(float lat) {
float y = clamp(lat, -89.9, 89.9);
return 1.0 / cos(radians(y));
}
float project_size() {
if (project.projectionMode == PROJECTION_MODE_WEB_MERCATOR &&
project.coordinateSystem == COORDINATE_SYSTEM_LNGLAT &&
project.pseudoMeters == false) {
if (geometry.position.w == 0.0) {
return project_size_at_latitude(geometry.worldPosition.y);
}
float y = geometry.position.y / TILE_SIZE * 2.0 - 1.0;
float y2 = y * y;
float y4 = y2 * y2;
float y6 = y4 * y2;
return 1.0 + 4.9348 * y2 + 4.0587 * y4 + 1.5642 * y6;
}
return 1.0;
}
float project_size_at_latitude(float meters, float lat) {
return meters * project.commonUnitsPerMeter.z * project_size_at_latitude(lat);
}
float project_size(float meters) {
return meters * project.commonUnitsPerMeter.z * project_size();
}
vec2 project_size(vec2 meters) {
return meters * project.commonUnitsPerMeter.xy * project_size();
}
vec3 project_size(vec3 meters) {
return meters * project.commonUnitsPerMeter * project_size();
}
vec4 project_size(vec4 meters) {
return vec4(meters.xyz * project.commonUnitsPerMeter, meters.w);
}
mat3 project_get_orientation_matrix(vec3 up) {
vec3 uz = normalize(up);
vec3 ux = abs(uz.z) == 1.0 ? vec3(1.0, 0.0, 0.0) : normalize(vec3(uz.y, -uz.x, 0));
vec3 uy = cross(uz, ux);
return mat3(ux, uy, uz);
}
bool project_needs_rotation(vec3 commonPosition, out mat3 transform) {
if (project.projectionMode == PROJECTION_MODE_GLOBE) {
transform = project_get_orientation_matrix(commonPosition);
return true;
}
return false;
}
vec3 project_normal(vec3 vector) {
vec4 normal_modelspace = project.modelMatrix * vec4(vector, 0.0);
vec3 n = normalize(normal_modelspace.xyz * project.commonUnitsPerMeter);
mat3 rotation;
if (project_needs_rotation(geometry.position.xyz, rotation)) {
n = rotation * n;
}
return n;
}
vec4 project_offset_(vec4 offset) {
float dy = offset.y;
vec3 commonUnitsPerWorldUnit = project.commonUnitsPerWorldUnit + project.commonUnitsPerWorldUnit2 * dy;
return vec4(offset.xyz * commonUnitsPerWorldUnit, offset.w);
}
vec2 project_mercator_(vec2 lnglat) {
float x = lnglat.x;
if (project.wrapLongitude) {
x = mod(x + 180., 360.0) - 180.;
}
float y = clamp(lnglat.y, -89.9, 89.9);
return vec2(
radians(x) + PI,
PI + log(tan_fp32(PI * 0.25 + radians(y) * 0.5))
) * WORLD_SCALE;
}
vec3 project_globe_(vec3 lnglatz) {
float lambda = radians(lnglatz.x);
float phi = radians(lnglatz.y);
float cosPhi = cos(phi);
float D = (lnglatz.z / EARTH_RADIUS + 1.0) * GLOBE_RADIUS;
return vec3(
sin(lambda) * cosPhi,
-cos(lambda) * cosPhi,
sin(phi)
) * D;
}
vec4 project_position(vec4 position, vec3 position64Low) {
vec4 position_world = project.modelMatrix * position;
if (project.projectionMode == PROJECTION_MODE_WEB_MERCATOR) {
if (project.coordinateSystem == COORDINATE_SYSTEM_LNGLAT) {
return vec4(
project_mercator_(position_world.xy),
project_size_at_latitude(position_world.z, position_world.y),
position_world.w
);
}
if (project.coordinateSystem == COORDINATE_SYSTEM_CARTESIAN) {
position_world.xyz += project.coordinateOrigin;
}
}
if (project.projectionMode == PROJECTION_MODE_GLOBE) {
if (project.coordinateSystem == COORDINATE_SYSTEM_LNGLAT) {
return vec4(
project_globe_(position_world.xyz),
position_world.w
);
}
}
if (project.projectionMode == PROJECTION_MODE_WEB_MERCATOR_AUTO_OFFSET) {
if (project.coordinateSystem == COORDINATE_SYSTEM_LNGLAT) {
if (abs(position_world.y - project.coordinateOrigin.y) > 0.25) {
return vec4(
project_mercator_(position_world.xy) - project.commonOrigin.xy,
project_size(position_world.z),
position_world.w
);
}
}
}
if (project.projectionMode == PROJECTION_MODE_IDENTITY ||
(project.projectionMode == PROJECTION_MODE_WEB_MERCATOR_AUTO_OFFSET &&
(project.coordinateSystem == COORDINATE_SYSTEM_LNGLAT ||
project.coordinateSystem == COORDINATE_SYSTEM_CARTESIAN))) {
position_world.xyz -= project.coordinateOrigin;
}
return project_offset_(position_world) + project_offset_(project.modelMatrix * vec4(position64Low, 0.0));
}
vec4 project_position(vec4 position) {
return project_position(position, ZERO_64_LOW);
}
vec3 project_position(vec3 position, vec3 position64Low) {
vec4 projected_position = project_position(vec4(position, 1.0), position64Low);
return projected_position.xyz;
}
vec3 project_position(vec3 position) {
vec4 projected_position = project_position(vec4(position, 1.0), ZERO_64_LOW);
return projected_position.xyz;
}
vec2 project_position(vec2 position) {
vec4 projected_position = project_position(vec4(position, 0.0, 1.0), ZERO_64_LOW);
return projected_position.xy;
}
vec4 project_common_position_to_clipspace(vec4 position, mat4 viewProjectionMatrix, vec4 center) {
return viewProjectionMatrix * position + center;
}
vec4 project_common_position_to_clipspace(vec4 position) {
return project_common_position_to_clipspace(position, project.viewProjectionMatrix, project.center);
}
vec2 project_pixel_size_to_clipspace(vec2 pixels) {
vec2 offset = pixels / project.viewportSize * project.devicePixelRatio * 2.0;
return offset * project.focalDistance;
}
float project_size_to_pixel(float meters) {
return project_size(meters) * project.scale;
}
float project_size_to_pixel(float size, int unit) {
if (unit == UNIT_METERS) return project_size_to_pixel(size);
if (unit == UNIT_COMMON) return size * project.scale;
return size;
}
float project_pixel_size(float pixels) {
return pixels / project.scale;
}
vec2 project_pixel_size(vec2 pixels) {
return pixels / project.scale;
}
`
);

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/shaderlib/project/project.js
var INITIAL_MODULE_OPTIONS = {};
function getUniforms3(opts = INITIAL_MODULE_OPTIONS) {
  if ("viewport" in opts) {
    return getUniformsFromViewport(opts);
  }
  return {};
}
var project_default = {
  name: "project",
  dependencies: [fp32, geometry_default],
  source: projectWGSL,
  vs: projectGLSL,
  getUniforms: getUniforms3,
  uniformTypes: {
    wrapLongitude: "f32",
    coordinateSystem: "i32",
    commonUnitsPerMeter: "vec3<f32>",
    projectionMode: "i32",
    scale: "f32",
    commonUnitsPerWorldUnit: "vec3<f32>",
    commonUnitsPerWorldUnit2: "vec3<f32>",
    center: "vec4<f32>",
    modelMatrix: "mat4x4<f32>",
    viewProjectionMatrix: "mat4x4<f32>",
    viewportSize: "vec2<f32>",
    devicePixelRatio: "f32",
    focalDistance: "f32",
    cameraPosition: "vec3<f32>",
    coordinateOrigin: "vec3<f32>",
    commonOrigin: "vec3<f32>",
    pseudoMeters: "f32"
  }
  // @ts-ignore TODO v9.1
};

// ../../../.yarn/berry/cache/@math.gl-web-mercator-npm-4.1.0-b54da0cb54-10c0.zip/node_modules/@math.gl/web-mercator/dist/math-utils.js
function createMat4() {
  return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
}
function transformVector(matrix, vector) {
  const result = vec4_exports.transformMat4([], vector, matrix);
  vec4_exports.scale(result, result, 1 / result[3]);
  return result;
}
function mod(value, divisor) {
  const modulus = value % divisor;
  return modulus < 0 ? divisor + modulus : modulus;
}
function lerp6(start, end, step) {
  return step * end + (1 - step) * start;
}
function clamp2(x3, min4, max4) {
  return x3 < min4 ? min4 : x3 > max4 ? max4 : x3;
}
function ieLog2(x3) {
  return Math.log(x3) * Math.LOG2E;
}
var log22 = Math.log2 || ieLog2;

// ../../../.yarn/berry/cache/@math.gl-web-mercator-npm-4.1.0-b54da0cb54-10c0.zip/node_modules/@math.gl/web-mercator/dist/assert.js
function assert7(condition, message2) {
  if (!condition) {
    throw new Error(message2 || "@math.gl/web-mercator: assertion failed.");
  }
}

// ../../../.yarn/berry/cache/@math.gl-web-mercator-npm-4.1.0-b54da0cb54-10c0.zip/node_modules/@math.gl/web-mercator/dist/web-mercator-utils.js
var PI = Math.PI;
var PI_4 = PI / 4;
var DEGREES_TO_RADIANS2 = PI / 180;
var RADIANS_TO_DEGREES2 = 180 / PI;
var TILE_SIZE = 512;
var EARTH_CIRCUMFERENCE = 4003e4;
var MAX_LATITUDE = 85.051129;
var DEFAULT_ALTITUDE = 1.5;
function zoomToScale(zoom) {
  return Math.pow(2, zoom);
}
function scaleToZoom(scale7) {
  return log22(scale7);
}
function lngLatToWorld(lngLat) {
  const [lng, lat] = lngLat;
  assert7(Number.isFinite(lng));
  assert7(Number.isFinite(lat) && lat >= -90 && lat <= 90, "invalid latitude");
  const lambda2 = lng * DEGREES_TO_RADIANS2;
  const phi2 = lat * DEGREES_TO_RADIANS2;
  const x3 = TILE_SIZE * (lambda2 + PI) / (2 * PI);
  const y3 = TILE_SIZE * (PI + Math.log(Math.tan(PI_4 + phi2 * 0.5))) / (2 * PI);
  return [x3, y3];
}
function worldToLngLat(xy) {
  const [x3, y3] = xy;
  const lambda2 = x3 / TILE_SIZE * (2 * PI) - PI;
  const phi2 = 2 * (Math.atan(Math.exp(y3 / TILE_SIZE * (2 * PI) - PI)) - PI_4);
  return [lambda2 * RADIANS_TO_DEGREES2, phi2 * RADIANS_TO_DEGREES2];
}
function getMeterZoom(options) {
  const { latitude } = options;
  assert7(Number.isFinite(latitude));
  const latCosine = Math.cos(latitude * DEGREES_TO_RADIANS2);
  return scaleToZoom(EARTH_CIRCUMFERENCE * latCosine) - 9;
}
function unitsPerMeter(latitude) {
  const latCosine = Math.cos(latitude * DEGREES_TO_RADIANS2);
  return TILE_SIZE / EARTH_CIRCUMFERENCE / latCosine;
}
function getDistanceScales(options) {
  const { latitude, longitude, highPrecision = false } = options;
  assert7(Number.isFinite(latitude) && Number.isFinite(longitude));
  const worldSize = TILE_SIZE;
  const latCosine = Math.cos(latitude * DEGREES_TO_RADIANS2);
  const unitsPerDegreeX = worldSize / 360;
  const unitsPerDegreeY = unitsPerDegreeX / latCosine;
  const altUnitsPerMeter = worldSize / EARTH_CIRCUMFERENCE / latCosine;
  const result = {
    unitsPerMeter: [altUnitsPerMeter, altUnitsPerMeter, altUnitsPerMeter],
    metersPerUnit: [1 / altUnitsPerMeter, 1 / altUnitsPerMeter, 1 / altUnitsPerMeter],
    unitsPerDegree: [unitsPerDegreeX, unitsPerDegreeY, altUnitsPerMeter],
    degreesPerUnit: [1 / unitsPerDegreeX, 1 / unitsPerDegreeY, 1 / altUnitsPerMeter]
  };
  if (highPrecision) {
    const latCosine2 = DEGREES_TO_RADIANS2 * Math.tan(latitude * DEGREES_TO_RADIANS2) / latCosine;
    const unitsPerDegreeY2 = unitsPerDegreeX * latCosine2 / 2;
    const altUnitsPerDegree2 = worldSize / EARTH_CIRCUMFERENCE * latCosine2;
    const altUnitsPerMeter2 = altUnitsPerDegree2 / unitsPerDegreeY * altUnitsPerMeter;
    result.unitsPerDegree2 = [0, unitsPerDegreeY2, altUnitsPerDegree2];
    result.unitsPerMeter2 = [altUnitsPerMeter2, 0, altUnitsPerMeter2];
  }
  return result;
}
function addMetersToLngLat(lngLatZ, xyz) {
  const [longitude, latitude, z0] = lngLatZ;
  const [x3, y3, z3] = xyz;
  const { unitsPerMeter: unitsPerMeter2, unitsPerMeter2: unitsPerMeter22 } = getDistanceScales({
    longitude,
    latitude,
    highPrecision: true
  });
  const worldspace = lngLatToWorld(lngLatZ);
  worldspace[0] += x3 * (unitsPerMeter2[0] + unitsPerMeter22[0] * y3);
  worldspace[1] += y3 * (unitsPerMeter2[1] + unitsPerMeter22[1] * y3);
  const newLngLat = worldToLngLat(worldspace);
  const newZ = (z0 || 0) + (z3 || 0);
  return Number.isFinite(z0) || Number.isFinite(z3) ? [newLngLat[0], newLngLat[1], newZ] : newLngLat;
}
function getViewMatrix(options) {
  const {
    // Viewport props
    height,
    pitch,
    bearing,
    altitude,
    // Pre-calculated parameters
    scale: scale7,
    center
  } = options;
  const vm = createMat4();
  mat4_exports.translate(vm, vm, [0, 0, -altitude]);
  mat4_exports.rotateX(vm, vm, -pitch * DEGREES_TO_RADIANS2);
  mat4_exports.rotateZ(vm, vm, bearing * DEGREES_TO_RADIANS2);
  const relativeScale = scale7 / height;
  mat4_exports.scale(vm, vm, [relativeScale, relativeScale, relativeScale]);
  if (center) {
    mat4_exports.translate(vm, vm, vec3_exports.negate([], center));
  }
  return vm;
}
function getProjectionParameters(options) {
  const { width, height, altitude, pitch = 0, offset, center, scale: scale7, nearZMultiplier = 1, farZMultiplier = 1 } = options;
  let { fovy = altitudeToFovy(DEFAULT_ALTITUDE) } = options;
  if (altitude !== void 0) {
    fovy = altitudeToFovy(altitude);
  }
  const fovRadians = fovy * DEGREES_TO_RADIANS2;
  const pitchRadians = pitch * DEGREES_TO_RADIANS2;
  const focalDistance = fovyToAltitude(fovy);
  let cameraToSeaLevelDistance = focalDistance;
  if (center) {
    cameraToSeaLevelDistance += center[2] * scale7 / Math.cos(pitchRadians) / height;
  }
  const fovAboveCenter = fovRadians * (0.5 + (offset ? offset[1] : 0) / height);
  const topHalfSurfaceDistance = Math.sin(fovAboveCenter) * cameraToSeaLevelDistance / Math.sin(clamp2(Math.PI / 2 - pitchRadians - fovAboveCenter, 0.01, Math.PI - 0.01));
  const furthestDistance = Math.sin(pitchRadians) * topHalfSurfaceDistance + cameraToSeaLevelDistance;
  const horizonDistance = cameraToSeaLevelDistance * 10;
  const farZ = Math.min(furthestDistance * farZMultiplier, horizonDistance);
  return {
    fov: fovRadians,
    aspect: width / height,
    focalDistance,
    near: nearZMultiplier,
    far: farZ
  };
}
function altitudeToFovy(altitude) {
  return 2 * Math.atan(0.5 / altitude) * RADIANS_TO_DEGREES2;
}
function fovyToAltitude(fovy) {
  return 0.5 / Math.tan(0.5 * fovy * DEGREES_TO_RADIANS2);
}
function worldToPixels(xyz, pixelProjectionMatrix) {
  const [x3, y3, z3 = 0] = xyz;
  assert7(Number.isFinite(x3) && Number.isFinite(y3) && Number.isFinite(z3));
  return transformVector(pixelProjectionMatrix, [x3, y3, z3, 1]);
}
function pixelsToWorld(xyz, pixelUnprojectionMatrix, targetZ = 0) {
  const [x3, y3, z3] = xyz;
  assert7(Number.isFinite(x3) && Number.isFinite(y3), "invalid pixel coordinate");
  if (Number.isFinite(z3)) {
    const coord = transformVector(pixelUnprojectionMatrix, [x3, y3, z3, 1]);
    return coord;
  }
  const coord0 = transformVector(pixelUnprojectionMatrix, [x3, y3, 0, 1]);
  const coord1 = transformVector(pixelUnprojectionMatrix, [x3, y3, 1, 1]);
  const z0 = coord0[2];
  const z1 = coord1[2];
  const t3 = z0 === z1 ? 0 : ((targetZ || 0) - z0) / (z1 - z0);
  return vec2_exports.lerp([], coord0, coord1, t3);
}

// ../../../.yarn/berry/cache/@math.gl-web-mercator-npm-4.1.0-b54da0cb54-10c0.zip/node_modules/@math.gl/web-mercator/dist/fit-bounds.js
function fitBounds(options) {
  const {
    width,
    height,
    bounds,
    minExtent = 0,
    // 0.01 would be about 1000 meters (degree is ~110KM)
    maxZoom = 24,
    // ~x4,000,000 => About 10 meter extents
    offset = [0, 0]
  } = options;
  const [[west, south], [east, north]] = bounds;
  const padding = getPaddingObject(options.padding);
  const nw = lngLatToWorld([west, clamp2(north, -MAX_LATITUDE, MAX_LATITUDE)]);
  const se2 = lngLatToWorld([east, clamp2(south, -MAX_LATITUDE, MAX_LATITUDE)]);
  const size = [
    Math.max(Math.abs(se2[0] - nw[0]), minExtent),
    Math.max(Math.abs(se2[1] - nw[1]), minExtent)
  ];
  const targetSize = [
    width - padding.left - padding.right - Math.abs(offset[0]) * 2,
    height - padding.top - padding.bottom - Math.abs(offset[1]) * 2
  ];
  assert7(targetSize[0] > 0 && targetSize[1] > 0);
  const scaleX2 = targetSize[0] / size[0];
  const scaleY2 = targetSize[1] / size[1];
  const offsetX = (padding.right - padding.left) / 2 / scaleX2;
  const offsetY = (padding.top - padding.bottom) / 2 / scaleY2;
  const center = [(se2[0] + nw[0]) / 2 + offsetX, (se2[1] + nw[1]) / 2 + offsetY];
  const centerLngLat = worldToLngLat(center);
  const zoom = Math.min(maxZoom, log22(Math.abs(Math.min(scaleX2, scaleY2))));
  assert7(Number.isFinite(zoom));
  return {
    longitude: centerLngLat[0],
    latitude: centerLngLat[1],
    zoom
  };
}
function getPaddingObject(padding = 0) {
  if (typeof padding === "number") {
    return {
      top: padding,
      bottom: padding,
      left: padding,
      right: padding
    };
  }
  assert7(Number.isFinite(padding.top) && Number.isFinite(padding.bottom) && Number.isFinite(padding.left) && Number.isFinite(padding.right));
  return padding;
}

// ../../../.yarn/berry/cache/@math.gl-web-mercator-npm-4.1.0-b54da0cb54-10c0.zip/node_modules/@math.gl/web-mercator/dist/get-bounds.js
var DEGREES_TO_RADIANS3 = Math.PI / 180;
function getBounds(viewport, z3 = 0) {
  const { width, height, unproject } = viewport;
  const unprojectOps = { targetZ: z3 };
  const bottomLeft = unproject([0, height], unprojectOps);
  const bottomRight = unproject([width, height], unprojectOps);
  let topLeft;
  let topRight;
  const halfFov = viewport.fovy ? 0.5 * viewport.fovy * DEGREES_TO_RADIANS3 : Math.atan(0.5 / viewport.altitude);
  const angleToGround = (90 - viewport.pitch) * DEGREES_TO_RADIANS3;
  if (halfFov > angleToGround - 0.01) {
    topLeft = unprojectOnFarPlane(viewport, 0, z3);
    topRight = unprojectOnFarPlane(viewport, width, z3);
  } else {
    topLeft = unproject([0, 0], unprojectOps);
    topRight = unproject([width, 0], unprojectOps);
  }
  return [bottomLeft, bottomRight, topRight, topLeft];
}
function unprojectOnFarPlane(viewport, x3, targetZ) {
  const { pixelUnprojectionMatrix } = viewport;
  const coord0 = transformVector(pixelUnprojectionMatrix, [x3, 0, 1, 1]);
  const coord1 = transformVector(pixelUnprojectionMatrix, [x3, viewport.height, 1, 1]);
  const z3 = targetZ * viewport.distanceScales.unitsPerMeter[2];
  const t3 = (z3 - coord0[2]) / (coord1[2] - coord0[2]);
  const coord = vec2_exports.lerp([], coord0, coord1, t3);
  const result = worldToLngLat(coord);
  result.push(targetZ);
  return result;
}

// ../../../.yarn/berry/cache/@math.gl-web-mercator-npm-4.1.0-b54da0cb54-10c0.zip/node_modules/@math.gl/web-mercator/dist/normalize-viewport-props.js
var TILE_SIZE2 = 512;
function normalizeViewportProps(props) {
  const { width, height, pitch = 0 } = props;
  let { longitude, latitude, zoom, bearing = 0 } = props;
  if (longitude < -180 || longitude > 180) {
    longitude = mod(longitude + 180, 360) - 180;
  }
  if (bearing < -180 || bearing > 180) {
    bearing = mod(bearing + 180, 360) - 180;
  }
  const minZoom = log22(height / TILE_SIZE2);
  if (zoom <= minZoom) {
    zoom = minZoom;
    latitude = 0;
  } else {
    const halfHeightPixels = height / 2 / Math.pow(2, zoom);
    const minLatitude = worldToLngLat([0, halfHeightPixels])[1];
    if (latitude < minLatitude) {
      latitude = minLatitude;
    } else {
      const maxLatitude = worldToLngLat([0, TILE_SIZE2 - halfHeightPixels])[1];
      if (latitude > maxLatitude) {
        latitude = maxLatitude;
      }
    }
  }
  return { width, height, longitude, latitude, zoom, pitch, bearing };
}

// ../../../.yarn/berry/cache/@math.gl-web-mercator-npm-4.1.0-b54da0cb54-10c0.zip/node_modules/@math.gl/web-mercator/dist/fly-to-viewport.js
var EPSILON21 = 0.01;
var VIEWPORT_TRANSITION_PROPS = ["longitude", "latitude", "zoom"];
var DEFAULT_OPTS = {
  curve: 1.414,
  speed: 1.2
  // screenSpeed and maxDuration are used only if specified
};
function flyToViewport(startProps, endProps, t3, options) {
  const { startZoom, startCenterXY, uDelta, w0, u1, S: S3, rho, rho2, r0 } = getFlyToTransitionParams(startProps, endProps, options);
  if (u1 < EPSILON21) {
    const viewport = {};
    for (const key of VIEWPORT_TRANSITION_PROPS) {
      const startValue = startProps[key];
      const endValue = endProps[key];
      viewport[key] = lerp6(startValue, endValue, t3);
    }
    return viewport;
  }
  const s3 = t3 * S3;
  const w3 = Math.cosh(r0) / Math.cosh(r0 + rho * s3);
  const u4 = w0 * ((Math.cosh(r0) * Math.tanh(r0 + rho * s3) - Math.sinh(r0)) / rho2) / u1;
  const scaleIncrement = 1 / w3;
  const newZoom = startZoom + scaleToZoom(scaleIncrement);
  const newCenterWorld = vec2_exports.scale([], uDelta, u4);
  vec2_exports.add(newCenterWorld, newCenterWorld, startCenterXY);
  const newCenter = worldToLngLat(newCenterWorld);
  return {
    longitude: newCenter[0],
    latitude: newCenter[1],
    zoom: newZoom
  };
}
function getFlyToDuration(startProps, endProps, options) {
  const opts = { ...DEFAULT_OPTS, ...options };
  const { screenSpeed, speed, maxDuration } = opts;
  const { S: S3, rho } = getFlyToTransitionParams(startProps, endProps, opts);
  const length5 = 1e3 * S3;
  let duration;
  if (Number.isFinite(screenSpeed)) {
    duration = length5 / (screenSpeed / rho);
  } else {
    duration = length5 / speed;
  }
  return Number.isFinite(maxDuration) && duration > maxDuration ? 0 : duration;
}
function getFlyToTransitionParams(startProps, endProps, opts) {
  opts = Object.assign({}, DEFAULT_OPTS, opts);
  const rho = opts.curve;
  const startZoom = startProps.zoom;
  const startCenter = [startProps.longitude, startProps.latitude];
  const startScale = zoomToScale(startZoom);
  const endZoom = endProps.zoom;
  const endCenter = [endProps.longitude, endProps.latitude];
  const scale7 = zoomToScale(endZoom - startZoom);
  const startCenterXY = lngLatToWorld(startCenter);
  const endCenterXY = lngLatToWorld(endCenter);
  const uDelta = vec2_exports.sub([], endCenterXY, startCenterXY);
  const w0 = Math.max(startProps.width, startProps.height);
  const w1 = w0 / scale7;
  const u1 = vec2_exports.length(uDelta) * startScale;
  const _u1 = Math.max(u1, EPSILON21);
  const rho2 = rho * rho;
  const b0 = (w1 * w1 - w0 * w0 + rho2 * rho2 * _u1 * _u1) / (2 * w0 * rho2 * _u1);
  const b1 = (w1 * w1 - w0 * w0 - rho2 * rho2 * _u1 * _u1) / (2 * w1 * rho2 * _u1);
  const r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0);
  const r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
  const S3 = (r1 - r0) / rho;
  return { startZoom, startCenterXY, uDelta, w0, u1, S: S3, rho, rho2, r0, r1 };
}

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/shaderlib/shadow/shadow.js
var uniformBlock2 = (
  /* glsl */
  `
uniform shadowUniforms {
  bool drawShadowMap;
  bool useShadowMap;
  vec4 color;
  highp int lightId;
  float lightCount;
  mat4 viewProjectionMatrix0;
  mat4 viewProjectionMatrix1;
  vec4 projectCenter0;
  vec4 projectCenter1;
} shadow;
`
);
var vertex = (
  /* glsl */
  `
const int max_lights = 2;

out vec3 shadow_vPosition[max_lights];

vec4 shadow_setVertexPosition(vec4 position_commonspace) {
  mat4 viewProjectionMatrices[max_lights];
  viewProjectionMatrices[0] = shadow.viewProjectionMatrix0;
  viewProjectionMatrices[1] = shadow.viewProjectionMatrix1;
  vec4 projectCenters[max_lights];
  projectCenters[0] = shadow.projectCenter0;
  projectCenters[1] = shadow.projectCenter1;

  if (shadow.drawShadowMap) {
    return project_common_position_to_clipspace(position_commonspace, viewProjectionMatrices[shadow.lightId], projectCenters[shadow.lightId]);
  }
  if (shadow.useShadowMap) {
    for (int i = 0; i < max_lights; i++) {
      if(i < int(shadow.lightCount)) {
        vec4 shadowMap_position = project_common_position_to_clipspace(position_commonspace, viewProjectionMatrices[i], projectCenters[i]);
        shadow_vPosition[i] = (shadowMap_position.xyz / shadowMap_position.w + 1.0) / 2.0;
      }
    }
  }
  return gl_Position;
}
`
);
var vs6 = `
${uniformBlock2}
${vertex}
`;
var fragment = (
  /* glsl */
  `
const int max_lights = 2;
uniform sampler2D shadow_uShadowMap0;
uniform sampler2D shadow_uShadowMap1;

in vec3 shadow_vPosition[max_lights];

const vec4 bitPackShift = vec4(1.0, 255.0, 65025.0, 16581375.0);
const vec4 bitUnpackShift = 1.0 / bitPackShift;
const vec4 bitMask = vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0,  0.0);

float shadow_getShadowWeight(vec3 position, sampler2D shadowMap) {
  vec4 rgbaDepth = texture(shadowMap, position.xy);

  float z = dot(rgbaDepth, bitUnpackShift);
  return smoothstep(0.001, 0.01, position.z - z);
}

vec4 shadow_filterShadowColor(vec4 color) {
  if (shadow.drawShadowMap) {
    vec4 rgbaDepth = fract(gl_FragCoord.z * bitPackShift);
    rgbaDepth -= rgbaDepth.gbaa * bitMask;
    return rgbaDepth;
  }
  if (shadow.useShadowMap) {
    float shadowAlpha = 0.0;
    shadowAlpha += shadow_getShadowWeight(shadow_vPosition[0], shadow_uShadowMap0);
    if(shadow.lightCount > 1.0) {
      shadowAlpha += shadow_getShadowWeight(shadow_vPosition[1], shadow_uShadowMap1);
    }
    shadowAlpha *= shadow.color.a / shadow.lightCount;
    float blendedAlpha = shadowAlpha + color.a * (1.0 - shadowAlpha);

    return vec4(
      mix(color.rgb, shadow.color.rgb, shadowAlpha / blendedAlpha),
      blendedAlpha
    );
  }
  return color;
}
`
);
var fs6 = `
${uniformBlock2}
${fragment}
`;
var getMemoizedViewportCenterPosition = memoize(getViewportCenterPosition);
var getMemoizedViewProjectionMatrices = memoize(getViewProjectionMatrices);
var DEFAULT_SHADOW_COLOR = [0, 0, 0, 1];
var VECTOR_TO_POINT_MATRIX2 = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0];
function screenToCommonSpace(xyz, pixelUnprojectionMatrix) {
  const [x3, y3, z3] = xyz;
  const coord = pixelsToWorld([x3, y3, z3], pixelUnprojectionMatrix);
  if (Number.isFinite(z3)) {
    return coord;
  }
  return [coord[0], coord[1], 0];
}
function getViewportCenterPosition({ viewport, center }) {
  return new Matrix4(viewport.viewProjectionMatrix).invert().transform(center);
}
function getViewProjectionMatrices({ viewport, shadowMatrices }) {
  const projectionMatrices = [];
  const pixelUnprojectionMatrix = viewport.pixelUnprojectionMatrix;
  const farZ = viewport.isGeospatial ? void 0 : 1;
  const corners = [
    [0, 0, farZ],
    // top left ground
    [viewport.width, 0, farZ],
    // top right ground
    [0, viewport.height, farZ],
    // bottom left ground
    [viewport.width, viewport.height, farZ],
    // bottom right ground
    [0, 0, -1],
    // top left near
    [viewport.width, 0, -1],
    // top right near
    [0, viewport.height, -1],
    // bottom left near
    [viewport.width, viewport.height, -1]
    // bottom right near
  ].map((pixel) => (
    // @ts-expect-error z may be undefined
    screenToCommonSpace(pixel, pixelUnprojectionMatrix)
  ));
  for (const shadowMatrix of shadowMatrices) {
    const viewMatrix2 = shadowMatrix.clone().translate(new Vector3(viewport.center).negate());
    const positions = corners.map((corner) => viewMatrix2.transform(corner));
    const projectionMatrix = new Matrix4().ortho({
      left: Math.min(...positions.map((position) => position[0])),
      right: Math.max(...positions.map((position) => position[0])),
      bottom: Math.min(...positions.map((position) => position[1])),
      top: Math.max(...positions.map((position) => position[1])),
      near: Math.min(...positions.map((position) => -position[2])),
      far: Math.max(...positions.map((position) => -position[2]))
    });
    projectionMatrices.push(projectionMatrix.multiplyRight(shadowMatrix));
  }
  return projectionMatrices;
}
function createShadowUniforms(opts) {
  const { shadowEnabled = true, project: projectProps } = opts;
  if (!shadowEnabled || !projectProps || !opts.shadowMatrices || !opts.shadowMatrices.length) {
    return {
      drawShadowMap: false,
      useShadowMap: false,
      shadow_uShadowMap0: opts.dummyShadowMap,
      shadow_uShadowMap1: opts.dummyShadowMap
    };
  }
  const projectUniforms = project_default.getUniforms(projectProps);
  const center = getMemoizedViewportCenterPosition({
    viewport: projectProps.viewport,
    center: projectUniforms.center
  });
  const projectCenters = [];
  const viewProjectionMatrices = getMemoizedViewProjectionMatrices({
    shadowMatrices: opts.shadowMatrices,
    viewport: projectProps.viewport
  }).slice();
  for (let i4 = 0; i4 < opts.shadowMatrices.length; i4++) {
    const viewProjectionMatrix = viewProjectionMatrices[i4];
    const viewProjectionMatrixCentered = viewProjectionMatrix.clone().translate(new Vector3(projectProps.viewport.center).negate());
    if (projectUniforms.coordinateSystem === COORDINATE_SYSTEM.LNGLAT && projectUniforms.projectionMode === PROJECTION_MODE.WEB_MERCATOR) {
      viewProjectionMatrices[i4] = viewProjectionMatrixCentered;
      projectCenters[i4] = center;
    } else {
      viewProjectionMatrices[i4] = viewProjectionMatrix.clone().multiplyRight(VECTOR_TO_POINT_MATRIX2);
      projectCenters[i4] = viewProjectionMatrixCentered.transform(center);
    }
  }
  const uniforms = {
    drawShadowMap: Boolean(opts.drawToShadowMap),
    useShadowMap: opts.shadowMaps ? opts.shadowMaps.length > 0 : false,
    color: opts.shadowColor || DEFAULT_SHADOW_COLOR,
    lightId: opts.shadowLightId || 0,
    lightCount: opts.shadowMatrices.length,
    shadow_uShadowMap0: opts.dummyShadowMap,
    shadow_uShadowMap1: opts.dummyShadowMap
  };
  for (let i4 = 0; i4 < viewProjectionMatrices.length; i4++) {
    uniforms[`viewProjectionMatrix${i4}`] = viewProjectionMatrices[i4];
    uniforms[`projectCenter${i4}`] = projectCenters[i4];
  }
  for (let i4 = 0; i4 < 2; i4++) {
    uniforms[`shadow_uShadowMap${i4}`] = opts.shadowMaps && opts.shadowMaps[i4] || opts.dummyShadowMap;
  }
  return uniforms;
}
var shadow_default = {
  name: "shadow",
  dependencies: [project_default],
  vs: vs6,
  fs: fs6,
  inject: {
    "vs:DECKGL_FILTER_GL_POSITION": `
    position = shadow_setVertexPosition(geometry.position);
    `,
    "fs:DECKGL_FILTER_COLOR": `
    color = shadow_filterShadowColor(color);
    `
  },
  getUniforms: createShadowUniforms,
  uniformTypes: {
    drawShadowMap: "f32",
    useShadowMap: "f32",
    color: "vec4<f32>",
    lightId: "i32",
    lightCount: "f32",
    viewProjectionMatrix0: "mat4x4<f32>",
    viewProjectionMatrix1: "mat4x4<f32>",
    projectCenter0: "vec4<f32>",
    projectCenter1: "vec4<f32>"
  }
};

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/shaderlib/picking/picking.js
var picking_default = {
  ...picking,
  defaultUniforms: { ...picking.defaultUniforms, useFloatColors: false },
  inject: {
    "vs:DECKGL_FILTER_GL_POSITION": `
    // for picking depth values
    picking_setPickingAttribute(position.z / position.w);
  `,
    "vs:DECKGL_FILTER_COLOR": `
  picking_setPickingColor(geometry.pickingColor);
  `,
    "fs:DECKGL_FILTER_COLOR": {
      order: 99,
      injection: `
  // use highlight color if this fragment belongs to the selected object.
  color = picking_filterHighlightColor(color);

  // use picking color if rendering to picking FBO.
  color = picking_filterPickingColor(color);
    `
    }
  }
};

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/shaderlib/index.js
var DEFAULT_MODULES = [geometry_default];
var SHADER_HOOKS_GLSL = [
  "vs:DECKGL_FILTER_SIZE(inout vec3 size, VertexGeometry geometry)",
  "vs:DECKGL_FILTER_GL_POSITION(inout vec4 position, VertexGeometry geometry)",
  "vs:DECKGL_FILTER_COLOR(inout vec4 color, VertexGeometry geometry)",
  "fs:DECKGL_FILTER_COLOR(inout vec4 color, FragmentGeometry geometry)"
];
var SHADER_HOOKS_WGSL = [
  // Not yet supported
];
function getShaderAssembler(language) {
  const shaderAssembler = ShaderAssembler.getDefaultShaderAssembler();
  for (const shaderModule of DEFAULT_MODULES) {
    shaderAssembler.addDefaultModule(shaderModule);
  }
  const shaderHooks = language === "glsl" ? SHADER_HOOKS_GLSL : SHADER_HOOKS_WGSL;
  for (const shaderHook of shaderHooks) {
    shaderAssembler.addShaderHook(shaderHook);
  }
  return shaderAssembler;
}

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/effects/lighting/ambient-light.js
var DEFAULT_LIGHT_COLOR = [255, 255, 255];
var DEFAULT_LIGHT_INTENSITY = 1;
var idCount = 0;
var AmbientLight = class {
  constructor(props = {}) {
    this.type = "ambient";
    const { color = DEFAULT_LIGHT_COLOR } = props;
    const { intensity = DEFAULT_LIGHT_INTENSITY } = props;
    this.id = props.id || `ambient-${idCount++}`;
    this.color = color;
    this.intensity = intensity;
  }
};

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/effects/lighting/directional-light.js
var DEFAULT_LIGHT_COLOR2 = [255, 255, 255];
var DEFAULT_LIGHT_INTENSITY2 = 1;
var DEFAULT_LIGHT_DIRECTION = [0, 0, -1];
var idCount2 = 0;
var DirectionalLight = class {
  constructor(props = {}) {
    this.type = "directional";
    const { color = DEFAULT_LIGHT_COLOR2 } = props;
    const { intensity = DEFAULT_LIGHT_INTENSITY2 } = props;
    const { direction = DEFAULT_LIGHT_DIRECTION } = props;
    const { _shadow = false } = props;
    this.id = props.id || `directional-${idCount2++}`;
    this.color = color;
    this.intensity = intensity;
    this.type = "directional";
    this.direction = new Vector3(direction).normalize().toArray();
    this.shadow = _shadow;
  }
  getProjectedLight(opts) {
    return this;
  }
};

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/passes/pass.js
var Pass = class {
  /** Create a new Pass instance */
  constructor(device, props = { id: "pass" }) {
    const { id } = props;
    this.id = id;
    this.device = device;
    this.props = { ...props };
  }
  setProps(props) {
    Object.assign(this.props, props);
  }
  render(params) {
  }
  // eslint-disable-line @typescript-eslint/no-empty-function
  cleanup() {
  }
  // eslint-disable-line @typescript-eslint/no-empty-function
};

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/passes/layers-pass.js
var LayersPass = class extends Pass {
  constructor() {
    super(...arguments);
    this._lastRenderIndex = -1;
  }
  render(options) {
    const [width, height] = this.device.canvasContext.getDrawingBufferSize();
    const clearCanvas = options.clearCanvas ?? true;
    const clearColor = options.clearColor ?? (clearCanvas ? [0, 0, 0, 0] : false);
    const clearDepth = clearCanvas ? 1 : false;
    const clearStencil = clearCanvas ? 0 : false;
    const colorMask = options.colorMask ?? 15;
    const parameters = { viewport: [0, 0, width, height] };
    if (options.colorMask) {
      parameters.colorMask = colorMask;
    }
    if (options.scissorRect) {
      parameters.scissorRect = options.scissorRect;
    }
    const renderPass = this.device.beginRenderPass({
      framebuffer: options.target,
      parameters,
      clearColor,
      clearDepth,
      clearStencil
    });
    try {
      return this._drawLayers(renderPass, options);
    } finally {
      renderPass.end();
      this.device.submit();
    }
  }
  /** Draw a list of layers in a list of viewports */
  _drawLayers(renderPass, options) {
    const { target: target2, shaderModuleProps, viewports, views, onViewportActive, clearStack = true } = options;
    options.pass = options.pass || "unknown";
    if (clearStack) {
      this._lastRenderIndex = -1;
    }
    const renderStats = [];
    for (const viewport of viewports) {
      const view = views && views[viewport.id];
      onViewportActive == null ? void 0 : onViewportActive(viewport);
      const drawLayerParams = this._getDrawLayerParams(viewport, options);
      const subViewports = viewport.subViewports || [viewport];
      for (const subViewport of subViewports) {
        const stats = this._drawLayersInViewport(renderPass, {
          target: target2,
          shaderModuleProps,
          viewport: subViewport,
          view,
          pass: options.pass,
          layers: options.layers
        }, drawLayerParams);
        renderStats.push(stats);
      }
    }
    return renderStats;
  }
  // When a viewport contains multiple subviewports (e.g. repeated web mercator map),
  // this is only done once for the parent viewport
  /* Resolve the parameters needed to draw each layer */
  _getDrawLayerParams(viewport, { layers, pass, isPicking = false, layerFilter, cullRect, effects, shaderModuleProps }, evaluateShouldDrawOnly = false) {
    var _a3;
    const drawLayerParams = [];
    const indexResolver = layerIndexResolver(this._lastRenderIndex + 1);
    const drawContext = {
      layer: layers[0],
      viewport,
      isPicking,
      renderPass: pass,
      cullRect
    };
    const layerFilterCache = {};
    for (let layerIndex = 0; layerIndex < layers.length; layerIndex++) {
      const layer = layers[layerIndex];
      const shouldDrawLayer = this._shouldDrawLayer(layer, drawContext, layerFilter, layerFilterCache);
      const layerParam = { shouldDrawLayer };
      if (shouldDrawLayer && !evaluateShouldDrawOnly) {
        layerParam.shouldDrawLayer = true;
        layerParam.layerRenderIndex = indexResolver(layer, shouldDrawLayer);
        layerParam.shaderModuleProps = this._getShaderModuleProps(layer, effects, pass, shaderModuleProps);
        layerParam.layerParameters = {
          ...(_a3 = layer.context.deck) == null ? void 0 : _a3.props.parameters,
          ...this.getLayerParameters(layer, layerIndex, viewport)
        };
      }
      drawLayerParams[layerIndex] = layerParam;
    }
    return drawLayerParams;
  }
  // Draws a list of layers in one viewport
  // TODO - when picking we could completely skip rendering viewports that dont
  // intersect with the picking rect
  /* eslint-disable max-depth, max-statements */
  _drawLayersInViewport(renderPass, { layers, shaderModuleProps: globalModuleParameters, pass, target: target2, viewport, view }, drawLayerParams) {
    const glViewport = getGLViewport(this.device, {
      shaderModuleProps: globalModuleParameters,
      target: target2,
      viewport
    });
    if (view && view.props.clear) {
      const clearOpts = view.props.clear === true ? { color: true, depth: true } : view.props.clear;
      const clearRenderPass = this.device.beginRenderPass({
        framebuffer: target2,
        parameters: {
          viewport: glViewport,
          scissorRect: glViewport
        },
        clearColor: clearOpts.color ? [0, 0, 0, 0] : false,
        clearDepth: clearOpts.depth ? 1 : false
      });
      clearRenderPass.end();
    }
    const renderStatus = {
      totalCount: layers.length,
      visibleCount: 0,
      compositeCount: 0,
      pickableCount: 0
    };
    renderPass.setParameters({ viewport: glViewport });
    for (let layerIndex = 0; layerIndex < layers.length; layerIndex++) {
      const layer = layers[layerIndex];
      const drawLayerParameters = drawLayerParams[layerIndex];
      const { shouldDrawLayer } = drawLayerParameters;
      if (shouldDrawLayer && layer.props.pickable) {
        renderStatus.pickableCount++;
      }
      if (layer.isComposite) {
        renderStatus.compositeCount++;
      }
      if (layer.isDrawable && drawLayerParameters.shouldDrawLayer) {
        const { layerRenderIndex, shaderModuleProps, layerParameters } = drawLayerParameters;
        renderStatus.visibleCount++;
        this._lastRenderIndex = Math.max(this._lastRenderIndex, layerRenderIndex);
        if (shaderModuleProps.project) {
          shaderModuleProps.project.viewport = viewport;
        }
        layer.context.renderPass = renderPass;
        try {
          layer._drawLayer({
            renderPass,
            shaderModuleProps,
            uniforms: { layerIndex: layerRenderIndex },
            parameters: layerParameters
          });
        } catch (err) {
          layer.raiseError(err, `drawing ${layer} to ${pass}`);
        }
      }
    }
    return renderStatus;
  }
  /* eslint-enable max-depth, max-statements */
  /* Methods for subclass overrides */
  shouldDrawLayer(layer) {
    return true;
  }
  getShaderModuleProps(layer, effects, otherShaderModuleProps) {
    return null;
  }
  getLayerParameters(layer, layerIndex, viewport) {
    return layer.props.parameters;
  }
  /* Private */
  _shouldDrawLayer(layer, drawContext, layerFilter, layerFilterCache) {
    const shouldDrawLayer = layer.props.visible && this.shouldDrawLayer(layer);
    if (!shouldDrawLayer) {
      return false;
    }
    drawContext.layer = layer;
    let parent = layer.parent;
    while (parent) {
      if (!parent.props.visible || !parent.filterSubLayer(drawContext)) {
        return false;
      }
      drawContext.layer = parent;
      parent = parent.parent;
    }
    if (layerFilter) {
      const rootLayerId = drawContext.layer.id;
      if (!(rootLayerId in layerFilterCache)) {
        layerFilterCache[rootLayerId] = layerFilter(drawContext);
      }
      if (!layerFilterCache[rootLayerId]) {
        return false;
      }
    }
    layer.activateViewport(drawContext.viewport);
    return true;
  }
  _getShaderModuleProps(layer, effects, pass, overrides) {
    var _a3, _b;
    const devicePixelRatio = this.device.canvasContext.cssToDeviceRatio();
    const layerProps = ((_a3 = layer.internalState) == null ? void 0 : _a3.propsInTransition) || layer.props;
    const shaderModuleProps = {
      layer: layerProps,
      picking: {
        isActive: false
      },
      project: {
        viewport: layer.context.viewport,
        devicePixelRatio,
        modelMatrix: layerProps.modelMatrix,
        coordinateSystem: layerProps.coordinateSystem,
        coordinateOrigin: layerProps.coordinateOrigin,
        autoWrapLongitude: layer.wrapLongitude
      }
    };
    if (effects) {
      for (const effect of effects) {
        mergeModuleParameters(shaderModuleProps, (_b = effect.getShaderModuleProps) == null ? void 0 : _b.call(effect, layer, shaderModuleProps));
      }
    }
    return mergeModuleParameters(shaderModuleProps, this.getShaderModuleProps(layer, effects, shaderModuleProps), overrides);
  }
};
function layerIndexResolver(startIndex = 0, layerIndices = {}) {
  const resolvers = {};
  const resolveLayerIndex = (layer, isDrawn) => {
    const indexOverride = layer.props._offset;
    const layerId = layer.id;
    const parentId = layer.parent && layer.parent.id;
    let index;
    if (parentId && !(parentId in layerIndices)) {
      resolveLayerIndex(layer.parent, false);
    }
    if (parentId in resolvers) {
      const resolver = resolvers[parentId] = resolvers[parentId] || layerIndexResolver(layerIndices[parentId], layerIndices);
      index = resolver(layer, isDrawn);
      resolvers[layerId] = resolver;
    } else if (Number.isFinite(indexOverride)) {
      index = indexOverride + (layerIndices[parentId] || 0);
      resolvers[layerId] = null;
    } else {
      index = startIndex;
    }
    if (isDrawn && index >= startIndex) {
      startIndex = index + 1;
    }
    layerIndices[layerId] = index;
    return index;
  };
  return resolveLayerIndex;
}
function getGLViewport(device, { shaderModuleProps, target: target2, viewport }) {
  var _a3;
  const pixelRatio = ((_a3 = shaderModuleProps == null ? void 0 : shaderModuleProps.project) == null ? void 0 : _a3.devicePixelRatio) ?? // @ts-expect-error TODO - assuming WebGL context
  device.canvasContext.cssToDeviceRatio();
  const [, drawingBufferHeight] = device.canvasContext.getDrawingBufferSize();
  const height = target2 ? target2.height : drawingBufferHeight;
  const dimensions = viewport;
  return [
    dimensions.x * pixelRatio,
    height - (dimensions.y + dimensions.height) * pixelRatio,
    dimensions.width * pixelRatio,
    dimensions.height * pixelRatio
  ];
}
function mergeModuleParameters(target2, ...sources) {
  for (const source4 of sources) {
    if (source4) {
      for (const key in source4) {
        if (target2[key]) {
          Object.assign(target2[key], source4[key]);
        } else {
          target2[key] = source4[key];
        }
      }
    }
  }
  return target2;
}

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/passes/shadow-pass.js
var ShadowPass = class extends LayersPass {
  constructor(device, props) {
    super(device, props);
    const shadowMap = device.createTexture({
      format: "rgba8unorm",
      width: 1,
      height: 1,
      sampler: {
        minFilter: "linear",
        magFilter: "linear",
        addressModeU: "clamp-to-edge",
        addressModeV: "clamp-to-edge"
      },
      mipmaps: true
    });
    const depthBuffer = device.createTexture({
      format: "depth16unorm",
      width: 1,
      height: 1,
      mipmaps: false
    });
    this.fbo = device.createFramebuffer({
      id: "shadowmap",
      width: 1,
      height: 1,
      colorAttachments: [shadowMap],
      // Depth attachment has to be specified for depth test to work
      depthStencilAttachment: depthBuffer
    });
  }
  delete() {
    if (this.fbo) {
      this.fbo.destroy();
      this.fbo = null;
    }
  }
  getShadowMap() {
    return this.fbo.colorAttachments[0].texture;
  }
  render(params) {
    const target2 = this.fbo;
    const pixelRatio = this.device.canvasContext.cssToDeviceRatio();
    const viewport = params.viewports[0];
    const width = viewport.width * pixelRatio;
    const height = viewport.height * pixelRatio;
    const clearColor = [1, 1, 1, 1];
    if (width !== target2.width || height !== target2.height) {
      target2.resize({ width, height });
    }
    super.render({ ...params, clearColor, target: target2, pass: "shadow" });
  }
  getLayerParameters(layer, layerIndex, viewport) {
    return {
      ...layer.props.parameters,
      blend: false,
      depthWriteEnabled: true,
      depthCompare: "less-equal"
    };
  }
  shouldDrawLayer(layer) {
    return layer.props.shadowEnabled !== false;
  }
  getShaderModuleProps(layer, effects, otherShaderModuleProps) {
    return {
      shadow: {
        project: otherShaderModuleProps.project,
        drawToShadowMap: true
      }
    };
  }
};

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/effects/lighting/lighting-effect.js
var DEFAULT_AMBIENT_LIGHT_PROPS = {
  color: [255, 255, 255],
  intensity: 1
};
var DEFAULT_DIRECTIONAL_LIGHT_PROPS = [
  {
    color: [255, 255, 255],
    intensity: 1,
    direction: [-1, 3, -1]
  },
  {
    color: [255, 255, 255],
    intensity: 0.9,
    direction: [1, -8, -2.5]
  }
];
var DEFAULT_SHADOW_COLOR2 = [0, 0, 0, 200 / 255];
var LightingEffect = class {
  constructor(props = {}) {
    this.id = "lighting-effect";
    this.shadowColor = DEFAULT_SHADOW_COLOR2;
    this.shadow = false;
    this.directionalLights = [];
    this.pointLights = [];
    this.shadowPasses = [];
    this.dummyShadowMap = null;
    this.setProps(props);
  }
  setup(context) {
    this.context = context;
    const { device, deck } = context;
    if (this.shadow && !this.dummyShadowMap) {
      this._createShadowPasses(device);
      deck._addDefaultShaderModule(shadow_default);
      this.dummyShadowMap = device.createTexture({
        width: 1,
        height: 1
      });
    }
  }
  setProps(props) {
    this.ambientLight = void 0;
    this.directionalLights = [];
    this.pointLights = [];
    for (const key in props) {
      const lightSource = props[key];
      switch (lightSource.type) {
        case "ambient":
          this.ambientLight = lightSource;
          break;
        case "directional":
          this.directionalLights.push(lightSource);
          break;
        case "point":
          this.pointLights.push(lightSource);
          break;
        default:
      }
    }
    this._applyDefaultLights();
    this.shadow = this.directionalLights.some((light) => light.shadow);
    if (this.context) {
      this.setup(this.context);
    }
    this.props = props;
  }
  preRender({ layers, layerFilter, viewports, onViewportActive, views }) {
    if (!this.shadow)
      return;
    this.shadowMatrices = this._calculateMatrices();
    for (let i4 = 0; i4 < this.shadowPasses.length; i4++) {
      const shadowPass = this.shadowPasses[i4];
      shadowPass.render({
        layers,
        layerFilter,
        viewports,
        onViewportActive,
        views,
        shaderModuleProps: {
          shadow: {
            shadowLightId: i4,
            dummyShadowMap: this.dummyShadowMap,
            shadowMatrices: this.shadowMatrices
          }
        }
      });
    }
  }
  getShaderModuleProps(layer, otherShaderModuleProps) {
    const shadowProps = this.shadow ? {
      project: otherShaderModuleProps.project,
      shadowMaps: this.shadowPasses.map((shadowPass) => shadowPass.getShadowMap()),
      dummyShadowMap: this.dummyShadowMap,
      shadowColor: this.shadowColor,
      shadowMatrices: this.shadowMatrices
    } : {};
    const lightingProps = {
      enabled: true,
      ambientLight: this.ambientLight,
      directionalLights: this.directionalLights.map((directionalLight) => directionalLight.getProjectedLight({ layer })),
      pointLights: this.pointLights.map((pointLight) => pointLight.getProjectedLight({ layer }))
    };
    const materialProps = layer.props.material;
    return {
      shadow: shadowProps,
      lighting: lightingProps,
      phongMaterial: materialProps,
      gouraudMaterial: materialProps
    };
  }
  cleanup(context) {
    for (const shadowPass of this.shadowPasses) {
      shadowPass.delete();
    }
    this.shadowPasses.length = 0;
    if (this.dummyShadowMap) {
      this.dummyShadowMap.destroy();
      this.dummyShadowMap = null;
      context.deck._removeDefaultShaderModule(shadow_default);
    }
  }
  _calculateMatrices() {
    const lightMatrices = [];
    for (const light of this.directionalLights) {
      const viewMatrix2 = new Matrix4().lookAt({
        eye: new Vector3(light.direction).negate()
      });
      lightMatrices.push(viewMatrix2);
    }
    return lightMatrices;
  }
  _createShadowPasses(device) {
    for (let i4 = 0; i4 < this.directionalLights.length; i4++) {
      const shadowPass = new ShadowPass(device);
      this.shadowPasses[i4] = shadowPass;
    }
  }
  _applyDefaultLights() {
    const { ambientLight, pointLights, directionalLights } = this;
    if (!ambientLight && pointLights.length === 0 && directionalLights.length === 0) {
      this.ambientLight = new AmbientLight(DEFAULT_AMBIENT_LIGHT_PROPS);
      this.directionalLights.push(new DirectionalLight(DEFAULT_DIRECTIONAL_LIGHT_PROPS[0]), new DirectionalLight(DEFAULT_DIRECTIONAL_LIGHT_PROPS[1]));
    }
  }
};

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/utils/typed-array-manager.js
var TypedArrayManager = class {
  constructor(options = {}) {
    this._pool = [];
    this.opts = { overAlloc: 2, poolSize: 100 };
    this.setOptions(options);
  }
  setOptions(options) {
    Object.assign(this.opts, options);
  }
  allocate(typedArray, count2, { size = 1, type, padding = 0, copy: copy7 = false, initialize = false, maxCount }) {
    const Type2 = type || typedArray && typedArray.constructor || Float32Array;
    const newSize = count2 * size + padding;
    if (ArrayBuffer.isView(typedArray)) {
      if (newSize <= typedArray.length) {
        return typedArray;
      }
      if (newSize * typedArray.BYTES_PER_ELEMENT <= typedArray.buffer.byteLength) {
        return new Type2(typedArray.buffer, 0, newSize);
      }
    }
    let maxSize = Infinity;
    if (maxCount) {
      maxSize = maxCount * size + padding;
    }
    const newArray = this._allocate(Type2, newSize, initialize, maxSize);
    if (typedArray && copy7) {
      newArray.set(typedArray);
    } else if (!initialize) {
      newArray.fill(0, 0, 4);
    }
    this._release(typedArray);
    return newArray;
  }
  release(typedArray) {
    this._release(typedArray);
  }
  _allocate(Type2, size, initialize, maxSize) {
    let sizeToAllocate = Math.max(Math.ceil(size * this.opts.overAlloc), 1);
    if (sizeToAllocate > maxSize) {
      sizeToAllocate = maxSize;
    }
    const pool = this._pool;
    const byteLength = Type2.BYTES_PER_ELEMENT * sizeToAllocate;
    const i4 = pool.findIndex((b2) => b2.byteLength >= byteLength);
    if (i4 >= 0) {
      const array = new Type2(pool.splice(i4, 1)[0], 0, sizeToAllocate);
      if (initialize) {
        array.fill(0);
      }
      return array;
    }
    return new Type2(sizeToAllocate);
  }
  _release(typedArray) {
    if (!ArrayBuffer.isView(typedArray)) {
      return;
    }
    const pool = this._pool;
    const { buffer: buffer2 } = typedArray;
    const { byteLength } = buffer2;
    const i4 = pool.findIndex((b2) => b2.byteLength >= byteLength);
    if (i4 < 0) {
      pool.push(buffer2);
    } else if (i4 > 0 || pool.length < this.opts.poolSize) {
      pool.splice(i4, 0, buffer2);
    }
    if (pool.length > this.opts.poolSize) {
      pool.shift();
    }
  }
};
var typed_array_manager_default = new TypedArrayManager();

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/utils/math-utils.js
function createMat42() {
  return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
}
function mod2(value, divisor) {
  const modulus = value % divisor;
  return modulus < 0 ? divisor + modulus : modulus;
}
function getCameraPosition(viewMatrixInverse) {
  return [viewMatrixInverse[12], viewMatrixInverse[13], viewMatrixInverse[14]];
}
function getFrustumPlanes(viewProjectionMatrix) {
  return {
    left: getFrustumPlane(viewProjectionMatrix[3] + viewProjectionMatrix[0], viewProjectionMatrix[7] + viewProjectionMatrix[4], viewProjectionMatrix[11] + viewProjectionMatrix[8], viewProjectionMatrix[15] + viewProjectionMatrix[12]),
    right: getFrustumPlane(viewProjectionMatrix[3] - viewProjectionMatrix[0], viewProjectionMatrix[7] - viewProjectionMatrix[4], viewProjectionMatrix[11] - viewProjectionMatrix[8], viewProjectionMatrix[15] - viewProjectionMatrix[12]),
    bottom: getFrustumPlane(viewProjectionMatrix[3] + viewProjectionMatrix[1], viewProjectionMatrix[7] + viewProjectionMatrix[5], viewProjectionMatrix[11] + viewProjectionMatrix[9], viewProjectionMatrix[15] + viewProjectionMatrix[13]),
    top: getFrustumPlane(viewProjectionMatrix[3] - viewProjectionMatrix[1], viewProjectionMatrix[7] - viewProjectionMatrix[5], viewProjectionMatrix[11] - viewProjectionMatrix[9], viewProjectionMatrix[15] - viewProjectionMatrix[13]),
    near: getFrustumPlane(viewProjectionMatrix[3] + viewProjectionMatrix[2], viewProjectionMatrix[7] + viewProjectionMatrix[6], viewProjectionMatrix[11] + viewProjectionMatrix[10], viewProjectionMatrix[15] + viewProjectionMatrix[14]),
    far: getFrustumPlane(viewProjectionMatrix[3] - viewProjectionMatrix[2], viewProjectionMatrix[7] - viewProjectionMatrix[6], viewProjectionMatrix[11] - viewProjectionMatrix[10], viewProjectionMatrix[15] - viewProjectionMatrix[14])
  };
}
var scratchVector = new Vector3();
function getFrustumPlane(a3, b2, c3, d3) {
  scratchVector.set(a3, b2, c3);
  const L3 = scratchVector.len();
  return { distance: d3 / L3, normal: new Vector3(-a3 / L3, -b2 / L3, -c3 / L3) };
}
function fp64LowPart2(x3) {
  return x3 - Math.fround(x3);
}
var scratchArray;
function toDoublePrecisionArray(typedArray, options) {
  const { size = 1, startIndex = 0 } = options;
  const endIndex = options.endIndex !== void 0 ? options.endIndex : typedArray.length;
  const count2 = (endIndex - startIndex) / size;
  scratchArray = typed_array_manager_default.allocate(scratchArray, count2, {
    type: Float32Array,
    size: size * 2
  });
  let sourceIndex = startIndex;
  let targetIndex = 0;
  while (sourceIndex < endIndex) {
    for (let j3 = 0; j3 < size; j3++) {
      const value = typedArray[sourceIndex++];
      scratchArray[targetIndex + j3] = value;
      scratchArray[targetIndex + j3 + size] = fp64LowPart2(value);
    }
    targetIndex += size * 2;
  }
  return scratchArray.subarray(0, count2 * size * 2);
}
function mergeBounds(boundsList) {
  let mergedBounds = null;
  let isMerged = false;
  for (const bounds of boundsList) {
    if (!bounds)
      continue;
    if (!mergedBounds) {
      mergedBounds = bounds;
    } else {
      if (!isMerged) {
        mergedBounds = [
          [mergedBounds[0][0], mergedBounds[0][1]],
          [mergedBounds[1][0], mergedBounds[1][1]]
        ];
        isMerged = true;
      }
      mergedBounds[0][0] = Math.min(mergedBounds[0][0], bounds[0][0]);
      mergedBounds[0][1] = Math.min(mergedBounds[0][1], bounds[0][1]);
      mergedBounds[1][0] = Math.max(mergedBounds[1][0], bounds[1][0]);
      mergedBounds[1][1] = Math.max(mergedBounds[1][1], bounds[1][1]);
    }
  }
  return mergedBounds;
}

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/viewports/viewport.js
var DEGREES_TO_RADIANS4 = Math.PI / 180;
var IDENTITY2 = createMat42();
var ZERO_VECTOR2 = [0, 0, 0];
var DEFAULT_DISTANCE_SCALES = {
  unitsPerMeter: [1, 1, 1],
  metersPerUnit: [1, 1, 1]
};
function createProjectionMatrix({ width, height, orthographic, fovyRadians, focalDistance, padding, near, far }) {
  const aspect = width / height;
  const matrix = orthographic ? new Matrix4().orthographic({ fovy: fovyRadians, aspect, focalDistance, near, far }) : new Matrix4().perspective({ fovy: fovyRadians, aspect, near, far });
  if (padding) {
    const { left = 0, right = 0, top = 0, bottom = 0 } = padding;
    const offsetX = clamp((left + width - right) / 2, 0, width) - width / 2;
    const offsetY = clamp((top + height - bottom) / 2, 0, height) - height / 2;
    matrix[8] -= offsetX * 2 / width;
    matrix[9] += offsetY * 2 / height;
  }
  return matrix;
}
var Viewport = class _Viewport {
  // eslint-disable-next-line complexity
  constructor(opts = {}) {
    this._frustumPlanes = {};
    this.id = opts.id || this.constructor.displayName || "viewport";
    this.x = opts.x || 0;
    this.y = opts.y || 0;
    this.width = opts.width || 1;
    this.height = opts.height || 1;
    this.zoom = opts.zoom || 0;
    this.padding = opts.padding;
    this.distanceScales = opts.distanceScales || DEFAULT_DISTANCE_SCALES;
    this.focalDistance = opts.focalDistance || 1;
    this.position = opts.position || ZERO_VECTOR2;
    this.modelMatrix = opts.modelMatrix || null;
    const { longitude, latitude } = opts;
    this.isGeospatial = Number.isFinite(latitude) && Number.isFinite(longitude);
    this._initProps(opts);
    this._initMatrices(opts);
    this.equals = this.equals.bind(this);
    this.project = this.project.bind(this);
    this.unproject = this.unproject.bind(this);
    this.projectPosition = this.projectPosition.bind(this);
    this.unprojectPosition = this.unprojectPosition.bind(this);
    this.projectFlat = this.projectFlat.bind(this);
    this.unprojectFlat = this.unprojectFlat.bind(this);
  }
  get subViewports() {
    return null;
  }
  get metersPerPixel() {
    return this.distanceScales.metersPerUnit[2] / this.scale;
  }
  get projectionMode() {
    if (this.isGeospatial) {
      return this.zoom < 12 ? PROJECTION_MODE.WEB_MERCATOR : PROJECTION_MODE.WEB_MERCATOR_AUTO_OFFSET;
    }
    return PROJECTION_MODE.IDENTITY;
  }
  // Two viewports are equal if width and height are identical, and if
  // their view and projection matrices are (approximately) equal.
  equals(viewport) {
    if (!(viewport instanceof _Viewport)) {
      return false;
    }
    if (this === viewport) {
      return true;
    }
    return viewport.width === this.width && viewport.height === this.height && viewport.scale === this.scale && equals(viewport.projectionMatrix, this.projectionMatrix) && equals(viewport.viewMatrix, this.viewMatrix);
  }
  /**
   * Projects xyz (possibly latitude and longitude) to pixel coordinates in window
   * using viewport projection parameters
   * - [longitude, latitude] to [x, y]
   * - [longitude, latitude, Z] => [x, y, z]
   * Note: By default, returns top-left coordinates for canvas/SVG type render
   *
   * @param {Array} lngLatZ - [lng, lat] or [lng, lat, Z]
   * @param {Object} opts - options
   * @param {Object} opts.topLeft=true - Whether projected coords are top left
   * @return {Array} - [x, y] or [x, y, z] in top left coords
   */
  project(xyz, { topLeft = true } = {}) {
    const worldPosition = this.projectPosition(xyz);
    const coord = worldToPixels(worldPosition, this.pixelProjectionMatrix);
    const [x3, y3] = coord;
    const y22 = topLeft ? y3 : this.height - y3;
    return xyz.length === 2 ? [x3, y22] : [x3, y22, coord[2]];
  }
  /**
   * Unproject pixel coordinates on screen onto world coordinates,
   * (possibly [lon, lat]) on map.
   * - [x, y] => [lng, lat]
   * - [x, y, z] => [lng, lat, Z]
   * @param {Array} xyz -
   * @param {Object} opts - options
   * @param {Object} opts.topLeft=true - Whether origin is top left
   * @return {Array|null} - [lng, lat, Z] or [X, Y, Z]
   */
  unproject(xyz, { topLeft = true, targetZ } = {}) {
    const [x3, y3, z3] = xyz;
    const y22 = topLeft ? y3 : this.height - y3;
    const targetZWorld = targetZ && targetZ * this.distanceScales.unitsPerMeter[2];
    const coord = pixelsToWorld([x3, y22, z3], this.pixelUnprojectionMatrix, targetZWorld);
    const [X2, Y2, Z2] = this.unprojectPosition(coord);
    if (Number.isFinite(z3)) {
      return [X2, Y2, Z2];
    }
    return Number.isFinite(targetZ) ? [X2, Y2, targetZ] : [X2, Y2];
  }
  // NON_LINEAR PROJECTION HOOKS
  // Used for web meractor projection
  projectPosition(xyz) {
    const [X2, Y2] = this.projectFlat(xyz);
    const Z2 = (xyz[2] || 0) * this.distanceScales.unitsPerMeter[2];
    return [X2, Y2, Z2];
  }
  unprojectPosition(xyz) {
    const [X2, Y2] = this.unprojectFlat(xyz);
    const Z2 = (xyz[2] || 0) * this.distanceScales.metersPerUnit[2];
    return [X2, Y2, Z2];
  }
  /**
   * Project [lng,lat] on sphere onto [x,y] on 512*512 Mercator Zoom 0 tile.
   * Performs the nonlinear part of the web mercator projection.
   * Remaining projection is done with 4x4 matrices which also handles
   * perspective.
   * @param {Array} lngLat - [lng, lat] coordinates
   *   Specifies a point on the sphere to project onto the map.
   * @return {Array} [x,y] coordinates.
   */
  projectFlat(xyz) {
    if (this.isGeospatial) {
      const result = lngLatToWorld(xyz);
      result[1] = clamp(result[1], -318, 830);
      return result;
    }
    return xyz;
  }
  /**
   * Unproject world point [x,y] on map onto {lat, lon} on sphere
   * @param {object|Vector} xy - object with {x,y} members
   *  representing point on projected map plane
   * @return {GeoCoordinates} - object with {lat,lon} of point on sphere.
   *   Has toArray method if you need a GeoJSON Array.
   *   Per cartographic tradition, lat and lon are specified as degrees.
   */
  unprojectFlat(xyz) {
    if (this.isGeospatial) {
      return worldToLngLat(xyz);
    }
    return xyz;
  }
  /**
   * Get bounds of the current viewport
   * @return {Array} - [minX, minY, maxX, maxY]
   */
  getBounds(options = {}) {
    const unprojectOption = { targetZ: options.z || 0 };
    const topLeft = this.unproject([0, 0], unprojectOption);
    const topRight = this.unproject([this.width, 0], unprojectOption);
    const bottomLeft = this.unproject([0, this.height], unprojectOption);
    const bottomRight = this.unproject([this.width, this.height], unprojectOption);
    return [
      Math.min(topLeft[0], topRight[0], bottomLeft[0], bottomRight[0]),
      Math.min(topLeft[1], topRight[1], bottomLeft[1], bottomRight[1]),
      Math.max(topLeft[0], topRight[0], bottomLeft[0], bottomRight[0]),
      Math.max(topLeft[1], topRight[1], bottomLeft[1], bottomRight[1])
    ];
  }
  getDistanceScales(coordinateOrigin) {
    if (coordinateOrigin && this.isGeospatial) {
      return getDistanceScales({
        longitude: coordinateOrigin[0],
        latitude: coordinateOrigin[1],
        highPrecision: true
      });
    }
    return this.distanceScales;
  }
  containsPixel({ x: x3, y: y3, width = 1, height = 1 }) {
    return x3 < this.x + this.width && this.x < x3 + width && y3 < this.y + this.height && this.y < y3 + height;
  }
  // Extract frustum planes in common space
  getFrustumPlanes() {
    if (this._frustumPlanes.near) {
      return this._frustumPlanes;
    }
    Object.assign(this._frustumPlanes, getFrustumPlanes(this.viewProjectionMatrix));
    return this._frustumPlanes;
  }
  // EXPERIMENTAL METHODS
  /**
   * Needed by panning and linear transition
   * Pan the viewport to place a given world coordinate at screen point [x, y]
   *
   * @param {Array} coords - world coordinates
   * @param {Array} pixel - [x,y] coordinates on screen
   * @return {Object} props of the new viewport
   */
  panByPosition(coords, pixel) {
    return null;
  }
  // INTERNAL METHODS
  /* eslint-disable complexity, max-statements */
  _initProps(opts) {
    const longitude = opts.longitude;
    const latitude = opts.latitude;
    if (this.isGeospatial) {
      if (!Number.isFinite(opts.zoom)) {
        this.zoom = getMeterZoom({ latitude }) + Math.log2(this.focalDistance);
      }
      this.distanceScales = opts.distanceScales || getDistanceScales({ latitude, longitude });
    }
    const scale7 = Math.pow(2, this.zoom);
    this.scale = scale7;
    const { position, modelMatrix } = opts;
    let meterOffset = ZERO_VECTOR2;
    if (position) {
      meterOffset = modelMatrix ? new Matrix4(modelMatrix).transformAsVector(position, []) : position;
    }
    if (this.isGeospatial) {
      const center = this.projectPosition([longitude, latitude, 0]);
      this.center = new Vector3(meterOffset).scale(this.distanceScales.unitsPerMeter).add(center);
    } else {
      this.center = this.projectPosition(meterOffset);
    }
  }
  /* eslint-enable complexity, max-statements */
  _initMatrices(opts) {
    const {
      // View matrix
      viewMatrix: viewMatrix2 = IDENTITY2,
      // Projection matrix
      projectionMatrix = null,
      // Projection matrix parameters, used if projectionMatrix not supplied
      orthographic = false,
      fovyRadians,
      fovy = 75,
      near = 0.1,
      // Distance of near clipping plane
      far = 1e3,
      // Distance of far clipping plane
      padding = null,
      // Center offset in pixels
      focalDistance = 1
    } = opts;
    this.viewMatrixUncentered = viewMatrix2;
    this.viewMatrix = new Matrix4().multiplyRight(viewMatrix2).translate(new Vector3(this.center).negate());
    this.projectionMatrix = projectionMatrix || createProjectionMatrix({
      width: this.width,
      height: this.height,
      orthographic,
      fovyRadians: fovyRadians || fovy * DEGREES_TO_RADIANS4,
      focalDistance,
      padding,
      near,
      far
    });
    const vpm = createMat42();
    mat4_exports.multiply(vpm, vpm, this.projectionMatrix);
    mat4_exports.multiply(vpm, vpm, this.viewMatrix);
    this.viewProjectionMatrix = vpm;
    this.viewMatrixInverse = mat4_exports.invert([], this.viewMatrix) || this.viewMatrix;
    this.cameraPosition = getCameraPosition(this.viewMatrixInverse);
    const viewportMatrix = createMat42();
    const pixelProjectionMatrix = createMat42();
    mat4_exports.scale(viewportMatrix, viewportMatrix, [this.width / 2, -this.height / 2, 1]);
    mat4_exports.translate(viewportMatrix, viewportMatrix, [1, -1, 0]);
    mat4_exports.multiply(pixelProjectionMatrix, viewportMatrix, this.viewProjectionMatrix);
    this.pixelProjectionMatrix = pixelProjectionMatrix;
    this.pixelUnprojectionMatrix = mat4_exports.invert(createMat42(), this.pixelProjectionMatrix);
    if (!this.pixelUnprojectionMatrix) {
      log_default.warn("Pixel project matrix not invertible")();
    }
  }
};
Viewport.displayName = "Viewport";
var viewport_default = Viewport;

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/viewports/web-mercator-viewport.js
var WebMercatorViewport2 = class _WebMercatorViewport extends viewport_default {
  /* eslint-disable complexity, max-statements */
  constructor(opts = {}) {
    const {
      latitude = 0,
      longitude = 0,
      zoom = 0,
      pitch = 0,
      bearing = 0,
      nearZMultiplier = 0.1,
      farZMultiplier = 1.01,
      nearZ,
      farZ,
      orthographic = false,
      projectionMatrix,
      repeat = false,
      worldOffset = 0,
      position,
      padding,
      // backward compatibility
      // TODO: remove in v9
      legacyMeterSizes = false
    } = opts;
    let { width, height, altitude = 1.5 } = opts;
    const scale7 = Math.pow(2, zoom);
    width = width || 1;
    height = height || 1;
    let fovy;
    let projectionParameters = null;
    if (projectionMatrix) {
      altitude = projectionMatrix[5] / 2;
      fovy = altitudeToFovy(altitude);
    } else {
      if (opts.fovy) {
        fovy = opts.fovy;
        altitude = fovyToAltitude(fovy);
      } else {
        fovy = altitudeToFovy(altitude);
      }
      let offset;
      if (padding) {
        const { top = 0, bottom = 0 } = padding;
        offset = [0, clamp((top + height - bottom) / 2, 0, height) - height / 2];
      }
      projectionParameters = getProjectionParameters({
        width,
        height,
        scale: scale7,
        center: position && [0, 0, position[2] * unitsPerMeter(latitude)],
        offset,
        pitch,
        fovy,
        nearZMultiplier,
        farZMultiplier
      });
      if (Number.isFinite(nearZ)) {
        projectionParameters.near = nearZ;
      }
      if (Number.isFinite(farZ)) {
        projectionParameters.far = farZ;
      }
    }
    let viewMatrixUncentered = getViewMatrix({
      height,
      pitch,
      bearing,
      scale: scale7,
      altitude
    });
    if (worldOffset) {
      const viewOffset = new Matrix4().translate([512 * worldOffset, 0, 0]);
      viewMatrixUncentered = viewOffset.multiplyLeft(viewMatrixUncentered);
    }
    super({
      ...opts,
      // x, y,
      width,
      height,
      // view matrix
      viewMatrix: viewMatrixUncentered,
      longitude,
      latitude,
      zoom,
      // projection matrix parameters
      ...projectionParameters,
      fovy,
      focalDistance: altitude
    });
    this.latitude = latitude;
    this.longitude = longitude;
    this.zoom = zoom;
    this.pitch = pitch;
    this.bearing = bearing;
    this.altitude = altitude;
    this.fovy = fovy;
    this.orthographic = orthographic;
    this._subViewports = repeat ? [] : null;
    this._pseudoMeters = legacyMeterSizes;
    Object.freeze(this);
  }
  /* eslint-enable complexity, max-statements */
  get subViewports() {
    if (this._subViewports && !this._subViewports.length) {
      const bounds = this.getBounds();
      const minOffset = Math.floor((bounds[0] + 180) / 360);
      const maxOffset = Math.ceil((bounds[2] - 180) / 360);
      for (let x3 = minOffset; x3 <= maxOffset; x3++) {
        const offsetViewport = x3 ? new _WebMercatorViewport({
          ...this,
          worldOffset: x3
        }) : this;
        this._subViewports.push(offsetViewport);
      }
    }
    return this._subViewports;
  }
  projectPosition(xyz) {
    if (this._pseudoMeters) {
      return super.projectPosition(xyz);
    }
    const [X2, Y2] = this.projectFlat(xyz);
    const Z2 = (xyz[2] || 0) * unitsPerMeter(xyz[1]);
    return [X2, Y2, Z2];
  }
  unprojectPosition(xyz) {
    if (this._pseudoMeters) {
      return super.unprojectPosition(xyz);
    }
    const [X2, Y2] = this.unprojectFlat(xyz);
    const Z2 = (xyz[2] || 0) / unitsPerMeter(Y2);
    return [X2, Y2, Z2];
  }
  /**
   * Add a meter delta to a base lnglat coordinate, returning a new lnglat array
   *
   * Note: Uses simple linear approximation around the viewport center
   * Error increases with size of offset (roughly 1% per 100km)
   *
   * @param {[Number,Number]|[Number,Number,Number]) lngLatZ - base coordinate
   * @param {[Number,Number]|[Number,Number,Number]) xyz - array of meter deltas
   * @return {[Number,Number]|[Number,Number,Number]) array of [lng,lat,z] deltas
   */
  addMetersToLngLat(lngLatZ, xyz) {
    return addMetersToLngLat(lngLatZ, xyz);
  }
  panByPosition(coords, pixel) {
    const fromLocation = pixelsToWorld(pixel, this.pixelUnprojectionMatrix);
    const toLocation = this.projectFlat(coords);
    const translate3 = vec2_exports.add([], toLocation, vec2_exports.negate([], fromLocation));
    const newCenter = vec2_exports.add([], this.center, translate3);
    const [longitude, latitude] = this.unprojectFlat(newCenter);
    return { longitude, latitude };
  }
  getBounds(options = {}) {
    const corners = getBounds(this, options.z || 0);
    return [
      Math.min(corners[0][0], corners[1][0], corners[2][0], corners[3][0]),
      Math.min(corners[0][1], corners[1][1], corners[2][1], corners[3][1]),
      Math.max(corners[0][0], corners[1][0], corners[2][0], corners[3][0]),
      Math.max(corners[0][1], corners[1][1], corners[2][1], corners[3][1])
    ];
  }
  /**
   * Returns a new viewport that fit around the given rectangle.
   * Only supports non-perspective mode.
   */
  fitBounds(bounds, options = {}) {
    const { width, height } = this;
    const { longitude, latitude, zoom } = fitBounds({ width, height, bounds, ...options });
    return new _WebMercatorViewport({ width, height, longitude, latitude, zoom });
  }
};
WebMercatorViewport2.displayName = "WebMercatorViewport";
var web_mercator_viewport_default = WebMercatorViewport2;

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/shaderlib/project/project-functions.js
var DEFAULT_COORDINATE_ORIGIN2 = [0, 0, 0];
function lngLatZToWorldPosition(lngLatZ, viewport, offsetMode = false) {
  const p3 = viewport.projectPosition(lngLatZ);
  if (offsetMode && viewport instanceof web_mercator_viewport_default) {
    const [longitude, latitude, z3 = 0] = lngLatZ;
    const distanceScales = viewport.getDistanceScales([longitude, latitude]);
    p3[2] = z3 * distanceScales.unitsPerMeter[2];
  }
  return p3;
}
function normalizeParameters(opts) {
  const { viewport, modelMatrix, coordinateOrigin } = opts;
  let { coordinateSystem, fromCoordinateSystem, fromCoordinateOrigin } = opts;
  if (coordinateSystem === COORDINATE_SYSTEM.DEFAULT) {
    coordinateSystem = viewport.isGeospatial ? COORDINATE_SYSTEM.LNGLAT : COORDINATE_SYSTEM.CARTESIAN;
  }
  if (fromCoordinateSystem === void 0) {
    fromCoordinateSystem = coordinateSystem;
  }
  if (fromCoordinateOrigin === void 0) {
    fromCoordinateOrigin = coordinateOrigin;
  }
  return {
    viewport,
    coordinateSystem,
    coordinateOrigin,
    modelMatrix,
    fromCoordinateSystem,
    fromCoordinateOrigin
  };
}
function getWorldPosition(position, { viewport, modelMatrix, coordinateSystem, coordinateOrigin, offsetMode }) {
  let [x3, y3, z3 = 0] = position;
  if (modelMatrix) {
    [x3, y3, z3] = vec4_exports.transformMat4([], [x3, y3, z3, 1], modelMatrix);
  }
  switch (coordinateSystem) {
    case COORDINATE_SYSTEM.LNGLAT:
      return lngLatZToWorldPosition([x3, y3, z3], viewport, offsetMode);
    case COORDINATE_SYSTEM.LNGLAT_OFFSETS:
      return lngLatZToWorldPosition([x3 + coordinateOrigin[0], y3 + coordinateOrigin[1], z3 + (coordinateOrigin[2] || 0)], viewport, offsetMode);
    case COORDINATE_SYSTEM.METER_OFFSETS:
      return lngLatZToWorldPosition(addMetersToLngLat(coordinateOrigin, [x3, y3, z3]), viewport, offsetMode);
    case COORDINATE_SYSTEM.CARTESIAN:
    default:
      return viewport.isGeospatial ? [x3 + coordinateOrigin[0], y3 + coordinateOrigin[1], z3 + coordinateOrigin[2]] : viewport.projectPosition([x3, y3, z3]);
  }
}
function projectPosition(position, params) {
  const { viewport, coordinateSystem, coordinateOrigin, modelMatrix, fromCoordinateSystem, fromCoordinateOrigin } = normalizeParameters(params);
  const { autoOffset = true } = params;
  const { geospatialOrigin = DEFAULT_COORDINATE_ORIGIN2, shaderCoordinateOrigin = DEFAULT_COORDINATE_ORIGIN2, offsetMode = false } = autoOffset ? getOffsetOrigin(viewport, coordinateSystem, coordinateOrigin) : {};
  const worldPosition = getWorldPosition(position, {
    viewport,
    modelMatrix,
    coordinateSystem: fromCoordinateSystem,
    coordinateOrigin: fromCoordinateOrigin,
    offsetMode
  });
  if (offsetMode) {
    const positionCommonSpace = viewport.projectPosition(geospatialOrigin || shaderCoordinateOrigin);
    vec3_exports.sub(worldPosition, worldPosition, positionCommonSpace);
  }
  return worldPosition;
}

// ../../../.yarn/berry/cache/@math.gl-sun-npm-4.1.0-84ea31ab67-10c0.zip/node_modules/@math.gl/sun/dist/suncalc.js
var DEGREES_TO_RADIANS5 = Math.PI / 180;
var DAY_IN_MS = 1e3 * 60 * 60 * 24;
var e2 = DEGREES_TO_RADIANS5 * 23.4397;

// .yarn/__virtual__/@luma.gl-engine-virtual-2f877ad12c/4/.yarn/berry/cache/@luma.gl-engine-npm-9.1.9-a0c8f25348-10c0.zip/node_modules/@luma.gl/engine/dist/animation/timeline.js
var channelHandles = 1;
var animationHandles = 1;
var Timeline = class {
  constructor() {
    __publicField(this, "time", 0);
    __publicField(this, "channels", /* @__PURE__ */ new Map());
    __publicField(this, "animations", /* @__PURE__ */ new Map());
    __publicField(this, "playing", false);
    __publicField(this, "lastEngineTime", -1);
  }
  addChannel(props) {
    const { delay = 0, duration = Number.POSITIVE_INFINITY, rate = 1, repeat = 1 } = props;
    const channelId = channelHandles++;
    const channel = {
      time: 0,
      delay,
      duration,
      rate,
      repeat
    };
    this._setChannelTime(channel, this.time);
    this.channels.set(channelId, channel);
    return channelId;
  }
  removeChannel(channelId) {
    this.channels.delete(channelId);
    for (const [animationHandle, animation] of this.animations) {
      if (animation.channel === channelId) {
        this.detachAnimation(animationHandle);
      }
    }
  }
  isFinished(channelId) {
    const channel = this.channels.get(channelId);
    if (channel === void 0) {
      return false;
    }
    return this.time >= channel.delay + channel.duration * channel.repeat;
  }
  getTime(channelId) {
    if (channelId === void 0) {
      return this.time;
    }
    const channel = this.channels.get(channelId);
    if (channel === void 0) {
      return -1;
    }
    return channel.time;
  }
  setTime(time) {
    this.time = Math.max(0, time);
    const channels = this.channels.values();
    for (const channel of channels) {
      this._setChannelTime(channel, this.time);
    }
    const animations = this.animations.values();
    for (const animationData of animations) {
      const { animation, channel } = animationData;
      animation.setTime(this.getTime(channel));
    }
  }
  play() {
    this.playing = true;
  }
  pause() {
    this.playing = false;
    this.lastEngineTime = -1;
  }
  reset() {
    this.setTime(0);
  }
  attachAnimation(animation, channelHandle) {
    const animationHandle = animationHandles++;
    this.animations.set(animationHandle, {
      animation,
      channel: channelHandle
    });
    animation.setTime(this.getTime(channelHandle));
    return animationHandle;
  }
  detachAnimation(channelId) {
    this.animations.delete(channelId);
  }
  update(engineTime) {
    if (this.playing) {
      if (this.lastEngineTime === -1) {
        this.lastEngineTime = engineTime;
      }
      this.setTime(this.time + (engineTime - this.lastEngineTime));
      this.lastEngineTime = engineTime;
    }
  }
  _setChannelTime(channel, time) {
    const offsetTime = time - channel.delay;
    const totalDuration = channel.duration * channel.repeat;
    if (offsetTime >= totalDuration) {
      channel.time = channel.duration * channel.rate;
    } else {
      channel.time = Math.max(0, offsetTime) % channel.duration;
      channel.time *= channel.rate;
    }
  }
};

// .yarn/__virtual__/@luma.gl-engine-virtual-2f877ad12c/4/.yarn/berry/cache/@luma.gl-engine-npm-9.1.9-a0c8f25348-10c0.zip/node_modules/@luma.gl/engine/dist/animation-loop/request-animation-frame.js
function requestAnimationFramePolyfill(callback) {
  return typeof window !== "undefined" && window.requestAnimationFrame ? window.requestAnimationFrame(callback) : setTimeout(callback, 1e3 / 60);
}
function cancelAnimationFramePolyfill(timerId) {
  return typeof window !== "undefined" && window.cancelAnimationFrame ? window.cancelAnimationFrame(timerId) : clearTimeout(timerId);
}

// .yarn/__virtual__/@luma.gl-engine-virtual-2f877ad12c/4/.yarn/berry/cache/@luma.gl-engine-npm-9.1.9-a0c8f25348-10c0.zip/node_modules/@luma.gl/engine/dist/animation-loop/animation-loop.js
var statIdCounter = 0;
var DEFAULT_ANIMATION_LOOP_PROPS = {
  device: null,
  onAddHTML: () => "",
  onInitialize: async () => {
    return null;
  },
  onRender: () => {
  },
  onFinalize: () => {
  },
  onError: (error) => console.error(error),
  // eslint-disable-line no-console
  stats: luma.stats.get(`animation-loop-${statIdCounter++}`),
  // view parameters
  useDevicePixels: true,
  autoResizeViewport: false,
  autoResizeDrawingBuffer: false
};
var AnimationLoop = class {
  // _gpuTimeQuery: Query | null = null;
  /*
   * @param {HTMLCanvasElement} canvas - if provided, width and height will be passed to context
   */
  constructor(props) {
    __publicField(this, "device", null);
    __publicField(this, "canvas", null);
    __publicField(this, "props");
    __publicField(this, "animationProps", null);
    __publicField(this, "timeline", null);
    __publicField(this, "stats");
    __publicField(this, "cpuTime");
    __publicField(this, "gpuTime");
    __publicField(this, "frameRate");
    __publicField(this, "display");
    __publicField(this, "needsRedraw", "initialized");
    __publicField(this, "_initialized", false);
    __publicField(this, "_running", false);
    __publicField(this, "_animationFrameId", null);
    __publicField(this, "_nextFramePromise", null);
    __publicField(this, "_resolveNextFrame", null);
    __publicField(this, "_cpuStartTime", 0);
    __publicField(this, "_error", null);
    this.props = { ...DEFAULT_ANIMATION_LOOP_PROPS, ...props };
    props = this.props;
    if (!props.device) {
      throw new Error("No device provided");
    }
    const { useDevicePixels = true } = this.props;
    this.stats = props.stats || new Stats({ id: "animation-loop-stats" });
    this.cpuTime = this.stats.get("CPU Time");
    this.gpuTime = this.stats.get("GPU Time");
    this.frameRate = this.stats.get("Frame Rate");
    this.setProps({
      autoResizeViewport: props.autoResizeViewport,
      autoResizeDrawingBuffer: props.autoResizeDrawingBuffer,
      useDevicePixels
    });
    this.start = this.start.bind(this);
    this.stop = this.stop.bind(this);
    this._onMousemove = this._onMousemove.bind(this);
    this._onMouseleave = this._onMouseleave.bind(this);
  }
  destroy() {
    this.stop();
    this._setDisplay(null);
  }
  /** @deprecated Use .destroy() */
  delete() {
    this.destroy();
  }
  setError(error) {
    var _a3, _b;
    this.props.onError(error);
    this._error = Error();
    const canvas2 = (_b = (_a3 = this.device) == null ? void 0 : _a3.canvasContext) == null ? void 0 : _b.canvas;
    if (canvas2 instanceof HTMLCanvasElement) {
      const errorDiv = document.createElement("h1");
      errorDiv.innerHTML = error.message;
      errorDiv.style.position = "absolute";
      errorDiv.style.top = "20%";
      errorDiv.style.left = "10px";
      errorDiv.style.color = "black";
      errorDiv.style.backgroundColor = "red";
      document.body.appendChild(errorDiv);
    }
  }
  /** Flags this animation loop as needing redraw */
  setNeedsRedraw(reason) {
    this.needsRedraw = this.needsRedraw || reason;
    return this;
  }
  /** TODO - move these props to CanvasContext? */
  setProps(props) {
    if ("autoResizeViewport" in props) {
      this.props.autoResizeViewport = props.autoResizeViewport || false;
    }
    if ("autoResizeDrawingBuffer" in props) {
      this.props.autoResizeDrawingBuffer = props.autoResizeDrawingBuffer || false;
    }
    if ("useDevicePixels" in props) {
      this.props.useDevicePixels = props.useDevicePixels || false;
    }
    return this;
  }
  /** Starts a render loop if not already running */
  async start() {
    if (this._running) {
      return this;
    }
    this._running = true;
    try {
      let appContext;
      if (!this._initialized) {
        this._initialized = true;
        await this._initDevice();
        this._initialize();
        await this.props.onInitialize(this._getAnimationProps());
      }
      if (!this._running) {
        return null;
      }
      if (appContext !== false) {
        this._cancelAnimationFrame();
        this._requestAnimationFrame();
      }
      return this;
    } catch (err) {
      const error = err instanceof Error ? err : new Error("Unknown error");
      this.props.onError(error);
      throw error;
    }
  }
  /** Stops a render loop if already running, finalizing */
  stop() {
    if (this._running) {
      if (this.animationProps && !this._error) {
        this.props.onFinalize(this.animationProps);
      }
      this._cancelAnimationFrame();
      this._nextFramePromise = null;
      this._resolveNextFrame = null;
      this._running = false;
    }
    return this;
  }
  /** Explicitly draw a frame */
  redraw() {
    var _a3;
    if (((_a3 = this.device) == null ? void 0 : _a3.isLost) || this._error) {
      return this;
    }
    this._beginFrameTimers();
    this._setupFrame();
    this._updateAnimationProps();
    this._renderFrame(this._getAnimationProps());
    this._clearNeedsRedraw();
    if (this._resolveNextFrame) {
      this._resolveNextFrame(this);
      this._nextFramePromise = null;
      this._resolveNextFrame = null;
    }
    this._endFrameTimers();
    return this;
  }
  /** Add a timeline, it will be automatically updated by the animation loop. */
  attachTimeline(timeline) {
    this.timeline = timeline;
    return this.timeline;
  }
  /** Remove a timeline */
  detachTimeline() {
    this.timeline = null;
  }
  /** Wait until a render completes */
  waitForRender() {
    this.setNeedsRedraw("waitForRender");
    if (!this._nextFramePromise) {
      this._nextFramePromise = new Promise((resolve2) => {
        this._resolveNextFrame = resolve2;
      });
    }
    return this._nextFramePromise;
  }
  /** TODO - should use device.deviceContext */
  async toDataURL() {
    this.setNeedsRedraw("toDataURL");
    await this.waitForRender();
    if (this.canvas instanceof HTMLCanvasElement) {
      return this.canvas.toDataURL();
    }
    throw new Error("OffscreenCanvas");
  }
  // PRIVATE METHODS
  _initialize() {
    this._startEventHandling();
    this._initializeAnimationProps();
    this._updateAnimationProps();
    this._resizeCanvasDrawingBuffer();
    this._resizeViewport();
  }
  _setDisplay(display) {
    if (this.display) {
      this.display.destroy();
      this.display.animationLoop = null;
    }
    if (display) {
      display.animationLoop = this;
    }
    this.display = display;
  }
  _requestAnimationFrame() {
    if (!this._running) {
      return;
    }
    this._animationFrameId = requestAnimationFramePolyfill(this._animationFrame.bind(this));
  }
  _cancelAnimationFrame() {
    if (this._animationFrameId === null) {
      return;
    }
    cancelAnimationFramePolyfill(this._animationFrameId);
    this._animationFrameId = null;
  }
  _animationFrame() {
    if (!this._running) {
      return;
    }
    this.redraw();
    this._requestAnimationFrame();
  }
  // Called on each frame, can be overridden to call onRender multiple times
  // to support e.g. stereoscopic rendering
  _renderFrame(animationProps) {
    var _a3;
    if (this.display) {
      this.display._renderFrame(animationProps);
      return;
    }
    this.props.onRender(this._getAnimationProps());
    (_a3 = this.device) == null ? void 0 : _a3.submit();
  }
  _clearNeedsRedraw() {
    this.needsRedraw = false;
  }
  _setupFrame() {
    this._resizeCanvasDrawingBuffer();
    this._resizeViewport();
  }
  // Initialize the  object that will be passed to app callbacks
  _initializeAnimationProps() {
    var _a3, _b;
    const canvas2 = (_b = (_a3 = this.device) == null ? void 0 : _a3.canvasContext) == null ? void 0 : _b.canvas;
    if (!this.device || !canvas2) {
      throw new Error("loop");
    }
    this.animationProps = {
      animationLoop: this,
      device: this.device,
      canvas: canvas2,
      timeline: this.timeline,
      // Initial values
      useDevicePixels: this.props.useDevicePixels,
      needsRedraw: false,
      // Placeholders
      width: 1,
      height: 1,
      aspect: 1,
      // Animation props
      time: 0,
      startTime: Date.now(),
      engineTime: 0,
      tick: 0,
      tock: 0,
      // Experimental
      _mousePosition: null
      // Event props
    };
  }
  _getAnimationProps() {
    if (!this.animationProps) {
      throw new Error("animationProps");
    }
    return this.animationProps;
  }
  // Update the context object that will be passed to app callbacks
  _updateAnimationProps() {
    if (!this.animationProps) {
      return;
    }
    const { width, height, aspect } = this._getSizeAndAspect();
    if (width !== this.animationProps.width || height !== this.animationProps.height) {
      this.setNeedsRedraw("drawing buffer resized");
    }
    if (aspect !== this.animationProps.aspect) {
      this.setNeedsRedraw("drawing buffer aspect changed");
    }
    this.animationProps.width = width;
    this.animationProps.height = height;
    this.animationProps.aspect = aspect;
    this.animationProps.needsRedraw = this.needsRedraw;
    this.animationProps.engineTime = Date.now() - this.animationProps.startTime;
    if (this.timeline) {
      this.timeline.update(this.animationProps.engineTime);
    }
    this.animationProps.tick = Math.floor(this.animationProps.time / 1e3 * 60);
    this.animationProps.tock++;
    this.animationProps.time = this.timeline ? this.timeline.getTime() : this.animationProps.engineTime;
  }
  /** Wait for supplied device */
  async _initDevice() {
    var _a3;
    this.device = await this.props.device;
    if (!this.device) {
      throw new Error("No device provided");
    }
    this.canvas = ((_a3 = this.device.canvasContext) == null ? void 0 : _a3.canvas) || null;
  }
  _createInfoDiv() {
    if (this.canvas && this.props.onAddHTML) {
      const wrapperDiv = document.createElement("div");
      document.body.appendChild(wrapperDiv);
      wrapperDiv.style.position = "relative";
      const div4 = document.createElement("div");
      div4.style.position = "absolute";
      div4.style.left = "10px";
      div4.style.bottom = "10px";
      div4.style.width = "300px";
      div4.style.background = "white";
      if (this.canvas instanceof HTMLCanvasElement) {
        wrapperDiv.appendChild(this.canvas);
      }
      wrapperDiv.appendChild(div4);
      const html = this.props.onAddHTML(div4);
      if (html) {
        div4.innerHTML = html;
      }
    }
  }
  _getSizeAndAspect() {
    var _a3, _b, _c, _d;
    if (!this.device) {
      return { width: 1, height: 1, aspect: 1 };
    }
    const [width, height] = ((_b = (_a3 = this.device) == null ? void 0 : _a3.canvasContext) == null ? void 0 : _b.getPixelSize()) || [1, 1];
    let aspect = 1;
    const canvas2 = (_d = (_c = this.device) == null ? void 0 : _c.canvasContext) == null ? void 0 : _d.canvas;
    if (canvas2 && canvas2.clientHeight) {
      aspect = canvas2.clientWidth / canvas2.clientHeight;
    } else if (width > 0 && height > 0) {
      aspect = width / height;
    }
    return { width, height, aspect };
  }
  /** Default viewport setup */
  _resizeViewport() {
    if (this.props.autoResizeViewport && this.device.gl) {
      this.device.gl.viewport(
        0,
        0,
        // @ts-expect-error Expose canvasContext
        this.device.gl.drawingBufferWidth,
        // @ts-expect-error Expose canvasContext
        this.device.gl.drawingBufferHeight
      );
    }
  }
  /**
   * Resize the render buffer of the canvas to match canvas client size
   * Optionally multiplying with devicePixel ratio
   */
  _resizeCanvasDrawingBuffer() {
    var _a3, _b;
    if (this.props.autoResizeDrawingBuffer) {
      (_b = (_a3 = this.device) == null ? void 0 : _a3.canvasContext) == null ? void 0 : _b.resize({ useDevicePixels: this.props.useDevicePixels });
    }
  }
  _beginFrameTimers() {
    this.frameRate.timeEnd();
    this.frameRate.timeStart();
    this.cpuTime.timeStart();
  }
  _endFrameTimers() {
    this.cpuTime.timeEnd();
  }
  // Event handling
  _startEventHandling() {
    if (this.canvas) {
      this.canvas.addEventListener("mousemove", this._onMousemove.bind(this));
      this.canvas.addEventListener("mouseleave", this._onMouseleave.bind(this));
    }
  }
  _onMousemove(event) {
    if (event instanceof MouseEvent) {
      this._getAnimationProps()._mousePosition = [event.offsetX, event.offsetY];
    }
  }
  _onMouseleave(event) {
    this._getAnimationProps()._mousePosition = null;
  }
};

// .yarn/__virtual__/@luma.gl-engine-virtual-2f877ad12c/4/.yarn/berry/cache/@luma.gl-engine-npm-9.1.9-a0c8f25348-10c0.zip/node_modules/@luma.gl/engine/dist/utils/uid.js
var uidCounters2 = {};
function uid2(id = "id") {
  uidCounters2[id] = uidCounters2[id] || 1;
  const count2 = uidCounters2[id]++;
  return `${id}-${count2}`;
}

// .yarn/__virtual__/@luma.gl-engine-virtual-2f877ad12c/4/.yarn/berry/cache/@luma.gl-engine-npm-9.1.9-a0c8f25348-10c0.zip/node_modules/@luma.gl/engine/dist/geometry/gpu-geometry.js
var GPUGeometry = class {
  constructor(props) {
    __publicField(this, "id");
    __publicField(this, "userData", {});
    /** Determines how vertices are read from the 'vertex' attributes */
    __publicField(this, "topology");
    __publicField(this, "bufferLayout", []);
    __publicField(this, "vertexCount");
    __publicField(this, "indices");
    __publicField(this, "attributes");
    this.id = props.id || uid2("geometry");
    this.topology = props.topology;
    this.indices = props.indices || null;
    this.attributes = props.attributes;
    this.vertexCount = props.vertexCount;
    this.bufferLayout = props.bufferLayout || [];
    if (this.indices) {
      if (!(this.indices.usage & Buffer.INDEX)) {
        throw new Error("Index buffer must have INDEX usage");
      }
    }
  }
  destroy() {
    var _a3;
    (_a3 = this.indices) == null ? void 0 : _a3.destroy();
    for (const attribute of Object.values(this.attributes)) {
      attribute.destroy();
    }
  }
  getVertexCount() {
    return this.vertexCount;
  }
  getAttributes() {
    return this.attributes;
  }
  getIndexes() {
    return this.indices || null;
  }
  _calculateVertexCount(positions) {
    const vertexCount = positions.byteLength / 12;
    return vertexCount;
  }
};
function makeGPUGeometry(device, geometry2) {
  if (geometry2 instanceof GPUGeometry) {
    return geometry2;
  }
  const indices = getIndexBufferFromGeometry(device, geometry2);
  const { attributes, bufferLayout } = getAttributeBuffersFromGeometry(device, geometry2);
  return new GPUGeometry({
    topology: geometry2.topology || "triangle-list",
    bufferLayout,
    vertexCount: geometry2.vertexCount,
    indices,
    attributes
  });
}
function getIndexBufferFromGeometry(device, geometry2) {
  if (!geometry2.indices) {
    return void 0;
  }
  const data = geometry2.indices.value;
  return device.createBuffer({ usage: Buffer.INDEX, data });
}
function getAttributeBuffersFromGeometry(device, geometry2) {
  const bufferLayout = [];
  const attributes = {};
  for (const [attributeName, attribute] of Object.entries(geometry2.attributes)) {
    let name2 = attributeName;
    switch (attributeName) {
      case "POSITION":
        name2 = "positions";
        break;
      case "NORMAL":
        name2 = "normals";
        break;
      case "TEXCOORD_0":
        name2 = "texCoords";
        break;
      case "COLOR_0":
        name2 = "colors";
        break;
    }
    if (attribute) {
      attributes[name2] = device.createBuffer({
        data: attribute.value,
        id: `${attributeName}-buffer`
      });
      const { value, size, normalized } = attribute;
      bufferLayout.push({ name: name2, format: getVertexFormatFromAttribute(value, size, normalized) });
    }
  }
  const vertexCount = geometry2._calculateVertexCount(geometry2.attributes, geometry2.indices);
  return { attributes, bufferLayout, vertexCount };
}

// .yarn/__virtual__/@luma.gl-engine-virtual-2f877ad12c/4/.yarn/berry/cache/@luma.gl-engine-npm-9.1.9-a0c8f25348-10c0.zip/node_modules/@luma.gl/engine/dist/factories/pipeline-factory.js
var _PipelineFactory = class _PipelineFactory {
  constructor(device) {
    __publicField(this, "device");
    __publicField(this, "destroyPolicy");
    __publicField(this, "_hashCounter", 0);
    __publicField(this, "_hashes", {});
    __publicField(this, "_renderPipelineCache", {});
    __publicField(this, "_computePipelineCache", {});
    this.device = device;
    this.destroyPolicy = device.props._factoryDestroyPolicy;
  }
  /** Get the singleton default pipeline factory for the specified device */
  static getDefaultPipelineFactory(device) {
    device._lumaData.defaultPipelineFactory = device._lumaData.defaultPipelineFactory || new _PipelineFactory(device);
    return device._lumaData.defaultPipelineFactory;
  }
  /** Return a RenderPipeline matching props. Reuses a similar pipeline if already created. */
  createRenderPipeline(props) {
    const allProps = { ...RenderPipeline.defaultProps, ...props };
    const hash = this._hashRenderPipeline(allProps);
    if (!this._renderPipelineCache[hash]) {
      const pipeline = this.device.createRenderPipeline({
        ...allProps,
        id: allProps.id ? `${allProps.id}-cached` : void 0
      });
      pipeline.hash = hash;
      this._renderPipelineCache[hash] = { pipeline, useCount: 0 };
    }
    this._renderPipelineCache[hash].useCount++;
    return this._renderPipelineCache[hash].pipeline;
  }
  createComputePipeline(props) {
    const allProps = { ...ComputePipeline.defaultProps, ...props };
    const hash = this._hashComputePipeline(allProps);
    if (!this._computePipelineCache[hash]) {
      const pipeline = this.device.createComputePipeline({
        ...allProps,
        id: allProps.id ? `${allProps.id}-cached` : void 0
      });
      pipeline.hash = hash;
      this._computePipelineCache[hash] = { pipeline, useCount: 0 };
    }
    this._computePipelineCache[hash].useCount++;
    return this._computePipelineCache[hash].pipeline;
  }
  release(pipeline) {
    const hash = pipeline.hash;
    const cache2 = pipeline instanceof ComputePipeline ? this._computePipelineCache : this._renderPipelineCache;
    cache2[hash].useCount--;
    if (cache2[hash].useCount === 0) {
      if (this.destroyPolicy === "unused") {
        cache2[hash].pipeline.destroy();
        delete cache2[hash];
      }
    }
  }
  // PRIVATE
  _hashComputePipeline(props) {
    const shaderHash = this._getHash(props.shader.source);
    return `${shaderHash}`;
  }
  /** Calculate a hash based on all the inputs for a render pipeline */
  _hashRenderPipeline(props) {
    const vsHash = props.vs ? this._getHash(props.vs.source) : 0;
    const fsHash = props.fs ? this._getHash(props.fs.source) : 0;
    const varyingHash = "-";
    const bufferLayoutHash = this._getHash(JSON.stringify(props.bufferLayout));
    switch (this.device.type) {
      case "webgl":
        return `${vsHash}/${fsHash}V${varyingHash}BL${bufferLayoutHash}`;
      default:
        const parameterHash = this._getHash(JSON.stringify(props.parameters));
        return `${vsHash}/${fsHash}V${varyingHash}T${props.topology}P${parameterHash}BL${bufferLayoutHash}`;
    }
  }
  _getHash(key) {
    if (this._hashes[key] === void 0) {
      this._hashes[key] = this._hashCounter++;
    }
    return this._hashes[key];
  }
};
__publicField(_PipelineFactory, "defaultProps", { ...RenderPipeline.defaultProps });
var PipelineFactory = _PipelineFactory;

// .yarn/__virtual__/@luma.gl-engine-virtual-2f877ad12c/4/.yarn/berry/cache/@luma.gl-engine-npm-9.1.9-a0c8f25348-10c0.zip/node_modules/@luma.gl/engine/dist/factories/shader-factory.js
var _ShaderFactory = class _ShaderFactory {
  /** @internal */
  constructor(device) {
    __publicField(this, "device");
    __publicField(this, "destroyPolicy");
    __publicField(this, "_cache", {});
    this.device = device;
    this.destroyPolicy = device.props._factoryDestroyPolicy;
  }
  /** Returns the default ShaderFactory for the given {@link Device}, creating one if necessary. */
  static getDefaultShaderFactory(device) {
    var _a3;
    (_a3 = device._lumaData).defaultShaderFactory || (_a3.defaultShaderFactory = new _ShaderFactory(device));
    return device._lumaData.defaultShaderFactory;
  }
  /** Requests a {@link Shader} from the cache, creating a new Shader only if necessary. */
  createShader(props) {
    const key = this._hashShader(props);
    let cacheEntry = this._cache[key];
    if (!cacheEntry) {
      const shader = this.device.createShader({
        ...props,
        id: props.id ? `${props.id}-cached` : void 0
      });
      this._cache[key] = cacheEntry = { shader, useCount: 0 };
    }
    cacheEntry.useCount++;
    return cacheEntry.shader;
  }
  /** Releases a previously-requested {@link Shader}, destroying it if no users remain. */
  release(shader) {
    const key = this._hashShader(shader);
    const cacheEntry = this._cache[key];
    if (cacheEntry) {
      cacheEntry.useCount--;
      if (cacheEntry.useCount === 0) {
        if (this.destroyPolicy === "unused") {
          delete this._cache[key];
          cacheEntry.shader.destroy();
        }
      }
    }
  }
  // PRIVATE
  _hashShader(value) {
    return `${value.stage}:${value.source}`;
  }
};
__publicField(_ShaderFactory, "defaultProps", { ...Shader.defaultProps });
var ShaderFactory = _ShaderFactory;

// .yarn/__virtual__/@luma.gl-engine-virtual-2f877ad12c/4/.yarn/berry/cache/@luma.gl-engine-npm-9.1.9-a0c8f25348-10c0.zip/node_modules/@luma.gl/engine/dist/debug/debug-shader-layout.js
function getDebugTableForShaderLayout(layout, name2) {
  var _a3;
  const table = {};
  const header = "Values";
  if (layout.attributes.length === 0 && !((_a3 = layout.varyings) == null ? void 0 : _a3.length)) {
    return { "No attributes or varyings": { [header]: "N/A" } };
  }
  for (const attributeDeclaration of layout.attributes) {
    if (attributeDeclaration) {
      const glslDeclaration = `${attributeDeclaration.location} ${attributeDeclaration.name}: ${attributeDeclaration.type}`;
      table[`in ${glslDeclaration}`] = { [header]: attributeDeclaration.stepMode || "vertex" };
    }
  }
  for (const varyingDeclaration of layout.varyings || []) {
    const glslDeclaration = `${varyingDeclaration.location} ${varyingDeclaration.name}`;
    table[`out ${glslDeclaration}`] = { [header]: JSON.stringify(varyingDeclaration) };
  }
  return table;
}

// .yarn/__virtual__/@luma.gl-engine-virtual-2f877ad12c/4/.yarn/berry/cache/@luma.gl-engine-npm-9.1.9-a0c8f25348-10c0.zip/node_modules/@luma.gl/engine/dist/debug/debug-framebuffer.js
var canvas = null;
var ctx = null;
function debugFramebuffer(fbo, { id, minimap, opaque, top = "0", left = "0", rgbaScale = 1 }) {
  if (!canvas) {
    canvas = document.createElement("canvas");
    canvas.id = id;
    canvas.title = id;
    canvas.style.zIndex = "100";
    canvas.style.position = "absolute";
    canvas.style.top = top;
    canvas.style.left = left;
    canvas.style.border = "blue 5px solid";
    canvas.style.transform = "scaleY(-1)";
    document.body.appendChild(canvas);
    ctx = canvas.getContext("2d");
  }
  if (canvas.width !== fbo.width || canvas.height !== fbo.height) {
    canvas.width = fbo.width / 2;
    canvas.height = fbo.height / 2;
    canvas.style.width = "400px";
    canvas.style.height = "400px";
  }
  const color = fbo.device.readPixelsToArrayWebGL(fbo);
  const imageData = ctx == null ? void 0 : ctx.createImageData(fbo.width, fbo.height);
  if (imageData) {
    const offset = 0;
    for (let i4 = 0; i4 < color.length; i4 += 4) {
      imageData.data[offset + i4 + 0] = color[i4 + 0] * rgbaScale;
      imageData.data[offset + i4 + 1] = color[i4 + 1] * rgbaScale;
      imageData.data[offset + i4 + 2] = color[i4 + 2] * rgbaScale;
      imageData.data[offset + i4 + 3] = opaque ? 255 : color[i4 + 3] * rgbaScale;
    }
    ctx == null ? void 0 : ctx.putImageData(imageData, 0, 0);
  }
}

// .yarn/__virtual__/@luma.gl-engine-virtual-2f877ad12c/4/.yarn/berry/cache/@luma.gl-engine-npm-9.1.9-a0c8f25348-10c0.zip/node_modules/@luma.gl/engine/dist/utils/deep-equal.js
function deepEqual(a3, b2, depth) {
  if (a3 === b2) {
    return true;
  }
  if (!depth || !a3 || !b2) {
    return false;
  }
  if (Array.isArray(a3)) {
    if (!Array.isArray(b2) || a3.length !== b2.length) {
      return false;
    }
    for (let i4 = 0; i4 < a3.length; i4++) {
      if (!deepEqual(a3[i4], b2[i4], depth - 1)) {
        return false;
      }
    }
    return true;
  }
  if (Array.isArray(b2)) {
    return false;
  }
  if (typeof a3 === "object" && typeof b2 === "object") {
    const aKeys = Object.keys(a3);
    const bKeys = Object.keys(b2);
    if (aKeys.length !== bKeys.length) {
      return false;
    }
    for (const key of aKeys) {
      if (!b2.hasOwnProperty(key)) {
        return false;
      }
      if (!deepEqual(a3[key], b2[key], depth - 1)) {
        return false;
      }
    }
    return true;
  }
  return false;
}

// ../../../.yarn/berry/cache/@math.gl-types-npm-4.1.0-8b30af41f6-10c0.zip/node_modules/@math.gl/types/dist/is-array.js
function isTypedArray2(value) {
  return ArrayBuffer.isView(value) && !(value instanceof DataView);
}
function isNumberArray2(value) {
  if (Array.isArray(value)) {
    return value.length === 0 || typeof value[0] === "number";
  }
  return false;
}
function isNumericArray(value) {
  return isTypedArray2(value) || isNumberArray2(value);
}

// .yarn/__virtual__/@luma.gl-engine-virtual-2f877ad12c/4/.yarn/berry/cache/@luma.gl-engine-npm-9.1.9-a0c8f25348-10c0.zip/node_modules/@luma.gl/engine/dist/model/split-uniforms-and-bindings.js
function isUniformValue(value) {
  return isNumericArray(value) || typeof value === "number" || typeof value === "boolean";
}
function splitUniformsAndBindings(uniforms) {
  const result = { bindings: {}, uniforms: {} };
  Object.keys(uniforms).forEach((name2) => {
    const uniform = uniforms[name2];
    if (isUniformValue(uniform)) {
      result.uniforms[name2] = uniform;
    } else {
      result.bindings[name2] = uniform;
    }
  });
  return result;
}

// .yarn/__virtual__/@luma.gl-engine-virtual-2f877ad12c/4/.yarn/berry/cache/@luma.gl-engine-npm-9.1.9-a0c8f25348-10c0.zip/node_modules/@luma.gl/engine/dist/shader-inputs.js
var ShaderInputs = class {
  /** Tracks if uniforms have changed */
  // moduleUniformsChanged: Record<keyof ShaderPropsT, false | string>;
  /**
   * Create a new UniformStore instance
   * @param modules
   */
  constructor(modules, options) {
    __publicField(this, "options", {
      disableWarnings: false
    });
    /**
     * The map of modules
     * @todo should should this include the resolved dependencies?
     */
    // @ts-ignore Fix typings
    __publicField(this, "modules");
    /** Stores the uniform values for each module */
    __publicField(this, "moduleUniforms");
    /** Stores the uniform bindings for each module  */
    __publicField(this, "moduleBindings");
    Object.assign(this.options, options);
    const resolvedModules = getShaderModuleDependencies(Object.values(modules).filter((module) => module.dependencies));
    for (const resolvedModule of resolvedModules) {
      modules[resolvedModule.name] = resolvedModule;
    }
    log2.log(1, "Creating ShaderInputs with modules", Object.keys(modules))();
    this.modules = modules;
    this.moduleUniforms = {};
    this.moduleBindings = {};
    for (const [name2, module] of Object.entries(modules)) {
      this._addModule(module);
      if (module.name && name2 !== module.name && !this.options.disableWarnings) {
        log2.warn(`Module name: ${name2} vs ${module.name}`)();
      }
    }
  }
  /** Destroy */
  destroy() {
  }
  /**
   * Set module props
   */
  setProps(props) {
    var _a3;
    for (const name2 of Object.keys(props)) {
      const moduleName = name2;
      const moduleProps = props[moduleName] || {};
      const module = this.modules[moduleName];
      if (!module) {
        if (!this.options.disableWarnings) {
          log2.warn(`Module ${name2} not found`)();
        }
        continue;
      }
      const oldUniforms = this.moduleUniforms[moduleName];
      const oldBindings = this.moduleBindings[moduleName];
      const uniformsAndBindings = ((_a3 = module.getUniforms) == null ? void 0 : _a3.call(module, moduleProps, oldUniforms)) || moduleProps;
      const { uniforms, bindings } = splitUniformsAndBindings(uniformsAndBindings);
      this.moduleUniforms[moduleName] = { ...oldUniforms, ...uniforms };
      this.moduleBindings[moduleName] = { ...oldBindings, ...bindings };
    }
  }
  /**
   * Return the map of modules
   * @todo should should this include the resolved dependencies?
   */
  getModules() {
    return Object.values(this.modules);
  }
  /** Get all uniform values for all modules */
  getUniformValues() {
    return this.moduleUniforms;
  }
  /** Merges all bindings for the shader (from the various modules) */
  getBindingValues() {
    const bindings = {};
    for (const moduleBindings of Object.values(this.moduleBindings)) {
      Object.assign(bindings, moduleBindings);
    }
    return bindings;
  }
  // INTERNAL
  /** Return a debug table that can be used for console.table() or log.table() */
  getDebugTable() {
    var _a3;
    const table = {};
    for (const [moduleName, module] of Object.entries(this.moduleUniforms)) {
      for (const [key, value] of Object.entries(module)) {
        table[`${moduleName}.${key}`] = {
          type: (_a3 = this.modules[moduleName].uniformTypes) == null ? void 0 : _a3[key],
          value: String(value)
        };
      }
    }
    return table;
  }
  _addModule(module) {
    const moduleName = module.name;
    this.moduleUniforms[moduleName] = module.defaultUniforms || {};
    this.moduleBindings[moduleName] = {};
  }
};

// .yarn/__virtual__/@luma.gl-engine-virtual-2f877ad12c/4/.yarn/berry/cache/@luma.gl-engine-npm-9.1.9-a0c8f25348-10c0.zip/node_modules/@luma.gl/engine/dist/application-utils/load-file.js
var pathPrefix2 = "";
async function loadImageBitmap(url, opts) {
  const image = new Image();
  image.crossOrigin = (opts == null ? void 0 : opts.crossOrigin) || "anonymous";
  image.src = url.startsWith("http") ? url : pathPrefix2 + url;
  await image.decode();
  return opts ? await createImageBitmap(image, opts) : await createImageBitmap(image);
}

// .yarn/__virtual__/@luma.gl-engine-virtual-2f877ad12c/4/.yarn/berry/cache/@luma.gl-engine-npm-9.1.9-a0c8f25348-10c0.zip/node_modules/@luma.gl/engine/dist/async-texture/async-texture.js
var AsyncTexture = class {
  constructor(device, props) {
    __publicField(this, "device");
    __publicField(this, "id");
    // TODO - should we type these as possibly `null`? It will make usage harder?
    // @ts-expect-error
    __publicField(this, "texture");
    // @ts-expect-error
    __publicField(this, "sampler");
    // @ts-expect-error
    __publicField(this, "view");
    __publicField(this, "ready");
    __publicField(this, "isReady", false);
    __publicField(this, "destroyed", false);
    __publicField(this, "resolveReady", () => {
    });
    __publicField(this, "rejectReady", () => {
    });
    this.device = device;
    this.id = props.id || uid2("async-texture");
    if (typeof (props == null ? void 0 : props.data) === "string" && props.dimension === "2d") {
      props = { ...props, data: loadImageBitmap(props.data) };
    }
    this.ready = new Promise((resolve2, reject) => {
      this.resolveReady = () => {
        this.isReady = true;
        resolve2();
      };
      this.rejectReady = reject;
    });
    this.initAsync(props);
  }
  get [Symbol.toStringTag]() {
    return "AsyncTexture";
  }
  toString() {
    return `AsyncTexture:"${this.id}"(${this.isReady ? "ready" : "loading"})`;
  }
  async initAsync(props) {
    const asyncData = props.data;
    let data;
    try {
      data = await awaitAllPromises(asyncData);
    } catch (error) {
      this.rejectReady(error);
    }
    if (this.destroyed) {
      return;
    }
    const syncProps = { ...props, data };
    this.texture = this.device.createTexture(syncProps);
    this.sampler = this.texture.sampler;
    this.view = this.texture.view;
    this.isReady = true;
    this.resolveReady();
  }
  destroy() {
    if (this.texture) {
      this.texture.destroy();
      this.texture = null;
    }
    this.destroyed = true;
  }
  /**
   * Textures are immutable and cannot be resized after creation,
   * but we can create a similar texture with the same parameters but a new size.
   * @note Does not copy contents of the texture
   * @todo Abort pending promise and create a texture with the new size?
   */
  resize(size) {
    if (!this.isReady) {
      throw new Error("Cannot resize texture before it is ready");
    }
    if (size.width === this.texture.width && size.height === this.texture.height) {
      return false;
    }
    if (this.texture) {
      const texture = this.texture;
      this.texture = texture.clone(size);
      texture.destroy();
    }
    return true;
  }
};
async function awaitAllPromises(x3) {
  x3 = await x3;
  if (Array.isArray(x3)) {
    return await Promise.all(x3.map(awaitAllPromises));
  }
  if (x3 && typeof x3 === "object" && x3.constructor === Object) {
    const object = x3;
    const values = await Promise.all(Object.values(object));
    const keys = Object.keys(object);
    const resolvedObject = {};
    for (let i4 = 0; i4 < keys.length; i4++) {
      resolvedObject[keys[i4]] = values[i4];
    }
    return resolvedObject;
  }
  return x3;
}

// .yarn/__virtual__/@luma.gl-engine-virtual-2f877ad12c/4/.yarn/berry/cache/@luma.gl-engine-npm-9.1.9-a0c8f25348-10c0.zip/node_modules/@luma.gl/engine/dist/model/model.js
var LOG_DRAW_PRIORITY = 2;
var LOG_DRAW_TIMEOUT = 1e4;
var _Model = class _Model {
  constructor(device, props) {
    __publicField(this, "device");
    __publicField(this, "id");
    // @ts-expect-error assigned in function called from constructor
    __publicField(this, "source");
    // @ts-expect-error assigned in function called from constructor
    __publicField(this, "vs");
    // @ts-expect-error assigned in function called from constructor
    __publicField(this, "fs");
    __publicField(this, "pipelineFactory");
    __publicField(this, "shaderFactory");
    __publicField(this, "userData", {});
    // Fixed properties (change can trigger pipeline rebuild)
    /** The render pipeline GPU parameters, depth testing etc */
    __publicField(this, "parameters");
    /** The primitive topology */
    __publicField(this, "topology");
    /** Buffer layout */
    __publicField(this, "bufferLayout");
    // Dynamic properties
    /** Use instanced rendering */
    __publicField(this, "isInstanced");
    /** instance count. `undefined` means not instanced */
    __publicField(this, "instanceCount", 0);
    /** Vertex count */
    __publicField(this, "vertexCount");
    /** Index buffer */
    __publicField(this, "indexBuffer", null);
    /** Buffer-valued attributes */
    __publicField(this, "bufferAttributes", {});
    /** Constant-valued attributes */
    __publicField(this, "constantAttributes", {});
    /** Bindings (textures, samplers, uniform buffers) */
    __publicField(this, "bindings", {});
    /** Sets uniforms @deprecated Use uniform buffers and setBindings() for portability*/
    __publicField(this, "uniforms", {});
    /**
     * VertexArray
     * @note not implemented: if bufferLayout is updated, vertex array has to be rebuilt!
     * @todo - allow application to define multiple vertex arrays?
     * */
    __publicField(this, "vertexArray");
    /** TransformFeedback, WebGL 2 only. */
    __publicField(this, "transformFeedback", null);
    /** The underlying GPU "program". @note May be recreated if parameters change */
    __publicField(this, "pipeline");
    /** ShaderInputs instance */
    // @ts-expect-error Assigned in function called by constructor
    __publicField(this, "shaderInputs");
    // @ts-expect-error Assigned in function called by constructor
    __publicField(this, "_uniformStore");
    __publicField(this, "_attributeInfos", {});
    __publicField(this, "_gpuGeometry", null);
    __publicField(this, "_getModuleUniforms");
    __publicField(this, "props");
    __publicField(this, "_pipelineNeedsUpdate", "newly created");
    __publicField(this, "_needsRedraw", "initializing");
    __publicField(this, "_destroyed", false);
    /** "Time" of last draw. Monotonically increasing timestamp */
    __publicField(this, "_lastDrawTimestamp", -1);
    /** Throttle draw call logging */
    __publicField(this, "_lastLogTime", 0);
    __publicField(this, "_logOpen", false);
    __publicField(this, "_drawCount", 0);
    var _a3, _b, _c, _d;
    this.props = { ..._Model.defaultProps, ...props };
    props = this.props;
    this.id = props.id || uid2("model");
    this.device = device;
    Object.assign(this.userData, props.userData);
    const moduleMap = Object.fromEntries(((_a3 = this.props.modules) == null ? void 0 : _a3.map((module) => [module.name, module])) || []);
    const shaderInputs = props.shaderInputs || new ShaderInputs(moduleMap, { disableWarnings: this.props.disableWarnings });
    this.setShaderInputs(shaderInputs);
    const platformInfo = getPlatformInfo(device);
    const modules = (
      // @ts-ignore shaderInputs is assigned in setShaderInputs above.
      (((_b = this.props.modules) == null ? void 0 : _b.length) > 0 ? this.props.modules : (_c = this.shaderInputs) == null ? void 0 : _c.getModules()) || []
    );
    const isWebGPU = this.device.type === "webgpu";
    if (isWebGPU && this.props.source) {
      const { source: source4, getUniforms: getUniforms5 } = this.props.shaderAssembler.assembleWGSLShader({
        platformInfo,
        ...this.props,
        modules
      });
      this.source = source4;
      this._getModuleUniforms = getUniforms5;
      (_d = this.props).shaderLayout || (_d.shaderLayout = getShaderLayoutFromWGSL(this.source));
    } else {
      const { vs: vs11, fs: fs10, getUniforms: getUniforms5 } = this.props.shaderAssembler.assembleGLSLShaderPair({
        platformInfo,
        ...this.props,
        modules
      });
      this.vs = vs11;
      this.fs = fs10;
      this._getModuleUniforms = getUniforms5;
    }
    this.vertexCount = this.props.vertexCount;
    this.instanceCount = this.props.instanceCount;
    this.topology = this.props.topology;
    this.bufferLayout = this.props.bufferLayout;
    this.parameters = this.props.parameters;
    if (props.geometry) {
      this.setGeometry(props.geometry);
    }
    this.pipelineFactory = props.pipelineFactory || PipelineFactory.getDefaultPipelineFactory(this.device);
    this.shaderFactory = props.shaderFactory || ShaderFactory.getDefaultShaderFactory(this.device);
    this.pipeline = this._updatePipeline();
    this.vertexArray = device.createVertexArray({
      renderPipeline: this.pipeline
    });
    if (this._gpuGeometry) {
      this._setGeometryAttributes(this._gpuGeometry);
    }
    if ("isInstanced" in props) {
      this.isInstanced = props.isInstanced;
    }
    if (props.instanceCount) {
      this.setInstanceCount(props.instanceCount);
    }
    if (props.vertexCount) {
      this.setVertexCount(props.vertexCount);
    }
    if (props.indexBuffer) {
      this.setIndexBuffer(props.indexBuffer);
    }
    if (props.attributes) {
      this.setAttributes(props.attributes);
    }
    if (props.constantAttributes) {
      this.setConstantAttributes(props.constantAttributes);
    }
    if (props.bindings) {
      this.setBindings(props.bindings);
    }
    if (props.uniforms) {
      this.setUniformsWebGL(props.uniforms);
    }
    if (props.moduleSettings) {
      this.updateModuleSettingsWebGL(props.moduleSettings);
    }
    if (props.transformFeedback) {
      this.transformFeedback = props.transformFeedback;
    }
    Object.seal(this);
  }
  get [Symbol.toStringTag]() {
    return "Model";
  }
  toString() {
    return `Model(${this.id})`;
  }
  destroy() {
    var _a3;
    if (this._destroyed)
      return;
    this.pipelineFactory.release(this.pipeline);
    this.shaderFactory.release(this.pipeline.vs);
    if (this.pipeline.fs) {
      this.shaderFactory.release(this.pipeline.fs);
    }
    this._uniformStore.destroy();
    (_a3 = this._gpuGeometry) == null ? void 0 : _a3.destroy();
    this._destroyed = true;
  }
  // Draw call
  /** Query redraw status. Clears the status. */
  needsRedraw() {
    if (this._getBindingsUpdateTimestamp() > this._lastDrawTimestamp) {
      this.setNeedsRedraw("contents of bound textures or buffers updated");
    }
    const needsRedraw = this._needsRedraw;
    this._needsRedraw = false;
    return needsRedraw;
  }
  /** Mark the model as needing a redraw */
  setNeedsRedraw(reason) {
    this._needsRedraw || (this._needsRedraw = reason);
  }
  predraw() {
    this.updateShaderInputs();
    this.pipeline = this._updatePipeline();
  }
  draw(renderPass) {
    const loadingBinding = this._areBindingsLoading();
    if (loadingBinding) {
      log2.info(LOG_DRAW_PRIORITY, `>>> DRAWING ABORTED ${this.id}: ${loadingBinding} not loaded`)();
      return false;
    }
    try {
      renderPass.pushDebugGroup(`${this}.predraw(${renderPass})`);
      this.predraw();
    } finally {
      renderPass.popDebugGroup();
    }
    let drawSuccess;
    try {
      renderPass.pushDebugGroup(`${this}.draw(${renderPass})`);
      this._logDrawCallStart();
      this.pipeline = this._updatePipeline();
      const syncBindings = this._getBindings();
      this.pipeline.setBindings(syncBindings, {
        disableWarnings: this.props.disableWarnings
      });
      if (!isObjectEmpty(this.uniforms)) {
        this.pipeline.setUniformsWebGL(this.uniforms);
      }
      const { indexBuffer } = this.vertexArray;
      const indexCount = indexBuffer ? indexBuffer.byteLength / (indexBuffer.indexType === "uint32" ? 4 : 2) : void 0;
      drawSuccess = this.pipeline.draw({
        renderPass,
        vertexArray: this.vertexArray,
        isInstanced: this.isInstanced,
        vertexCount: this.vertexCount,
        instanceCount: this.instanceCount,
        indexCount,
        transformFeedback: this.transformFeedback || void 0,
        // WebGL shares underlying cached pipelines even for models that have different parameters and topology,
        // so we must provide our unique parameters to each draw
        // (In WebGPU most parameters are encoded in the pipeline and cannot be changed per draw call)
        parameters: this.parameters,
        topology: this.topology
      });
    } finally {
      renderPass.popDebugGroup();
      this._logDrawCallEnd();
    }
    this._logFramebuffer(renderPass);
    if (drawSuccess) {
      this._lastDrawTimestamp = this.device.timestamp;
      this._needsRedraw = false;
    } else {
      this._needsRedraw = "waiting for resource initialization";
    }
    return drawSuccess;
  }
  // Update fixed fields (can trigger pipeline rebuild)
  /**
   * Updates the optional geometry
   * Geometry, set topology and bufferLayout
   * @note Can trigger a pipeline rebuild / pipeline cache fetch on WebGPU
   */
  setGeometry(geometry2) {
    var _a3;
    (_a3 = this._gpuGeometry) == null ? void 0 : _a3.destroy();
    const gpuGeometry = geometry2 && makeGPUGeometry(this.device, geometry2);
    if (gpuGeometry) {
      this.setTopology(gpuGeometry.topology || "triangle-list");
      const bufferLayoutHelper = new BufferLayoutHelper(this.bufferLayout);
      this.bufferLayout = bufferLayoutHelper.mergeBufferLayouts(gpuGeometry.bufferLayout, this.bufferLayout);
      if (this.vertexArray) {
        this._setGeometryAttributes(gpuGeometry);
      }
    }
    this._gpuGeometry = gpuGeometry;
  }
  /**
   * Updates the primitive topology ('triangle-list', 'triangle-strip' etc).
   * @note Triggers a pipeline rebuild / pipeline cache fetch on WebGPU
   */
  setTopology(topology) {
    if (topology !== this.topology) {
      this.topology = topology;
      this._setPipelineNeedsUpdate("topology");
    }
  }
  /**
   * Updates the buffer layout.
   * @note Triggers a pipeline rebuild / pipeline cache fetch
   */
  setBufferLayout(bufferLayout) {
    const bufferLayoutHelper = new BufferLayoutHelper(this.bufferLayout);
    this.bufferLayout = this._gpuGeometry ? bufferLayoutHelper.mergeBufferLayouts(bufferLayout, this._gpuGeometry.bufferLayout) : bufferLayout;
    this._setPipelineNeedsUpdate("bufferLayout");
    this.pipeline = this._updatePipeline();
    this.vertexArray = this.device.createVertexArray({
      renderPipeline: this.pipeline
    });
    if (this._gpuGeometry) {
      this._setGeometryAttributes(this._gpuGeometry);
    }
  }
  /**
   * Set GPU parameters.
   * @note Can trigger a pipeline rebuild / pipeline cache fetch.
   * @param parameters
   */
  setParameters(parameters) {
    if (!deepEqual(parameters, this.parameters, 2)) {
      this.parameters = parameters;
      this._setPipelineNeedsUpdate("parameters");
    }
  }
  // Update dynamic fields
  /**
   * Updates the instance count (used in draw calls)
   * @note Any attributes with stepMode=instance need to be at least this big
   */
  setInstanceCount(instanceCount) {
    this.instanceCount = instanceCount;
    if (this.isInstanced === void 0 && instanceCount > 0) {
      this.isInstanced = true;
    }
    this.setNeedsRedraw("instanceCount");
  }
  /**
   * Updates the vertex count (used in draw calls)
   * @note Any attributes with stepMode=vertex need to be at least this big
   */
  setVertexCount(vertexCount) {
    this.vertexCount = vertexCount;
    this.setNeedsRedraw("vertexCount");
  }
  /** Set the shader inputs */
  setShaderInputs(shaderInputs) {
    this.shaderInputs = shaderInputs;
    this._uniformStore = new UniformStore(this.shaderInputs.modules);
    for (const [moduleName, module] of Object.entries(this.shaderInputs.modules)) {
      if (shaderModuleHasUniforms(module)) {
        const uniformBuffer = this._uniformStore.getManagedUniformBuffer(this.device, moduleName);
        this.bindings[`${moduleName}Uniforms`] = uniformBuffer;
      }
    }
    this.setNeedsRedraw("shaderInputs");
  }
  /** Update uniform buffers from the model's shader inputs */
  updateShaderInputs() {
    this._uniformStore.setUniforms(this.shaderInputs.getUniformValues());
    this.setBindings(this.shaderInputs.getBindingValues());
    this.setNeedsRedraw("shaderInputs");
  }
  /**
   * Sets bindings (textures, samplers, uniform buffers)
   */
  setBindings(bindings) {
    Object.assign(this.bindings, bindings);
    this.setNeedsRedraw("bindings");
  }
  /**
   * Updates optional transform feedback. WebGL only.
   */
  setTransformFeedback(transformFeedback) {
    this.transformFeedback = transformFeedback;
    this.setNeedsRedraw("transformFeedback");
  }
  /**
   * Sets the index buffer
   * @todo - how to unset it if we change geometry?
   */
  setIndexBuffer(indexBuffer) {
    this.vertexArray.setIndexBuffer(indexBuffer);
    this.setNeedsRedraw("indexBuffer");
  }
  /**
   * Sets attributes (buffers)
   * @note Overrides any attributes previously set with the same name
   */
  setAttributes(buffers, options) {
    const disableWarnings = (options == null ? void 0 : options.disableWarnings) ?? this.props.disableWarnings;
    if (buffers.indices) {
      log2.warn(`Model:${this.id} setAttributes() - indexBuffer should be set using setIndexBuffer()`)();
    }
    this.bufferLayout = sortedBufferLayoutByShaderSourceLocations(this.pipeline.shaderLayout, this.bufferLayout);
    const bufferLayoutHelper = new BufferLayoutHelper(this.bufferLayout);
    for (const [bufferName, buffer2] of Object.entries(buffers)) {
      const bufferLayout = bufferLayoutHelper.getBufferLayout(bufferName);
      if (!bufferLayout) {
        if (!disableWarnings) {
          log2.warn(`Model(${this.id}): Missing layout for buffer "${bufferName}".`)();
        }
        continue;
      }
      const attributeNames = bufferLayoutHelper.getAttributeNamesForBuffer(bufferLayout);
      let set7 = false;
      for (const attributeName of attributeNames) {
        const attributeInfo = this._attributeInfos[attributeName];
        if (attributeInfo) {
          const location = this.device.type === "webgpu" ? bufferLayoutHelper.getBufferIndex(attributeInfo.bufferName) : attributeInfo.location;
          this.vertexArray.setBuffer(location, buffer2);
          set7 = true;
        }
      }
      if (!set7 && !disableWarnings) {
        log2.warn(`Model(${this.id}): Ignoring buffer "${buffer2.id}" for unknown attribute "${bufferName}"`)();
      }
    }
    this.setNeedsRedraw("attributes");
  }
  /**
   * Sets constant attributes
   * @note Overrides any attributes previously set with the same name
   * Constant attributes are only supported in WebGL, not in WebGPU
   * Any attribute that is disabled in the current vertex array object
   * is read from the context's global constant value for that attribute location.
   * @param constantAttributes
   */
  setConstantAttributes(attributes, options) {
    for (const [attributeName, value] of Object.entries(attributes)) {
      const attributeInfo = this._attributeInfos[attributeName];
      if (attributeInfo) {
        this.vertexArray.setConstantWebGL(attributeInfo.location, value);
      } else if (!((options == null ? void 0 : options.disableWarnings) ?? this.props.disableWarnings)) {
        log2.warn(`Model "${this.id}: Ignoring constant supplied for unknown attribute "${attributeName}"`)();
      }
    }
    this.setNeedsRedraw("constants");
  }
  // DEPRECATED METHODS
  /**
   * Sets individual uniforms
   * @deprecated WebGL only, use uniform buffers for portability
   * @param uniforms
   */
  setUniforms(uniforms) {
    this.setUniformsWebGL(uniforms);
  }
  /**
   * Sets individual uniforms
   * @deprecated WebGL only, use uniform buffers for portability
   * @param uniforms
   */
  setUniformsWebGL(uniforms) {
    if (!isObjectEmpty(uniforms)) {
      this.pipeline.setUniformsWebGL(uniforms);
      Object.assign(this.uniforms, uniforms);
    }
    this.setNeedsRedraw("uniforms");
  }
  /**
   * @deprecated Updates shader module settings (which results in uniforms being set)
   */
  updateModuleSettingsWebGL(props) {
    const { bindings, uniforms } = splitUniformsAndBindings(this._getModuleUniforms(props));
    Object.assign(this.bindings, bindings);
    Object.assign(this.uniforms, uniforms);
    this.setNeedsRedraw("moduleSettings");
  }
  // Internal methods
  /** Check that bindings are loaded. Returns id of first binding that is still loading. */
  _areBindingsLoading() {
    for (const binding of Object.values(this.bindings)) {
      if (binding instanceof AsyncTexture && !binding.isReady) {
        return binding.id;
      }
    }
    return false;
  }
  /** Extracts texture view from loaded async textures. Returns null if any textures have not yet been loaded. */
  _getBindings() {
    const validBindings = {};
    for (const [name2, binding] of Object.entries(this.bindings)) {
      if (binding instanceof AsyncTexture) {
        if (binding.isReady) {
          validBindings[name2] = binding.texture;
        }
      } else {
        validBindings[name2] = binding;
      }
    }
    return validBindings;
  }
  /** Get the timestamp of the latest updated bound GPU memory resource (buffer/texture). */
  _getBindingsUpdateTimestamp() {
    let timestamp = 0;
    for (const binding of Object.values(this.bindings)) {
      if (binding instanceof TextureView) {
        timestamp = Math.max(timestamp, binding.texture.updateTimestamp);
      } else if (binding instanceof Buffer || binding instanceof Texture) {
        timestamp = Math.max(timestamp, binding.updateTimestamp);
      } else if (binding instanceof AsyncTexture) {
        timestamp = binding.texture ? Math.max(timestamp, binding.texture.updateTimestamp) : (
          // The texture will become available in the future
          Infinity
        );
      } else if (!(binding instanceof Sampler)) {
        timestamp = Math.max(timestamp, binding.buffer.updateTimestamp);
      }
    }
    return timestamp;
  }
  /**
   * Updates the optional geometry attributes
   * Geometry, sets several attributes, indexBuffer, and also vertex count
   * @note Can trigger a pipeline rebuild / pipeline cache fetch on WebGPU
   */
  _setGeometryAttributes(gpuGeometry) {
    const attributes = { ...gpuGeometry.attributes };
    for (const [attributeName] of Object.entries(attributes)) {
      if (!this.pipeline.shaderLayout.attributes.find((layout) => layout.name === attributeName) && attributeName !== "positions") {
        delete attributes[attributeName];
      }
    }
    this.vertexCount = gpuGeometry.vertexCount;
    this.setIndexBuffer(gpuGeometry.indices || null);
    this.setAttributes(gpuGeometry.attributes, { disableWarnings: true });
    this.setAttributes(attributes, { disableWarnings: this.props.disableWarnings });
    this.setNeedsRedraw("geometry attributes");
  }
  /** Mark pipeline as needing update */
  _setPipelineNeedsUpdate(reason) {
    this._pipelineNeedsUpdate || (this._pipelineNeedsUpdate = reason);
    this.setNeedsRedraw(reason);
  }
  /** Update pipeline if needed */
  _updatePipeline() {
    if (this._pipelineNeedsUpdate) {
      let prevShaderVs = null;
      let prevShaderFs = null;
      if (this.pipeline) {
        log2.log(1, `Model ${this.id}: Recreating pipeline because "${this._pipelineNeedsUpdate}".`)();
        prevShaderVs = this.pipeline.vs;
        prevShaderFs = this.pipeline.fs;
      }
      this._pipelineNeedsUpdate = false;
      const vs11 = this.shaderFactory.createShader({
        id: `${this.id}-vertex`,
        stage: "vertex",
        source: this.source || this.vs,
        debugShaders: this.props.debugShaders
      });
      let fs10 = null;
      if (this.source) {
        fs10 = vs11;
      } else if (this.fs) {
        fs10 = this.shaderFactory.createShader({
          id: `${this.id}-fragment`,
          stage: "fragment",
          source: this.source || this.fs,
          debugShaders: this.props.debugShaders
        });
      }
      this.pipeline = this.pipelineFactory.createRenderPipeline({
        ...this.props,
        bufferLayout: this.bufferLayout,
        topology: this.topology,
        parameters: this.parameters,
        // TODO - why set bindings here when we reset them every frame?
        // Should we expose a BindGroup abstraction?
        bindings: this._getBindings(),
        vs: vs11,
        fs: fs10
      });
      this._attributeInfos = getAttributeInfosFromLayouts(this.pipeline.shaderLayout, this.bufferLayout);
      if (prevShaderVs)
        this.shaderFactory.release(prevShaderVs);
      if (prevShaderFs)
        this.shaderFactory.release(prevShaderFs);
    }
    return this.pipeline;
  }
  _logDrawCallStart() {
    const logDrawTimeout = log2.level > 3 ? 0 : LOG_DRAW_TIMEOUT;
    if (log2.level < 2 || Date.now() - this._lastLogTime < logDrawTimeout) {
      return;
    }
    this._lastLogTime = Date.now();
    this._logOpen = true;
    log2.group(LOG_DRAW_PRIORITY, `>>> DRAWING MODEL ${this.id}`, { collapsed: log2.level <= 2 })();
  }
  _logDrawCallEnd() {
    if (this._logOpen) {
      const shaderLayoutTable = getDebugTableForShaderLayout(this.pipeline.shaderLayout, this.id);
      log2.table(LOG_DRAW_PRIORITY, shaderLayoutTable)();
      const uniformTable = this.shaderInputs.getDebugTable();
      for (const [name2, value] of Object.entries(this.uniforms)) {
        uniformTable[name2] = { value };
      }
      log2.table(LOG_DRAW_PRIORITY, uniformTable)();
      const attributeTable = this._getAttributeDebugTable();
      log2.table(LOG_DRAW_PRIORITY, this._attributeInfos)();
      log2.table(LOG_DRAW_PRIORITY, attributeTable)();
      log2.groupEnd(LOG_DRAW_PRIORITY)();
      this._logOpen = false;
    }
  }
  _logFramebuffer(renderPass) {
    const debugFramebuffers = this.device.props.debugFramebuffers;
    this._drawCount++;
    if (!debugFramebuffers) {
      return;
    }
    const framebuffer = renderPass.props.framebuffer;
    if (framebuffer) {
      debugFramebuffer(framebuffer, { id: framebuffer.id, minimap: true });
    }
  }
  _getAttributeDebugTable() {
    const table = {};
    for (const [name2, attributeInfo] of Object.entries(this._attributeInfos)) {
      const values = this.vertexArray.attributes[attributeInfo.location];
      table[attributeInfo.location] = {
        name: name2,
        type: attributeInfo.shaderType,
        values: values ? this._getBufferOrConstantValues(values, attributeInfo.bufferDataType) : "null"
      };
    }
    if (this.vertexArray.indexBuffer) {
      const { indexBuffer } = this.vertexArray;
      const values = indexBuffer.indexType === "uint32" ? new Uint32Array(indexBuffer.debugData) : new Uint16Array(indexBuffer.debugData);
      table.indices = {
        name: "indices",
        type: indexBuffer.indexType,
        values: values.toString()
      };
    }
    return table;
  }
  // TODO - fix typing of luma data types
  _getBufferOrConstantValues(attribute, dataType) {
    const TypedArrayConstructor = getTypedArrayFromDataType(dataType);
    const typedArray = attribute instanceof Buffer ? new TypedArrayConstructor(attribute.debugData) : attribute;
    return typedArray.toString();
  }
};
__publicField(_Model, "defaultProps", {
  ...RenderPipeline.defaultProps,
  source: void 0,
  vs: null,
  fs: null,
  id: "unnamed",
  handle: void 0,
  userData: {},
  defines: {},
  modules: [],
  moduleSettings: void 0,
  geometry: null,
  indexBuffer: null,
  attributes: {},
  constantAttributes: {},
  varyings: [],
  isInstanced: void 0,
  instanceCount: 0,
  vertexCount: 0,
  shaderInputs: void 0,
  pipelineFactory: void 0,
  shaderFactory: void 0,
  transformFeedback: void 0,
  shaderAssembler: ShaderAssembler.getDefaultShaderAssembler(),
  debugShaders: void 0,
  disableWarnings: void 0
});
var Model = _Model;
function shaderModuleHasUniforms(module) {
  return Boolean(module.uniformTypes && !isObjectEmpty(module.uniformTypes));
}
function getPlatformInfo(device) {
  return {
    type: device.type,
    shaderLanguage: device.info.shadingLanguage,
    shaderLanguageVersion: device.info.shadingLanguageVersion,
    gpu: device.info.gpu,
    // HACK - we pretend that the DeviceFeatures is a Set, it has a similar API
    features: device.features
  };
}
function isObjectEmpty(obj) {
  for (const key in obj) {
    return false;
  }
  return true;
}

// .yarn/__virtual__/@luma.gl-engine-virtual-2f877ad12c/4/.yarn/berry/cache/@luma.gl-engine-npm-9.1.9-a0c8f25348-10c0.zip/node_modules/@luma.gl/engine/dist/compute/buffer-transform.js
var _BufferTransform = class _BufferTransform {
  constructor(device, props = _BufferTransform.defaultProps) {
    __publicField(this, "device");
    __publicField(this, "model");
    __publicField(this, "transformFeedback");
    if (!_BufferTransform.isSupported(device)) {
      throw new Error("BufferTransform not yet implemented on WebGPU");
    }
    this.device = device;
    this.model = new Model(this.device, {
      id: props.id || "buffer-transform-model",
      fs: props.fs || getPassthroughFS(),
      topology: props.topology || "point-list",
      varyings: props.outputs || props.varyings,
      ...props
    });
    this.transformFeedback = this.device.createTransformFeedback({
      layout: this.model.pipeline.shaderLayout,
      // @ts-expect-error TODO
      buffers: props.feedbackBuffers
    });
    this.model.setTransformFeedback(this.transformFeedback);
    Object.seal(this);
  }
  static isSupported(device) {
    var _a3;
    return ((_a3 = device == null ? void 0 : device.info) == null ? void 0 : _a3.type) === "webgl";
  }
  /** Destroy owned resources. */
  destroy() {
    if (this.model) {
      this.model.destroy();
    }
  }
  /** @deprecated Use {@link destroy}. */
  delete() {
    this.destroy();
  }
  /** Run one transform loop. */
  run(options) {
    if (options == null ? void 0 : options.inputBuffers) {
      this.model.setAttributes(options.inputBuffers);
    }
    if (options == null ? void 0 : options.outputBuffers) {
      this.transformFeedback.setBuffers(options.outputBuffers);
    }
    const renderPass = this.device.beginRenderPass(options);
    this.model.draw(renderPass);
    renderPass.end();
  }
  // DEPRECATED METHODS
  /** @deprecated App knows what buffers it is passing in - Returns the {@link Buffer} or {@link BufferRange} for given varying name. */
  getBuffer(varyingName) {
    return this.transformFeedback.getBuffer(varyingName);
  }
  /** @deprecated App knows what buffers it is passing in - Reads the {@link Buffer} or {@link BufferRange} for given varying name. */
  readAsync(varyingName) {
    const result = this.getBuffer(varyingName);
    if (!result) {
      throw new Error("BufferTransform#getBuffer");
    }
    if (result instanceof Buffer) {
      return result.readAsync();
    }
    const { buffer: buffer2, byteOffset = 0, byteLength = buffer2.byteLength } = result;
    return buffer2.readAsync(byteOffset, byteLength);
  }
};
__publicField(_BufferTransform, "defaultProps", {
  ...Model.defaultProps,
  outputs: void 0,
  feedbackBuffers: void 0
});
var BufferTransform = _BufferTransform;

// .yarn/__virtual__/@luma.gl-engine-virtual-2f877ad12c/4/.yarn/berry/cache/@luma.gl-engine-npm-9.1.9-a0c8f25348-10c0.zip/node_modules/@luma.gl/engine/dist/geometries/cube-geometry.js
var CUBE_INDICES = new Uint16Array([
  0,
  1,
  2,
  0,
  2,
  3,
  4,
  5,
  6,
  4,
  6,
  7,
  8,
  9,
  10,
  8,
  10,
  11,
  12,
  13,
  14,
  12,
  14,
  15,
  16,
  17,
  18,
  16,
  18,
  19,
  20,
  21,
  22,
  20,
  22,
  23
]);
var CUBE_POSITIONS = new Float32Array([
  -1,
  -1,
  1,
  1,
  -1,
  1,
  1,
  1,
  1,
  -1,
  1,
  1,
  -1,
  -1,
  -1,
  -1,
  1,
  -1,
  1,
  1,
  -1,
  1,
  -1,
  -1,
  -1,
  1,
  -1,
  -1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  -1,
  -1,
  -1,
  -1,
  1,
  -1,
  -1,
  1,
  -1,
  1,
  -1,
  -1,
  1,
  1,
  -1,
  -1,
  1,
  1,
  -1,
  1,
  1,
  1,
  1,
  -1,
  1,
  -1,
  -1,
  -1,
  -1,
  -1,
  1,
  -1,
  1,
  1,
  -1,
  1,
  -1
]);
var CUBE_NORMALS = new Float32Array([
  // Front face
  0,
  0,
  1,
  0,
  0,
  1,
  0,
  0,
  1,
  0,
  0,
  1,
  // Back face
  0,
  0,
  -1,
  0,
  0,
  -1,
  0,
  0,
  -1,
  0,
  0,
  -1,
  // Top face
  0,
  1,
  0,
  0,
  1,
  0,
  0,
  1,
  0,
  0,
  1,
  0,
  // Bottom face
  0,
  -1,
  0,
  0,
  -1,
  0,
  0,
  -1,
  0,
  0,
  -1,
  0,
  // Right face
  1,
  0,
  0,
  1,
  0,
  0,
  1,
  0,
  0,
  1,
  0,
  0,
  // Left face
  -1,
  0,
  0,
  -1,
  0,
  0,
  -1,
  0,
  0,
  -1,
  0,
  0
]);
var CUBE_TEX_COORDS = new Float32Array([
  // Front face
  0,
  0,
  1,
  0,
  1,
  1,
  0,
  1,
  // Back face
  1,
  0,
  1,
  1,
  0,
  1,
  0,
  0,
  // Top face
  0,
  1,
  0,
  0,
  1,
  0,
  1,
  1,
  // Bottom face
  1,
  1,
  0,
  1,
  0,
  0,
  1,
  0,
  // Right face
  1,
  0,
  1,
  1,
  0,
  1,
  0,
  0,
  // Left face
  0,
  0,
  1,
  0,
  1,
  1,
  0,
  1
]);
var CUBE_NON_INDEXED_POSITIONS = new Float32Array([
  1,
  -1,
  1,
  -1,
  -1,
  1,
  -1,
  -1,
  -1,
  1,
  -1,
  -1,
  1,
  -1,
  1,
  -1,
  -1,
  -1,
  1,
  1,
  1,
  1,
  -1,
  1,
  1,
  -1,
  -1,
  1,
  1,
  -1,
  1,
  1,
  1,
  1,
  -1,
  -1,
  -1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  -1,
  -1,
  1,
  -1,
  -1,
  1,
  1,
  1,
  1,
  -1,
  -1,
  -1,
  1,
  -1,
  1,
  1,
  -1,
  1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  1,
  -1,
  1,
  -1,
  1,
  1,
  1,
  -1,
  1,
  1,
  -1,
  -1,
  1,
  -1,
  -1,
  1,
  1,
  -1,
  1,
  1,
  1,
  1,
  1,
  -1,
  -1,
  -1,
  -1,
  -1,
  -1,
  1,
  -1,
  1,
  1,
  -1,
  1,
  -1,
  -1,
  -1,
  1,
  -1
]);
var CUBE_NON_INDEXED_TEX_COORDS = new Float32Array([
  1,
  1,
  0,
  1,
  0,
  0,
  1,
  0,
  1,
  1,
  0,
  0,
  1,
  1,
  0,
  1,
  0,
  0,
  1,
  0,
  1,
  1,
  0,
  0,
  1,
  1,
  0,
  1,
  0,
  0,
  1,
  0,
  1,
  1,
  0,
  0,
  1,
  1,
  0,
  1,
  0,
  0,
  1,
  0,
  1,
  1,
  0,
  0,
  1,
  1,
  0,
  1,
  0,
  0,
  0,
  0,
  1,
  0,
  1,
  1,
  1,
  1,
  0,
  1,
  0,
  0,
  1,
  0,
  1,
  1,
  0,
  0
]);
var CUBE_NON_INDEXED_COLORS = new Float32Array([
  1,
  0,
  1,
  1,
  0,
  0,
  1,
  1,
  0,
  0,
  0,
  1,
  1,
  0,
  0,
  1,
  1,
  0,
  1,
  1,
  0,
  0,
  0,
  1,
  1,
  1,
  1,
  1,
  1,
  0,
  1,
  1,
  1,
  0,
  0,
  1,
  1,
  1,
  0,
  1,
  1,
  1,
  1,
  1,
  1,
  0,
  0,
  1,
  0,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  0,
  1,
  0,
  1,
  0,
  1,
  0,
  1,
  1,
  1,
  1,
  1,
  0,
  1,
  0,
  0,
  1,
  1,
  0,
  1,
  1,
  1,
  0,
  1,
  0,
  1,
  0,
  0,
  0,
  1,
  0,
  0,
  1,
  1,
  0,
  1,
  0,
  1,
  1,
  1,
  1,
  1,
  0,
  1,
  1,
  1,
  0,
  0,
  1,
  1,
  0,
  0,
  1,
  1,
  1,
  0,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  0,
  0,
  1,
  0,
  0,
  0,
  1,
  0,
  1,
  0,
  1,
  1,
  1,
  0,
  1,
  1,
  0,
  0,
  1,
  0,
  1,
  0,
  1
]);

// .yarn/__virtual__/@luma.gl-engine-virtual-2f877ad12c/4/.yarn/berry/cache/@luma.gl-engine-npm-9.1.9-a0c8f25348-10c0.zip/node_modules/@luma.gl/engine/dist/compute/computation.js
var LOG_DRAW_PRIORITY2 = 2;
var LOG_DRAW_TIMEOUT2 = 1e4;
var _Computation = class _Computation {
  constructor(device, props) {
    __publicField(this, "device");
    __publicField(this, "id");
    __publicField(this, "pipelineFactory");
    __publicField(this, "shaderFactory");
    __publicField(this, "userData", {});
    /** Bindings (textures, samplers, uniform buffers) */
    __publicField(this, "bindings", {});
    /** The underlying GPU pipeline. */
    __publicField(this, "pipeline");
    /** Assembled compute shader source */
    __publicField(this, "source");
    /** the underlying compiled compute shader */
    // @ts-ignore Set in function called from constructor
    __publicField(this, "shader");
    /** ShaderInputs instance */
    __publicField(this, "shaderInputs");
    // @ts-ignore Set in function called from constructor
    __publicField(this, "_uniformStore");
    __publicField(this, "_pipelineNeedsUpdate", "newly created");
    __publicField(this, "_getModuleUniforms");
    __publicField(this, "props");
    __publicField(this, "_destroyed", false);
    /** Throttle draw call logging */
    __publicField(this, "_lastLogTime", 0);
    __publicField(this, "_logOpen", false);
    __publicField(this, "_drawCount", 0);
    var _a3, _b, _c, _d;
    if (device.type !== "webgpu") {
      throw new Error("Computation is only supported in WebGPU");
    }
    this.props = { ..._Computation.defaultProps, ...props };
    props = this.props;
    this.id = props.id || uid2("model");
    this.device = device;
    Object.assign(this.userData, props.userData);
    const moduleMap = Object.fromEntries(((_a3 = this.props.modules) == null ? void 0 : _a3.map((module) => [module.name, module])) || []);
    this.shaderInputs = props.shaderInputs || new ShaderInputs(moduleMap);
    this.setShaderInputs(this.shaderInputs);
    (_b = this.props).shaderLayout || (_b.shaderLayout = getShaderLayoutFromWGSL(this.props.source));
    const platformInfo = getPlatformInfo2(device);
    const modules = (((_c = this.props.modules) == null ? void 0 : _c.length) > 0 ? this.props.modules : (_d = this.shaderInputs) == null ? void 0 : _d.getModules()) || [];
    this.pipelineFactory = props.pipelineFactory || PipelineFactory.getDefaultPipelineFactory(this.device);
    this.shaderFactory = props.shaderFactory || ShaderFactory.getDefaultShaderFactory(this.device);
    const { source: source4, getUniforms: getUniforms5 } = this.props.shaderAssembler.assembleWGSLShader({
      platformInfo,
      ...this.props,
      modules
    });
    this.source = source4;
    this._getModuleUniforms = getUniforms5;
    this.pipeline = this._updatePipeline();
    if (props.bindings) {
      this.setBindings(props.bindings);
    }
    Object.seal(this);
  }
  destroy() {
    if (this._destroyed)
      return;
    this.pipelineFactory.release(this.pipeline);
    this.shaderFactory.release(this.shader);
    this._uniformStore.destroy();
    this._destroyed = true;
  }
  // Draw call
  predraw() {
    this.updateShaderInputs();
  }
  dispatch(computePass, x3, y3, z3) {
    try {
      this._logDrawCallStart();
      this.pipeline = this._updatePipeline();
      this.pipeline.setBindings(this.bindings);
      computePass.setPipeline(this.pipeline);
      computePass.setBindings([]);
      computePass.dispatch(x3, y3, z3);
    } finally {
      this._logDrawCallEnd();
    }
  }
  // Update fixed fields (can trigger pipeline rebuild)
  // Update dynamic fields
  /**
   * Updates the vertex count (used in draw calls)
   * @note Any attributes with stepMode=vertex need to be at least this big
   */
  setVertexCount(vertexCount) {
  }
  /**
   * Updates the instance count (used in draw calls)
   * @note Any attributes with stepMode=instance need to be at least this big
   */
  setInstanceCount(instanceCount) {
  }
  setShaderInputs(shaderInputs) {
    this.shaderInputs = shaderInputs;
    this._uniformStore = new UniformStore(this.shaderInputs.modules);
    for (const moduleName of Object.keys(this.shaderInputs.modules)) {
      const uniformBuffer = this._uniformStore.getManagedUniformBuffer(this.device, moduleName);
      this.bindings[`${moduleName}Uniforms`] = uniformBuffer;
    }
  }
  /**
   * Updates shader module settings (which results in uniforms being set)
   */
  setShaderModuleProps(props) {
    const uniforms = this._getModuleUniforms(props);
    const keys = Object.keys(uniforms).filter((k3) => {
      const uniform = uniforms[k3];
      return !isNumericArray(uniform) && typeof uniform !== "number" && typeof uniform !== "boolean";
    });
    const bindings = {};
    for (const k3 of keys) {
      bindings[k3] = uniforms[k3];
      delete uniforms[k3];
    }
  }
  updateShaderInputs() {
    this._uniformStore.setUniforms(this.shaderInputs.getUniformValues());
  }
  /**
   * Sets bindings (textures, samplers, uniform buffers)
   */
  setBindings(bindings) {
    Object.assign(this.bindings, bindings);
  }
  _setPipelineNeedsUpdate(reason) {
    this._pipelineNeedsUpdate = this._pipelineNeedsUpdate || reason;
  }
  _updatePipeline() {
    if (this._pipelineNeedsUpdate) {
      let prevShader = null;
      if (this.pipeline) {
        log2.log(1, `Model ${this.id}: Recreating pipeline because "${this._pipelineNeedsUpdate}".`)();
        prevShader = this.shader;
      }
      this._pipelineNeedsUpdate = false;
      this.shader = this.shaderFactory.createShader({
        id: `${this.id}-fragment`,
        stage: "compute",
        source: this.source,
        debugShaders: this.props.debugShaders
      });
      this.pipeline = this.pipelineFactory.createComputePipeline({
        ...this.props,
        shader: this.shader
      });
      if (prevShader) {
        this.shaderFactory.release(prevShader);
      }
    }
    return this.pipeline;
  }
  _logDrawCallStart() {
    const logDrawTimeout = log2.level > 3 ? 0 : LOG_DRAW_TIMEOUT2;
    if (log2.level < 2 || Date.now() - this._lastLogTime < logDrawTimeout) {
      return;
    }
    this._lastLogTime = Date.now();
    this._logOpen = true;
    log2.group(LOG_DRAW_PRIORITY2, `>>> DRAWING MODEL ${this.id}`, { collapsed: log2.level <= 2 })();
  }
  _logDrawCallEnd() {
    if (this._logOpen) {
      const uniformTable = this.shaderInputs.getDebugTable();
      log2.table(LOG_DRAW_PRIORITY2, uniformTable)();
      log2.groupEnd(LOG_DRAW_PRIORITY2)();
      this._logOpen = false;
    }
  }
  // TODO - fix typing of luma data types
  _getBufferOrConstantValues(attribute, dataType) {
    const TypedArrayConstructor = getTypedArrayFromDataType(dataType);
    const typedArray = attribute instanceof Buffer ? new TypedArrayConstructor(attribute.debugData) : attribute;
    return typedArray.toString();
  }
};
__publicField(_Computation, "defaultProps", {
  ...ComputePipeline.defaultProps,
  id: "unnamed",
  handle: void 0,
  userData: {},
  source: "",
  modules: [],
  defines: {},
  bindings: void 0,
  shaderInputs: void 0,
  pipelineFactory: void 0,
  shaderFactory: void 0,
  shaderAssembler: ShaderAssembler.getDefaultShaderAssembler(),
  debugShaders: void 0
});
var Computation = _Computation;
function getPlatformInfo2(device) {
  return {
    type: device.type,
    shaderLanguage: device.info.shadingLanguage,
    shaderLanguageVersion: device.info.shadingLanguageVersion,
    gpu: device.info.gpu,
    // HACK - we pretend that the DeviceFeatures is a Set, it has a similar API
    features: device.features
  };
}

// .yarn/__virtual__/@luma.gl-engine-virtual-2f877ad12c/4/.yarn/berry/cache/@luma.gl-engine-npm-9.1.9-a0c8f25348-10c0.zip/node_modules/@luma.gl/engine/dist/modules/picking/picking-uniforms.js
var DEFAULT_HIGHLIGHT_COLOR2 = [0, 1, 1, 1];
var INVALID_INDEX = -1;
var uniformTypes = {
  isActive: "i32",
  indexMode: "i32",
  batchIndex: "i32",
  isHighlightActive: "i32",
  highlightedBatchIndex: "i32",
  highlightedObjectIndex: "i32",
  highlightColor: "vec4<f32>"
};
var GLSL_UNIFORMS = (
  /* glsl */
  `precision highp float;
precision highp int;

uniform pickingUniforms {
  int isActive;
  int indexMode;
  int batchIndex;

  int isHighlightActive;
  int highlightedBatchIndex;
  int highlightedObjectIndex;
  vec4 highlightColor;
} picking;
`
);
var WGSL_UNIFORMS = (
  /* wgsl */
  `struct pickingUniforms {
  isActive: int32;
  indexMode: int32;
  batchIndex: int32;

  isHighlightActive: int32;
  highlightedBatchIndex: int32;
  highlightedObjectIndex: int32;
  highlightColor: vec4<f32>;
} picking;
`
);
function getUniforms4(props = {}, prevUniforms) {
  const uniforms = { ...prevUniforms };
  if (props.isActive !== void 0) {
    uniforms.isActive = Boolean(props.isActive);
  }
  switch (props.indexMode) {
    case "instance":
      uniforms.indexMode = 0;
      break;
    case "custom":
      uniforms.indexMode = 1;
      break;
    case void 0:
      break;
  }
  switch (props.highlightedObjectIndex) {
    case void 0:
      break;
    case null:
      uniforms.isHighlightActive = false;
      uniforms.highlightedObjectIndex = INVALID_INDEX;
      break;
    default:
      uniforms.isHighlightActive = true;
      uniforms.highlightedObjectIndex = props.highlightedObjectIndex;
  }
  if (typeof props.highlightedBatchIndex === "number") {
    uniforms.highlightedBatchIndex = props.highlightedBatchIndex;
  }
  if (props.highlightColor) {
    uniforms.highlightColor = props.highlightColor;
  }
  return uniforms;
}
var pickingUniforms = {
  props: {},
  uniforms: {},
  name: "picking",
  uniformTypes,
  defaultUniforms: {
    isActive: false,
    indexMode: 0,
    batchIndex: 0,
    isHighlightActive: true,
    highlightedBatchIndex: INVALID_INDEX,
    highlightedObjectIndex: INVALID_INDEX,
    highlightColor: DEFAULT_HIGHLIGHT_COLOR2
  },
  getUniforms: getUniforms4
};

// .yarn/__virtual__/@luma.gl-engine-virtual-2f877ad12c/4/.yarn/berry/cache/@luma.gl-engine-npm-9.1.9-a0c8f25348-10c0.zip/node_modules/@luma.gl/engine/dist/modules/picking/index-picking.js
var source2 = (
  /* wgsl */
  `${WGSL_UNIFORMS}

const INDEX_PICKING_MODE_INSTANCE = 0;
const INDEX_PICKING_MODE_CUSTOM = 1;
const INDEX_PICKING_INVALID_INDEX = ${INVALID_INDEX}; // 2^32 - 1

struct indexPickingFragmentInputs = {
  objectIndex: int32;
};

let indexPickingFragmentInputs: indexPickingFragmentInputs;

/**
 * Vertex shaders should call this function to set the object index.
 * If using instance or vertex mode, argument will be ignored, 0 can be supplied.
 */
fn picking_setObjectIndex(objectIndex: int32) {
  switch (picking.indexMode) {
    case INDEX_PICKING_MODE_INSTANCE, default: {
      picking_objectIndex = instance_index;
    };
    case INDEX_PICKING_MODE_CUSTOM: {
      picking_objectIndex = objectIndex;
    };
  }
}

`
);
var vs7 = (
  /* glsl */
  `${GLSL_UNIFORMS}

const int INDEX_PICKING_MODE_INSTANCE = 0;
const int INDEX_PICKING_MODE_CUSTOM = 1;

const int INDEX_PICKING_INVALID_INDEX = ${INVALID_INDEX}; // 2^32 - 1

flat out int picking_objectIndex;

/**
 * Vertex shaders should call this function to set the object index.
 * If using instance or vertex mode, argument will be ignored, 0 can be supplied.
 */
void picking_setObjectIndex(int objectIndex) {
  switch (picking.indexMode) {
    case INDEX_PICKING_MODE_INSTANCE:
      picking_objectIndex = gl_InstanceID;
      break;
    case INDEX_PICKING_MODE_CUSTOM:
      picking_objectIndex = objectIndex;
      break;
  }
}
`
);
var fs7 = (
  /* glsl */
  `${GLSL_UNIFORMS}

const int INDEX_PICKING_INVALID_INDEX = ${INVALID_INDEX}; // 2^32 - 1

flat in int picking_objectIndex;

/**
 * Check if this vertex is highlighted (part of the selected batch and object)
 */ 
bool picking_isFragmentHighlighted() {
  return 
    bool(picking.isHighlightActive) &&
    picking.highlightedBatchIndex == picking.batchIndex &&
    picking.highlightedObjectIndex == picking_objectIndex
    ;
}

/**
 * Returns highlight color if this item is selected.
 */
vec4 picking_filterHighlightColor(vec4 color) {
  // If we are still picking, we don't highlight
  if (bool(picking.isActive)) {
    return color;
  }

  // If we are not highlighted, return color as is
  if (!picking_isFragmentHighlighted()) {
    return color;
  }
   
  // Blend in highlight color based on its alpha value
  float highLightAlpha = picking.highlightColor.a;
  float blendedAlpha = highLightAlpha + color.a * (1.0 - highLightAlpha);
  float highLightRatio = highLightAlpha / blendedAlpha;

  vec3 blendedRGB = mix(color.rgb, picking.highlightColor.rgb, highLightRatio);
  return vec4(blendedRGB, blendedAlpha);
}

/*
 * Returns picking color if picking enabled else unmodified argument.
 */
ivec4 picking_getPickingColor() {
  // Assumes that colorAttachment0 is rg32int
  // TODO? - we could render indices into a second color attachment and not mess with fragColor
  return ivec4(picking_objectIndex, picking.batchIndex, 0u, 0u);  
}

vec4 picking_filterPickingColor(vec4 color) {
  if (bool(picking.isActive)) {
    if (picking_objectIndex == INDEX_PICKING_INVALID_INDEX) {
      discard;
    }
  }
  return color;
}

/*
 * Returns picking color if picking is enabled if not
 * highlight color if this item is selected, otherwise unmodified argument.
 */
vec4 picking_filterColor(vec4 color) {
  vec4 outColor = color;
  outColor = picking_filterHighlightColor(outColor);
  outColor = picking_filterPickingColor(outColor);
  return outColor;
}
`
);
var picking2 = {
  ...pickingUniforms,
  name: "picking",
  source: source2,
  vs: vs7,
  fs: fs7
};

// .yarn/__virtual__/@luma.gl-engine-virtual-2f877ad12c/4/.yarn/berry/cache/@luma.gl-engine-npm-9.1.9-a0c8f25348-10c0.zip/node_modules/@luma.gl/engine/dist/modules/picking/color-picking.js
var source3 = (
  /* wgsl */
  `${WGSL_UNIFORMS}
`
);
var vs8 = (
  /* glsl */
  `${GLSL_UNIFORMS}
out vec4 picking_vRGBcolor_Avalid;

// Normalize unsigned byte color to 0-1 range
vec3 picking_normalizeColor(vec3 color) {
  return picking.useFloatColors > 0.5 ? color : color / 255.0;
}

// Normalize unsigned byte color to 0-1 range
vec4 picking_normalizeColor(vec4 color) {
  return picking.useFloatColors > 0.5 ? color : color / 255.0;
}

bool picking_isColorZero(vec3 color) {
  return dot(color, vec3(1.0)) < 0.00001;
}

bool picking_isColorValid(vec3 color) {
  return dot(color, vec3(1.0)) > 0.00001;
}

// Check if this vertex is highlighted 
bool isVertexHighlighted(vec3 vertexColor) {
  vec3 highlightedObjectColor = picking_normalizeColor(picking.highlightedObjectColor);
  return
    bool(picking.isHighlightActive) && picking_isColorZero(abs(vertexColor - highlightedObjectColor));
}

// Set the current picking color
void picking_setPickingColor(vec3 pickingColor) {
  pickingColor = picking_normalizeColor(pickingColor);

  if (bool(picking.isActive)) {
    // Use alpha as the validity flag. If pickingColor is [0, 0, 0] fragment is non-pickable
    picking_vRGBcolor_Avalid.a = float(picking_isColorValid(pickingColor));

    if (!bool(picking.isAttribute)) {
      // Stores the picking color so that the fragment shader can render it during picking
      picking_vRGBcolor_Avalid.rgb = pickingColor;
    }
  } else {
    // Do the comparison with selected item color in vertex shader as it should mean fewer compares
    picking_vRGBcolor_Avalid.a = float(isVertexHighlighted(pickingColor));
  }
}

void picking_setObjectIndex(uint objectIndex) {
  if (bool(picking.isActive)) {
    uint index = objectIndex;
    if (picking.indexMode == PICKING_INDEX_MODE_INSTANCE) {
      index = uint(gl_InstanceID);
    }
    picking_vRGBcolor_Avalid.r = float(index % 255) / 255.0;
    picking_vRGBcolor_Avalid.g = float((index / 255) % 255) / 255.0;
    picking_vRGBcolor_Avalid.b = float((index / 255 / 255) %255) / 255.0;
  }
}

void picking_setPickingAttribute(float value) {
  if (bool(picking.isAttribute)) {
    picking_vRGBcolor_Avalid.r = value;
  }
}

void picking_setPickingAttribute(vec2 value) {
  if (bool(picking.isAttribute)) {
    picking_vRGBcolor_Avalid.rg = value;
  }
}

void picking_setPickingAttribute(vec3 value) {
  if (bool(picking.isAttribute)) {
    picking_vRGBcolor_Avalid.rgb = value;
  }
}
`
);
var fs8 = (
  /* glsl */
  `${GLSL_UNIFORMS}

in vec4 picking_vRGBcolor_Avalid;

/*
 * Returns highlight color if this item is selected.
 */
vec4 picking_filterHighlightColor(vec4 color) {
  // If we are still picking, we don't highlight
  if (picking.isActive > 0.5) {
    return color;
  }

  bool selected = bool(picking_vRGBcolor_Avalid.a);

  if (selected) {
    // Blend in highlight color based on its alpha value
    float highLightAlpha = picking.highlightColor.a;
    float blendedAlpha = highLightAlpha + color.a * (1.0 - highLightAlpha);
    float highLightRatio = highLightAlpha / blendedAlpha;

    vec3 blendedRGB = mix(color.rgb, picking.highlightColor.rgb, highLightRatio);
    return vec4(blendedRGB, blendedAlpha);
  } else {
    return color;
  }
}

/*
 * Returns picking color if picking enabled else unmodified argument.
 */
vec4 picking_filterPickingColor(vec4 color) {
  if (bool(picking.isActive)) {
    if (picking_vRGBcolor_Avalid.a == 0.0) {
      discard;
    }
    return picking_vRGBcolor_Avalid;
  }
  return color;
}

/*
 * Returns picking color if picking is enabled if not
 * highlight color if this item is selected, otherwise unmodified argument.
 */
vec4 picking_filterColor(vec4 color) {
  vec4 highlightColor = picking_filterHighlightColor(color);
  return picking_filterPickingColor(highlightColor);
}
`
);
var picking3 = {
  ...pickingUniforms,
  name: "picking",
  source: source3,
  vs: vs8,
  fs: fs8
};

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/passes/pick-layers-pass.js
var PICKING_BLENDING = {
  blendColorOperation: "add",
  blendColorSrcFactor: "one",
  blendColorDstFactor: "zero",
  blendAlphaOperation: "add",
  blendAlphaSrcFactor: "constant-alpha",
  blendAlphaDstFactor: "zero"
};
var PickLayersPass = class extends LayersPass {
  constructor() {
    super(...arguments);
    this._colorEncoderState = null;
  }
  render(props) {
    if ("pickingFBO" in props) {
      return this._drawPickingBuffer(props);
    }
    return super.render(props);
  }
  // Private
  // Draws list of layers and viewports into the picking buffer
  // Note: does not sample the buffer, that has to be done by the caller
  _drawPickingBuffer({ layers, layerFilter, views, viewports, onViewportActive, pickingFBO, deviceRect: { x: x3, y: y3, width, height }, cullRect, effects, pass = "picking", pickZ, shaderModuleProps }) {
    this.pickZ = pickZ;
    const colorEncoderState = this._resetColorEncoder(pickZ);
    const scissorRect = [x3, y3, width, height];
    const renderStatus = super.render({
      target: pickingFBO,
      layers,
      layerFilter,
      views,
      viewports,
      onViewportActive,
      cullRect,
      effects: effects == null ? void 0 : effects.filter((e4) => e4.useInPicking),
      pass,
      isPicking: true,
      shaderModuleProps,
      clearColor: [0, 0, 0, 0],
      colorMask: 15,
      scissorRect
    });
    this._colorEncoderState = null;
    const decodePickingColor = colorEncoderState && decodeColor.bind(null, colorEncoderState);
    return { decodePickingColor, stats: renderStatus };
  }
  shouldDrawLayer(layer) {
    const { pickable, operation } = layer.props;
    return pickable && operation.includes("draw") || operation.includes("terrain") || operation.includes("mask");
  }
  getShaderModuleProps(layer, effects, otherShaderModuleProps) {
    return {
      picking: {
        isActive: 1,
        isAttribute: this.pickZ
      },
      lighting: { enabled: false }
    };
  }
  getLayerParameters(layer, layerIndex, viewport) {
    const pickParameters = {
      ...layer.props.parameters
    };
    const { pickable, operation } = layer.props;
    if (!this._colorEncoderState || operation.includes("terrain")) {
      pickParameters.blend = false;
    } else if (pickable && operation.includes("draw")) {
      Object.assign(pickParameters, PICKING_BLENDING);
      pickParameters.blend = true;
      pickParameters.blendColor = encodeColor(this._colorEncoderState, layer, viewport);
    }
    return pickParameters;
  }
  _resetColorEncoder(pickZ) {
    this._colorEncoderState = pickZ ? null : {
      byLayer: /* @__PURE__ */ new Map(),
      byAlpha: []
    };
    return this._colorEncoderState;
  }
};
function encodeColor(encoded, layer, viewport) {
  const { byLayer, byAlpha } = encoded;
  let a3;
  let entry = byLayer.get(layer);
  if (entry) {
    entry.viewports.push(viewport);
    a3 = entry.a;
  } else {
    a3 = byLayer.size + 1;
    if (a3 <= 255) {
      entry = { a: a3, layer, viewports: [viewport] };
      byLayer.set(layer, entry);
      byAlpha[a3] = entry;
    } else {
      log_default.warn("Too many pickable layers, only picking the first 255")();
      a3 = 0;
    }
  }
  return [0, 0, 0, a3 / 255];
}
function decodeColor(encoded, pickedColor) {
  const entry = encoded.byAlpha[pickedColor[3]];
  return entry && {
    pickedLayer: entry.layer,
    pickedViewports: entry.viewports,
    pickedObjectIndex: entry.layer.decodePickingColor(pickedColor)
  };
}

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/lifecycle/constants.js
var LIFECYCLE = {
  NO_STATE: "Awaiting state",
  MATCHED: "Matched. State transferred from previous layer",
  INITIALIZED: "Initialized",
  AWAITING_GC: "Discarded. Awaiting garbage collection",
  AWAITING_FINALIZATION: "No longer matched. Awaiting garbage collection",
  FINALIZED: "Finalized! Awaiting garbage collection"
};
var COMPONENT_SYMBOL = Symbol.for("component");
var PROP_TYPES_SYMBOL = Symbol.for("propTypes");
var DEPRECATED_PROPS_SYMBOL = Symbol.for("deprecatedProps");
var ASYNC_DEFAULTS_SYMBOL = Symbol.for("asyncPropDefaults");
var ASYNC_ORIGINAL_SYMBOL = Symbol.for("asyncPropOriginal");
var ASYNC_RESOLVED_SYMBOL = Symbol.for("asyncPropResolved");

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/utils/flatten.js
function flatten(array, filter = () => true) {
  if (!Array.isArray(array)) {
    return filter(array) ? [array] : [];
  }
  return flattenArray(array, filter, []);
}
function flattenArray(array, filter, result) {
  let index = -1;
  while (++index < array.length) {
    const value = array[index];
    if (Array.isArray(value)) {
      flattenArray(value, filter, result);
    } else if (filter(value)) {
      result.push(value);
    }
  }
  return result;
}
function fillArray({ target: target2, source: source4, start = 0, count: count2 = 1 }) {
  const length5 = source4.length;
  const total = count2 * length5;
  let copied = 0;
  for (let i4 = start; copied < length5; copied++) {
    target2[i4++] = source4[copied];
  }
  while (copied < total) {
    if (copied < total - copied) {
      target2.copyWithin(start + copied, start, start + copied);
      copied *= 2;
    } else {
      target2.copyWithin(start + copied, start, start + total - copied);
      copied = total;
    }
  }
  return target2;
}

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/lib/resource/resource.js
var Resource2 = class {
  constructor(id, data, context) {
    this._loadCount = 0;
    this._subscribers = /* @__PURE__ */ new Set();
    this.id = id;
    this.context = context;
    this.setData(data);
  }
  // consumer: {onChange: Function}
  subscribe(consumer) {
    this._subscribers.add(consumer);
  }
  unsubscribe(consumer) {
    this._subscribers.delete(consumer);
  }
  inUse() {
    return this._subscribers.size > 0;
  }
  delete() {
  }
  getData() {
    return this.isLoaded ? this._error ? Promise.reject(this._error) : this._content : this._loader.then(() => this.getData());
  }
  setData(data, forceUpdate) {
    if (data === this._data && !forceUpdate) {
      return;
    }
    this._data = data;
    const loadCount = ++this._loadCount;
    let loader = data;
    if (typeof data === "string") {
      loader = load(data);
    }
    if (loader instanceof Promise) {
      this.isLoaded = false;
      this._loader = loader.then((result) => {
        if (this._loadCount === loadCount) {
          this.isLoaded = true;
          this._error = void 0;
          this._content = result;
        }
      }).catch((error) => {
        if (this._loadCount === loadCount) {
          this.isLoaded = true;
          this._error = error || true;
        }
      });
    } else {
      this.isLoaded = true;
      this._error = void 0;
      this._content = data;
    }
    for (const subscriber of this._subscribers) {
      subscriber.onChange(this.getData());
    }
  }
};

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/lib/resource/resource-manager.js
var ResourceManager = class {
  constructor(props) {
    var _a3;
    this.protocol = props.protocol || "resource://";
    this._context = {
      device: props.device,
      // @ts-expect-error
      gl: (_a3 = props.device) == null ? void 0 : _a3.gl,
      resourceManager: this
    };
    this._resources = {};
    this._consumers = {};
    this._pruneRequest = null;
  }
  contains(resourceId) {
    if (resourceId.startsWith(this.protocol)) {
      return true;
    }
    return resourceId in this._resources;
  }
  add({ resourceId, data, forceUpdate = false, persistent = true }) {
    let res = this._resources[resourceId];
    if (res) {
      res.setData(data, forceUpdate);
    } else {
      res = new Resource2(resourceId, data, this._context);
      this._resources[resourceId] = res;
    }
    res.persistent = persistent;
  }
  remove(resourceId) {
    const res = this._resources[resourceId];
    if (res) {
      res.delete();
      delete this._resources[resourceId];
    }
  }
  unsubscribe({ consumerId }) {
    const consumer = this._consumers[consumerId];
    if (consumer) {
      for (const requestId in consumer) {
        const request = consumer[requestId];
        const resource = this._resources[request.resourceId];
        if (resource) {
          resource.unsubscribe(request);
        }
      }
      delete this._consumers[consumerId];
      this.prune();
    }
  }
  subscribe({ resourceId, onChange, consumerId, requestId = "default" }) {
    const { _resources: resources, protocol } = this;
    if (resourceId.startsWith(protocol)) {
      resourceId = resourceId.replace(protocol, "");
      if (!resources[resourceId]) {
        this.add({ resourceId, data: null, persistent: false });
      }
    }
    const res = resources[resourceId];
    this._track(consumerId, requestId, res, onChange);
    if (res) {
      return res.getData();
    }
    return void 0;
  }
  prune() {
    if (!this._pruneRequest) {
      this._pruneRequest = setTimeout(() => this._prune(), 0);
    }
  }
  finalize() {
    for (const key in this._resources) {
      this._resources[key].delete();
    }
  }
  _track(consumerId, requestId, resource, onChange) {
    const consumers = this._consumers;
    const consumer = consumers[consumerId] = consumers[consumerId] || {};
    let request = consumer[requestId];
    const oldResource = request && request.resourceId && this._resources[request.resourceId];
    if (oldResource) {
      oldResource.unsubscribe(request);
      this.prune();
    }
    if (resource) {
      if (request) {
        request.onChange = onChange;
        request.resourceId = resource.id;
      } else {
        request = {
          onChange,
          resourceId: resource.id
        };
      }
      consumer[requestId] = request;
      resource.subscribe(request);
    }
  }
  _prune() {
    this._pruneRequest = null;
    for (const key of Object.keys(this._resources)) {
      const res = this._resources[key];
      if (!res.persistent && !res.inUse()) {
        res.delete();
        delete this._resources[key];
      }
    }
  }
};

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/lib/layer-manager.js
var TRACE_SET_LAYERS = "layerManager.setLayers";
var TRACE_ACTIVATE_VIEWPORT = "layerManager.activateViewport";
var LayerManager = class {
  /**
   * @param device
   * @param param1
   */
  // eslint-disable-next-line
  constructor(device, props) {
    var _a3;
    this._lastRenderedLayers = [];
    this._needsRedraw = false;
    this._needsUpdate = false;
    this._nextLayers = null;
    this._debug = false;
    this._defaultShaderModulesChanged = false;
    this.activateViewport = (viewport2) => {
      debug(TRACE_ACTIVATE_VIEWPORT, this, viewport2);
      if (viewport2) {
        this.context.viewport = viewport2;
      }
    };
    const { deck, stats, viewport, timeline } = props || {};
    this.layers = [];
    this.resourceManager = new ResourceManager({ device, protocol: "deck://" });
    this.context = {
      mousePosition: null,
      userData: {},
      layerManager: this,
      device,
      // @ts-expect-error
      gl: device == null ? void 0 : device.gl,
      deck,
      shaderAssembler: getShaderAssembler(((_a3 = device == null ? void 0 : device.info) == null ? void 0 : _a3.shadingLanguage) || "glsl"),
      defaultShaderModules: [layerUniforms],
      renderPass: void 0,
      stats: stats || new Stats({ id: "deck.gl" }),
      // Make sure context.viewport is not empty on the first layer initialization
      viewport: viewport || new viewport_default({ id: "DEFAULT-INITIAL-VIEWPORT" }),
      // Current viewport, exposed to layers for project* function
      timeline: timeline || new Timeline(),
      resourceManager: this.resourceManager,
      onError: void 0
    };
    Object.seal(this);
  }
  /** Method to call when the layer manager is not needed anymore. */
  finalize() {
    this.resourceManager.finalize();
    for (const layer of this.layers) {
      this._finalizeLayer(layer);
    }
  }
  /** Check if a redraw is needed */
  needsRedraw(opts = { clearRedrawFlags: false }) {
    let redraw = this._needsRedraw;
    if (opts.clearRedrawFlags) {
      this._needsRedraw = false;
    }
    for (const layer of this.layers) {
      const layerNeedsRedraw = layer.getNeedsRedraw(opts);
      redraw = redraw || layerNeedsRedraw;
    }
    return redraw;
  }
  /** Check if a deep update of all layers is needed */
  needsUpdate() {
    if (this._nextLayers && this._nextLayers !== this._lastRenderedLayers) {
      return "layers changed";
    }
    if (this._defaultShaderModulesChanged) {
      return "shader modules changed";
    }
    return this._needsUpdate;
  }
  /** Layers will be redrawn (in next animation frame) */
  setNeedsRedraw(reason) {
    this._needsRedraw = this._needsRedraw || reason;
  }
  /** Layers will be updated deeply (in next animation frame)
    Potentially regenerating attributes and sub layers */
  setNeedsUpdate(reason) {
    this._needsUpdate = this._needsUpdate || reason;
  }
  /** Gets a list of currently rendered layers. Optionally filter by id. */
  getLayers({ layerIds } = {}) {
    return layerIds ? this.layers.filter((layer) => layerIds.find((layerId) => layer.id.indexOf(layerId) === 0)) : this.layers;
  }
  /** Set props needed for layer rendering and picking. */
  setProps(props) {
    if ("debug" in props) {
      this._debug = props.debug;
    }
    if ("userData" in props) {
      this.context.userData = props.userData;
    }
    if ("layers" in props) {
      this._nextLayers = props.layers;
    }
    if ("onError" in props) {
      this.context.onError = props.onError;
    }
  }
  /** Supply a new layer list, initiating sublayer generation and layer matching */
  setLayers(newLayers, reason) {
    debug(TRACE_SET_LAYERS, this, reason, newLayers);
    this._lastRenderedLayers = newLayers;
    const flatLayers = flatten(newLayers, Boolean);
    for (const layer of flatLayers) {
      layer.context = this.context;
    }
    this._updateLayers(this.layers, flatLayers);
  }
  /** Update layers from last cycle if `setNeedsUpdate()` has been called */
  updateLayers() {
    const reason = this.needsUpdate();
    if (reason) {
      this.setNeedsRedraw(`updating layers: ${reason}`);
      this.setLayers(this._nextLayers || this._lastRenderedLayers, reason);
    }
    this._nextLayers = null;
  }
  /** Register a default shader module */
  addDefaultShaderModule(module) {
    const { defaultShaderModules } = this.context;
    if (!defaultShaderModules.find((m3) => m3.name === module.name)) {
      defaultShaderModules.push(module);
      this._defaultShaderModulesChanged = true;
    }
  }
  /** Deregister a default shader module */
  removeDefaultShaderModule(module) {
    const { defaultShaderModules } = this.context;
    const i4 = defaultShaderModules.findIndex((m3) => m3.name === module.name);
    if (i4 >= 0) {
      defaultShaderModules.splice(i4, 1);
      this._defaultShaderModulesChanged = true;
    }
  }
  _handleError(stage, error, layer) {
    layer.raiseError(error, `${stage} of ${layer}`);
  }
  // TODO - mark layers with exceptions as bad and remove from rendering cycle?
  /** Match all layers, checking for caught errors
    to avoid having an exception in one layer disrupt other layers */
  _updateLayers(oldLayers, newLayers) {
    const oldLayerMap = {};
    for (const oldLayer of oldLayers) {
      if (oldLayerMap[oldLayer.id]) {
        log_default.warn(`Multiple old layers with same id ${oldLayer.id}`)();
      } else {
        oldLayerMap[oldLayer.id] = oldLayer;
      }
    }
    if (this._defaultShaderModulesChanged) {
      for (const layer of oldLayers) {
        layer.setNeedsUpdate();
        layer.setChangeFlags({ extensionsChanged: true });
      }
      this._defaultShaderModulesChanged = false;
    }
    const generatedLayers = [];
    this._updateSublayersRecursively(newLayers, oldLayerMap, generatedLayers);
    this._finalizeOldLayers(oldLayerMap);
    let needsUpdate = false;
    for (const layer of generatedLayers) {
      if (layer.hasUniformTransition()) {
        needsUpdate = `Uniform transition in ${layer}`;
        break;
      }
    }
    this._needsUpdate = needsUpdate;
    this.layers = generatedLayers;
  }
  /* eslint-disable complexity,max-statements */
  // Note: adds generated layers to `generatedLayers` array parameter
  _updateSublayersRecursively(newLayers, oldLayerMap, generatedLayers) {
    for (const newLayer of newLayers) {
      newLayer.context = this.context;
      const oldLayer = oldLayerMap[newLayer.id];
      if (oldLayer === null) {
        log_default.warn(`Multiple new layers with same id ${newLayer.id}`)();
      }
      oldLayerMap[newLayer.id] = null;
      let sublayers = null;
      try {
        if (this._debug && oldLayer !== newLayer) {
          newLayer.validateProps();
        }
        if (!oldLayer) {
          this._initializeLayer(newLayer);
        } else {
          this._transferLayerState(oldLayer, newLayer);
          this._updateLayer(newLayer);
        }
        generatedLayers.push(newLayer);
        sublayers = newLayer.isComposite ? newLayer.getSubLayers() : null;
      } catch (err) {
        this._handleError("matching", err, newLayer);
      }
      if (sublayers) {
        this._updateSublayersRecursively(sublayers, oldLayerMap, generatedLayers);
      }
    }
  }
  /* eslint-enable complexity,max-statements */
  // Finalize any old layers that were not matched
  _finalizeOldLayers(oldLayerMap) {
    for (const layerId in oldLayerMap) {
      const layer = oldLayerMap[layerId];
      if (layer) {
        this._finalizeLayer(layer);
      }
    }
  }
  // / EXCEPTION SAFE LAYER ACCESS
  /** Safely initializes a single layer, calling layer methods */
  _initializeLayer(layer) {
    try {
      layer._initialize();
      layer.lifecycle = LIFECYCLE.INITIALIZED;
    } catch (err) {
      this._handleError("initialization", err, layer);
    }
  }
  /** Transfer state from one layer to a newer version */
  _transferLayerState(oldLayer, newLayer) {
    newLayer._transferState(oldLayer);
    newLayer.lifecycle = LIFECYCLE.MATCHED;
    if (newLayer !== oldLayer) {
      oldLayer.lifecycle = LIFECYCLE.AWAITING_GC;
    }
  }
  /** Safely updates a single layer, cleaning all flags */
  _updateLayer(layer) {
    try {
      layer._update();
    } catch (err) {
      this._handleError("update", err, layer);
    }
  }
  /** Safely finalizes a single layer, removing all resources */
  _finalizeLayer(layer) {
    this._needsRedraw = this._needsRedraw || `finalized ${layer}`;
    layer.lifecycle = LIFECYCLE.AWAITING_FINALIZATION;
    try {
      layer._finalize();
      layer.lifecycle = LIFECYCLE.FINALIZED;
    } catch (err) {
      this._handleError("finalization", err, layer);
    }
  }
};

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/utils/deep-equal.js
function deepEqual2(a3, b2, depth) {
  if (a3 === b2) {
    return true;
  }
  if (!depth || !a3 || !b2) {
    return false;
  }
  if (Array.isArray(a3)) {
    if (!Array.isArray(b2) || a3.length !== b2.length) {
      return false;
    }
    for (let i4 = 0; i4 < a3.length; i4++) {
      if (!deepEqual2(a3[i4], b2[i4], depth - 1)) {
        return false;
      }
    }
    return true;
  }
  if (Array.isArray(b2)) {
    return false;
  }
  if (typeof a3 === "object" && typeof b2 === "object") {
    const aKeys = Object.keys(a3);
    const bKeys = Object.keys(b2);
    if (aKeys.length !== bKeys.length) {
      return false;
    }
    for (const key of aKeys) {
      if (!b2.hasOwnProperty(key)) {
        return false;
      }
      if (!deepEqual2(a3[key], b2[key], depth - 1)) {
        return false;
      }
    }
    return true;
  }
  return false;
}

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/lib/view-manager.js
var ViewManager = class {
  constructor(props) {
    this.views = [];
    this.width = 100;
    this.height = 100;
    this.viewState = {};
    this.controllers = {};
    this.timeline = props.timeline;
    this._viewports = [];
    this._viewportMap = {};
    this._isUpdating = false;
    this._needsRedraw = "First render";
    this._needsUpdate = "Initialize";
    this._eventManager = props.eventManager;
    this._eventCallbacks = {
      onViewStateChange: props.onViewStateChange,
      onInteractionStateChange: props.onInteractionStateChange
    };
    Object.seal(this);
    this.setProps(props);
  }
  /** Remove all resources and event listeners */
  finalize() {
    for (const key in this.controllers) {
      const controller = this.controllers[key];
      if (controller) {
        controller.finalize();
      }
    }
    this.controllers = {};
  }
  /** Check if a redraw is needed */
  needsRedraw(opts = { clearRedrawFlags: false }) {
    const redraw = this._needsRedraw;
    if (opts.clearRedrawFlags) {
      this._needsRedraw = false;
    }
    return redraw;
  }
  /** Mark the manager as dirty. Will rebuild all viewports and update controllers. */
  setNeedsUpdate(reason) {
    this._needsUpdate = this._needsUpdate || reason;
    this._needsRedraw = this._needsRedraw || reason;
  }
  /** Checks each viewport for transition updates */
  updateViewStates() {
    for (const viewId in this.controllers) {
      const controller = this.controllers[viewId];
      if (controller) {
        controller.updateTransition();
      }
    }
  }
  /** Get a set of viewports for a given width and height
   * TODO - Intention is for deck.gl to autodeduce width and height and drop the need for props
   * @param rect (object, optional) - filter the viewports
   *   + not provided - return all viewports
   *   + {x, y} - only return viewports that contain this pixel
   *   + {x, y, width, height} - only return viewports that overlap with this rectangle
   */
  getViewports(rect) {
    if (rect) {
      return this._viewports.filter((viewport) => viewport.containsPixel(rect));
    }
    return this._viewports;
  }
  /** Get a map of all views */
  getViews() {
    const viewMap = {};
    this.views.forEach((view) => {
      viewMap[view.id] = view;
    });
    return viewMap;
  }
  /** Resolves a viewId string to a View */
  getView(viewId) {
    return this.views.find((view) => view.id === viewId);
  }
  /** Returns the viewState for a specific viewId. Matches the viewState by
    1. view.viewStateId
    2. view.id
    3. root viewState
    then applies the view's filter if any */
  getViewState(viewOrViewId) {
    const view = typeof viewOrViewId === "string" ? this.getView(viewOrViewId) : viewOrViewId;
    const viewState = view && this.viewState[view.getViewStateId()] || this.viewState;
    return view ? view.filterViewState(viewState) : viewState;
  }
  getViewport(viewId) {
    return this._viewportMap[viewId];
  }
  /**
   * Unproject pixel coordinates on screen onto world coordinates,
   * (possibly [lon, lat]) on map.
   * - [x, y] => [lng, lat]
   * - [x, y, z] => [lng, lat, Z]
   * @param {Array} xyz -
   * @param {Object} opts - options
   * @param {Object} opts.topLeft=true - Whether origin is top left
   * @return {Array|null} - [lng, lat, Z] or [X, Y, Z]
   */
  unproject(xyz, opts) {
    const viewports = this.getViewports();
    const pixel = { x: xyz[0], y: xyz[1] };
    for (let i4 = viewports.length - 1; i4 >= 0; --i4) {
      const viewport = viewports[i4];
      if (viewport.containsPixel(pixel)) {
        const p3 = xyz.slice();
        p3[0] -= viewport.x;
        p3[1] -= viewport.y;
        return viewport.unproject(p3, opts);
      }
    }
    return null;
  }
  /** Update the manager with new Deck props */
  setProps(props) {
    if (props.views) {
      this._setViews(props.views);
    }
    if (props.viewState) {
      this._setViewState(props.viewState);
    }
    if ("width" in props || "height" in props) {
      this._setSize(props.width, props.height);
    }
    if (!this._isUpdating) {
      this._update();
    }
  }
  //
  // PRIVATE METHODS
  //
  _update() {
    this._isUpdating = true;
    if (this._needsUpdate) {
      this._needsUpdate = false;
      this._rebuildViewports();
    }
    if (this._needsUpdate) {
      this._needsUpdate = false;
      this._rebuildViewports();
    }
    this._isUpdating = false;
  }
  _setSize(width, height) {
    if (width !== this.width || height !== this.height) {
      this.width = width;
      this.height = height;
      this.setNeedsUpdate("Size changed");
    }
  }
  // Update the view descriptor list and set change flag if needed
  // Does not actually rebuild the `Viewport`s until `getViewports` is called
  _setViews(views) {
    views = flatten(views, Boolean);
    const viewsChanged = this._diffViews(views, this.views);
    if (viewsChanged) {
      this.setNeedsUpdate("views changed");
    }
    this.views = views;
  }
  _setViewState(viewState) {
    if (viewState) {
      const viewStateChanged = !deepEqual2(viewState, this.viewState, 3);
      if (viewStateChanged) {
        this.setNeedsUpdate("viewState changed");
      }
      this.viewState = viewState;
    } else {
      log_default.warn("missing `viewState` or `initialViewState`")();
    }
  }
  _createController(view, props) {
    const Controller2 = props.type;
    const controller = new Controller2({
      timeline: this.timeline,
      eventManager: this._eventManager,
      // Set an internal callback that calls the prop callback if provided
      onViewStateChange: this._eventCallbacks.onViewStateChange,
      onStateChange: this._eventCallbacks.onInteractionStateChange,
      makeViewport: (viewState) => {
        var _a3;
        return (_a3 = this.getView(view.id)) == null ? void 0 : _a3.makeViewport({
          viewState,
          width: this.width,
          height: this.height
        });
      }
    });
    return controller;
  }
  _updateController(view, viewState, viewport, controller) {
    const controllerProps = view.controller;
    if (controllerProps && viewport) {
      const resolvedProps = {
        ...viewState,
        ...controllerProps,
        id: view.id,
        x: viewport.x,
        y: viewport.y,
        width: viewport.width,
        height: viewport.height
      };
      if (!controller || controller.constructor !== controllerProps.type) {
        controller = this._createController(view, resolvedProps);
      }
      if (controller) {
        controller.setProps(resolvedProps);
      }
      return controller;
    }
    return null;
  }
  // Rebuilds viewports from descriptors towards a certain window size
  _rebuildViewports() {
    const { views } = this;
    const oldControllers = this.controllers;
    this._viewports = [];
    this.controllers = {};
    let invalidateControllers = false;
    for (let i4 = views.length; i4--; ) {
      const view = views[i4];
      const viewState = this.getViewState(view);
      const viewport = view.makeViewport({ viewState, width: this.width, height: this.height });
      let oldController = oldControllers[view.id];
      const hasController = Boolean(view.controller);
      if (hasController && !oldController) {
        invalidateControllers = true;
      }
      if ((invalidateControllers || !hasController) && oldController) {
        oldController.finalize();
        oldController = null;
      }
      this.controllers[view.id] = this._updateController(view, viewState, viewport, oldController);
      if (viewport) {
        this._viewports.unshift(viewport);
      }
    }
    for (const id in oldControllers) {
      const oldController = oldControllers[id];
      if (oldController && !this.controllers[id]) {
        oldController.finalize();
      }
    }
    this._buildViewportMap();
  }
  _buildViewportMap() {
    this._viewportMap = {};
    this._viewports.forEach((viewport) => {
      if (viewport.id) {
        this._viewportMap[viewport.id] = this._viewportMap[viewport.id] || viewport;
      }
    });
  }
  // Check if viewport array has changed, returns true if any change
  // Note that descriptors can be the same
  _diffViews(newViews, oldViews) {
    if (newViews.length !== oldViews.length) {
      return true;
    }
    return newViews.some((_3, i4) => !newViews[i4].equals(oldViews[i4]));
  }
};

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/utils/positions.js
var PERCENT_OR_PIXELS_REGEX = /([0-9]+\.?[0-9]*)(%|px)/;
function parsePosition(value) {
  switch (typeof value) {
    case "number":
      return {
        position: value,
        relative: false
      };
    case "string":
      const match = PERCENT_OR_PIXELS_REGEX.exec(value);
      if (match && match.length >= 3) {
        const relative = match[2] === "%";
        const position = parseFloat(match[1]);
        return {
          position: relative ? position / 100 : position,
          relative
        };
      }
    // fallthrough
    default:
      throw new Error(`Could not parse position string ${value}`);
  }
}
function getPosition(position, extent) {
  return position.relative ? Math.round(position.position * extent) : position.position;
}

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/views/view.js
var View = class {
  constructor(props) {
    const { id, x: x3 = 0, y: y3 = 0, width = "100%", height = "100%", padding = null } = props;
    this.id = id || this.constructor.displayName || "view";
    this.props = { ...props, id: this.id };
    this._x = parsePosition(x3);
    this._y = parsePosition(y3);
    this._width = parsePosition(width);
    this._height = parsePosition(height);
    this._padding = padding && {
      left: parsePosition(padding.left || 0),
      right: parsePosition(padding.right || 0),
      top: parsePosition(padding.top || 0),
      bottom: parsePosition(padding.bottom || 0)
    };
    this.equals = this.equals.bind(this);
    Object.seal(this);
  }
  equals(view) {
    if (this === view) {
      return true;
    }
    return this.constructor === view.constructor && deepEqual2(this.props, view.props, 2);
  }
  /** Make viewport from canvas dimensions and view state */
  makeViewport({ width, height, viewState }) {
    viewState = this.filterViewState(viewState);
    const viewportDimensions = this.getDimensions({ width, height });
    if (!viewportDimensions.height || !viewportDimensions.width) {
      return null;
    }
    const ViewportType = this.getViewportType(viewState);
    return new ViewportType({ ...viewState, ...this.props, ...viewportDimensions });
  }
  getViewStateId() {
    const { viewState } = this.props;
    if (typeof viewState === "string") {
      return viewState;
    }
    return (viewState == null ? void 0 : viewState.id) || this.id;
  }
  // Allows view to override (or completely define) viewState
  filterViewState(viewState) {
    if (this.props.viewState && typeof this.props.viewState === "object") {
      if (!this.props.viewState.id) {
        return this.props.viewState;
      }
      const newViewState = { ...viewState };
      for (const key in this.props.viewState) {
        if (key !== "id") {
          newViewState[key] = this.props.viewState[key];
        }
      }
      return newViewState;
    }
    return viewState;
  }
  /** Resolve the dimensions of the view from overall canvas dimensions */
  getDimensions({ width, height }) {
    const dimensions = {
      x: getPosition(this._x, width),
      y: getPosition(this._y, height),
      width: getPosition(this._width, width),
      height: getPosition(this._height, height)
    };
    if (this._padding) {
      dimensions.padding = {
        left: getPosition(this._padding.left, width),
        top: getPosition(this._padding.top, height),
        right: getPosition(this._padding.right, width),
        bottom: getPosition(this._padding.bottom, height)
      };
    }
    return dimensions;
  }
  // Used by sub classes to resolve controller props
  get controller() {
    const opts = this.props.controller;
    if (!opts) {
      return null;
    }
    if (opts === true) {
      return { type: this.ControllerType };
    }
    if (typeof opts === "function") {
      return { type: opts };
    }
    return { type: this.ControllerType, ...opts };
  }
};

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/transitions/transition.js
var Transition = class {
  /**
   * @params timeline {Timeline}
   */
  constructor(timeline) {
    this._inProgress = false;
    this._handle = null;
    this.time = 0;
    this.settings = {
      duration: 0
    };
    this._timeline = timeline;
  }
  /* Public API */
  get inProgress() {
    return this._inProgress;
  }
  /**
   * (re)start this transition.
   * @params props {object} - optional overriding props. see constructor
   */
  start(settings) {
    var _a3, _b;
    this.cancel();
    this.settings = settings;
    this._inProgress = true;
    (_b = (_a3 = this.settings).onStart) == null ? void 0 : _b.call(_a3, this);
  }
  /**
   * end this transition if it is in progress.
   */
  end() {
    var _a3, _b;
    if (this._inProgress) {
      this._timeline.removeChannel(this._handle);
      this._handle = null;
      this._inProgress = false;
      (_b = (_a3 = this.settings).onEnd) == null ? void 0 : _b.call(_a3, this);
    }
  }
  /**
   * cancel this transition if it is in progress.
   */
  cancel() {
    var _a3, _b;
    if (this._inProgress) {
      (_b = (_a3 = this.settings).onInterrupt) == null ? void 0 : _b.call(_a3, this);
      this._timeline.removeChannel(this._handle);
      this._handle = null;
      this._inProgress = false;
    }
  }
  /**
   * update this transition. Returns `true` if updated.
   */
  update() {
    var _a3, _b;
    if (!this._inProgress) {
      return false;
    }
    if (this._handle === null) {
      const { _timeline: timeline, settings } = this;
      this._handle = timeline.addChannel({
        delay: timeline.getTime(),
        duration: settings.duration
      });
    }
    this.time = this._timeline.getTime(this._handle);
    this._onUpdate();
    (_b = (_a3 = this.settings).onUpdate) == null ? void 0 : _b.call(_a3, this);
    if (this._timeline.isFinished(this._handle)) {
      this.end();
    }
    return true;
  }
  /* Private API */
  _onUpdate() {
  }
};

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/controllers/transition-manager.js
var noop2 = () => {
};
var TRANSITION_EVENTS = {
  BREAK: 1,
  SNAP_TO_END: 2,
  IGNORE: 3
};
var DEFAULT_EASING = (t3) => t3;
var DEFAULT_INTERRUPTION = TRANSITION_EVENTS.BREAK;
var TransitionManager = class {
  constructor(opts) {
    this._onTransitionUpdate = (transition) => {
      const { time, settings: { interpolator, startProps, endProps, duration, easing } } = transition;
      const t3 = easing(time / duration);
      const viewport = interpolator.interpolateProps(startProps, endProps, t3);
      this.propsInTransition = this.getControllerState({
        ...this.props,
        ...viewport
      }).getViewportProps();
      this.onViewStateChange({
        viewState: this.propsInTransition,
        oldViewState: this.props
      });
    };
    this.getControllerState = opts.getControllerState;
    this.propsInTransition = null;
    this.transition = new Transition(opts.timeline);
    this.onViewStateChange = opts.onViewStateChange || noop2;
    this.onStateChange = opts.onStateChange || noop2;
  }
  finalize() {
    this.transition.cancel();
  }
  // Returns current transitioned viewport.
  getViewportInTransition() {
    return this.propsInTransition;
  }
  // Process the vewiport change, either ignore or trigger a new transition.
  // Return true if a new transition is triggered, false otherwise.
  processViewStateChange(nextProps) {
    let transitionTriggered = false;
    const currentProps = this.props;
    this.props = nextProps;
    if (!currentProps || this._shouldIgnoreViewportChange(currentProps, nextProps)) {
      return false;
    }
    if (this._isTransitionEnabled(nextProps)) {
      let startProps = currentProps;
      if (this.transition.inProgress) {
        const { interruption, endProps } = this.transition.settings;
        startProps = {
          ...currentProps,
          ...interruption === TRANSITION_EVENTS.SNAP_TO_END ? endProps : this.propsInTransition || currentProps
        };
      }
      this._triggerTransition(startProps, nextProps);
      transitionTriggered = true;
    } else {
      this.transition.cancel();
    }
    return transitionTriggered;
  }
  updateTransition() {
    this.transition.update();
  }
  // Helper methods
  _isTransitionEnabled(props) {
    const { transitionDuration, transitionInterpolator } = props;
    return (transitionDuration > 0 || transitionDuration === "auto") && Boolean(transitionInterpolator);
  }
  _isUpdateDueToCurrentTransition(props) {
    if (this.transition.inProgress && this.propsInTransition) {
      return this.transition.settings.interpolator.arePropsEqual(props, this.propsInTransition);
    }
    return false;
  }
  _shouldIgnoreViewportChange(currentProps, nextProps) {
    if (this.transition.inProgress) {
      const transitionSettings = this.transition.settings;
      return transitionSettings.interruption === TRANSITION_EVENTS.IGNORE || // Ignore update if it is due to current active transition.
      this._isUpdateDueToCurrentTransition(nextProps);
    }
    if (this._isTransitionEnabled(nextProps)) {
      return nextProps.transitionInterpolator.arePropsEqual(currentProps, nextProps);
    }
    return true;
  }
  _triggerTransition(startProps, endProps) {
    const startViewstate = this.getControllerState(startProps);
    const endViewStateProps = this.getControllerState(endProps).shortestPathFrom(startViewstate);
    const transitionInterpolator = endProps.transitionInterpolator;
    const duration = transitionInterpolator.getDuration ? transitionInterpolator.getDuration(startProps, endProps) : endProps.transitionDuration;
    if (duration === 0) {
      return;
    }
    const initialProps = transitionInterpolator.initializeProps(startProps, endViewStateProps);
    this.propsInTransition = {};
    const transitionSettings = {
      duration,
      easing: endProps.transitionEasing || DEFAULT_EASING,
      interpolator: transitionInterpolator,
      interruption: endProps.transitionInterruption || DEFAULT_INTERRUPTION,
      startProps: initialProps.start,
      endProps: initialProps.end,
      onStart: endProps.onTransitionStart,
      onUpdate: this._onTransitionUpdate,
      onInterrupt: this._onTransitionEnd(endProps.onTransitionInterrupt),
      onEnd: this._onTransitionEnd(endProps.onTransitionEnd)
    };
    this.transition.start(transitionSettings);
    this.onStateChange({ inTransition: true });
    this.updateTransition();
  }
  _onTransitionEnd(callback) {
    return (transition) => {
      this.propsInTransition = null;
      this.onStateChange({
        inTransition: false,
        isZooming: false,
        isPanning: false,
        isRotating: false
      });
      callback == null ? void 0 : callback(transition);
    };
  }
};

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/utils/assert.js
function assert8(condition, message2) {
  if (!condition) {
    throw new Error(message2 || "deck.gl: assertion failed.");
  }
}

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/transitions/transition-interpolator.js
var TransitionInterpolator = class {
  /**
   * @param opts {array|object}
   * @param opts.compare {array} - prop names used in equality check
   * @param opts.extract {array} - prop names needed for interpolation
   * @param opts.required {array} - prop names that must be supplied
   * alternatively, supply one list of prop names as `opts` if all of the above are the same.
   */
  constructor(opts) {
    const { compare, extract, required } = opts;
    this._propsToCompare = compare;
    this._propsToExtract = extract || compare;
    this._requiredProps = required;
  }
  /**
   * Checks if two sets of props need transition in between
   * @param currentProps {object} - a list of viewport props
   * @param nextProps {object} - a list of viewport props
   * @returns {bool} - true if two props are equivalent
   */
  arePropsEqual(currentProps, nextProps) {
    for (const key of this._propsToCompare) {
      if (!(key in currentProps) || !(key in nextProps) || !equals(currentProps[key], nextProps[key])) {
        return false;
      }
    }
    return true;
  }
  /**
   * Called before transition starts to validate/pre-process start and end props
   * @param startProps {object} - a list of starting viewport props
   * @param endProps {object} - a list of target viewport props
   * @returns {Object} {start, end} - start and end props to be passed
   *   to `interpolateProps`
   */
  initializeProps(startProps, endProps) {
    const startViewStateProps = {};
    const endViewStateProps = {};
    for (const key of this._propsToExtract) {
      if (key in startProps || key in endProps) {
        startViewStateProps[key] = startProps[key];
        endViewStateProps[key] = endProps[key];
      }
    }
    this._checkRequiredProps(startViewStateProps);
    this._checkRequiredProps(endViewStateProps);
    return { start: startViewStateProps, end: endViewStateProps };
  }
  /**
   * Returns transition duration
   * @param startProps {object} - a list of starting viewport props
   * @param endProps {object} - a list of target viewport props
   * @returns {Number} - transition duration in milliseconds
   */
  getDuration(startProps, endProps) {
    return endProps.transitionDuration;
  }
  _checkRequiredProps(props) {
    if (!this._requiredProps) {
      return;
    }
    this._requiredProps.forEach((propName) => {
      const value = props[propName];
      assert8(Number.isFinite(value) || Array.isArray(value), `${propName} is required for transition`);
    });
  }
};

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/transitions/linear-interpolator.js
var DEFAULT_PROPS2 = ["longitude", "latitude", "zoom", "bearing", "pitch"];
var DEFAULT_REQUIRED_PROPS = ["longitude", "latitude", "zoom"];
var LinearInterpolator = class extends TransitionInterpolator {
  /**
   * @param {Object} opts
   * @param {Array} opts.transitionProps - list of props to apply linear transition to.
   * @param {Array} opts.around - a screen point to zoom/rotate around.
   * @param {Function} opts.makeViewport - construct a viewport instance with given props.
   */
  constructor(opts = {}) {
    const transitionProps = Array.isArray(opts) ? opts : opts.transitionProps;
    const normalizedOpts = Array.isArray(opts) ? {} : opts;
    normalizedOpts.transitionProps = Array.isArray(transitionProps) ? {
      compare: transitionProps,
      required: transitionProps
    } : transitionProps || {
      compare: DEFAULT_PROPS2,
      required: DEFAULT_REQUIRED_PROPS
    };
    super(normalizedOpts.transitionProps);
    this.opts = normalizedOpts;
  }
  initializeProps(startProps, endProps) {
    const result = super.initializeProps(startProps, endProps);
    const { makeViewport, around } = this.opts;
    if (makeViewport && around) {
      const startViewport = makeViewport(startProps);
      const endViewport = makeViewport(endProps);
      const aroundPosition = startViewport.unproject(around);
      result.start.around = around;
      Object.assign(result.end, {
        around: endViewport.project(aroundPosition),
        aroundPosition,
        width: endProps.width,
        height: endProps.height
      });
    }
    return result;
  }
  interpolateProps(startProps, endProps, t3) {
    const propsInTransition = {};
    for (const key of this._propsToExtract) {
      propsInTransition[key] = lerp(startProps[key] || 0, endProps[key] || 0, t3);
    }
    if (endProps.aroundPosition && this.opts.makeViewport) {
      const viewport = this.opts.makeViewport({ ...endProps, ...propsInTransition });
      Object.assign(propsInTransition, viewport.panByPosition(
        endProps.aroundPosition,
        // anchor point in current screen coordinates
        lerp(startProps.around, endProps.around, t3)
      ));
    }
    return propsInTransition;
  }
};

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/controllers/controller.js
var NO_TRANSITION_PROPS = {
  transitionDuration: 0
};
var DEFAULT_INERTIA = 300;
var INERTIA_EASING = (t3) => 1 - (1 - t3) * (1 - t3);
var EVENT_TYPES = {
  WHEEL: ["wheel"],
  PAN: ["panstart", "panmove", "panend"],
  PINCH: ["pinchstart", "pinchmove", "pinchend"],
  MULTI_PAN: ["multipanstart", "multipanmove", "multipanend"],
  DOUBLE_CLICK: ["dblclick"],
  KEYBOARD: ["keydown"]
};
var pinchEventWorkaround = {};
var Controller = class {
  constructor(opts) {
    this.state = {};
    this._events = {};
    this._interactionState = {
      isDragging: false
    };
    this._customEvents = [];
    this._eventStartBlocked = null;
    this._panMove = false;
    this.invertPan = false;
    this.dragMode = "rotate";
    this.inertia = 0;
    this.scrollZoom = true;
    this.dragPan = true;
    this.dragRotate = true;
    this.doubleClickZoom = true;
    this.touchZoom = true;
    this.touchRotate = false;
    this.keyboard = true;
    this.transitionManager = new TransitionManager({
      ...opts,
      getControllerState: (props) => new this.ControllerState(props),
      onViewStateChange: this._onTransition.bind(this),
      onStateChange: this._setInteractionState.bind(this)
    });
    this.handleEvent = this.handleEvent.bind(this);
    this.eventManager = opts.eventManager;
    this.onViewStateChange = opts.onViewStateChange || (() => {
    });
    this.onStateChange = opts.onStateChange || (() => {
    });
    this.makeViewport = opts.makeViewport;
  }
  set events(customEvents) {
    this.toggleEvents(this._customEvents, false);
    this.toggleEvents(customEvents, true);
    this._customEvents = customEvents;
    if (this.props) {
      this.setProps(this.props);
    }
  }
  finalize() {
    var _a3;
    for (const eventName in this._events) {
      if (this._events[eventName]) {
        (_a3 = this.eventManager) == null ? void 0 : _a3.off(eventName, this.handleEvent);
      }
    }
    this.transitionManager.finalize();
  }
  /**
   * Callback for events
   */
  handleEvent(event) {
    this._controllerState = void 0;
    const eventStartBlocked = this._eventStartBlocked;
    switch (event.type) {
      case "panstart":
        return eventStartBlocked ? false : this._onPanStart(event);
      case "panmove":
        return this._onPan(event);
      case "panend":
        return this._onPanEnd(event);
      case "pinchstart":
        return eventStartBlocked ? false : this._onPinchStart(event);
      case "pinchmove":
        return this._onPinch(event);
      case "pinchend":
        return this._onPinchEnd(event);
      case "multipanstart":
        return eventStartBlocked ? false : this._onMultiPanStart(event);
      case "multipanmove":
        return this._onMultiPan(event);
      case "multipanend":
        return this._onMultiPanEnd(event);
      case "dblclick":
        return this._onDoubleClick(event);
      case "wheel":
        return this._onWheel(event);
      case "keydown":
        return this._onKeyDown(event);
      default:
        return false;
    }
  }
  /* Event utils */
  // Event object: http://hammerjs.github.io/api/#event-object
  get controllerState() {
    this._controllerState = this._controllerState || new this.ControllerState({
      makeViewport: this.makeViewport,
      ...this.props,
      ...this.state
    });
    return this._controllerState;
  }
  getCenter(event) {
    const { x: x3, y: y3 } = this.props;
    const { offsetCenter } = event;
    return [offsetCenter.x - x3, offsetCenter.y - y3];
  }
  isPointInBounds(pos, event) {
    const { width, height } = this.props;
    if (event && event.handled) {
      return false;
    }
    const inside = pos[0] >= 0 && pos[0] <= width && pos[1] >= 0 && pos[1] <= height;
    if (inside && event) {
      event.stopPropagation();
    }
    return inside;
  }
  isFunctionKeyPressed(event) {
    const { srcEvent } = event;
    return Boolean(srcEvent.metaKey || srcEvent.altKey || srcEvent.ctrlKey || srcEvent.shiftKey);
  }
  isDragging() {
    return this._interactionState.isDragging || false;
  }
  // When a multi-touch event ends, e.g. pinch, not all pointers are lifted at the same time.
  // This triggers a brief `pan` event.
  // Calling this method will temporarily disable *start events to avoid conflicting transitions.
  blockEvents(timeout) {
    const timer = setTimeout(() => {
      if (this._eventStartBlocked === timer) {
        this._eventStartBlocked = null;
      }
    }, timeout);
    this._eventStartBlocked = timer;
  }
  /**
   * Extract interactivity options
   */
  setProps(props) {
    if (props.dragMode) {
      this.dragMode = props.dragMode;
    }
    this.props = props;
    if (!("transitionInterpolator" in props)) {
      props.transitionInterpolator = this._getTransitionProps().transitionInterpolator;
    }
    this.transitionManager.processViewStateChange(props);
    const { inertia } = props;
    this.inertia = Number.isFinite(inertia) ? inertia : inertia === true ? DEFAULT_INERTIA : 0;
    const { scrollZoom = true, dragPan = true, dragRotate = true, doubleClickZoom = true, touchZoom = true, touchRotate = false, keyboard = true } = props;
    const isInteractive = Boolean(this.onViewStateChange);
    this.toggleEvents(EVENT_TYPES.WHEEL, isInteractive && scrollZoom);
    this.toggleEvents(EVENT_TYPES.PAN, isInteractive);
    this.toggleEvents(EVENT_TYPES.PINCH, isInteractive && (touchZoom || touchRotate));
    this.toggleEvents(EVENT_TYPES.MULTI_PAN, isInteractive && touchRotate);
    this.toggleEvents(EVENT_TYPES.DOUBLE_CLICK, isInteractive && doubleClickZoom);
    this.toggleEvents(EVENT_TYPES.KEYBOARD, isInteractive && keyboard);
    this.scrollZoom = scrollZoom;
    this.dragPan = dragPan;
    this.dragRotate = dragRotate;
    this.doubleClickZoom = doubleClickZoom;
    this.touchZoom = touchZoom;
    this.touchRotate = touchRotate;
    this.keyboard = keyboard;
  }
  updateTransition() {
    this.transitionManager.updateTransition();
  }
  toggleEvents(eventNames, enabled) {
    if (this.eventManager) {
      eventNames.forEach((eventName) => {
        if (this._events[eventName] !== enabled) {
          this._events[eventName] = enabled;
          if (enabled) {
            this.eventManager.on(eventName, this.handleEvent);
          } else {
            this.eventManager.off(eventName, this.handleEvent);
          }
        }
      });
    }
  }
  // Private Methods
  /* Callback util */
  // formats map state and invokes callback function
  updateViewport(newControllerState, extraProps = null, interactionState = {}) {
    const viewState = { ...newControllerState.getViewportProps(), ...extraProps };
    const changed = this.controllerState !== newControllerState;
    this.state = newControllerState.getState();
    this._setInteractionState(interactionState);
    if (changed) {
      const oldViewState = this.controllerState && this.controllerState.getViewportProps();
      if (this.onViewStateChange) {
        this.onViewStateChange({ viewState, interactionState: this._interactionState, oldViewState, viewId: this.props.id });
      }
    }
  }
  _onTransition(params) {
    this.onViewStateChange({ ...params, interactionState: this._interactionState, viewId: this.props.id });
  }
  _setInteractionState(newStates) {
    Object.assign(this._interactionState, newStates);
    this.onStateChange(this._interactionState);
  }
  /* Event handlers */
  // Default handler for the `panstart` event.
  _onPanStart(event) {
    const pos = this.getCenter(event);
    if (!this.isPointInBounds(pos, event)) {
      return false;
    }
    let alternateMode = this.isFunctionKeyPressed(event) || event.rightButton || false;
    if (this.invertPan || this.dragMode === "pan") {
      alternateMode = !alternateMode;
    }
    const newControllerState = this.controllerState[alternateMode ? "panStart" : "rotateStart"]({
      pos
    });
    this._panMove = alternateMode;
    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, { isDragging: true });
    return true;
  }
  // Default handler for the `panmove` and `panend` event.
  _onPan(event) {
    if (!this.isDragging()) {
      return false;
    }
    return this._panMove ? this._onPanMove(event) : this._onPanRotate(event);
  }
  _onPanEnd(event) {
    if (!this.isDragging()) {
      return false;
    }
    return this._panMove ? this._onPanMoveEnd(event) : this._onPanRotateEnd(event);
  }
  // Default handler for panning to move.
  // Called by `_onPan` when panning without function key pressed.
  _onPanMove(event) {
    if (!this.dragPan) {
      return false;
    }
    const pos = this.getCenter(event);
    const newControllerState = this.controllerState.pan({ pos });
    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {
      isDragging: true,
      isPanning: true
    });
    return true;
  }
  _onPanMoveEnd(event) {
    const { inertia } = this;
    if (this.dragPan && inertia && event.velocity) {
      const pos = this.getCenter(event);
      const endPos = [
        pos[0] + event.velocityX * inertia / 2,
        pos[1] + event.velocityY * inertia / 2
      ];
      const newControllerState = this.controllerState.pan({ pos: endPos }).panEnd();
      this.updateViewport(newControllerState, {
        ...this._getTransitionProps(),
        transitionDuration: inertia,
        transitionEasing: INERTIA_EASING
      }, {
        isDragging: false,
        isPanning: true
      });
    } else {
      const newControllerState = this.controllerState.panEnd();
      this.updateViewport(newControllerState, null, {
        isDragging: false,
        isPanning: false
      });
    }
    return true;
  }
  // Default handler for panning to rotate.
  // Called by `_onPan` when panning with function key pressed.
  _onPanRotate(event) {
    if (!this.dragRotate) {
      return false;
    }
    const pos = this.getCenter(event);
    const newControllerState = this.controllerState.rotate({ pos });
    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {
      isDragging: true,
      isRotating: true
    });
    return true;
  }
  _onPanRotateEnd(event) {
    const { inertia } = this;
    if (this.dragRotate && inertia && event.velocity) {
      const pos = this.getCenter(event);
      const endPos = [
        pos[0] + event.velocityX * inertia / 2,
        pos[1] + event.velocityY * inertia / 2
      ];
      const newControllerState = this.controllerState.rotate({ pos: endPos }).rotateEnd();
      this.updateViewport(newControllerState, {
        ...this._getTransitionProps(),
        transitionDuration: inertia,
        transitionEasing: INERTIA_EASING
      }, {
        isDragging: false,
        isRotating: true
      });
    } else {
      const newControllerState = this.controllerState.rotateEnd();
      this.updateViewport(newControllerState, null, {
        isDragging: false,
        isRotating: false
      });
    }
    return true;
  }
  // Default handler for the `wheel` event.
  _onWheel(event) {
    if (!this.scrollZoom) {
      return false;
    }
    const pos = this.getCenter(event);
    if (!this.isPointInBounds(pos, event)) {
      return false;
    }
    event.srcEvent.preventDefault();
    const { speed = 0.01, smooth = false } = this.scrollZoom === true ? {} : this.scrollZoom;
    const { delta } = event;
    let scale7 = 2 / (1 + Math.exp(-Math.abs(delta * speed)));
    if (delta < 0 && scale7 !== 0) {
      scale7 = 1 / scale7;
    }
    const newControllerState = this.controllerState.zoom({ pos, scale: scale7 });
    this.updateViewport(newControllerState, { ...this._getTransitionProps({ around: pos }), transitionDuration: smooth ? 250 : 1 }, {
      isZooming: true,
      isPanning: true
    });
    return true;
  }
  _onMultiPanStart(event) {
    const pos = this.getCenter(event);
    if (!this.isPointInBounds(pos, event)) {
      return false;
    }
    const newControllerState = this.controllerState.rotateStart({ pos });
    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, { isDragging: true });
    return true;
  }
  _onMultiPan(event) {
    if (!this.touchRotate) {
      return false;
    }
    if (!this.isDragging()) {
      return false;
    }
    const pos = this.getCenter(event);
    pos[0] -= event.deltaX;
    const newControllerState = this.controllerState.rotate({ pos });
    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {
      isDragging: true,
      isRotating: true
    });
    return true;
  }
  _onMultiPanEnd(event) {
    if (!this.isDragging()) {
      return false;
    }
    const { inertia } = this;
    if (this.touchRotate && inertia && event.velocityY) {
      const pos = this.getCenter(event);
      const endPos = [pos[0], pos[1] += event.velocityY * inertia / 2];
      const newControllerState = this.controllerState.rotate({ pos: endPos });
      this.updateViewport(newControllerState, {
        ...this._getTransitionProps(),
        transitionDuration: inertia,
        transitionEasing: INERTIA_EASING
      }, {
        isDragging: false,
        isRotating: true
      });
      this.blockEvents(inertia);
    } else {
      const newControllerState = this.controllerState.rotateEnd();
      this.updateViewport(newControllerState, null, {
        isDragging: false,
        isRotating: false
      });
    }
    return true;
  }
  // Default handler for the `pinchstart` event.
  _onPinchStart(event) {
    const pos = this.getCenter(event);
    if (!this.isPointInBounds(pos, event)) {
      return false;
    }
    const newControllerState = this.controllerState.zoomStart({ pos }).rotateStart({ pos });
    pinchEventWorkaround._startPinchRotation = event.rotation;
    pinchEventWorkaround._lastPinchEvent = event;
    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, { isDragging: true });
    return true;
  }
  // Default handler for the `pinchmove` and `pinchend` events.
  _onPinch(event) {
    if (!this.touchZoom && !this.touchRotate) {
      return false;
    }
    if (!this.isDragging()) {
      return false;
    }
    let newControllerState = this.controllerState;
    if (this.touchZoom) {
      const { scale: scale7 } = event;
      const pos = this.getCenter(event);
      newControllerState = newControllerState.zoom({ pos, scale: scale7 });
    }
    if (this.touchRotate) {
      const { rotation } = event;
      newControllerState = newControllerState.rotate({
        deltaAngleX: pinchEventWorkaround._startPinchRotation - rotation
      });
    }
    this.updateViewport(newControllerState, NO_TRANSITION_PROPS, {
      isDragging: true,
      isPanning: this.touchZoom,
      isZooming: this.touchZoom,
      isRotating: this.touchRotate
    });
    pinchEventWorkaround._lastPinchEvent = event;
    return true;
  }
  _onPinchEnd(event) {
    if (!this.isDragging()) {
      return false;
    }
    const { inertia } = this;
    const { _lastPinchEvent } = pinchEventWorkaround;
    if (this.touchZoom && inertia && _lastPinchEvent && event.scale !== _lastPinchEvent.scale) {
      const pos = this.getCenter(event);
      let newControllerState = this.controllerState.rotateEnd();
      const z3 = Math.log2(event.scale);
      const velocityZ = (z3 - Math.log2(_lastPinchEvent.scale)) / (event.deltaTime - _lastPinchEvent.deltaTime);
      const endScale = Math.pow(2, z3 + velocityZ * inertia / 2);
      newControllerState = newControllerState.zoom({ pos, scale: endScale }).zoomEnd();
      this.updateViewport(newControllerState, {
        ...this._getTransitionProps({ around: pos }),
        transitionDuration: inertia,
        transitionEasing: INERTIA_EASING
      }, {
        isDragging: false,
        isPanning: this.touchZoom,
        isZooming: this.touchZoom,
        isRotating: false
      });
      this.blockEvents(inertia);
    } else {
      const newControllerState = this.controllerState.zoomEnd().rotateEnd();
      this.updateViewport(newControllerState, null, {
        isDragging: false,
        isPanning: false,
        isZooming: false,
        isRotating: false
      });
    }
    pinchEventWorkaround._startPinchRotation = null;
    pinchEventWorkaround._lastPinchEvent = null;
    return true;
  }
  // Default handler for the `dblclick` event.
  _onDoubleClick(event) {
    if (!this.doubleClickZoom) {
      return false;
    }
    const pos = this.getCenter(event);
    if (!this.isPointInBounds(pos, event)) {
      return false;
    }
    const isZoomOut = this.isFunctionKeyPressed(event);
    const newControllerState = this.controllerState.zoom({ pos, scale: isZoomOut ? 0.5 : 2 });
    this.updateViewport(newControllerState, this._getTransitionProps({ around: pos }), {
      isZooming: true,
      isPanning: true
    });
    this.blockEvents(100);
    return true;
  }
  // Default handler for the `keydown` event
  _onKeyDown(event) {
    if (!this.keyboard) {
      return false;
    }
    const funcKey = this.isFunctionKeyPressed(event);
    const { zoomSpeed, moveSpeed, rotateSpeedX, rotateSpeedY } = this.keyboard === true ? {} : this.keyboard;
    const { controllerState } = this;
    let newControllerState;
    const interactionState = {};
    switch (event.srcEvent.code) {
      case "Minus":
        newControllerState = funcKey ? controllerState.zoomOut(zoomSpeed).zoomOut(zoomSpeed) : controllerState.zoomOut(zoomSpeed);
        interactionState.isZooming = true;
        break;
      case "Equal":
        newControllerState = funcKey ? controllerState.zoomIn(zoomSpeed).zoomIn(zoomSpeed) : controllerState.zoomIn(zoomSpeed);
        interactionState.isZooming = true;
        break;
      case "ArrowLeft":
        if (funcKey) {
          newControllerState = controllerState.rotateLeft(rotateSpeedX);
          interactionState.isRotating = true;
        } else {
          newControllerState = controllerState.moveLeft(moveSpeed);
          interactionState.isPanning = true;
        }
        break;
      case "ArrowRight":
        if (funcKey) {
          newControllerState = controllerState.rotateRight(rotateSpeedX);
          interactionState.isRotating = true;
        } else {
          newControllerState = controllerState.moveRight(moveSpeed);
          interactionState.isPanning = true;
        }
        break;
      case "ArrowUp":
        if (funcKey) {
          newControllerState = controllerState.rotateUp(rotateSpeedY);
          interactionState.isRotating = true;
        } else {
          newControllerState = controllerState.moveUp(moveSpeed);
          interactionState.isPanning = true;
        }
        break;
      case "ArrowDown":
        if (funcKey) {
          newControllerState = controllerState.rotateDown(rotateSpeedY);
          interactionState.isRotating = true;
        } else {
          newControllerState = controllerState.moveDown(moveSpeed);
          interactionState.isPanning = true;
        }
        break;
      default:
        return false;
    }
    this.updateViewport(newControllerState, this._getTransitionProps(), interactionState);
    return true;
  }
  _getTransitionProps(opts) {
    const { transition } = this;
    if (!transition || !transition.transitionInterpolator) {
      return NO_TRANSITION_PROPS;
    }
    return opts ? {
      ...transition,
      transitionInterpolator: new LinearInterpolator({
        ...opts,
        ...transition.transitionInterpolator.opts,
        makeViewport: this.controllerState.makeViewport
      })
    } : transition;
  }
};

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/controllers/view-state.js
var ViewState = class {
  constructor(props, state) {
    this._viewportProps = this.applyConstraints(props);
    this._state = state;
  }
  getViewportProps() {
    return this._viewportProps;
  }
  getState() {
    return this._state;
  }
};

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/controllers/map-controller.js
var PITCH_MOUSE_THRESHOLD = 5;
var PITCH_ACCEL = 1.2;
var MapState = class extends ViewState {
  constructor(options) {
    const {
      /** Mapbox viewport properties */
      /** The width of the viewport */
      width,
      /** The height of the viewport */
      height,
      /** The latitude at the center of the viewport */
      latitude,
      /** The longitude at the center of the viewport */
      longitude,
      /** The tile zoom level of the map. */
      zoom,
      /** The bearing of the viewport in degrees */
      bearing = 0,
      /** The pitch of the viewport in degrees */
      pitch = 0,
      /**
       * Specify the altitude of the viewport camera
       * Unit: map heights, default 1.5
       * Non-public API, see https://github.com/mapbox/mapbox-gl-js/issues/1137
       */
      altitude = 1.5,
      /** Viewport position */
      position = [0, 0, 0],
      /** Viewport constraints */
      maxZoom = 20,
      minZoom = 0,
      maxPitch = 60,
      minPitch = 0,
      /** Interaction states, required to calculate change during transform */
      /* The point on map being grabbed when the operation first started */
      startPanLngLat,
      /* Center of the zoom when the operation first started */
      startZoomLngLat,
      /* Pointer position when rotation started */
      startRotatePos,
      /** Bearing when current perspective rotate operation started */
      startBearing,
      /** Pitch when current perspective rotate operation started */
      startPitch,
      /** Zoom when current zoom operation started */
      startZoom,
      /** Normalize viewport props to fit map height into viewport */
      normalize: normalize5 = true
    } = options;
    assert8(Number.isFinite(longitude));
    assert8(Number.isFinite(latitude));
    assert8(Number.isFinite(zoom));
    super({
      width,
      height,
      latitude,
      longitude,
      zoom,
      bearing,
      pitch,
      altitude,
      maxZoom,
      minZoom,
      maxPitch,
      minPitch,
      normalize: normalize5,
      position
    }, {
      startPanLngLat,
      startZoomLngLat,
      startRotatePos,
      startBearing,
      startPitch,
      startZoom
    });
    this.makeViewport = options.makeViewport;
  }
  /**
   * Start panning
   * @param {[Number, Number]} pos - position on screen where the pointer grabs
   */
  panStart({ pos }) {
    return this._getUpdatedState({
      startPanLngLat: this._unproject(pos)
    });
  }
  /**
   * Pan
   * @param {[Number, Number]} pos - position on screen where the pointer is
   * @param {[Number, Number], optional} startPos - where the pointer grabbed at
   *   the start of the operation. Must be supplied of `panStart()` was not called
   */
  pan({ pos, startPos }) {
    const startPanLngLat = this.getState().startPanLngLat || this._unproject(startPos);
    if (!startPanLngLat) {
      return this;
    }
    const viewport = this.makeViewport(this.getViewportProps());
    const newProps = viewport.panByPosition(startPanLngLat, pos);
    return this._getUpdatedState(newProps);
  }
  /**
   * End panning
   * Must call if `panStart()` was called
   */
  panEnd() {
    return this._getUpdatedState({
      startPanLngLat: null
    });
  }
  /**
   * Start rotating
   * @param {[Number, Number]} pos - position on screen where the center is
   */
  rotateStart({ pos }) {
    return this._getUpdatedState({
      startRotatePos: pos,
      startBearing: this.getViewportProps().bearing,
      startPitch: this.getViewportProps().pitch
    });
  }
  /**
   * Rotate
   * @param {[Number, Number]} pos - position on screen where the center is
   */
  rotate({ pos, deltaAngleX = 0, deltaAngleY = 0 }) {
    const { startRotatePos, startBearing, startPitch } = this.getState();
    if (!startRotatePos || startBearing === void 0 || startPitch === void 0) {
      return this;
    }
    let newRotation;
    if (pos) {
      newRotation = this._getNewRotation(pos, startRotatePos, startPitch, startBearing);
    } else {
      newRotation = {
        bearing: startBearing + deltaAngleX,
        pitch: startPitch + deltaAngleY
      };
    }
    return this._getUpdatedState(newRotation);
  }
  /**
   * End rotating
   * Must call if `rotateStart()` was called
   */
  rotateEnd() {
    return this._getUpdatedState({
      startBearing: null,
      startPitch: null
    });
  }
  /**
   * Start zooming
   * @param {[Number, Number]} pos - position on screen where the center is
   */
  zoomStart({ pos }) {
    return this._getUpdatedState({
      startZoomLngLat: this._unproject(pos),
      startZoom: this.getViewportProps().zoom
    });
  }
  /**
   * Zoom
   * @param {[Number, Number]} pos - position on screen where the current center is
   * @param {[Number, Number]} startPos - the center position at
   *   the start of the operation. Must be supplied of `zoomStart()` was not called
   * @param {Number} scale - a number between [0, 1] specifying the accumulated
   *   relative scale.
   */
  zoom({ pos, startPos, scale: scale7 }) {
    let { startZoom, startZoomLngLat } = this.getState();
    if (!startZoomLngLat) {
      startZoom = this.getViewportProps().zoom;
      startZoomLngLat = this._unproject(startPos) || this._unproject(pos);
    }
    if (!startZoomLngLat) {
      return this;
    }
    const { maxZoom, minZoom } = this.getViewportProps();
    let zoom = startZoom + Math.log2(scale7);
    zoom = clamp(zoom, minZoom, maxZoom);
    const zoomedViewport = this.makeViewport({ ...this.getViewportProps(), zoom });
    return this._getUpdatedState({
      zoom,
      ...zoomedViewport.panByPosition(startZoomLngLat, pos)
    });
  }
  /**
   * End zooming
   * Must call if `zoomStart()` was called
   */
  zoomEnd() {
    return this._getUpdatedState({
      startZoomLngLat: null,
      startZoom: null
    });
  }
  zoomIn(speed = 2) {
    return this._zoomFromCenter(speed);
  }
  zoomOut(speed = 2) {
    return this._zoomFromCenter(1 / speed);
  }
  moveLeft(speed = 100) {
    return this._panFromCenter([speed, 0]);
  }
  moveRight(speed = 100) {
    return this._panFromCenter([-speed, 0]);
  }
  moveUp(speed = 100) {
    return this._panFromCenter([0, speed]);
  }
  moveDown(speed = 100) {
    return this._panFromCenter([0, -speed]);
  }
  rotateLeft(speed = 15) {
    return this._getUpdatedState({
      bearing: this.getViewportProps().bearing - speed
    });
  }
  rotateRight(speed = 15) {
    return this._getUpdatedState({
      bearing: this.getViewportProps().bearing + speed
    });
  }
  rotateUp(speed = 10) {
    return this._getUpdatedState({
      pitch: this.getViewportProps().pitch + speed
    });
  }
  rotateDown(speed = 10) {
    return this._getUpdatedState({
      pitch: this.getViewportProps().pitch - speed
    });
  }
  shortestPathFrom(viewState) {
    const fromProps = viewState.getViewportProps();
    const props = { ...this.getViewportProps() };
    const { bearing, longitude } = props;
    if (Math.abs(bearing - fromProps.bearing) > 180) {
      props.bearing = bearing < 0 ? bearing + 360 : bearing - 360;
    }
    if (Math.abs(longitude - fromProps.longitude) > 180) {
      props.longitude = longitude < 0 ? longitude + 360 : longitude - 360;
    }
    return props;
  }
  // Apply any constraints (mathematical or defined by _viewportProps) to map state
  applyConstraints(props) {
    const { maxZoom, minZoom, zoom } = props;
    props.zoom = clamp(zoom, minZoom, maxZoom);
    const { maxPitch, minPitch, pitch } = props;
    props.pitch = clamp(pitch, minPitch, maxPitch);
    const { normalize: normalize5 = true } = props;
    if (normalize5) {
      Object.assign(props, normalizeViewportProps(props));
    }
    return props;
  }
  /* Private methods */
  _zoomFromCenter(scale7) {
    const { width, height } = this.getViewportProps();
    return this.zoom({
      pos: [width / 2, height / 2],
      scale: scale7
    });
  }
  _panFromCenter(offset) {
    const { width, height } = this.getViewportProps();
    return this.pan({
      startPos: [width / 2, height / 2],
      pos: [width / 2 + offset[0], height / 2 + offset[1]]
    });
  }
  _getUpdatedState(newProps) {
    return new this.constructor({
      makeViewport: this.makeViewport,
      ...this.getViewportProps(),
      ...this.getState(),
      ...newProps
    });
  }
  _unproject(pos) {
    const viewport = this.makeViewport(this.getViewportProps());
    return pos && viewport.unproject(pos);
  }
  _getNewRotation(pos, startPos, startPitch, startBearing) {
    const deltaX = pos[0] - startPos[0];
    const deltaY = pos[1] - startPos[1];
    const centerY = pos[1];
    const startY = startPos[1];
    const { width, height } = this.getViewportProps();
    const deltaScaleX = deltaX / width;
    let deltaScaleY = 0;
    if (deltaY > 0) {
      if (Math.abs(height - startY) > PITCH_MOUSE_THRESHOLD) {
        deltaScaleY = deltaY / (startY - height) * PITCH_ACCEL;
      }
    } else if (deltaY < 0) {
      if (startY > PITCH_MOUSE_THRESHOLD) {
        deltaScaleY = 1 - centerY / startY;
      }
    }
    deltaScaleY = clamp(deltaScaleY, -1, 1);
    const { minPitch, maxPitch } = this.getViewportProps();
    const bearing = startBearing + 180 * deltaScaleX;
    let pitch = startPitch;
    if (deltaScaleY > 0) {
      pitch = startPitch + deltaScaleY * (maxPitch - startPitch);
    } else if (deltaScaleY < 0) {
      pitch = startPitch - deltaScaleY * (minPitch - startPitch);
    }
    return {
      pitch,
      bearing
    };
  }
};
var MapController = class extends Controller {
  constructor() {
    super(...arguments);
    this.ControllerState = MapState;
    this.transition = {
      transitionDuration: 300,
      transitionInterpolator: new LinearInterpolator({
        transitionProps: {
          compare: ["longitude", "latitude", "zoom", "bearing", "pitch", "position"],
          required: ["longitude", "latitude", "zoom"]
        }
      })
    };
    this.dragMode = "pan";
  }
  setProps(props) {
    props.position = props.position || [0, 0, 0];
    const oldProps = this.props;
    super.setProps(props);
    const dimensionChanged = !oldProps || oldProps.height !== props.height;
    if (dimensionChanged) {
      this.updateViewport(new this.ControllerState({
        makeViewport: this.makeViewport,
        ...props,
        ...this.state
      }));
    }
  }
};

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/views/map-view.js
var MapView = class extends View {
  constructor(props = {}) {
    super(props);
  }
  getViewportType() {
    return web_mercator_viewport_default;
  }
  get ControllerType() {
    return MapController;
  }
};
MapView.displayName = "MapView";
var map_view_default = MapView;

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/lib/effect-manager.js
var DEFAULT_LIGHTING_EFFECT = new LightingEffect();
function compareEffects(e1, e22) {
  const o1 = e1.order ?? Infinity;
  const o22 = e22.order ?? Infinity;
  return o1 - o22;
}
var EffectManager = class {
  constructor(context) {
    this._resolvedEffects = [];
    this._defaultEffects = [];
    this.effects = [];
    this._context = context;
    this._needsRedraw = "Initial render";
    this._setEffects([]);
  }
  /**
   * Register a new default effect, i.e. an effect presents regardless of user supplied props.effects
   */
  addDefaultEffect(effect) {
    const defaultEffects = this._defaultEffects;
    if (!defaultEffects.find((e4) => e4.id === effect.id)) {
      const index = defaultEffects.findIndex((e4) => compareEffects(e4, effect) > 0);
      if (index < 0) {
        defaultEffects.push(effect);
      } else {
        defaultEffects.splice(index, 0, effect);
      }
      effect.setup(this._context);
      this._setEffects(this.effects);
    }
  }
  setProps(props) {
    if ("effects" in props) {
      if (!deepEqual2(props.effects, this.effects, 1)) {
        this._setEffects(props.effects);
      }
    }
  }
  needsRedraw(opts = { clearRedrawFlags: false }) {
    const redraw = this._needsRedraw;
    if (opts.clearRedrawFlags) {
      this._needsRedraw = false;
    }
    return redraw;
  }
  getEffects() {
    return this._resolvedEffects;
  }
  _setEffects(effects) {
    const oldEffectsMap = {};
    for (const effect of this.effects) {
      oldEffectsMap[effect.id] = effect;
    }
    const nextEffects = [];
    for (const effect of effects) {
      const oldEffect = oldEffectsMap[effect.id];
      let effectToAdd = effect;
      if (oldEffect && oldEffect !== effect) {
        if (oldEffect.setProps) {
          oldEffect.setProps(effect.props);
          effectToAdd = oldEffect;
        } else {
          oldEffect.cleanup(this._context);
        }
      } else if (!oldEffect) {
        effect.setup(this._context);
      }
      nextEffects.push(effectToAdd);
      delete oldEffectsMap[effect.id];
    }
    for (const removedEffectId in oldEffectsMap) {
      oldEffectsMap[removedEffectId].cleanup(this._context);
    }
    this.effects = nextEffects;
    this._resolvedEffects = nextEffects.concat(this._defaultEffects);
    if (!effects.some((effect) => effect instanceof LightingEffect)) {
      this._resolvedEffects.push(DEFAULT_LIGHTING_EFFECT);
    }
    this._needsRedraw = "effects changed";
  }
  finalize() {
    for (const effect of this._resolvedEffects) {
      effect.cleanup(this._context);
    }
    this.effects.length = 0;
    this._resolvedEffects.length = 0;
    this._defaultEffects.length = 0;
  }
};

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/passes/draw-layers-pass.js
var DrawLayersPass = class extends LayersPass {
  shouldDrawLayer(layer) {
    const { operation } = layer.props;
    return operation.includes("draw") || operation.includes("terrain");
  }
};

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/lib/deck-renderer.js
var TRACE_RENDER_LAYERS = "deckRenderer.renderLayers";
var DeckRenderer = class {
  constructor(device) {
    this.device = device;
    this.layerFilter = null;
    this.drawPickingColors = false;
    this.drawLayersPass = new DrawLayersPass(device);
    this.pickLayersPass = new PickLayersPass(device);
    this.renderCount = 0;
    this._needsRedraw = "Initial render";
    this.renderBuffers = [];
    this.lastPostProcessEffect = null;
  }
  setProps(props) {
    if (this.layerFilter !== props.layerFilter) {
      this.layerFilter = props.layerFilter;
      this._needsRedraw = "layerFilter changed";
    }
    if (this.drawPickingColors !== props.drawPickingColors) {
      this.drawPickingColors = props.drawPickingColors;
      this._needsRedraw = "drawPickingColors changed";
    }
  }
  renderLayers(opts) {
    if (!opts.viewports.length) {
      return;
    }
    const layerPass = this.drawPickingColors ? this.pickLayersPass : this.drawLayersPass;
    const renderOpts = {
      layerFilter: this.layerFilter,
      isPicking: this.drawPickingColors,
      ...opts
    };
    if (renderOpts.effects) {
      this._preRender(renderOpts.effects, renderOpts);
    }
    const outputBuffer = this.lastPostProcessEffect ? this.renderBuffers[0] : renderOpts.target;
    if (this.lastPostProcessEffect) {
      renderOpts.clearColor = [0, 0, 0, 0];
      renderOpts.clearCanvas = true;
    }
    const renderStats = layerPass.render({ ...renderOpts, target: outputBuffer });
    if (renderOpts.effects) {
      this._postRender(renderOpts.effects, renderOpts);
    }
    this.renderCount++;
    debug(TRACE_RENDER_LAYERS, this, renderStats, opts);
  }
  needsRedraw(opts = { clearRedrawFlags: false }) {
    const redraw = this._needsRedraw;
    if (opts.clearRedrawFlags) {
      this._needsRedraw = false;
    }
    return redraw;
  }
  finalize() {
    const { renderBuffers } = this;
    for (const buffer2 of renderBuffers) {
      buffer2.delete();
    }
    renderBuffers.length = 0;
  }
  _preRender(effects, opts) {
    this.lastPostProcessEffect = null;
    opts.preRenderStats = opts.preRenderStats || {};
    for (const effect of effects) {
      opts.preRenderStats[effect.id] = effect.preRender(opts);
      if (effect.postRender) {
        this.lastPostProcessEffect = effect.id;
      }
    }
    if (this.lastPostProcessEffect) {
      this._resizeRenderBuffers();
    }
  }
  _resizeRenderBuffers() {
    const { renderBuffers } = this;
    const size = this.device.canvasContext.getDrawingBufferSize();
    if (renderBuffers.length === 0) {
      [0, 1].map((i4) => {
        const texture = this.device.createTexture({
          sampler: { minFilter: "linear", magFilter: "linear" }
        });
        renderBuffers.push(this.device.createFramebuffer({
          id: `deck-renderbuffer-${i4}`,
          colorAttachments: [texture]
        }));
      });
    }
    for (const buffer2 of renderBuffers) {
      buffer2.resize(size);
    }
  }
  _postRender(effects, opts) {
    const { renderBuffers } = this;
    const params = {
      ...opts,
      inputBuffer: renderBuffers[0],
      swapBuffer: renderBuffers[1]
    };
    for (const effect of effects) {
      if (effect.postRender) {
        params.target = effect.id === this.lastPostProcessEffect ? opts.target : void 0;
        const buffer2 = effect.postRender(params);
        params.inputBuffer = buffer2;
        params.swapBuffer = buffer2 === renderBuffers[0] ? renderBuffers[1] : renderBuffers[0];
      }
    }
  }
};

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/lib/picking/query-object.js
var NO_PICKED_OBJECT = {
  pickedColor: null,
  pickedObjectIndex: -1
};
function getClosestObject({ pickedColors, decodePickingColor, deviceX, deviceY, deviceRadius, deviceRect }) {
  const { x: x3, y: y3, width, height } = deviceRect;
  let minSquareDistanceToCenter = deviceRadius * deviceRadius;
  let closestPixelIndex = -1;
  let i4 = 0;
  for (let row = 0; row < height; row++) {
    const dy = row + y3 - deviceY;
    const dy2 = dy * dy;
    if (dy2 > minSquareDistanceToCenter) {
      i4 += 4 * width;
    } else {
      for (let col = 0; col < width; col++) {
        const pickedLayerIndex = pickedColors[i4 + 3] - 1;
        if (pickedLayerIndex >= 0) {
          const dx = col + x3 - deviceX;
          const d22 = dx * dx + dy2;
          if (d22 <= minSquareDistanceToCenter) {
            minSquareDistanceToCenter = d22;
            closestPixelIndex = i4;
          }
        }
        i4 += 4;
      }
    }
  }
  if (closestPixelIndex >= 0) {
    const pickedColor = pickedColors.slice(closestPixelIndex, closestPixelIndex + 4);
    const pickedObject = decodePickingColor(pickedColor);
    if (pickedObject) {
      const dy = Math.floor(closestPixelIndex / 4 / width);
      const dx = closestPixelIndex / 4 - dy * width;
      return {
        ...pickedObject,
        pickedColor,
        pickedX: x3 + dx,
        pickedY: y3 + dy
      };
    }
    log_default.error("Picked non-existent layer. Is picking buffer corrupt?")();
  }
  return NO_PICKED_OBJECT;
}
function getUniqueObjects({ pickedColors, decodePickingColor }) {
  const uniqueColors = /* @__PURE__ */ new Map();
  if (pickedColors) {
    for (let i4 = 0; i4 < pickedColors.length; i4 += 4) {
      const pickedLayerIndex = pickedColors[i4 + 3] - 1;
      if (pickedLayerIndex >= 0) {
        const pickedColor = pickedColors.slice(i4, i4 + 4);
        const colorKey = pickedColor.join(",");
        if (!uniqueColors.has(colorKey)) {
          const pickedObject = decodePickingColor(pickedColor);
          if (pickedObject) {
            uniqueColors.set(colorKey, {
              ...pickedObject,
              color: pickedColor
            });
          } else {
            log_default.error("Picked non-existent layer. Is picking buffer corrupt?")();
          }
        }
      }
    }
  }
  return Array.from(uniqueColors.values());
}

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/lib/picking/pick-info.js
function getEmptyPickingInfo({ pickInfo, viewports, pixelRatio, x: x3, y: y3, z: z3 }) {
  let pickedViewport = viewports[0];
  if (viewports.length > 1) {
    pickedViewport = getViewportFromCoordinates((pickInfo == null ? void 0 : pickInfo.pickedViewports) || viewports, { x: x3, y: y3 });
  }
  let coordinate;
  if (pickedViewport) {
    const point = [x3 - pickedViewport.x, y3 - pickedViewport.y];
    if (z3 !== void 0) {
      point[2] = z3;
    }
    coordinate = pickedViewport.unproject(point);
  }
  return {
    color: null,
    layer: null,
    viewport: pickedViewport,
    index: -1,
    picked: false,
    x: x3,
    y: y3,
    pixel: [x3, y3],
    coordinate,
    devicePixel: pickInfo && "pickedX" in pickInfo ? [pickInfo.pickedX, pickInfo.pickedY] : void 0,
    pixelRatio
  };
}
function processPickInfo(opts) {
  const { pickInfo, lastPickedInfo, mode, layers } = opts;
  const { pickedColor, pickedLayer, pickedObjectIndex } = pickInfo;
  const affectedLayers = pickedLayer ? [pickedLayer] : [];
  if (mode === "hover") {
    const lastPickedPixelIndex = lastPickedInfo.index;
    const lastPickedLayerId = lastPickedInfo.layerId;
    const pickedLayerId = pickedLayer ? pickedLayer.props.id : null;
    if (pickedLayerId !== lastPickedLayerId || pickedObjectIndex !== lastPickedPixelIndex) {
      if (pickedLayerId !== lastPickedLayerId) {
        const lastPickedLayer = layers.find((layer) => layer.props.id === lastPickedLayerId);
        if (lastPickedLayer) {
          affectedLayers.unshift(lastPickedLayer);
        }
      }
      lastPickedInfo.layerId = pickedLayerId;
      lastPickedInfo.index = pickedObjectIndex;
      lastPickedInfo.info = null;
    }
  }
  const baseInfo = getEmptyPickingInfo(opts);
  const infos = /* @__PURE__ */ new Map();
  infos.set(null, baseInfo);
  affectedLayers.forEach((layer) => {
    let info = { ...baseInfo };
    if (layer === pickedLayer) {
      info.color = pickedColor;
      info.index = pickedObjectIndex;
      info.picked = true;
    }
    info = getLayerPickingInfo({ layer, info, mode });
    const rootLayer = info.layer;
    if (layer === pickedLayer && mode === "hover") {
      lastPickedInfo.info = info;
    }
    infos.set(rootLayer.id, info);
    if (mode === "hover") {
      rootLayer.updateAutoHighlight(info);
    }
  });
  return infos;
}
function getLayerPickingInfo({ layer, info, mode }) {
  while (layer && info) {
    const sourceLayer = info.layer || null;
    info.sourceLayer = sourceLayer;
    info.layer = layer;
    info = layer.getPickingInfo({ info, mode, sourceLayer });
    layer = layer.parent;
  }
  return info;
}
function getViewportFromCoordinates(viewports, pixel) {
  for (let i4 = viewports.length - 1; i4 >= 0; i4--) {
    const viewport = viewports[i4];
    if (viewport.containsPixel(pixel)) {
      return viewport;
    }
  }
  return viewports[0];
}

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/lib/deck-picker.js
var DeckPicker = class {
  constructor(device) {
    this._pickable = true;
    this.device = device;
    this.pickLayersPass = new PickLayersPass(device);
    this.lastPickedInfo = {
      index: -1,
      layerId: null,
      info: null
    };
  }
  setProps(props) {
    if ("layerFilter" in props) {
      this.layerFilter = props.layerFilter;
    }
    if ("_pickable" in props) {
      this._pickable = props._pickable;
    }
  }
  finalize() {
    if (this.pickingFBO) {
      this.pickingFBO.destroy();
    }
    if (this.depthFBO) {
      this.depthFBO.destroy();
    }
  }
  /** Pick the closest info at given coordinate */
  pickObject(opts) {
    return this._pickClosestObject(opts);
  }
  /** Get all unique infos within a bounding box */
  pickObjects(opts) {
    return this._pickVisibleObjects(opts);
  }
  // Returns a new picking info object by assuming the last picked object is still picked
  getLastPickedObject({ x: x3, y: y3, layers, viewports }, lastPickedInfo = this.lastPickedInfo.info) {
    const lastPickedLayerId = lastPickedInfo && lastPickedInfo.layer && lastPickedInfo.layer.id;
    const lastPickedViewportId = lastPickedInfo && lastPickedInfo.viewport && lastPickedInfo.viewport.id;
    const layer = lastPickedLayerId ? layers.find((l3) => l3.id === lastPickedLayerId) : null;
    const viewport = lastPickedViewportId && viewports.find((v3) => v3.id === lastPickedViewportId) || viewports[0];
    const coordinate = viewport && viewport.unproject([x3 - viewport.x, y3 - viewport.y]);
    const info = {
      x: x3,
      y: y3,
      viewport,
      coordinate,
      layer
    };
    return { ...lastPickedInfo, ...info };
  }
  // Private
  /** Ensures that picking framebuffer exists and matches the canvas size */
  _resizeBuffer() {
    var _a3, _b;
    if (!this.pickingFBO) {
      this.pickingFBO = this.device.createFramebuffer({
        colorAttachments: ["rgba8unorm"],
        depthStencilAttachment: "depth16unorm"
      });
      if (this.device.isTextureFormatRenderable("rgba32float")) {
        const depthFBO = this.device.createFramebuffer({
          colorAttachments: ["rgba32float"],
          depthStencilAttachment: "depth16unorm"
        });
        this.depthFBO = depthFBO;
      }
    }
    const { canvas: canvas2 } = this.device.getDefaultCanvasContext();
    (_a3 = this.pickingFBO) == null ? void 0 : _a3.resize({ width: canvas2.width, height: canvas2.height });
    (_b = this.depthFBO) == null ? void 0 : _b.resize({ width: canvas2.width, height: canvas2.height });
  }
  /** Preliminary filtering of the layers list. Skid picking pass if no layer is pickable. */
  _getPickable(layers) {
    if (this._pickable === false) {
      return null;
    }
    const pickableLayers = layers.filter((layer) => this.pickLayersPass.shouldDrawLayer(layer) && !layer.isComposite);
    return pickableLayers.length ? pickableLayers : null;
  }
  /** Pick the closest object at the given coordinate */
  // eslint-disable-next-line max-statements,complexity
  _pickClosestObject({ layers, views, viewports, x: x3, y: y3, radius = 0, depth = 1, mode = "query", unproject3D, onViewportActive, effects }) {
    const pixelRatio = this.device.canvasContext.cssToDeviceRatio();
    const pickableLayers = this._getPickable(layers);
    if (!pickableLayers || viewports.length === 0) {
      return {
        result: [],
        emptyInfo: getEmptyPickingInfo({ viewports, x: x3, y: y3, pixelRatio })
      };
    }
    this._resizeBuffer();
    const devicePixelRange = this.device.canvasContext.cssToDevicePixels([x3, y3], true);
    const devicePixel = [
      devicePixelRange.x + Math.floor(devicePixelRange.width / 2),
      devicePixelRange.y + Math.floor(devicePixelRange.height / 2)
    ];
    const deviceRadius = Math.round(radius * pixelRatio);
    const { width, height } = this.pickingFBO;
    const deviceRect = this._getPickingRect({
      deviceX: devicePixel[0],
      deviceY: devicePixel[1],
      deviceRadius,
      deviceWidth: width,
      deviceHeight: height
    });
    const cullRect = {
      x: x3 - radius,
      y: y3 - radius,
      width: radius * 2 + 1,
      height: radius * 2 + 1
    };
    let infos;
    const result = [];
    const affectedLayers = /* @__PURE__ */ new Set();
    for (let i4 = 0; i4 < depth; i4++) {
      let pickInfo;
      if (deviceRect) {
        const pickedResult = this._drawAndSample({
          layers: pickableLayers,
          views,
          viewports,
          onViewportActive,
          deviceRect,
          cullRect,
          effects,
          pass: `picking:${mode}`
        });
        pickInfo = getClosestObject({
          ...pickedResult,
          deviceX: devicePixel[0],
          deviceY: devicePixel[1],
          deviceRadius,
          deviceRect
        });
      } else {
        pickInfo = {
          pickedColor: null,
          pickedObjectIndex: -1
        };
      }
      let z3;
      if (pickInfo.pickedLayer && unproject3D && this.depthFBO) {
        const { pickedColors: pickedColors2 } = this._drawAndSample({
          layers: [pickInfo.pickedLayer],
          views,
          viewports,
          onViewportActive,
          deviceRect: {
            x: pickInfo.pickedX,
            y: pickInfo.pickedY,
            width: 1,
            height: 1
          },
          cullRect,
          effects,
          pass: `picking:${mode}:z`
        }, true);
        if (pickedColors2[3]) {
          z3 = pickedColors2[0];
        }
      }
      if (pickInfo.pickedLayer && i4 + 1 < depth) {
        affectedLayers.add(pickInfo.pickedLayer);
        pickInfo.pickedLayer.disablePickingIndex(pickInfo.pickedObjectIndex);
      }
      infos = processPickInfo({
        pickInfo,
        lastPickedInfo: this.lastPickedInfo,
        mode,
        layers: pickableLayers,
        viewports,
        x: x3,
        y: y3,
        z: z3,
        pixelRatio
      });
      for (const info of infos.values()) {
        if (info.layer) {
          result.push(info);
        }
      }
      if (!pickInfo.pickedColor) {
        break;
      }
    }
    for (const layer of affectedLayers) {
      layer.restorePickingColors();
    }
    return { result, emptyInfo: infos.get(null) };
  }
  /** Pick all objects within the given bounding box */
  // eslint-disable-next-line max-statements
  _pickVisibleObjects({ layers, views, viewports, x: x3, y: y3, width = 1, height = 1, mode = "query", maxObjects = null, onViewportActive, effects }) {
    const pickableLayers = this._getPickable(layers);
    if (!pickableLayers || viewports.length === 0) {
      return [];
    }
    this._resizeBuffer();
    const pixelRatio = this.device.canvasContext.cssToDeviceRatio();
    const leftTop = this.device.canvasContext.cssToDevicePixels([x3, y3], true);
    const deviceLeft = leftTop.x;
    const deviceTop = leftTop.y + leftTop.height;
    const rightBottom = this.device.canvasContext.cssToDevicePixels([x3 + width, y3 + height], true);
    const deviceRight = rightBottom.x + rightBottom.width;
    const deviceBottom = rightBottom.y;
    const deviceRect = {
      x: deviceLeft,
      y: deviceBottom,
      // deviceTop and deviceRight represent the first pixel outside the desired rect
      width: deviceRight - deviceLeft,
      height: deviceTop - deviceBottom
    };
    const pickedResult = this._drawAndSample({
      layers: pickableLayers,
      views,
      viewports,
      onViewportActive,
      deviceRect,
      cullRect: { x: x3, y: y3, width, height },
      effects,
      pass: `picking:${mode}`
    });
    const pickInfos = getUniqueObjects(pickedResult);
    const uniquePickedObjects = /* @__PURE__ */ new Map();
    const uniqueInfos = [];
    const limitMaxObjects = Number.isFinite(maxObjects);
    for (let i4 = 0; i4 < pickInfos.length; i4++) {
      if (limitMaxObjects && uniqueInfos.length >= maxObjects) {
        break;
      }
      const pickInfo = pickInfos[i4];
      let info = {
        color: pickInfo.pickedColor,
        layer: null,
        index: pickInfo.pickedObjectIndex,
        picked: true,
        x: x3,
        y: y3,
        pixelRatio
      };
      info = getLayerPickingInfo({ layer: pickInfo.pickedLayer, info, mode });
      const pickedLayerId = info.layer.id;
      if (!uniquePickedObjects.has(pickedLayerId)) {
        uniquePickedObjects.set(pickedLayerId, /* @__PURE__ */ new Set());
      }
      const uniqueObjectsInLayer = uniquePickedObjects.get(pickedLayerId);
      const pickedObjectKey = info.object ?? info.index;
      if (!uniqueObjectsInLayer.has(pickedObjectKey)) {
        uniqueObjectsInLayer.add(pickedObjectKey);
        uniqueInfos.push(info);
      }
    }
    return uniqueInfos;
  }
  _drawAndSample({ layers, views, viewports, onViewportActive, deviceRect, cullRect, effects, pass }, pickZ = false) {
    const pickingFBO = pickZ ? this.depthFBO : this.pickingFBO;
    const opts = {
      layers,
      layerFilter: this.layerFilter,
      views,
      viewports,
      onViewportActive,
      pickingFBO,
      deviceRect,
      cullRect,
      effects,
      pass,
      pickZ,
      preRenderStats: {},
      isPicking: true
    };
    for (const effect of effects) {
      if (effect.useInPicking) {
        opts.preRenderStats[effect.id] = effect.preRender(opts);
      }
    }
    const { decodePickingColor } = this.pickLayersPass.render(opts);
    const { x: x3, y: y3, width, height } = deviceRect;
    const pickedColors = new (pickZ ? Float32Array : Uint8Array)(width * height * 4);
    this.device.readPixelsToArrayWebGL(pickingFBO, {
      sourceX: x3,
      sourceY: y3,
      sourceWidth: width,
      sourceHeight: height,
      target: pickedColors
    });
    return { pickedColors, decodePickingColor };
  }
  // Calculate a picking rect centered on deviceX and deviceY and clipped to device
  // Returns null if pixel is outside of device
  _getPickingRect({ deviceX, deviceY, deviceRadius, deviceWidth, deviceHeight }) {
    const x3 = Math.max(0, deviceX - deviceRadius);
    const y3 = Math.max(0, deviceY - deviceRadius);
    const width = Math.min(deviceWidth, deviceX + deviceRadius + 1) - x3;
    const height = Math.min(deviceHeight, deviceY + deviceRadius + 1) - y3;
    if (width <= 0 || height <= 0) {
      return null;
    }
    return { x: x3, y: y3, width, height };
  }
};

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/lib/widget-manager.js
var PLACEMENTS = {
  "top-left": { top: 0, left: 0 },
  "top-right": { top: 0, right: 0 },
  "bottom-left": { bottom: 0, left: 0 },
  "bottom-right": { bottom: 0, right: 0 },
  fill: { top: 0, left: 0, bottom: 0, right: 0 }
};
var DEFAULT_PLACEMENT = "top-left";
var ROOT_CONTAINER_ID = "__root";
var WidgetManager = class {
  constructor({ deck, parentElement }) {
    this.defaultWidgets = [];
    this.widgets = [];
    this.resolvedWidgets = [];
    this.containers = {};
    this.lastViewports = {};
    this.deck = deck;
    this.parentElement = parentElement;
  }
  getWidgets() {
    return this.resolvedWidgets;
  }
  /** Declarative API to configure widgets */
  setProps(props) {
    if (props.widgets && !deepEqual2(props.widgets, this.widgets, 1)) {
      this._setWidgets(props.widgets);
    }
  }
  finalize() {
    for (const widget of this.getWidgets()) {
      this._remove(widget);
    }
    this.defaultWidgets.length = 0;
    this.resolvedWidgets.length = 0;
    for (const id in this.containers) {
      this.containers[id].remove();
    }
  }
  /** Imperative API. Widgets added this way are not affected by the declarative prop. */
  addDefault(widget) {
    if (!this.defaultWidgets.find((w3) => w3.id === widget.id)) {
      this._add(widget);
      this.defaultWidgets.push(widget);
      this._setWidgets(this.widgets);
    }
  }
  /** Resolve widgets from the declarative prop */
  _setWidgets(nextWidgets) {
    const oldWidgetMap = {};
    for (const widget of this.resolvedWidgets) {
      oldWidgetMap[widget.id] = widget;
    }
    this.resolvedWidgets.length = 0;
    for (const widget of this.defaultWidgets) {
      oldWidgetMap[widget.id] = null;
      this.resolvedWidgets.push(widget);
    }
    for (let widget of nextWidgets) {
      const oldWidget = oldWidgetMap[widget.id];
      if (!oldWidget) {
        this._add(widget);
      } else if (
        // Widget placement changed
        oldWidget.viewId !== widget.viewId || oldWidget.placement !== widget.placement
      ) {
        this._remove(oldWidget);
        this._add(widget);
      } else if (widget !== oldWidget) {
        oldWidget.setProps(widget.props);
        widget = oldWidget;
      }
      oldWidgetMap[widget.id] = null;
      this.resolvedWidgets.push(widget);
    }
    for (const id in oldWidgetMap) {
      const oldWidget = oldWidgetMap[id];
      if (oldWidget) {
        this._remove(oldWidget);
      }
    }
    this.widgets = nextWidgets;
  }
  _add(widget) {
    const { viewId = null, placement = DEFAULT_PLACEMENT } = widget;
    const element = widget.onAdd({ deck: this.deck, viewId });
    if (element) {
      this._getContainer(viewId, placement).append(element);
    }
    widget._element = element;
  }
  _remove(widget) {
    var _a3;
    (_a3 = widget.onRemove) == null ? void 0 : _a3.call(widget);
    if (widget._element) {
      widget._element.remove();
    }
    widget._element = void 0;
  }
  /* global document */
  _getContainer(viewId, placement) {
    var _a3;
    const containerId = viewId || ROOT_CONTAINER_ID;
    let viewContainer = this.containers[containerId];
    if (!viewContainer) {
      viewContainer = document.createElement("div");
      viewContainer.style.pointerEvents = "none";
      viewContainer.style.position = "absolute";
      viewContainer.style.overflow = "hidden";
      (_a3 = this.parentElement) == null ? void 0 : _a3.append(viewContainer);
      this.containers[containerId] = viewContainer;
    }
    let container = viewContainer.querySelector(`.${placement}`);
    if (!container) {
      container = document.createElement("div");
      container.className = placement;
      container.style.position = "absolute";
      container.style.zIndex = "2";
      Object.assign(container.style, PLACEMENTS[placement]);
      viewContainer.append(container);
    }
    return container;
  }
  _updateContainers() {
    const canvasWidth = this.deck.width;
    const canvasHeight = this.deck.height;
    for (const id in this.containers) {
      const viewport = this.lastViewports[id] || null;
      const visible = id === ROOT_CONTAINER_ID || viewport;
      const container = this.containers[id];
      if (visible) {
        container.style.display = "block";
        container.style.left = `${viewport ? viewport.x : 0}px`;
        container.style.top = `${viewport ? viewport.y : 0}px`;
        container.style.width = `${viewport ? viewport.width : canvasWidth}px`;
        container.style.height = `${viewport ? viewport.height : canvasHeight}px`;
      } else {
        container.style.display = "none";
      }
    }
  }
  onRedraw({ viewports, layers }) {
    var _a3, _b;
    const viewportsById = viewports.reduce((acc, v3) => {
      acc[v3.id] = v3;
      return acc;
    }, {});
    for (const widget of this.getWidgets()) {
      const { viewId } = widget;
      if (viewId) {
        const viewport = viewportsById[viewId];
        if (viewport) {
          if (widget.onViewportChange) {
            widget.onViewportChange(viewport);
          }
          (_a3 = widget.onRedraw) == null ? void 0 : _a3.call(widget, { viewports: [viewport], layers });
        }
      } else {
        if (widget.onViewportChange) {
          for (const viewport of viewports) {
            widget.onViewportChange(viewport);
          }
        }
        (_b = widget.onRedraw) == null ? void 0 : _b.call(widget, { viewports, layers });
      }
    }
    this.lastViewports = viewportsById;
    this._updateContainers();
  }
  onHover(info, event) {
    var _a3, _b;
    for (const widget of this.getWidgets()) {
      const { viewId } = widget;
      if (!viewId || viewId === ((_a3 = info.viewport) == null ? void 0 : _a3.id)) {
        (_b = widget.onHover) == null ? void 0 : _b.call(widget, info, event);
      }
    }
  }
  onEvent(info, event) {
    var _a3, _b;
    const eventHandlerProp = EVENT_HANDLERS[event.type];
    if (!eventHandlerProp) {
      return;
    }
    for (const widget of this.getWidgets()) {
      const { viewId } = widget;
      if (!viewId || viewId === ((_a3 = info.viewport) == null ? void 0 : _a3.id)) {
        (_b = widget[eventHandlerProp]) == null ? void 0 : _b.call(widget, info, event);
      }
    }
  }
};

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/lib/tooltip.js
var defaultStyle = {
  zIndex: "1",
  position: "absolute",
  pointerEvents: "none",
  color: "#a0a7b4",
  backgroundColor: "#29323c",
  padding: "10px",
  top: "0",
  left: "0",
  display: "none"
};
var Tooltip = class {
  constructor() {
    this.id = "default-tooltip";
    this.placement = "fill";
    this.props = {};
    this.isVisible = false;
  }
  onAdd({ deck }) {
    const el = document.createElement("div");
    el.className = "deck-tooltip";
    Object.assign(el.style, defaultStyle);
    this.deck = deck;
    this.element = el;
    return el;
  }
  onRemove() {
    this.deck = void 0;
    this.element = void 0;
  }
  setProps() {
  }
  onViewportChange(viewport) {
    var _a3;
    if (this.isVisible && viewport.id === ((_a3 = this.lastViewport) == null ? void 0 : _a3.id) && viewport !== this.lastViewport) {
      this.setTooltip(null);
    }
  }
  onHover(info) {
    const { deck } = this;
    const getTooltip = deck && deck.props.getTooltip;
    if (!getTooltip) {
      return;
    }
    const displayInfo = getTooltip(info);
    this.lastViewport = info.viewport;
    this.setTooltip(displayInfo, info.x, info.y);
  }
  setTooltip(displayInfo, x3, y3) {
    const el = this.element;
    if (!el) {
      return;
    }
    if (typeof displayInfo === "string") {
      el.innerText = displayInfo;
    } else if (!displayInfo) {
      this.isVisible = false;
      el.style.display = "none";
      return;
    } else {
      if (displayInfo.text) {
        el.innerText = displayInfo.text;
      }
      if (displayInfo.html) {
        el.innerHTML = displayInfo.html;
      }
      if (displayInfo.className) {
        el.className = displayInfo.className;
      }
    }
    this.isVisible = true;
    el.style.display = "block";
    el.style.transform = `translate(${x3}px, ${y3}px)`;
    if (displayInfo && typeof displayInfo === "object" && "style" in displayInfo) {
      Object.assign(el.style, displayInfo.style);
    }
  }
};

// ../../../.yarn/berry/cache/@luma.gl-constants-npm-9.1.9-70d21a1940-10c0.zip/node_modules/@luma.gl/constants/dist/webgl-constants.js
var GLEnum;
(function(GLEnum2) {
  GLEnum2[GLEnum2["DEPTH_BUFFER_BIT"] = 256] = "DEPTH_BUFFER_BIT";
  GLEnum2[GLEnum2["STENCIL_BUFFER_BIT"] = 1024] = "STENCIL_BUFFER_BIT";
  GLEnum2[GLEnum2["COLOR_BUFFER_BIT"] = 16384] = "COLOR_BUFFER_BIT";
  GLEnum2[GLEnum2["POINTS"] = 0] = "POINTS";
  GLEnum2[GLEnum2["LINES"] = 1] = "LINES";
  GLEnum2[GLEnum2["LINE_LOOP"] = 2] = "LINE_LOOP";
  GLEnum2[GLEnum2["LINE_STRIP"] = 3] = "LINE_STRIP";
  GLEnum2[GLEnum2["TRIANGLES"] = 4] = "TRIANGLES";
  GLEnum2[GLEnum2["TRIANGLE_STRIP"] = 5] = "TRIANGLE_STRIP";
  GLEnum2[GLEnum2["TRIANGLE_FAN"] = 6] = "TRIANGLE_FAN";
  GLEnum2[GLEnum2["ZERO"] = 0] = "ZERO";
  GLEnum2[GLEnum2["ONE"] = 1] = "ONE";
  GLEnum2[GLEnum2["SRC_COLOR"] = 768] = "SRC_COLOR";
  GLEnum2[GLEnum2["ONE_MINUS_SRC_COLOR"] = 769] = "ONE_MINUS_SRC_COLOR";
  GLEnum2[GLEnum2["SRC_ALPHA"] = 770] = "SRC_ALPHA";
  GLEnum2[GLEnum2["ONE_MINUS_SRC_ALPHA"] = 771] = "ONE_MINUS_SRC_ALPHA";
  GLEnum2[GLEnum2["DST_ALPHA"] = 772] = "DST_ALPHA";
  GLEnum2[GLEnum2["ONE_MINUS_DST_ALPHA"] = 773] = "ONE_MINUS_DST_ALPHA";
  GLEnum2[GLEnum2["DST_COLOR"] = 774] = "DST_COLOR";
  GLEnum2[GLEnum2["ONE_MINUS_DST_COLOR"] = 775] = "ONE_MINUS_DST_COLOR";
  GLEnum2[GLEnum2["SRC_ALPHA_SATURATE"] = 776] = "SRC_ALPHA_SATURATE";
  GLEnum2[GLEnum2["CONSTANT_COLOR"] = 32769] = "CONSTANT_COLOR";
  GLEnum2[GLEnum2["ONE_MINUS_CONSTANT_COLOR"] = 32770] = "ONE_MINUS_CONSTANT_COLOR";
  GLEnum2[GLEnum2["CONSTANT_ALPHA"] = 32771] = "CONSTANT_ALPHA";
  GLEnum2[GLEnum2["ONE_MINUS_CONSTANT_ALPHA"] = 32772] = "ONE_MINUS_CONSTANT_ALPHA";
  GLEnum2[GLEnum2["FUNC_ADD"] = 32774] = "FUNC_ADD";
  GLEnum2[GLEnum2["FUNC_SUBTRACT"] = 32778] = "FUNC_SUBTRACT";
  GLEnum2[GLEnum2["FUNC_REVERSE_SUBTRACT"] = 32779] = "FUNC_REVERSE_SUBTRACT";
  GLEnum2[GLEnum2["BLEND_EQUATION"] = 32777] = "BLEND_EQUATION";
  GLEnum2[GLEnum2["BLEND_EQUATION_RGB"] = 32777] = "BLEND_EQUATION_RGB";
  GLEnum2[GLEnum2["BLEND_EQUATION_ALPHA"] = 34877] = "BLEND_EQUATION_ALPHA";
  GLEnum2[GLEnum2["BLEND_DST_RGB"] = 32968] = "BLEND_DST_RGB";
  GLEnum2[GLEnum2["BLEND_SRC_RGB"] = 32969] = "BLEND_SRC_RGB";
  GLEnum2[GLEnum2["BLEND_DST_ALPHA"] = 32970] = "BLEND_DST_ALPHA";
  GLEnum2[GLEnum2["BLEND_SRC_ALPHA"] = 32971] = "BLEND_SRC_ALPHA";
  GLEnum2[GLEnum2["BLEND_COLOR"] = 32773] = "BLEND_COLOR";
  GLEnum2[GLEnum2["ARRAY_BUFFER_BINDING"] = 34964] = "ARRAY_BUFFER_BINDING";
  GLEnum2[GLEnum2["ELEMENT_ARRAY_BUFFER_BINDING"] = 34965] = "ELEMENT_ARRAY_BUFFER_BINDING";
  GLEnum2[GLEnum2["LINE_WIDTH"] = 2849] = "LINE_WIDTH";
  GLEnum2[GLEnum2["ALIASED_POINT_SIZE_RANGE"] = 33901] = "ALIASED_POINT_SIZE_RANGE";
  GLEnum2[GLEnum2["ALIASED_LINE_WIDTH_RANGE"] = 33902] = "ALIASED_LINE_WIDTH_RANGE";
  GLEnum2[GLEnum2["CULL_FACE_MODE"] = 2885] = "CULL_FACE_MODE";
  GLEnum2[GLEnum2["FRONT_FACE"] = 2886] = "FRONT_FACE";
  GLEnum2[GLEnum2["DEPTH_RANGE"] = 2928] = "DEPTH_RANGE";
  GLEnum2[GLEnum2["DEPTH_WRITEMASK"] = 2930] = "DEPTH_WRITEMASK";
  GLEnum2[GLEnum2["DEPTH_CLEAR_VALUE"] = 2931] = "DEPTH_CLEAR_VALUE";
  GLEnum2[GLEnum2["DEPTH_FUNC"] = 2932] = "DEPTH_FUNC";
  GLEnum2[GLEnum2["STENCIL_CLEAR_VALUE"] = 2961] = "STENCIL_CLEAR_VALUE";
  GLEnum2[GLEnum2["STENCIL_FUNC"] = 2962] = "STENCIL_FUNC";
  GLEnum2[GLEnum2["STENCIL_FAIL"] = 2964] = "STENCIL_FAIL";
  GLEnum2[GLEnum2["STENCIL_PASS_DEPTH_FAIL"] = 2965] = "STENCIL_PASS_DEPTH_FAIL";
  GLEnum2[GLEnum2["STENCIL_PASS_DEPTH_PASS"] = 2966] = "STENCIL_PASS_DEPTH_PASS";
  GLEnum2[GLEnum2["STENCIL_REF"] = 2967] = "STENCIL_REF";
  GLEnum2[GLEnum2["STENCIL_VALUE_MASK"] = 2963] = "STENCIL_VALUE_MASK";
  GLEnum2[GLEnum2["STENCIL_WRITEMASK"] = 2968] = "STENCIL_WRITEMASK";
  GLEnum2[GLEnum2["STENCIL_BACK_FUNC"] = 34816] = "STENCIL_BACK_FUNC";
  GLEnum2[GLEnum2["STENCIL_BACK_FAIL"] = 34817] = "STENCIL_BACK_FAIL";
  GLEnum2[GLEnum2["STENCIL_BACK_PASS_DEPTH_FAIL"] = 34818] = "STENCIL_BACK_PASS_DEPTH_FAIL";
  GLEnum2[GLEnum2["STENCIL_BACK_PASS_DEPTH_PASS"] = 34819] = "STENCIL_BACK_PASS_DEPTH_PASS";
  GLEnum2[GLEnum2["STENCIL_BACK_REF"] = 36003] = "STENCIL_BACK_REF";
  GLEnum2[GLEnum2["STENCIL_BACK_VALUE_MASK"] = 36004] = "STENCIL_BACK_VALUE_MASK";
  GLEnum2[GLEnum2["STENCIL_BACK_WRITEMASK"] = 36005] = "STENCIL_BACK_WRITEMASK";
  GLEnum2[GLEnum2["VIEWPORT"] = 2978] = "VIEWPORT";
  GLEnum2[GLEnum2["SCISSOR_BOX"] = 3088] = "SCISSOR_BOX";
  GLEnum2[GLEnum2["COLOR_CLEAR_VALUE"] = 3106] = "COLOR_CLEAR_VALUE";
  GLEnum2[GLEnum2["COLOR_WRITEMASK"] = 3107] = "COLOR_WRITEMASK";
  GLEnum2[GLEnum2["UNPACK_ALIGNMENT"] = 3317] = "UNPACK_ALIGNMENT";
  GLEnum2[GLEnum2["PACK_ALIGNMENT"] = 3333] = "PACK_ALIGNMENT";
  GLEnum2[GLEnum2["MAX_TEXTURE_SIZE"] = 3379] = "MAX_TEXTURE_SIZE";
  GLEnum2[GLEnum2["MAX_VIEWPORT_DIMS"] = 3386] = "MAX_VIEWPORT_DIMS";
  GLEnum2[GLEnum2["SUBPIXEL_BITS"] = 3408] = "SUBPIXEL_BITS";
  GLEnum2[GLEnum2["RED_BITS"] = 3410] = "RED_BITS";
  GLEnum2[GLEnum2["GREEN_BITS"] = 3411] = "GREEN_BITS";
  GLEnum2[GLEnum2["BLUE_BITS"] = 3412] = "BLUE_BITS";
  GLEnum2[GLEnum2["ALPHA_BITS"] = 3413] = "ALPHA_BITS";
  GLEnum2[GLEnum2["DEPTH_BITS"] = 3414] = "DEPTH_BITS";
  GLEnum2[GLEnum2["STENCIL_BITS"] = 3415] = "STENCIL_BITS";
  GLEnum2[GLEnum2["POLYGON_OFFSET_UNITS"] = 10752] = "POLYGON_OFFSET_UNITS";
  GLEnum2[GLEnum2["POLYGON_OFFSET_FACTOR"] = 32824] = "POLYGON_OFFSET_FACTOR";
  GLEnum2[GLEnum2["TEXTURE_BINDING_2D"] = 32873] = "TEXTURE_BINDING_2D";
  GLEnum2[GLEnum2["SAMPLE_BUFFERS"] = 32936] = "SAMPLE_BUFFERS";
  GLEnum2[GLEnum2["SAMPLES"] = 32937] = "SAMPLES";
  GLEnum2[GLEnum2["SAMPLE_COVERAGE_VALUE"] = 32938] = "SAMPLE_COVERAGE_VALUE";
  GLEnum2[GLEnum2["SAMPLE_COVERAGE_INVERT"] = 32939] = "SAMPLE_COVERAGE_INVERT";
  GLEnum2[GLEnum2["COMPRESSED_TEXTURE_FORMATS"] = 34467] = "COMPRESSED_TEXTURE_FORMATS";
  GLEnum2[GLEnum2["VENDOR"] = 7936] = "VENDOR";
  GLEnum2[GLEnum2["RENDERER"] = 7937] = "RENDERER";
  GLEnum2[GLEnum2["VERSION"] = 7938] = "VERSION";
  GLEnum2[GLEnum2["IMPLEMENTATION_COLOR_READ_TYPE"] = 35738] = "IMPLEMENTATION_COLOR_READ_TYPE";
  GLEnum2[GLEnum2["IMPLEMENTATION_COLOR_READ_FORMAT"] = 35739] = "IMPLEMENTATION_COLOR_READ_FORMAT";
  GLEnum2[GLEnum2["BROWSER_DEFAULT_WEBGL"] = 37444] = "BROWSER_DEFAULT_WEBGL";
  GLEnum2[GLEnum2["STATIC_DRAW"] = 35044] = "STATIC_DRAW";
  GLEnum2[GLEnum2["STREAM_DRAW"] = 35040] = "STREAM_DRAW";
  GLEnum2[GLEnum2["DYNAMIC_DRAW"] = 35048] = "DYNAMIC_DRAW";
  GLEnum2[GLEnum2["ARRAY_BUFFER"] = 34962] = "ARRAY_BUFFER";
  GLEnum2[GLEnum2["ELEMENT_ARRAY_BUFFER"] = 34963] = "ELEMENT_ARRAY_BUFFER";
  GLEnum2[GLEnum2["BUFFER_SIZE"] = 34660] = "BUFFER_SIZE";
  GLEnum2[GLEnum2["BUFFER_USAGE"] = 34661] = "BUFFER_USAGE";
  GLEnum2[GLEnum2["CURRENT_VERTEX_ATTRIB"] = 34342] = "CURRENT_VERTEX_ATTRIB";
  GLEnum2[GLEnum2["VERTEX_ATTRIB_ARRAY_ENABLED"] = 34338] = "VERTEX_ATTRIB_ARRAY_ENABLED";
  GLEnum2[GLEnum2["VERTEX_ATTRIB_ARRAY_SIZE"] = 34339] = "VERTEX_ATTRIB_ARRAY_SIZE";
  GLEnum2[GLEnum2["VERTEX_ATTRIB_ARRAY_STRIDE"] = 34340] = "VERTEX_ATTRIB_ARRAY_STRIDE";
  GLEnum2[GLEnum2["VERTEX_ATTRIB_ARRAY_TYPE"] = 34341] = "VERTEX_ATTRIB_ARRAY_TYPE";
  GLEnum2[GLEnum2["VERTEX_ATTRIB_ARRAY_NORMALIZED"] = 34922] = "VERTEX_ATTRIB_ARRAY_NORMALIZED";
  GLEnum2[GLEnum2["VERTEX_ATTRIB_ARRAY_POINTER"] = 34373] = "VERTEX_ATTRIB_ARRAY_POINTER";
  GLEnum2[GLEnum2["VERTEX_ATTRIB_ARRAY_BUFFER_BINDING"] = 34975] = "VERTEX_ATTRIB_ARRAY_BUFFER_BINDING";
  GLEnum2[GLEnum2["CULL_FACE"] = 2884] = "CULL_FACE";
  GLEnum2[GLEnum2["FRONT"] = 1028] = "FRONT";
  GLEnum2[GLEnum2["BACK"] = 1029] = "BACK";
  GLEnum2[GLEnum2["FRONT_AND_BACK"] = 1032] = "FRONT_AND_BACK";
  GLEnum2[GLEnum2["BLEND"] = 3042] = "BLEND";
  GLEnum2[GLEnum2["DEPTH_TEST"] = 2929] = "DEPTH_TEST";
  GLEnum2[GLEnum2["DITHER"] = 3024] = "DITHER";
  GLEnum2[GLEnum2["POLYGON_OFFSET_FILL"] = 32823] = "POLYGON_OFFSET_FILL";
  GLEnum2[GLEnum2["SAMPLE_ALPHA_TO_COVERAGE"] = 32926] = "SAMPLE_ALPHA_TO_COVERAGE";
  GLEnum2[GLEnum2["SAMPLE_COVERAGE"] = 32928] = "SAMPLE_COVERAGE";
  GLEnum2[GLEnum2["SCISSOR_TEST"] = 3089] = "SCISSOR_TEST";
  GLEnum2[GLEnum2["STENCIL_TEST"] = 2960] = "STENCIL_TEST";
  GLEnum2[GLEnum2["NO_ERROR"] = 0] = "NO_ERROR";
  GLEnum2[GLEnum2["INVALID_ENUM"] = 1280] = "INVALID_ENUM";
  GLEnum2[GLEnum2["INVALID_VALUE"] = 1281] = "INVALID_VALUE";
  GLEnum2[GLEnum2["INVALID_OPERATION"] = 1282] = "INVALID_OPERATION";
  GLEnum2[GLEnum2["OUT_OF_MEMORY"] = 1285] = "OUT_OF_MEMORY";
  GLEnum2[GLEnum2["CONTEXT_LOST_WEBGL"] = 37442] = "CONTEXT_LOST_WEBGL";
  GLEnum2[GLEnum2["CW"] = 2304] = "CW";
  GLEnum2[GLEnum2["CCW"] = 2305] = "CCW";
  GLEnum2[GLEnum2["DONT_CARE"] = 4352] = "DONT_CARE";
  GLEnum2[GLEnum2["FASTEST"] = 4353] = "FASTEST";
  GLEnum2[GLEnum2["NICEST"] = 4354] = "NICEST";
  GLEnum2[GLEnum2["GENERATE_MIPMAP_HINT"] = 33170] = "GENERATE_MIPMAP_HINT";
  GLEnum2[GLEnum2["BYTE"] = 5120] = "BYTE";
  GLEnum2[GLEnum2["UNSIGNED_BYTE"] = 5121] = "UNSIGNED_BYTE";
  GLEnum2[GLEnum2["SHORT"] = 5122] = "SHORT";
  GLEnum2[GLEnum2["UNSIGNED_SHORT"] = 5123] = "UNSIGNED_SHORT";
  GLEnum2[GLEnum2["INT"] = 5124] = "INT";
  GLEnum2[GLEnum2["UNSIGNED_INT"] = 5125] = "UNSIGNED_INT";
  GLEnum2[GLEnum2["FLOAT"] = 5126] = "FLOAT";
  GLEnum2[GLEnum2["DOUBLE"] = 5130] = "DOUBLE";
  GLEnum2[GLEnum2["DEPTH_COMPONENT"] = 6402] = "DEPTH_COMPONENT";
  GLEnum2[GLEnum2["ALPHA"] = 6406] = "ALPHA";
  GLEnum2[GLEnum2["RGB"] = 6407] = "RGB";
  GLEnum2[GLEnum2["RGBA"] = 6408] = "RGBA";
  GLEnum2[GLEnum2["LUMINANCE"] = 6409] = "LUMINANCE";
  GLEnum2[GLEnum2["LUMINANCE_ALPHA"] = 6410] = "LUMINANCE_ALPHA";
  GLEnum2[GLEnum2["UNSIGNED_SHORT_4_4_4_4"] = 32819] = "UNSIGNED_SHORT_4_4_4_4";
  GLEnum2[GLEnum2["UNSIGNED_SHORT_5_5_5_1"] = 32820] = "UNSIGNED_SHORT_5_5_5_1";
  GLEnum2[GLEnum2["UNSIGNED_SHORT_5_6_5"] = 33635] = "UNSIGNED_SHORT_5_6_5";
  GLEnum2[GLEnum2["FRAGMENT_SHADER"] = 35632] = "FRAGMENT_SHADER";
  GLEnum2[GLEnum2["VERTEX_SHADER"] = 35633] = "VERTEX_SHADER";
  GLEnum2[GLEnum2["COMPILE_STATUS"] = 35713] = "COMPILE_STATUS";
  GLEnum2[GLEnum2["DELETE_STATUS"] = 35712] = "DELETE_STATUS";
  GLEnum2[GLEnum2["LINK_STATUS"] = 35714] = "LINK_STATUS";
  GLEnum2[GLEnum2["VALIDATE_STATUS"] = 35715] = "VALIDATE_STATUS";
  GLEnum2[GLEnum2["ATTACHED_SHADERS"] = 35717] = "ATTACHED_SHADERS";
  GLEnum2[GLEnum2["ACTIVE_ATTRIBUTES"] = 35721] = "ACTIVE_ATTRIBUTES";
  GLEnum2[GLEnum2["ACTIVE_UNIFORMS"] = 35718] = "ACTIVE_UNIFORMS";
  GLEnum2[GLEnum2["MAX_VERTEX_ATTRIBS"] = 34921] = "MAX_VERTEX_ATTRIBS";
  GLEnum2[GLEnum2["MAX_VERTEX_UNIFORM_VECTORS"] = 36347] = "MAX_VERTEX_UNIFORM_VECTORS";
  GLEnum2[GLEnum2["MAX_VARYING_VECTORS"] = 36348] = "MAX_VARYING_VECTORS";
  GLEnum2[GLEnum2["MAX_COMBINED_TEXTURE_IMAGE_UNITS"] = 35661] = "MAX_COMBINED_TEXTURE_IMAGE_UNITS";
  GLEnum2[GLEnum2["MAX_VERTEX_TEXTURE_IMAGE_UNITS"] = 35660] = "MAX_VERTEX_TEXTURE_IMAGE_UNITS";
  GLEnum2[GLEnum2["MAX_TEXTURE_IMAGE_UNITS"] = 34930] = "MAX_TEXTURE_IMAGE_UNITS";
  GLEnum2[GLEnum2["MAX_FRAGMENT_UNIFORM_VECTORS"] = 36349] = "MAX_FRAGMENT_UNIFORM_VECTORS";
  GLEnum2[GLEnum2["SHADER_TYPE"] = 35663] = "SHADER_TYPE";
  GLEnum2[GLEnum2["SHADING_LANGUAGE_VERSION"] = 35724] = "SHADING_LANGUAGE_VERSION";
  GLEnum2[GLEnum2["CURRENT_PROGRAM"] = 35725] = "CURRENT_PROGRAM";
  GLEnum2[GLEnum2["NEVER"] = 512] = "NEVER";
  GLEnum2[GLEnum2["LESS"] = 513] = "LESS";
  GLEnum2[GLEnum2["EQUAL"] = 514] = "EQUAL";
  GLEnum2[GLEnum2["LEQUAL"] = 515] = "LEQUAL";
  GLEnum2[GLEnum2["GREATER"] = 516] = "GREATER";
  GLEnum2[GLEnum2["NOTEQUAL"] = 517] = "NOTEQUAL";
  GLEnum2[GLEnum2["GEQUAL"] = 518] = "GEQUAL";
  GLEnum2[GLEnum2["ALWAYS"] = 519] = "ALWAYS";
  GLEnum2[GLEnum2["KEEP"] = 7680] = "KEEP";
  GLEnum2[GLEnum2["REPLACE"] = 7681] = "REPLACE";
  GLEnum2[GLEnum2["INCR"] = 7682] = "INCR";
  GLEnum2[GLEnum2["DECR"] = 7683] = "DECR";
  GLEnum2[GLEnum2["INVERT"] = 5386] = "INVERT";
  GLEnum2[GLEnum2["INCR_WRAP"] = 34055] = "INCR_WRAP";
  GLEnum2[GLEnum2["DECR_WRAP"] = 34056] = "DECR_WRAP";
  GLEnum2[GLEnum2["NEAREST"] = 9728] = "NEAREST";
  GLEnum2[GLEnum2["LINEAR"] = 9729] = "LINEAR";
  GLEnum2[GLEnum2["NEAREST_MIPMAP_NEAREST"] = 9984] = "NEAREST_MIPMAP_NEAREST";
  GLEnum2[GLEnum2["LINEAR_MIPMAP_NEAREST"] = 9985] = "LINEAR_MIPMAP_NEAREST";
  GLEnum2[GLEnum2["NEAREST_MIPMAP_LINEAR"] = 9986] = "NEAREST_MIPMAP_LINEAR";
  GLEnum2[GLEnum2["LINEAR_MIPMAP_LINEAR"] = 9987] = "LINEAR_MIPMAP_LINEAR";
  GLEnum2[GLEnum2["TEXTURE_MAG_FILTER"] = 10240] = "TEXTURE_MAG_FILTER";
  GLEnum2[GLEnum2["TEXTURE_MIN_FILTER"] = 10241] = "TEXTURE_MIN_FILTER";
  GLEnum2[GLEnum2["TEXTURE_WRAP_S"] = 10242] = "TEXTURE_WRAP_S";
  GLEnum2[GLEnum2["TEXTURE_WRAP_T"] = 10243] = "TEXTURE_WRAP_T";
  GLEnum2[GLEnum2["TEXTURE_2D"] = 3553] = "TEXTURE_2D";
  GLEnum2[GLEnum2["TEXTURE"] = 5890] = "TEXTURE";
  GLEnum2[GLEnum2["TEXTURE_CUBE_MAP"] = 34067] = "TEXTURE_CUBE_MAP";
  GLEnum2[GLEnum2["TEXTURE_BINDING_CUBE_MAP"] = 34068] = "TEXTURE_BINDING_CUBE_MAP";
  GLEnum2[GLEnum2["TEXTURE_CUBE_MAP_POSITIVE_X"] = 34069] = "TEXTURE_CUBE_MAP_POSITIVE_X";
  GLEnum2[GLEnum2["TEXTURE_CUBE_MAP_NEGATIVE_X"] = 34070] = "TEXTURE_CUBE_MAP_NEGATIVE_X";
  GLEnum2[GLEnum2["TEXTURE_CUBE_MAP_POSITIVE_Y"] = 34071] = "TEXTURE_CUBE_MAP_POSITIVE_Y";
  GLEnum2[GLEnum2["TEXTURE_CUBE_MAP_NEGATIVE_Y"] = 34072] = "TEXTURE_CUBE_MAP_NEGATIVE_Y";
  GLEnum2[GLEnum2["TEXTURE_CUBE_MAP_POSITIVE_Z"] = 34073] = "TEXTURE_CUBE_MAP_POSITIVE_Z";
  GLEnum2[GLEnum2["TEXTURE_CUBE_MAP_NEGATIVE_Z"] = 34074] = "TEXTURE_CUBE_MAP_NEGATIVE_Z";
  GLEnum2[GLEnum2["MAX_CUBE_MAP_TEXTURE_SIZE"] = 34076] = "MAX_CUBE_MAP_TEXTURE_SIZE";
  GLEnum2[GLEnum2["TEXTURE0"] = 33984] = "TEXTURE0";
  GLEnum2[GLEnum2["ACTIVE_TEXTURE"] = 34016] = "ACTIVE_TEXTURE";
  GLEnum2[GLEnum2["REPEAT"] = 10497] = "REPEAT";
  GLEnum2[GLEnum2["CLAMP_TO_EDGE"] = 33071] = "CLAMP_TO_EDGE";
  GLEnum2[GLEnum2["MIRRORED_REPEAT"] = 33648] = "MIRRORED_REPEAT";
  GLEnum2[GLEnum2["TEXTURE_WIDTH"] = 4096] = "TEXTURE_WIDTH";
  GLEnum2[GLEnum2["TEXTURE_HEIGHT"] = 4097] = "TEXTURE_HEIGHT";
  GLEnum2[GLEnum2["FLOAT_VEC2"] = 35664] = "FLOAT_VEC2";
  GLEnum2[GLEnum2["FLOAT_VEC3"] = 35665] = "FLOAT_VEC3";
  GLEnum2[GLEnum2["FLOAT_VEC4"] = 35666] = "FLOAT_VEC4";
  GLEnum2[GLEnum2["INT_VEC2"] = 35667] = "INT_VEC2";
  GLEnum2[GLEnum2["INT_VEC3"] = 35668] = "INT_VEC3";
  GLEnum2[GLEnum2["INT_VEC4"] = 35669] = "INT_VEC4";
  GLEnum2[GLEnum2["BOOL"] = 35670] = "BOOL";
  GLEnum2[GLEnum2["BOOL_VEC2"] = 35671] = "BOOL_VEC2";
  GLEnum2[GLEnum2["BOOL_VEC3"] = 35672] = "BOOL_VEC3";
  GLEnum2[GLEnum2["BOOL_VEC4"] = 35673] = "BOOL_VEC4";
  GLEnum2[GLEnum2["FLOAT_MAT2"] = 35674] = "FLOAT_MAT2";
  GLEnum2[GLEnum2["FLOAT_MAT3"] = 35675] = "FLOAT_MAT3";
  GLEnum2[GLEnum2["FLOAT_MAT4"] = 35676] = "FLOAT_MAT4";
  GLEnum2[GLEnum2["SAMPLER_2D"] = 35678] = "SAMPLER_2D";
  GLEnum2[GLEnum2["SAMPLER_CUBE"] = 35680] = "SAMPLER_CUBE";
  GLEnum2[GLEnum2["LOW_FLOAT"] = 36336] = "LOW_FLOAT";
  GLEnum2[GLEnum2["MEDIUM_FLOAT"] = 36337] = "MEDIUM_FLOAT";
  GLEnum2[GLEnum2["HIGH_FLOAT"] = 36338] = "HIGH_FLOAT";
  GLEnum2[GLEnum2["LOW_INT"] = 36339] = "LOW_INT";
  GLEnum2[GLEnum2["MEDIUM_INT"] = 36340] = "MEDIUM_INT";
  GLEnum2[GLEnum2["HIGH_INT"] = 36341] = "HIGH_INT";
  GLEnum2[GLEnum2["FRAMEBUFFER"] = 36160] = "FRAMEBUFFER";
  GLEnum2[GLEnum2["RENDERBUFFER"] = 36161] = "RENDERBUFFER";
  GLEnum2[GLEnum2["RGBA4"] = 32854] = "RGBA4";
  GLEnum2[GLEnum2["RGB5_A1"] = 32855] = "RGB5_A1";
  GLEnum2[GLEnum2["RGB565"] = 36194] = "RGB565";
  GLEnum2[GLEnum2["DEPTH_COMPONENT16"] = 33189] = "DEPTH_COMPONENT16";
  GLEnum2[GLEnum2["STENCIL_INDEX"] = 6401] = "STENCIL_INDEX";
  GLEnum2[GLEnum2["STENCIL_INDEX8"] = 36168] = "STENCIL_INDEX8";
  GLEnum2[GLEnum2["DEPTH_STENCIL"] = 34041] = "DEPTH_STENCIL";
  GLEnum2[GLEnum2["RENDERBUFFER_WIDTH"] = 36162] = "RENDERBUFFER_WIDTH";
  GLEnum2[GLEnum2["RENDERBUFFER_HEIGHT"] = 36163] = "RENDERBUFFER_HEIGHT";
  GLEnum2[GLEnum2["RENDERBUFFER_INTERNAL_FORMAT"] = 36164] = "RENDERBUFFER_INTERNAL_FORMAT";
  GLEnum2[GLEnum2["RENDERBUFFER_RED_SIZE"] = 36176] = "RENDERBUFFER_RED_SIZE";
  GLEnum2[GLEnum2["RENDERBUFFER_GREEN_SIZE"] = 36177] = "RENDERBUFFER_GREEN_SIZE";
  GLEnum2[GLEnum2["RENDERBUFFER_BLUE_SIZE"] = 36178] = "RENDERBUFFER_BLUE_SIZE";
  GLEnum2[GLEnum2["RENDERBUFFER_ALPHA_SIZE"] = 36179] = "RENDERBUFFER_ALPHA_SIZE";
  GLEnum2[GLEnum2["RENDERBUFFER_DEPTH_SIZE"] = 36180] = "RENDERBUFFER_DEPTH_SIZE";
  GLEnum2[GLEnum2["RENDERBUFFER_STENCIL_SIZE"] = 36181] = "RENDERBUFFER_STENCIL_SIZE";
  GLEnum2[GLEnum2["FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE"] = 36048] = "FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE";
  GLEnum2[GLEnum2["FRAMEBUFFER_ATTACHMENT_OBJECT_NAME"] = 36049] = "FRAMEBUFFER_ATTACHMENT_OBJECT_NAME";
  GLEnum2[GLEnum2["FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL"] = 36050] = "FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL";
  GLEnum2[GLEnum2["FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE"] = 36051] = "FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE";
  GLEnum2[GLEnum2["COLOR_ATTACHMENT0"] = 36064] = "COLOR_ATTACHMENT0";
  GLEnum2[GLEnum2["DEPTH_ATTACHMENT"] = 36096] = "DEPTH_ATTACHMENT";
  GLEnum2[GLEnum2["STENCIL_ATTACHMENT"] = 36128] = "STENCIL_ATTACHMENT";
  GLEnum2[GLEnum2["DEPTH_STENCIL_ATTACHMENT"] = 33306] = "DEPTH_STENCIL_ATTACHMENT";
  GLEnum2[GLEnum2["NONE"] = 0] = "NONE";
  GLEnum2[GLEnum2["FRAMEBUFFER_COMPLETE"] = 36053] = "FRAMEBUFFER_COMPLETE";
  GLEnum2[GLEnum2["FRAMEBUFFER_INCOMPLETE_ATTACHMENT"] = 36054] = "FRAMEBUFFER_INCOMPLETE_ATTACHMENT";
  GLEnum2[GLEnum2["FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT"] = 36055] = "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";
  GLEnum2[GLEnum2["FRAMEBUFFER_INCOMPLETE_DIMENSIONS"] = 36057] = "FRAMEBUFFER_INCOMPLETE_DIMENSIONS";
  GLEnum2[GLEnum2["FRAMEBUFFER_UNSUPPORTED"] = 36061] = "FRAMEBUFFER_UNSUPPORTED";
  GLEnum2[GLEnum2["FRAMEBUFFER_BINDING"] = 36006] = "FRAMEBUFFER_BINDING";
  GLEnum2[GLEnum2["RENDERBUFFER_BINDING"] = 36007] = "RENDERBUFFER_BINDING";
  GLEnum2[GLEnum2["READ_FRAMEBUFFER"] = 36008] = "READ_FRAMEBUFFER";
  GLEnum2[GLEnum2["DRAW_FRAMEBUFFER"] = 36009] = "DRAW_FRAMEBUFFER";
  GLEnum2[GLEnum2["MAX_RENDERBUFFER_SIZE"] = 34024] = "MAX_RENDERBUFFER_SIZE";
  GLEnum2[GLEnum2["INVALID_FRAMEBUFFER_OPERATION"] = 1286] = "INVALID_FRAMEBUFFER_OPERATION";
  GLEnum2[GLEnum2["UNPACK_FLIP_Y_WEBGL"] = 37440] = "UNPACK_FLIP_Y_WEBGL";
  GLEnum2[GLEnum2["UNPACK_PREMULTIPLY_ALPHA_WEBGL"] = 37441] = "UNPACK_PREMULTIPLY_ALPHA_WEBGL";
  GLEnum2[GLEnum2["UNPACK_COLORSPACE_CONVERSION_WEBGL"] = 37443] = "UNPACK_COLORSPACE_CONVERSION_WEBGL";
  GLEnum2[GLEnum2["READ_BUFFER"] = 3074] = "READ_BUFFER";
  GLEnum2[GLEnum2["UNPACK_ROW_LENGTH"] = 3314] = "UNPACK_ROW_LENGTH";
  GLEnum2[GLEnum2["UNPACK_SKIP_ROWS"] = 3315] = "UNPACK_SKIP_ROWS";
  GLEnum2[GLEnum2["UNPACK_SKIP_PIXELS"] = 3316] = "UNPACK_SKIP_PIXELS";
  GLEnum2[GLEnum2["PACK_ROW_LENGTH"] = 3330] = "PACK_ROW_LENGTH";
  GLEnum2[GLEnum2["PACK_SKIP_ROWS"] = 3331] = "PACK_SKIP_ROWS";
  GLEnum2[GLEnum2["PACK_SKIP_PIXELS"] = 3332] = "PACK_SKIP_PIXELS";
  GLEnum2[GLEnum2["TEXTURE_BINDING_3D"] = 32874] = "TEXTURE_BINDING_3D";
  GLEnum2[GLEnum2["UNPACK_SKIP_IMAGES"] = 32877] = "UNPACK_SKIP_IMAGES";
  GLEnum2[GLEnum2["UNPACK_IMAGE_HEIGHT"] = 32878] = "UNPACK_IMAGE_HEIGHT";
  GLEnum2[GLEnum2["MAX_3D_TEXTURE_SIZE"] = 32883] = "MAX_3D_TEXTURE_SIZE";
  GLEnum2[GLEnum2["MAX_ELEMENTS_VERTICES"] = 33e3] = "MAX_ELEMENTS_VERTICES";
  GLEnum2[GLEnum2["MAX_ELEMENTS_INDICES"] = 33001] = "MAX_ELEMENTS_INDICES";
  GLEnum2[GLEnum2["MAX_TEXTURE_LOD_BIAS"] = 34045] = "MAX_TEXTURE_LOD_BIAS";
  GLEnum2[GLEnum2["MAX_FRAGMENT_UNIFORM_COMPONENTS"] = 35657] = "MAX_FRAGMENT_UNIFORM_COMPONENTS";
  GLEnum2[GLEnum2["MAX_VERTEX_UNIFORM_COMPONENTS"] = 35658] = "MAX_VERTEX_UNIFORM_COMPONENTS";
  GLEnum2[GLEnum2["MAX_ARRAY_TEXTURE_LAYERS"] = 35071] = "MAX_ARRAY_TEXTURE_LAYERS";
  GLEnum2[GLEnum2["MIN_PROGRAM_TEXEL_OFFSET"] = 35076] = "MIN_PROGRAM_TEXEL_OFFSET";
  GLEnum2[GLEnum2["MAX_PROGRAM_TEXEL_OFFSET"] = 35077] = "MAX_PROGRAM_TEXEL_OFFSET";
  GLEnum2[GLEnum2["MAX_VARYING_COMPONENTS"] = 35659] = "MAX_VARYING_COMPONENTS";
  GLEnum2[GLEnum2["FRAGMENT_SHADER_DERIVATIVE_HINT"] = 35723] = "FRAGMENT_SHADER_DERIVATIVE_HINT";
  GLEnum2[GLEnum2["RASTERIZER_DISCARD"] = 35977] = "RASTERIZER_DISCARD";
  GLEnum2[GLEnum2["VERTEX_ARRAY_BINDING"] = 34229] = "VERTEX_ARRAY_BINDING";
  GLEnum2[GLEnum2["MAX_VERTEX_OUTPUT_COMPONENTS"] = 37154] = "MAX_VERTEX_OUTPUT_COMPONENTS";
  GLEnum2[GLEnum2["MAX_FRAGMENT_INPUT_COMPONENTS"] = 37157] = "MAX_FRAGMENT_INPUT_COMPONENTS";
  GLEnum2[GLEnum2["MAX_SERVER_WAIT_TIMEOUT"] = 37137] = "MAX_SERVER_WAIT_TIMEOUT";
  GLEnum2[GLEnum2["MAX_ELEMENT_INDEX"] = 36203] = "MAX_ELEMENT_INDEX";
  GLEnum2[GLEnum2["RED"] = 6403] = "RED";
  GLEnum2[GLEnum2["RGB8"] = 32849] = "RGB8";
  GLEnum2[GLEnum2["RGBA8"] = 32856] = "RGBA8";
  GLEnum2[GLEnum2["RGB10_A2"] = 32857] = "RGB10_A2";
  GLEnum2[GLEnum2["TEXTURE_3D"] = 32879] = "TEXTURE_3D";
  GLEnum2[GLEnum2["TEXTURE_WRAP_R"] = 32882] = "TEXTURE_WRAP_R";
  GLEnum2[GLEnum2["TEXTURE_MIN_LOD"] = 33082] = "TEXTURE_MIN_LOD";
  GLEnum2[GLEnum2["TEXTURE_MAX_LOD"] = 33083] = "TEXTURE_MAX_LOD";
  GLEnum2[GLEnum2["TEXTURE_BASE_LEVEL"] = 33084] = "TEXTURE_BASE_LEVEL";
  GLEnum2[GLEnum2["TEXTURE_MAX_LEVEL"] = 33085] = "TEXTURE_MAX_LEVEL";
  GLEnum2[GLEnum2["TEXTURE_COMPARE_MODE"] = 34892] = "TEXTURE_COMPARE_MODE";
  GLEnum2[GLEnum2["TEXTURE_COMPARE_FUNC"] = 34893] = "TEXTURE_COMPARE_FUNC";
  GLEnum2[GLEnum2["SRGB"] = 35904] = "SRGB";
  GLEnum2[GLEnum2["SRGB8"] = 35905] = "SRGB8";
  GLEnum2[GLEnum2["SRGB8_ALPHA8"] = 35907] = "SRGB8_ALPHA8";
  GLEnum2[GLEnum2["COMPARE_REF_TO_TEXTURE"] = 34894] = "COMPARE_REF_TO_TEXTURE";
  GLEnum2[GLEnum2["RGBA32F"] = 34836] = "RGBA32F";
  GLEnum2[GLEnum2["RGB32F"] = 34837] = "RGB32F";
  GLEnum2[GLEnum2["RGBA16F"] = 34842] = "RGBA16F";
  GLEnum2[GLEnum2["RGB16F"] = 34843] = "RGB16F";
  GLEnum2[GLEnum2["TEXTURE_2D_ARRAY"] = 35866] = "TEXTURE_2D_ARRAY";
  GLEnum2[GLEnum2["TEXTURE_BINDING_2D_ARRAY"] = 35869] = "TEXTURE_BINDING_2D_ARRAY";
  GLEnum2[GLEnum2["R11F_G11F_B10F"] = 35898] = "R11F_G11F_B10F";
  GLEnum2[GLEnum2["RGB9_E5"] = 35901] = "RGB9_E5";
  GLEnum2[GLEnum2["RGBA32UI"] = 36208] = "RGBA32UI";
  GLEnum2[GLEnum2["RGB32UI"] = 36209] = "RGB32UI";
  GLEnum2[GLEnum2["RGBA16UI"] = 36214] = "RGBA16UI";
  GLEnum2[GLEnum2["RGB16UI"] = 36215] = "RGB16UI";
  GLEnum2[GLEnum2["RGBA8UI"] = 36220] = "RGBA8UI";
  GLEnum2[GLEnum2["RGB8UI"] = 36221] = "RGB8UI";
  GLEnum2[GLEnum2["RGBA32I"] = 36226] = "RGBA32I";
  GLEnum2[GLEnum2["RGB32I"] = 36227] = "RGB32I";
  GLEnum2[GLEnum2["RGBA16I"] = 36232] = "RGBA16I";
  GLEnum2[GLEnum2["RGB16I"] = 36233] = "RGB16I";
  GLEnum2[GLEnum2["RGBA8I"] = 36238] = "RGBA8I";
  GLEnum2[GLEnum2["RGB8I"] = 36239] = "RGB8I";
  GLEnum2[GLEnum2["RED_INTEGER"] = 36244] = "RED_INTEGER";
  GLEnum2[GLEnum2["RGB_INTEGER"] = 36248] = "RGB_INTEGER";
  GLEnum2[GLEnum2["RGBA_INTEGER"] = 36249] = "RGBA_INTEGER";
  GLEnum2[GLEnum2["R8"] = 33321] = "R8";
  GLEnum2[GLEnum2["RG8"] = 33323] = "RG8";
  GLEnum2[GLEnum2["R16F"] = 33325] = "R16F";
  GLEnum2[GLEnum2["R32F"] = 33326] = "R32F";
  GLEnum2[GLEnum2["RG16F"] = 33327] = "RG16F";
  GLEnum2[GLEnum2["RG32F"] = 33328] = "RG32F";
  GLEnum2[GLEnum2["R8I"] = 33329] = "R8I";
  GLEnum2[GLEnum2["R8UI"] = 33330] = "R8UI";
  GLEnum2[GLEnum2["R16I"] = 33331] = "R16I";
  GLEnum2[GLEnum2["R16UI"] = 33332] = "R16UI";
  GLEnum2[GLEnum2["R32I"] = 33333] = "R32I";
  GLEnum2[GLEnum2["R32UI"] = 33334] = "R32UI";
  GLEnum2[GLEnum2["RG8I"] = 33335] = "RG8I";
  GLEnum2[GLEnum2["RG8UI"] = 33336] = "RG8UI";
  GLEnum2[GLEnum2["RG16I"] = 33337] = "RG16I";
  GLEnum2[GLEnum2["RG16UI"] = 33338] = "RG16UI";
  GLEnum2[GLEnum2["RG32I"] = 33339] = "RG32I";
  GLEnum2[GLEnum2["RG32UI"] = 33340] = "RG32UI";
  GLEnum2[GLEnum2["R8_SNORM"] = 36756] = "R8_SNORM";
  GLEnum2[GLEnum2["RG8_SNORM"] = 36757] = "RG8_SNORM";
  GLEnum2[GLEnum2["RGB8_SNORM"] = 36758] = "RGB8_SNORM";
  GLEnum2[GLEnum2["RGBA8_SNORM"] = 36759] = "RGBA8_SNORM";
  GLEnum2[GLEnum2["RGB10_A2UI"] = 36975] = "RGB10_A2UI";
  GLEnum2[GLEnum2["TEXTURE_IMMUTABLE_FORMAT"] = 37167] = "TEXTURE_IMMUTABLE_FORMAT";
  GLEnum2[GLEnum2["TEXTURE_IMMUTABLE_LEVELS"] = 33503] = "TEXTURE_IMMUTABLE_LEVELS";
  GLEnum2[GLEnum2["UNSIGNED_INT_2_10_10_10_REV"] = 33640] = "UNSIGNED_INT_2_10_10_10_REV";
  GLEnum2[GLEnum2["UNSIGNED_INT_10F_11F_11F_REV"] = 35899] = "UNSIGNED_INT_10F_11F_11F_REV";
  GLEnum2[GLEnum2["UNSIGNED_INT_5_9_9_9_REV"] = 35902] = "UNSIGNED_INT_5_9_9_9_REV";
  GLEnum2[GLEnum2["FLOAT_32_UNSIGNED_INT_24_8_REV"] = 36269] = "FLOAT_32_UNSIGNED_INT_24_8_REV";
  GLEnum2[GLEnum2["UNSIGNED_INT_24_8"] = 34042] = "UNSIGNED_INT_24_8";
  GLEnum2[GLEnum2["HALF_FLOAT"] = 5131] = "HALF_FLOAT";
  GLEnum2[GLEnum2["RG"] = 33319] = "RG";
  GLEnum2[GLEnum2["RG_INTEGER"] = 33320] = "RG_INTEGER";
  GLEnum2[GLEnum2["INT_2_10_10_10_REV"] = 36255] = "INT_2_10_10_10_REV";
  GLEnum2[GLEnum2["CURRENT_QUERY"] = 34917] = "CURRENT_QUERY";
  GLEnum2[GLEnum2["QUERY_RESULT"] = 34918] = "QUERY_RESULT";
  GLEnum2[GLEnum2["QUERY_RESULT_AVAILABLE"] = 34919] = "QUERY_RESULT_AVAILABLE";
  GLEnum2[GLEnum2["ANY_SAMPLES_PASSED"] = 35887] = "ANY_SAMPLES_PASSED";
  GLEnum2[GLEnum2["ANY_SAMPLES_PASSED_CONSERVATIVE"] = 36202] = "ANY_SAMPLES_PASSED_CONSERVATIVE";
  GLEnum2[GLEnum2["MAX_DRAW_BUFFERS"] = 34852] = "MAX_DRAW_BUFFERS";
  GLEnum2[GLEnum2["DRAW_BUFFER0"] = 34853] = "DRAW_BUFFER0";
  GLEnum2[GLEnum2["DRAW_BUFFER1"] = 34854] = "DRAW_BUFFER1";
  GLEnum2[GLEnum2["DRAW_BUFFER2"] = 34855] = "DRAW_BUFFER2";
  GLEnum2[GLEnum2["DRAW_BUFFER3"] = 34856] = "DRAW_BUFFER3";
  GLEnum2[GLEnum2["DRAW_BUFFER4"] = 34857] = "DRAW_BUFFER4";
  GLEnum2[GLEnum2["DRAW_BUFFER5"] = 34858] = "DRAW_BUFFER5";
  GLEnum2[GLEnum2["DRAW_BUFFER6"] = 34859] = "DRAW_BUFFER6";
  GLEnum2[GLEnum2["DRAW_BUFFER7"] = 34860] = "DRAW_BUFFER7";
  GLEnum2[GLEnum2["DRAW_BUFFER8"] = 34861] = "DRAW_BUFFER8";
  GLEnum2[GLEnum2["DRAW_BUFFER9"] = 34862] = "DRAW_BUFFER9";
  GLEnum2[GLEnum2["DRAW_BUFFER10"] = 34863] = "DRAW_BUFFER10";
  GLEnum2[GLEnum2["DRAW_BUFFER11"] = 34864] = "DRAW_BUFFER11";
  GLEnum2[GLEnum2["DRAW_BUFFER12"] = 34865] = "DRAW_BUFFER12";
  GLEnum2[GLEnum2["DRAW_BUFFER13"] = 34866] = "DRAW_BUFFER13";
  GLEnum2[GLEnum2["DRAW_BUFFER14"] = 34867] = "DRAW_BUFFER14";
  GLEnum2[GLEnum2["DRAW_BUFFER15"] = 34868] = "DRAW_BUFFER15";
  GLEnum2[GLEnum2["MAX_COLOR_ATTACHMENTS"] = 36063] = "MAX_COLOR_ATTACHMENTS";
  GLEnum2[GLEnum2["COLOR_ATTACHMENT1"] = 36065] = "COLOR_ATTACHMENT1";
  GLEnum2[GLEnum2["COLOR_ATTACHMENT2"] = 36066] = "COLOR_ATTACHMENT2";
  GLEnum2[GLEnum2["COLOR_ATTACHMENT3"] = 36067] = "COLOR_ATTACHMENT3";
  GLEnum2[GLEnum2["COLOR_ATTACHMENT4"] = 36068] = "COLOR_ATTACHMENT4";
  GLEnum2[GLEnum2["COLOR_ATTACHMENT5"] = 36069] = "COLOR_ATTACHMENT5";
  GLEnum2[GLEnum2["COLOR_ATTACHMENT6"] = 36070] = "COLOR_ATTACHMENT6";
  GLEnum2[GLEnum2["COLOR_ATTACHMENT7"] = 36071] = "COLOR_ATTACHMENT7";
  GLEnum2[GLEnum2["COLOR_ATTACHMENT8"] = 36072] = "COLOR_ATTACHMENT8";
  GLEnum2[GLEnum2["COLOR_ATTACHMENT9"] = 36073] = "COLOR_ATTACHMENT9";
  GLEnum2[GLEnum2["COLOR_ATTACHMENT10"] = 36074] = "COLOR_ATTACHMENT10";
  GLEnum2[GLEnum2["COLOR_ATTACHMENT11"] = 36075] = "COLOR_ATTACHMENT11";
  GLEnum2[GLEnum2["COLOR_ATTACHMENT12"] = 36076] = "COLOR_ATTACHMENT12";
  GLEnum2[GLEnum2["COLOR_ATTACHMENT13"] = 36077] = "COLOR_ATTACHMENT13";
  GLEnum2[GLEnum2["COLOR_ATTACHMENT14"] = 36078] = "COLOR_ATTACHMENT14";
  GLEnum2[GLEnum2["COLOR_ATTACHMENT15"] = 36079] = "COLOR_ATTACHMENT15";
  GLEnum2[GLEnum2["SAMPLER_3D"] = 35679] = "SAMPLER_3D";
  GLEnum2[GLEnum2["SAMPLER_2D_SHADOW"] = 35682] = "SAMPLER_2D_SHADOW";
  GLEnum2[GLEnum2["SAMPLER_2D_ARRAY"] = 36289] = "SAMPLER_2D_ARRAY";
  GLEnum2[GLEnum2["SAMPLER_2D_ARRAY_SHADOW"] = 36292] = "SAMPLER_2D_ARRAY_SHADOW";
  GLEnum2[GLEnum2["SAMPLER_CUBE_SHADOW"] = 36293] = "SAMPLER_CUBE_SHADOW";
  GLEnum2[GLEnum2["INT_SAMPLER_2D"] = 36298] = "INT_SAMPLER_2D";
  GLEnum2[GLEnum2["INT_SAMPLER_3D"] = 36299] = "INT_SAMPLER_3D";
  GLEnum2[GLEnum2["INT_SAMPLER_CUBE"] = 36300] = "INT_SAMPLER_CUBE";
  GLEnum2[GLEnum2["INT_SAMPLER_2D_ARRAY"] = 36303] = "INT_SAMPLER_2D_ARRAY";
  GLEnum2[GLEnum2["UNSIGNED_INT_SAMPLER_2D"] = 36306] = "UNSIGNED_INT_SAMPLER_2D";
  GLEnum2[GLEnum2["UNSIGNED_INT_SAMPLER_3D"] = 36307] = "UNSIGNED_INT_SAMPLER_3D";
  GLEnum2[GLEnum2["UNSIGNED_INT_SAMPLER_CUBE"] = 36308] = "UNSIGNED_INT_SAMPLER_CUBE";
  GLEnum2[GLEnum2["UNSIGNED_INT_SAMPLER_2D_ARRAY"] = 36311] = "UNSIGNED_INT_SAMPLER_2D_ARRAY";
  GLEnum2[GLEnum2["MAX_SAMPLES"] = 36183] = "MAX_SAMPLES";
  GLEnum2[GLEnum2["SAMPLER_BINDING"] = 35097] = "SAMPLER_BINDING";
  GLEnum2[GLEnum2["PIXEL_PACK_BUFFER"] = 35051] = "PIXEL_PACK_BUFFER";
  GLEnum2[GLEnum2["PIXEL_UNPACK_BUFFER"] = 35052] = "PIXEL_UNPACK_BUFFER";
  GLEnum2[GLEnum2["PIXEL_PACK_BUFFER_BINDING"] = 35053] = "PIXEL_PACK_BUFFER_BINDING";
  GLEnum2[GLEnum2["PIXEL_UNPACK_BUFFER_BINDING"] = 35055] = "PIXEL_UNPACK_BUFFER_BINDING";
  GLEnum2[GLEnum2["COPY_READ_BUFFER"] = 36662] = "COPY_READ_BUFFER";
  GLEnum2[GLEnum2["COPY_WRITE_BUFFER"] = 36663] = "COPY_WRITE_BUFFER";
  GLEnum2[GLEnum2["COPY_READ_BUFFER_BINDING"] = 36662] = "COPY_READ_BUFFER_BINDING";
  GLEnum2[GLEnum2["COPY_WRITE_BUFFER_BINDING"] = 36663] = "COPY_WRITE_BUFFER_BINDING";
  GLEnum2[GLEnum2["FLOAT_MAT2x3"] = 35685] = "FLOAT_MAT2x3";
  GLEnum2[GLEnum2["FLOAT_MAT2x4"] = 35686] = "FLOAT_MAT2x4";
  GLEnum2[GLEnum2["FLOAT_MAT3x2"] = 35687] = "FLOAT_MAT3x2";
  GLEnum2[GLEnum2["FLOAT_MAT3x4"] = 35688] = "FLOAT_MAT3x4";
  GLEnum2[GLEnum2["FLOAT_MAT4x2"] = 35689] = "FLOAT_MAT4x2";
  GLEnum2[GLEnum2["FLOAT_MAT4x3"] = 35690] = "FLOAT_MAT4x3";
  GLEnum2[GLEnum2["UNSIGNED_INT_VEC2"] = 36294] = "UNSIGNED_INT_VEC2";
  GLEnum2[GLEnum2["UNSIGNED_INT_VEC3"] = 36295] = "UNSIGNED_INT_VEC3";
  GLEnum2[GLEnum2["UNSIGNED_INT_VEC4"] = 36296] = "UNSIGNED_INT_VEC4";
  GLEnum2[GLEnum2["UNSIGNED_NORMALIZED"] = 35863] = "UNSIGNED_NORMALIZED";
  GLEnum2[GLEnum2["SIGNED_NORMALIZED"] = 36764] = "SIGNED_NORMALIZED";
  GLEnum2[GLEnum2["VERTEX_ATTRIB_ARRAY_INTEGER"] = 35069] = "VERTEX_ATTRIB_ARRAY_INTEGER";
  GLEnum2[GLEnum2["VERTEX_ATTRIB_ARRAY_DIVISOR"] = 35070] = "VERTEX_ATTRIB_ARRAY_DIVISOR";
  GLEnum2[GLEnum2["TRANSFORM_FEEDBACK_BUFFER_MODE"] = 35967] = "TRANSFORM_FEEDBACK_BUFFER_MODE";
  GLEnum2[GLEnum2["MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS"] = 35968] = "MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS";
  GLEnum2[GLEnum2["TRANSFORM_FEEDBACK_VARYINGS"] = 35971] = "TRANSFORM_FEEDBACK_VARYINGS";
  GLEnum2[GLEnum2["TRANSFORM_FEEDBACK_BUFFER_START"] = 35972] = "TRANSFORM_FEEDBACK_BUFFER_START";
  GLEnum2[GLEnum2["TRANSFORM_FEEDBACK_BUFFER_SIZE"] = 35973] = "TRANSFORM_FEEDBACK_BUFFER_SIZE";
  GLEnum2[GLEnum2["TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN"] = 35976] = "TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN";
  GLEnum2[GLEnum2["MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS"] = 35978] = "MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS";
  GLEnum2[GLEnum2["MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS"] = 35979] = "MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS";
  GLEnum2[GLEnum2["INTERLEAVED_ATTRIBS"] = 35980] = "INTERLEAVED_ATTRIBS";
  GLEnum2[GLEnum2["SEPARATE_ATTRIBS"] = 35981] = "SEPARATE_ATTRIBS";
  GLEnum2[GLEnum2["TRANSFORM_FEEDBACK_BUFFER"] = 35982] = "TRANSFORM_FEEDBACK_BUFFER";
  GLEnum2[GLEnum2["TRANSFORM_FEEDBACK_BUFFER_BINDING"] = 35983] = "TRANSFORM_FEEDBACK_BUFFER_BINDING";
  GLEnum2[GLEnum2["TRANSFORM_FEEDBACK"] = 36386] = "TRANSFORM_FEEDBACK";
  GLEnum2[GLEnum2["TRANSFORM_FEEDBACK_PAUSED"] = 36387] = "TRANSFORM_FEEDBACK_PAUSED";
  GLEnum2[GLEnum2["TRANSFORM_FEEDBACK_ACTIVE"] = 36388] = "TRANSFORM_FEEDBACK_ACTIVE";
  GLEnum2[GLEnum2["TRANSFORM_FEEDBACK_BINDING"] = 36389] = "TRANSFORM_FEEDBACK_BINDING";
  GLEnum2[GLEnum2["FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING"] = 33296] = "FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING";
  GLEnum2[GLEnum2["FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE"] = 33297] = "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE";
  GLEnum2[GLEnum2["FRAMEBUFFER_ATTACHMENT_RED_SIZE"] = 33298] = "FRAMEBUFFER_ATTACHMENT_RED_SIZE";
  GLEnum2[GLEnum2["FRAMEBUFFER_ATTACHMENT_GREEN_SIZE"] = 33299] = "FRAMEBUFFER_ATTACHMENT_GREEN_SIZE";
  GLEnum2[GLEnum2["FRAMEBUFFER_ATTACHMENT_BLUE_SIZE"] = 33300] = "FRAMEBUFFER_ATTACHMENT_BLUE_SIZE";
  GLEnum2[GLEnum2["FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE"] = 33301] = "FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE";
  GLEnum2[GLEnum2["FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE"] = 33302] = "FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE";
  GLEnum2[GLEnum2["FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE"] = 33303] = "FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE";
  GLEnum2[GLEnum2["FRAMEBUFFER_DEFAULT"] = 33304] = "FRAMEBUFFER_DEFAULT";
  GLEnum2[GLEnum2["DEPTH24_STENCIL8"] = 35056] = "DEPTH24_STENCIL8";
  GLEnum2[GLEnum2["DRAW_FRAMEBUFFER_BINDING"] = 36006] = "DRAW_FRAMEBUFFER_BINDING";
  GLEnum2[GLEnum2["READ_FRAMEBUFFER_BINDING"] = 36010] = "READ_FRAMEBUFFER_BINDING";
  GLEnum2[GLEnum2["RENDERBUFFER_SAMPLES"] = 36011] = "RENDERBUFFER_SAMPLES";
  GLEnum2[GLEnum2["FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER"] = 36052] = "FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER";
  GLEnum2[GLEnum2["FRAMEBUFFER_INCOMPLETE_MULTISAMPLE"] = 36182] = "FRAMEBUFFER_INCOMPLETE_MULTISAMPLE";
  GLEnum2[GLEnum2["UNIFORM_BUFFER"] = 35345] = "UNIFORM_BUFFER";
  GLEnum2[GLEnum2["UNIFORM_BUFFER_BINDING"] = 35368] = "UNIFORM_BUFFER_BINDING";
  GLEnum2[GLEnum2["UNIFORM_BUFFER_START"] = 35369] = "UNIFORM_BUFFER_START";
  GLEnum2[GLEnum2["UNIFORM_BUFFER_SIZE"] = 35370] = "UNIFORM_BUFFER_SIZE";
  GLEnum2[GLEnum2["MAX_VERTEX_UNIFORM_BLOCKS"] = 35371] = "MAX_VERTEX_UNIFORM_BLOCKS";
  GLEnum2[GLEnum2["MAX_FRAGMENT_UNIFORM_BLOCKS"] = 35373] = "MAX_FRAGMENT_UNIFORM_BLOCKS";
  GLEnum2[GLEnum2["MAX_COMBINED_UNIFORM_BLOCKS"] = 35374] = "MAX_COMBINED_UNIFORM_BLOCKS";
  GLEnum2[GLEnum2["MAX_UNIFORM_BUFFER_BINDINGS"] = 35375] = "MAX_UNIFORM_BUFFER_BINDINGS";
  GLEnum2[GLEnum2["MAX_UNIFORM_BLOCK_SIZE"] = 35376] = "MAX_UNIFORM_BLOCK_SIZE";
  GLEnum2[GLEnum2["MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS"] = 35377] = "MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS";
  GLEnum2[GLEnum2["MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS"] = 35379] = "MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS";
  GLEnum2[GLEnum2["UNIFORM_BUFFER_OFFSET_ALIGNMENT"] = 35380] = "UNIFORM_BUFFER_OFFSET_ALIGNMENT";
  GLEnum2[GLEnum2["ACTIVE_UNIFORM_BLOCKS"] = 35382] = "ACTIVE_UNIFORM_BLOCKS";
  GLEnum2[GLEnum2["UNIFORM_TYPE"] = 35383] = "UNIFORM_TYPE";
  GLEnum2[GLEnum2["UNIFORM_SIZE"] = 35384] = "UNIFORM_SIZE";
  GLEnum2[GLEnum2["UNIFORM_BLOCK_INDEX"] = 35386] = "UNIFORM_BLOCK_INDEX";
  GLEnum2[GLEnum2["UNIFORM_OFFSET"] = 35387] = "UNIFORM_OFFSET";
  GLEnum2[GLEnum2["UNIFORM_ARRAY_STRIDE"] = 35388] = "UNIFORM_ARRAY_STRIDE";
  GLEnum2[GLEnum2["UNIFORM_MATRIX_STRIDE"] = 35389] = "UNIFORM_MATRIX_STRIDE";
  GLEnum2[GLEnum2["UNIFORM_IS_ROW_MAJOR"] = 35390] = "UNIFORM_IS_ROW_MAJOR";
  GLEnum2[GLEnum2["UNIFORM_BLOCK_BINDING"] = 35391] = "UNIFORM_BLOCK_BINDING";
  GLEnum2[GLEnum2["UNIFORM_BLOCK_DATA_SIZE"] = 35392] = "UNIFORM_BLOCK_DATA_SIZE";
  GLEnum2[GLEnum2["UNIFORM_BLOCK_ACTIVE_UNIFORMS"] = 35394] = "UNIFORM_BLOCK_ACTIVE_UNIFORMS";
  GLEnum2[GLEnum2["UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES"] = 35395] = "UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES";
  GLEnum2[GLEnum2["UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER"] = 35396] = "UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER";
  GLEnum2[GLEnum2["UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER"] = 35398] = "UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER";
  GLEnum2[GLEnum2["OBJECT_TYPE"] = 37138] = "OBJECT_TYPE";
  GLEnum2[GLEnum2["SYNC_CONDITION"] = 37139] = "SYNC_CONDITION";
  GLEnum2[GLEnum2["SYNC_STATUS"] = 37140] = "SYNC_STATUS";
  GLEnum2[GLEnum2["SYNC_FLAGS"] = 37141] = "SYNC_FLAGS";
  GLEnum2[GLEnum2["SYNC_FENCE"] = 37142] = "SYNC_FENCE";
  GLEnum2[GLEnum2["SYNC_GPU_COMMANDS_COMPLETE"] = 37143] = "SYNC_GPU_COMMANDS_COMPLETE";
  GLEnum2[GLEnum2["UNSIGNALED"] = 37144] = "UNSIGNALED";
  GLEnum2[GLEnum2["SIGNALED"] = 37145] = "SIGNALED";
  GLEnum2[GLEnum2["ALREADY_SIGNALED"] = 37146] = "ALREADY_SIGNALED";
  GLEnum2[GLEnum2["TIMEOUT_EXPIRED"] = 37147] = "TIMEOUT_EXPIRED";
  GLEnum2[GLEnum2["CONDITION_SATISFIED"] = 37148] = "CONDITION_SATISFIED";
  GLEnum2[GLEnum2["WAIT_FAILED"] = 37149] = "WAIT_FAILED";
  GLEnum2[GLEnum2["SYNC_FLUSH_COMMANDS_BIT"] = 1] = "SYNC_FLUSH_COMMANDS_BIT";
  GLEnum2[GLEnum2["COLOR"] = 6144] = "COLOR";
  GLEnum2[GLEnum2["DEPTH"] = 6145] = "DEPTH";
  GLEnum2[GLEnum2["STENCIL"] = 6146] = "STENCIL";
  GLEnum2[GLEnum2["MIN"] = 32775] = "MIN";
  GLEnum2[GLEnum2["MAX"] = 32776] = "MAX";
  GLEnum2[GLEnum2["DEPTH_COMPONENT24"] = 33190] = "DEPTH_COMPONENT24";
  GLEnum2[GLEnum2["STREAM_READ"] = 35041] = "STREAM_READ";
  GLEnum2[GLEnum2["STREAM_COPY"] = 35042] = "STREAM_COPY";
  GLEnum2[GLEnum2["STATIC_READ"] = 35045] = "STATIC_READ";
  GLEnum2[GLEnum2["STATIC_COPY"] = 35046] = "STATIC_COPY";
  GLEnum2[GLEnum2["DYNAMIC_READ"] = 35049] = "DYNAMIC_READ";
  GLEnum2[GLEnum2["DYNAMIC_COPY"] = 35050] = "DYNAMIC_COPY";
  GLEnum2[GLEnum2["DEPTH_COMPONENT32F"] = 36012] = "DEPTH_COMPONENT32F";
  GLEnum2[GLEnum2["DEPTH32F_STENCIL8"] = 36013] = "DEPTH32F_STENCIL8";
  GLEnum2[GLEnum2["INVALID_INDEX"] = 4294967295] = "INVALID_INDEX";
  GLEnum2[GLEnum2["TIMEOUT_IGNORED"] = -1] = "TIMEOUT_IGNORED";
  GLEnum2[GLEnum2["MAX_CLIENT_WAIT_TIMEOUT_WEBGL"] = 37447] = "MAX_CLIENT_WAIT_TIMEOUT_WEBGL";
  GLEnum2[GLEnum2["UNMASKED_VENDOR_WEBGL"] = 37445] = "UNMASKED_VENDOR_WEBGL";
  GLEnum2[GLEnum2["UNMASKED_RENDERER_WEBGL"] = 37446] = "UNMASKED_RENDERER_WEBGL";
  GLEnum2[GLEnum2["MAX_TEXTURE_MAX_ANISOTROPY_EXT"] = 34047] = "MAX_TEXTURE_MAX_ANISOTROPY_EXT";
  GLEnum2[GLEnum2["TEXTURE_MAX_ANISOTROPY_EXT"] = 34046] = "TEXTURE_MAX_ANISOTROPY_EXT";
  GLEnum2[GLEnum2["R16_EXT"] = 33322] = "R16_EXT";
  GLEnum2[GLEnum2["RG16_EXT"] = 33324] = "RG16_EXT";
  GLEnum2[GLEnum2["RGB16_EXT"] = 32852] = "RGB16_EXT";
  GLEnum2[GLEnum2["RGBA16_EXT"] = 32859] = "RGBA16_EXT";
  GLEnum2[GLEnum2["R16_SNORM_EXT"] = 36760] = "R16_SNORM_EXT";
  GLEnum2[GLEnum2["RG16_SNORM_EXT"] = 36761] = "RG16_SNORM_EXT";
  GLEnum2[GLEnum2["RGB16_SNORM_EXT"] = 36762] = "RGB16_SNORM_EXT";
  GLEnum2[GLEnum2["RGBA16_SNORM_EXT"] = 36763] = "RGBA16_SNORM_EXT";
  GLEnum2[GLEnum2["COMPRESSED_RGB_S3TC_DXT1_EXT"] = 33776] = "COMPRESSED_RGB_S3TC_DXT1_EXT";
  GLEnum2[GLEnum2["COMPRESSED_RGBA_S3TC_DXT1_EXT"] = 33777] = "COMPRESSED_RGBA_S3TC_DXT1_EXT";
  GLEnum2[GLEnum2["COMPRESSED_RGBA_S3TC_DXT3_EXT"] = 33778] = "COMPRESSED_RGBA_S3TC_DXT3_EXT";
  GLEnum2[GLEnum2["COMPRESSED_RGBA_S3TC_DXT5_EXT"] = 33779] = "COMPRESSED_RGBA_S3TC_DXT5_EXT";
  GLEnum2[GLEnum2["COMPRESSED_SRGB_S3TC_DXT1_EXT"] = 35916] = "COMPRESSED_SRGB_S3TC_DXT1_EXT";
  GLEnum2[GLEnum2["COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT"] = 35917] = "COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT";
  GLEnum2[GLEnum2["COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT"] = 35918] = "COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT";
  GLEnum2[GLEnum2["COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT"] = 35919] = "COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT";
  GLEnum2[GLEnum2["COMPRESSED_RED_RGTC1_EXT"] = 36283] = "COMPRESSED_RED_RGTC1_EXT";
  GLEnum2[GLEnum2["COMPRESSED_SIGNED_RED_RGTC1_EXT"] = 36284] = "COMPRESSED_SIGNED_RED_RGTC1_EXT";
  GLEnum2[GLEnum2["COMPRESSED_RED_GREEN_RGTC2_EXT"] = 36285] = "COMPRESSED_RED_GREEN_RGTC2_EXT";
  GLEnum2[GLEnum2["COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT"] = 36286] = "COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT";
  GLEnum2[GLEnum2["COMPRESSED_RGBA_BPTC_UNORM_EXT"] = 36492] = "COMPRESSED_RGBA_BPTC_UNORM_EXT";
  GLEnum2[GLEnum2["COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT"] = 36493] = "COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT";
  GLEnum2[GLEnum2["COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT"] = 36494] = "COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT";
  GLEnum2[GLEnum2["COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT"] = 36495] = "COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT";
  GLEnum2[GLEnum2["COMPRESSED_R11_EAC"] = 37488] = "COMPRESSED_R11_EAC";
  GLEnum2[GLEnum2["COMPRESSED_SIGNED_R11_EAC"] = 37489] = "COMPRESSED_SIGNED_R11_EAC";
  GLEnum2[GLEnum2["COMPRESSED_RG11_EAC"] = 37490] = "COMPRESSED_RG11_EAC";
  GLEnum2[GLEnum2["COMPRESSED_SIGNED_RG11_EAC"] = 37491] = "COMPRESSED_SIGNED_RG11_EAC";
  GLEnum2[GLEnum2["COMPRESSED_RGB8_ETC2"] = 37492] = "COMPRESSED_RGB8_ETC2";
  GLEnum2[GLEnum2["COMPRESSED_RGBA8_ETC2_EAC"] = 37493] = "COMPRESSED_RGBA8_ETC2_EAC";
  GLEnum2[GLEnum2["COMPRESSED_SRGB8_ETC2"] = 37494] = "COMPRESSED_SRGB8_ETC2";
  GLEnum2[GLEnum2["COMPRESSED_SRGB8_ALPHA8_ETC2_EAC"] = 37495] = "COMPRESSED_SRGB8_ALPHA8_ETC2_EAC";
  GLEnum2[GLEnum2["COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2"] = 37496] = "COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2";
  GLEnum2[GLEnum2["COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2"] = 37497] = "COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2";
  GLEnum2[GLEnum2["COMPRESSED_RGB_PVRTC_4BPPV1_IMG"] = 35840] = "COMPRESSED_RGB_PVRTC_4BPPV1_IMG";
  GLEnum2[GLEnum2["COMPRESSED_RGBA_PVRTC_4BPPV1_IMG"] = 35842] = "COMPRESSED_RGBA_PVRTC_4BPPV1_IMG";
  GLEnum2[GLEnum2["COMPRESSED_RGB_PVRTC_2BPPV1_IMG"] = 35841] = "COMPRESSED_RGB_PVRTC_2BPPV1_IMG";
  GLEnum2[GLEnum2["COMPRESSED_RGBA_PVRTC_2BPPV1_IMG"] = 35843] = "COMPRESSED_RGBA_PVRTC_2BPPV1_IMG";
  GLEnum2[GLEnum2["COMPRESSED_RGB_ETC1_WEBGL"] = 36196] = "COMPRESSED_RGB_ETC1_WEBGL";
  GLEnum2[GLEnum2["COMPRESSED_RGB_ATC_WEBGL"] = 35986] = "COMPRESSED_RGB_ATC_WEBGL";
  GLEnum2[GLEnum2["COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL"] = 35986] = "COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL";
  GLEnum2[GLEnum2["COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL"] = 34798] = "COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL";
  GLEnum2[GLEnum2["COMPRESSED_RGBA_ASTC_4x4_KHR"] = 37808] = "COMPRESSED_RGBA_ASTC_4x4_KHR";
  GLEnum2[GLEnum2["COMPRESSED_RGBA_ASTC_5x4_KHR"] = 37809] = "COMPRESSED_RGBA_ASTC_5x4_KHR";
  GLEnum2[GLEnum2["COMPRESSED_RGBA_ASTC_5x5_KHR"] = 37810] = "COMPRESSED_RGBA_ASTC_5x5_KHR";
  GLEnum2[GLEnum2["COMPRESSED_RGBA_ASTC_6x5_KHR"] = 37811] = "COMPRESSED_RGBA_ASTC_6x5_KHR";
  GLEnum2[GLEnum2["COMPRESSED_RGBA_ASTC_6x6_KHR"] = 37812] = "COMPRESSED_RGBA_ASTC_6x6_KHR";
  GLEnum2[GLEnum2["COMPRESSED_RGBA_ASTC_8x5_KHR"] = 37813] = "COMPRESSED_RGBA_ASTC_8x5_KHR";
  GLEnum2[GLEnum2["COMPRESSED_RGBA_ASTC_8x6_KHR"] = 37814] = "COMPRESSED_RGBA_ASTC_8x6_KHR";
  GLEnum2[GLEnum2["COMPRESSED_RGBA_ASTC_8x8_KHR"] = 37815] = "COMPRESSED_RGBA_ASTC_8x8_KHR";
  GLEnum2[GLEnum2["COMPRESSED_RGBA_ASTC_10x5_KHR"] = 37816] = "COMPRESSED_RGBA_ASTC_10x5_KHR";
  GLEnum2[GLEnum2["COMPRESSED_RGBA_ASTC_10x6_KHR"] = 37817] = "COMPRESSED_RGBA_ASTC_10x6_KHR";
  GLEnum2[GLEnum2["COMPRESSED_RGBA_ASTC_10x8_KHR"] = 37818] = "COMPRESSED_RGBA_ASTC_10x8_KHR";
  GLEnum2[GLEnum2["COMPRESSED_RGBA_ASTC_10x10_KHR"] = 37819] = "COMPRESSED_RGBA_ASTC_10x10_KHR";
  GLEnum2[GLEnum2["COMPRESSED_RGBA_ASTC_12x10_KHR"] = 37820] = "COMPRESSED_RGBA_ASTC_12x10_KHR";
  GLEnum2[GLEnum2["COMPRESSED_RGBA_ASTC_12x12_KHR"] = 37821] = "COMPRESSED_RGBA_ASTC_12x12_KHR";
  GLEnum2[GLEnum2["COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR"] = 37840] = "COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR";
  GLEnum2[GLEnum2["COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR"] = 37841] = "COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR";
  GLEnum2[GLEnum2["COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR"] = 37842] = "COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR";
  GLEnum2[GLEnum2["COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR"] = 37843] = "COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR";
  GLEnum2[GLEnum2["COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR"] = 37844] = "COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR";
  GLEnum2[GLEnum2["COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR"] = 37845] = "COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR";
  GLEnum2[GLEnum2["COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR"] = 37846] = "COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR";
  GLEnum2[GLEnum2["COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR"] = 37847] = "COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR";
  GLEnum2[GLEnum2["COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR"] = 37848] = "COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR";
  GLEnum2[GLEnum2["COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR"] = 37849] = "COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR";
  GLEnum2[GLEnum2["COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR"] = 37850] = "COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR";
  GLEnum2[GLEnum2["COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR"] = 37851] = "COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR";
  GLEnum2[GLEnum2["COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR"] = 37852] = "COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR";
  GLEnum2[GLEnum2["COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR"] = 37853] = "COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR";
  GLEnum2[GLEnum2["QUERY_COUNTER_BITS_EXT"] = 34916] = "QUERY_COUNTER_BITS_EXT";
  GLEnum2[GLEnum2["CURRENT_QUERY_EXT"] = 34917] = "CURRENT_QUERY_EXT";
  GLEnum2[GLEnum2["QUERY_RESULT_EXT"] = 34918] = "QUERY_RESULT_EXT";
  GLEnum2[GLEnum2["QUERY_RESULT_AVAILABLE_EXT"] = 34919] = "QUERY_RESULT_AVAILABLE_EXT";
  GLEnum2[GLEnum2["TIME_ELAPSED_EXT"] = 35007] = "TIME_ELAPSED_EXT";
  GLEnum2[GLEnum2["TIMESTAMP_EXT"] = 36392] = "TIMESTAMP_EXT";
  GLEnum2[GLEnum2["GPU_DISJOINT_EXT"] = 36795] = "GPU_DISJOINT_EXT";
  GLEnum2[GLEnum2["COMPLETION_STATUS_KHR"] = 37297] = "COMPLETION_STATUS_KHR";
  GLEnum2[GLEnum2["DEPTH_CLAMP_EXT"] = 34383] = "DEPTH_CLAMP_EXT";
  GLEnum2[GLEnum2["FIRST_VERTEX_CONVENTION_WEBGL"] = 36429] = "FIRST_VERTEX_CONVENTION_WEBGL";
  GLEnum2[GLEnum2["LAST_VERTEX_CONVENTION_WEBGL"] = 36430] = "LAST_VERTEX_CONVENTION_WEBGL";
  GLEnum2[GLEnum2["PROVOKING_VERTEX_WEBL"] = 36431] = "PROVOKING_VERTEX_WEBL";
  GLEnum2[GLEnum2["POLYGON_MODE_WEBGL"] = 2880] = "POLYGON_MODE_WEBGL";
  GLEnum2[GLEnum2["POLYGON_OFFSET_LINE_WEBGL"] = 10754] = "POLYGON_OFFSET_LINE_WEBGL";
  GLEnum2[GLEnum2["LINE_WEBGL"] = 6913] = "LINE_WEBGL";
  GLEnum2[GLEnum2["FILL_WEBGL"] = 6914] = "FILL_WEBGL";
  GLEnum2[GLEnum2["MAX_CLIP_DISTANCES_WEBGL"] = 3378] = "MAX_CLIP_DISTANCES_WEBGL";
  GLEnum2[GLEnum2["MAX_CULL_DISTANCES_WEBGL"] = 33529] = "MAX_CULL_DISTANCES_WEBGL";
  GLEnum2[GLEnum2["MAX_COMBINED_CLIP_AND_CULL_DISTANCES_WEBGL"] = 33530] = "MAX_COMBINED_CLIP_AND_CULL_DISTANCES_WEBGL";
  GLEnum2[GLEnum2["CLIP_DISTANCE0_WEBGL"] = 12288] = "CLIP_DISTANCE0_WEBGL";
  GLEnum2[GLEnum2["CLIP_DISTANCE1_WEBGL"] = 12289] = "CLIP_DISTANCE1_WEBGL";
  GLEnum2[GLEnum2["CLIP_DISTANCE2_WEBGL"] = 12290] = "CLIP_DISTANCE2_WEBGL";
  GLEnum2[GLEnum2["CLIP_DISTANCE3_WEBGL"] = 12291] = "CLIP_DISTANCE3_WEBGL";
  GLEnum2[GLEnum2["CLIP_DISTANCE4_WEBGL"] = 12292] = "CLIP_DISTANCE4_WEBGL";
  GLEnum2[GLEnum2["CLIP_DISTANCE5_WEBGL"] = 12293] = "CLIP_DISTANCE5_WEBGL";
  GLEnum2[GLEnum2["CLIP_DISTANCE6_WEBGL"] = 12294] = "CLIP_DISTANCE6_WEBGL";
  GLEnum2[GLEnum2["CLIP_DISTANCE7_WEBGL"] = 12295] = "CLIP_DISTANCE7_WEBGL";
  GLEnum2[GLEnum2["POLYGON_OFFSET_CLAMP_EXT"] = 36379] = "POLYGON_OFFSET_CLAMP_EXT";
  GLEnum2[GLEnum2["LOWER_LEFT_EXT"] = 36001] = "LOWER_LEFT_EXT";
  GLEnum2[GLEnum2["UPPER_LEFT_EXT"] = 36002] = "UPPER_LEFT_EXT";
  GLEnum2[GLEnum2["NEGATIVE_ONE_TO_ONE_EXT"] = 37726] = "NEGATIVE_ONE_TO_ONE_EXT";
  GLEnum2[GLEnum2["ZERO_TO_ONE_EXT"] = 37727] = "ZERO_TO_ONE_EXT";
  GLEnum2[GLEnum2["CLIP_ORIGIN_EXT"] = 37724] = "CLIP_ORIGIN_EXT";
  GLEnum2[GLEnum2["CLIP_DEPTH_MODE_EXT"] = 37725] = "CLIP_DEPTH_MODE_EXT";
  GLEnum2[GLEnum2["SRC1_COLOR_WEBGL"] = 35065] = "SRC1_COLOR_WEBGL";
  GLEnum2[GLEnum2["SRC1_ALPHA_WEBGL"] = 34185] = "SRC1_ALPHA_WEBGL";
  GLEnum2[GLEnum2["ONE_MINUS_SRC1_COLOR_WEBGL"] = 35066] = "ONE_MINUS_SRC1_COLOR_WEBGL";
  GLEnum2[GLEnum2["ONE_MINUS_SRC1_ALPHA_WEBGL"] = 35067] = "ONE_MINUS_SRC1_ALPHA_WEBGL";
  GLEnum2[GLEnum2["MAX_DUAL_SOURCE_DRAW_BUFFERS_WEBGL"] = 35068] = "MAX_DUAL_SOURCE_DRAW_BUFFERS_WEBGL";
  GLEnum2[GLEnum2["MIRROR_CLAMP_TO_EDGE_EXT"] = 34627] = "MIRROR_CLAMP_TO_EDGE_EXT";
})(GLEnum || (GLEnum = {}));

// .yarn/__virtual__/@luma.gl-webgl-virtual-decc58d7ee/4/.yarn/berry/cache/@luma.gl-webgl-npm-9.1.9-e2e597afc9-10c0.zip/node_modules/@luma.gl/webgl/dist/context/parameters/webgl-parameter-tables.js
var GL_PARAMETER_DEFAULTS = {
  [3042]: false,
  [32773]: new Float32Array([0, 0, 0, 0]),
  [32777]: 32774,
  [34877]: 32774,
  [32969]: 1,
  [32968]: 0,
  [32971]: 1,
  [32970]: 0,
  [3106]: new Float32Array([0, 0, 0, 0]),
  // TBD
  [3107]: [true, true, true, true],
  [2884]: false,
  [2885]: 1029,
  [2929]: false,
  [2931]: 1,
  [2932]: 513,
  [2928]: new Float32Array([0, 1]),
  // TBD
  [2930]: true,
  [3024]: true,
  [35725]: null,
  // FRAMEBUFFER_BINDING and DRAW_FRAMEBUFFER_BINDING(WebGL2) refer same state.
  [36006]: null,
  [36007]: null,
  [34229]: null,
  [34964]: null,
  [2886]: 2305,
  [33170]: 4352,
  [2849]: 1,
  [32823]: false,
  [32824]: 0,
  [10752]: 0,
  [32926]: false,
  [32928]: false,
  [32938]: 1,
  [32939]: false,
  [3089]: false,
  // Note: Dynamic value. If scissor test enabled we expect users to set correct scissor box
  [3088]: new Int32Array([0, 0, 1024, 1024]),
  [2960]: false,
  [2961]: 0,
  [2968]: 4294967295,
  [36005]: 4294967295,
  [2962]: 519,
  [2967]: 0,
  [2963]: 4294967295,
  [34816]: 519,
  [36003]: 0,
  [36004]: 4294967295,
  [2964]: 7680,
  [2965]: 7680,
  [2966]: 7680,
  [34817]: 7680,
  [34818]: 7680,
  [34819]: 7680,
  // Dynamic value: We use [0, 0, 1024, 1024] as default, but usually this is updated in each frame.
  [2978]: [0, 0, 1024, 1024],
  [36389]: null,
  [36662]: null,
  [36663]: null,
  [35053]: null,
  [35055]: null,
  [35723]: 4352,
  [36010]: null,
  [35977]: false,
  [3333]: 4,
  [3317]: 4,
  [37440]: false,
  [37441]: false,
  [37443]: 37444,
  [3330]: 0,
  [3332]: 0,
  [3331]: 0,
  [3314]: 0,
  [32878]: 0,
  [3316]: 0,
  [3315]: 0,
  [32877]: 0
};
var enable = (gl, value, key) => value ? gl.enable(key) : gl.disable(key);
var hint = (gl, value, key) => gl.hint(key, value);
var pixelStorei = (gl, value, key) => gl.pixelStorei(key, value);
var bindFramebuffer = (gl, value, key) => {
  const target2 = key === 36006 ? 36009 : 36008;
  return gl.bindFramebuffer(target2, value);
};
var bindBuffer = (gl, value, key) => {
  const bindingMap = {
    [34964]: 34962,
    [36662]: 36662,
    [36663]: 36663,
    [35053]: 35051,
    [35055]: 35052
  };
  const glTarget = bindingMap[key];
  gl.bindBuffer(glTarget, value);
};
function isArray2(array) {
  return Array.isArray(array) || ArrayBuffer.isView(array) && !(array instanceof DataView);
}
var GL_PARAMETER_SETTERS = {
  [3042]: enable,
  [32773]: (gl, value) => gl.blendColor(...value),
  [32777]: "blendEquation",
  [34877]: "blendEquation",
  [32969]: "blendFunc",
  [32968]: "blendFunc",
  [32971]: "blendFunc",
  [32970]: "blendFunc",
  [3106]: (gl, value) => gl.clearColor(...value),
  [3107]: (gl, value) => gl.colorMask(...value),
  [2884]: enable,
  [2885]: (gl, value) => gl.cullFace(value),
  [2929]: enable,
  [2931]: (gl, value) => gl.clearDepth(value),
  [2932]: (gl, value) => gl.depthFunc(value),
  [2928]: (gl, value) => gl.depthRange(...value),
  [2930]: (gl, value) => gl.depthMask(value),
  [3024]: enable,
  [35723]: hint,
  [35725]: (gl, value) => gl.useProgram(value),
  [36007]: (gl, value) => gl.bindRenderbuffer(36161, value),
  [36389]: (gl, value) => {
    var _a3;
    return (_a3 = gl.bindTransformFeedback) == null ? void 0 : _a3.call(gl, 36386, value);
  },
  [34229]: (gl, value) => gl.bindVertexArray(value),
  // NOTE: FRAMEBUFFER_BINDING and DRAW_FRAMEBUFFER_BINDING(WebGL2) refer same state.
  [36006]: bindFramebuffer,
  [36010]: bindFramebuffer,
  // Buffers
  [34964]: bindBuffer,
  [36662]: bindBuffer,
  [36663]: bindBuffer,
  [35053]: bindBuffer,
  [35055]: bindBuffer,
  [2886]: (gl, value) => gl.frontFace(value),
  [33170]: hint,
  [2849]: (gl, value) => gl.lineWidth(value),
  [32823]: enable,
  [32824]: "polygonOffset",
  [10752]: "polygonOffset",
  [35977]: enable,
  [32926]: enable,
  [32928]: enable,
  [32938]: "sampleCoverage",
  [32939]: "sampleCoverage",
  [3089]: enable,
  [3088]: (gl, value) => gl.scissor(...value),
  [2960]: enable,
  [2961]: (gl, value) => gl.clearStencil(value),
  [2968]: (gl, value) => gl.stencilMaskSeparate(1028, value),
  [36005]: (gl, value) => gl.stencilMaskSeparate(1029, value),
  [2962]: "stencilFuncFront",
  [2967]: "stencilFuncFront",
  [2963]: "stencilFuncFront",
  [34816]: "stencilFuncBack",
  [36003]: "stencilFuncBack",
  [36004]: "stencilFuncBack",
  [2964]: "stencilOpFront",
  [2965]: "stencilOpFront",
  [2966]: "stencilOpFront",
  [34817]: "stencilOpBack",
  [34818]: "stencilOpBack",
  [34819]: "stencilOpBack",
  [2978]: (gl, value) => gl.viewport(...value),
  // WEBGL2 EXTENSIONS
  // EXT_depth_clamp https://registry.khronos.org/webgl/extensions/EXT_depth_clamp/
  [34383]: enable,
  // WEBGL_provoking_vertex https://registry.khronos.org/webgl/extensions/WEBGL_provoking_vertex/
  // [GL.PROVOKING_VERTEX_WEBL]: TODO - extension function needed
  // WEBGL_polygon_mode https://registry.khronos.org/webgl/extensions/WEBGL_polygon_mode/
  // POLYGON_MODE_WEBGL  TODO - extension function needed
  [10754]: enable,
  // WEBGL_clip_cull_distance https://registry.khronos.org/webgl/extensions/WEBGL_clip_cull_distance/
  [12288]: enable,
  [12289]: enable,
  [12290]: enable,
  [12291]: enable,
  [12292]: enable,
  [12293]: enable,
  [12294]: enable,
  [12295]: enable,
  // PIXEL PACK/UNPACK MODES
  [3333]: pixelStorei,
  [3317]: pixelStorei,
  [37440]: pixelStorei,
  [37441]: pixelStorei,
  [37443]: pixelStorei,
  [3330]: pixelStorei,
  [3332]: pixelStorei,
  [3331]: pixelStorei,
  [3314]: pixelStorei,
  [32878]: pixelStorei,
  [3316]: pixelStorei,
  [3315]: pixelStorei,
  [32877]: pixelStorei,
  // Function-style setters
  framebuffer: (gl, framebuffer) => {
    const handle = framebuffer && "handle" in framebuffer ? framebuffer.handle : framebuffer;
    return gl.bindFramebuffer(36160, handle);
  },
  blend: (gl, value) => value ? gl.enable(3042) : gl.disable(3042),
  blendColor: (gl, value) => gl.blendColor(...value),
  blendEquation: (gl, args) => {
    const separateModes = typeof args === "number" ? [args, args] : args;
    gl.blendEquationSeparate(...separateModes);
  },
  blendFunc: (gl, args) => {
    const separateFuncs = (args == null ? void 0 : args.length) === 2 ? [...args, ...args] : args;
    gl.blendFuncSeparate(...separateFuncs);
  },
  clearColor: (gl, value) => gl.clearColor(...value),
  clearDepth: (gl, value) => gl.clearDepth(value),
  clearStencil: (gl, value) => gl.clearStencil(value),
  colorMask: (gl, value) => gl.colorMask(...value),
  cull: (gl, value) => value ? gl.enable(2884) : gl.disable(2884),
  cullFace: (gl, value) => gl.cullFace(value),
  depthTest: (gl, value) => value ? gl.enable(2929) : gl.disable(2929),
  depthFunc: (gl, value) => gl.depthFunc(value),
  depthMask: (gl, value) => gl.depthMask(value),
  depthRange: (gl, value) => gl.depthRange(...value),
  dither: (gl, value) => value ? gl.enable(3024) : gl.disable(3024),
  derivativeHint: (gl, value) => {
    gl.hint(35723, value);
  },
  frontFace: (gl, value) => gl.frontFace(value),
  mipmapHint: (gl, value) => gl.hint(33170, value),
  lineWidth: (gl, value) => gl.lineWidth(value),
  polygonOffsetFill: (gl, value) => value ? gl.enable(32823) : gl.disable(32823),
  polygonOffset: (gl, value) => gl.polygonOffset(...value),
  sampleCoverage: (gl, value) => gl.sampleCoverage(value[0], value[1] || false),
  scissorTest: (gl, value) => value ? gl.enable(3089) : gl.disable(3089),
  scissor: (gl, value) => gl.scissor(...value),
  stencilTest: (gl, value) => value ? gl.enable(2960) : gl.disable(2960),
  stencilMask: (gl, value) => {
    value = isArray2(value) ? value : [value, value];
    const [mask, backMask] = value;
    gl.stencilMaskSeparate(1028, mask);
    gl.stencilMaskSeparate(1029, backMask);
  },
  stencilFunc: (gl, args) => {
    args = isArray2(args) && args.length === 3 ? [...args, ...args] : args;
    const [func, ref, mask, backFunc, backRef, backMask] = args;
    gl.stencilFuncSeparate(1028, func, ref, mask);
    gl.stencilFuncSeparate(1029, backFunc, backRef, backMask);
  },
  stencilOp: (gl, args) => {
    args = isArray2(args) && args.length === 3 ? [...args, ...args] : args;
    const [sfail, dpfail, dppass, backSfail, backDpfail, backDppass] = args;
    gl.stencilOpSeparate(1028, sfail, dpfail, dppass);
    gl.stencilOpSeparate(1029, backSfail, backDpfail, backDppass);
  },
  viewport: (gl, value) => gl.viewport(...value)
};
function getValue(glEnum, values, cache2) {
  return values[glEnum] !== void 0 ? values[glEnum] : cache2[glEnum];
}
var GL_COMPOSITE_PARAMETER_SETTERS = {
  blendEquation: (gl, values, cache2) => gl.blendEquationSeparate(getValue(32777, values, cache2), getValue(34877, values, cache2)),
  blendFunc: (gl, values, cache2) => gl.blendFuncSeparate(getValue(32969, values, cache2), getValue(32968, values, cache2), getValue(32971, values, cache2), getValue(32970, values, cache2)),
  polygonOffset: (gl, values, cache2) => gl.polygonOffset(getValue(32824, values, cache2), getValue(10752, values, cache2)),
  sampleCoverage: (gl, values, cache2) => gl.sampleCoverage(getValue(32938, values, cache2), getValue(32939, values, cache2)),
  stencilFuncFront: (gl, values, cache2) => gl.stencilFuncSeparate(1028, getValue(2962, values, cache2), getValue(2967, values, cache2), getValue(2963, values, cache2)),
  stencilFuncBack: (gl, values, cache2) => gl.stencilFuncSeparate(1029, getValue(34816, values, cache2), getValue(36003, values, cache2), getValue(36004, values, cache2)),
  stencilOpFront: (gl, values, cache2) => gl.stencilOpSeparate(1028, getValue(2964, values, cache2), getValue(2965, values, cache2), getValue(2966, values, cache2)),
  stencilOpBack: (gl, values, cache2) => gl.stencilOpSeparate(1029, getValue(34817, values, cache2), getValue(34818, values, cache2), getValue(34819, values, cache2))
};
var GL_HOOKED_SETTERS = {
  // GENERIC SETTERS
  enable: (update, capability) => update({
    [capability]: true
  }),
  disable: (update, capability) => update({
    [capability]: false
  }),
  pixelStorei: (update, pname, value) => update({
    [pname]: value
  }),
  hint: (update, pname, value) => update({
    [pname]: value
  }),
  // SPECIFIC SETTERS
  useProgram: (update, value) => update({
    [35725]: value
  }),
  bindRenderbuffer: (update, target2, value) => update({
    [36007]: value
  }),
  bindTransformFeedback: (update, target2, value) => update({
    [36389]: value
  }),
  bindVertexArray: (update, value) => update({
    [34229]: value
  }),
  bindFramebuffer: (update, target2, framebuffer) => {
    switch (target2) {
      case 36160:
        return update({
          [36006]: framebuffer,
          [36010]: framebuffer
        });
      case 36009:
        return update({ [36006]: framebuffer });
      case 36008:
        return update({ [36010]: framebuffer });
      default:
        return null;
    }
  },
  bindBuffer: (update, target2, buffer2) => {
    const pname = {
      [34962]: [34964],
      [36662]: [36662],
      [36663]: [36663],
      [35051]: [35053],
      [35052]: [35055]
    }[target2];
    if (pname) {
      return update({ [pname]: buffer2 });
    }
    return { valueChanged: true };
  },
  blendColor: (update, r3, g3, b2, a3) => update({
    [32773]: new Float32Array([r3, g3, b2, a3])
  }),
  blendEquation: (update, mode) => update({
    [32777]: mode,
    [34877]: mode
  }),
  blendEquationSeparate: (update, modeRGB, modeAlpha) => update({
    [32777]: modeRGB,
    [34877]: modeAlpha
  }),
  blendFunc: (update, src, dst) => update({
    [32969]: src,
    [32968]: dst,
    [32971]: src,
    [32970]: dst
  }),
  blendFuncSeparate: (update, srcRGB, dstRGB, srcAlpha, dstAlpha) => update({
    [32969]: srcRGB,
    [32968]: dstRGB,
    [32971]: srcAlpha,
    [32970]: dstAlpha
  }),
  clearColor: (update, r3, g3, b2, a3) => update({
    [3106]: new Float32Array([r3, g3, b2, a3])
  }),
  clearDepth: (update, depth) => update({
    [2931]: depth
  }),
  clearStencil: (update, s3) => update({
    [2961]: s3
  }),
  colorMask: (update, r3, g3, b2, a3) => update({
    [3107]: [r3, g3, b2, a3]
  }),
  cullFace: (update, mode) => update({
    [2885]: mode
  }),
  depthFunc: (update, func) => update({
    [2932]: func
  }),
  depthRange: (update, zNear, zFar) => update({
    [2928]: new Float32Array([zNear, zFar])
  }),
  depthMask: (update, mask) => update({
    [2930]: mask
  }),
  frontFace: (update, face) => update({
    [2886]: face
  }),
  lineWidth: (update, width) => update({
    [2849]: width
  }),
  polygonOffset: (update, factor, units) => update({
    [32824]: factor,
    [10752]: units
  }),
  sampleCoverage: (update, value, invert4) => update({
    [32938]: value,
    [32939]: invert4
  }),
  scissor: (update, x3, y3, width, height) => update({
    [3088]: new Int32Array([x3, y3, width, height])
  }),
  stencilMask: (update, mask) => update({
    [2968]: mask,
    [36005]: mask
  }),
  stencilMaskSeparate: (update, face, mask) => update({
    [face === 1028 ? 2968 : 36005]: mask
  }),
  stencilFunc: (update, func, ref, mask) => update({
    [2962]: func,
    [2967]: ref,
    [2963]: mask,
    [34816]: func,
    [36003]: ref,
    [36004]: mask
  }),
  stencilFuncSeparate: (update, face, func, ref, mask) => update({
    [face === 1028 ? 2962 : 34816]: func,
    [face === 1028 ? 2967 : 36003]: ref,
    [face === 1028 ? 2963 : 36004]: mask
  }),
  stencilOp: (update, fail, zfail, zpass) => update({
    [2964]: fail,
    [2965]: zfail,
    [2966]: zpass,
    [34817]: fail,
    [34818]: zfail,
    [34819]: zpass
  }),
  stencilOpSeparate: (update, face, fail, zfail, zpass) => update({
    [face === 1028 ? 2964 : 34817]: fail,
    [face === 1028 ? 2965 : 34818]: zfail,
    [face === 1028 ? 2966 : 34819]: zpass
  }),
  viewport: (update, x3, y3, width, height) => update({
    [2978]: [x3, y3, width, height]
  })
};
var isEnabled = (gl, key) => gl.isEnabled(key);
var GL_PARAMETER_GETTERS = {
  [3042]: isEnabled,
  [2884]: isEnabled,
  [2929]: isEnabled,
  [3024]: isEnabled,
  [32823]: isEnabled,
  [32926]: isEnabled,
  [32928]: isEnabled,
  [3089]: isEnabled,
  [2960]: isEnabled,
  [35977]: isEnabled
};
var NON_CACHE_PARAMETERS = /* @__PURE__ */ new Set([
  34016,
  36388,
  36387,
  35983,
  35368,
  34965,
  35739,
  35738,
  3074,
  34853,
  34854,
  34855,
  34856,
  34857,
  34858,
  34859,
  34860,
  34861,
  34862,
  34863,
  34864,
  34865,
  34866,
  34867,
  34868,
  35097,
  32873,
  35869,
  32874,
  34068
]);

// .yarn/__virtual__/@luma.gl-webgl-virtual-decc58d7ee/4/.yarn/berry/cache/@luma.gl-webgl-npm-9.1.9-e2e597afc9-10c0.zip/node_modules/@luma.gl/webgl/dist/context/parameters/unified-parameter-api.js
function setGLParameters(gl, parameters) {
  if (isObjectEmpty2(parameters)) {
    return;
  }
  const compositeSetters = {};
  for (const key in parameters) {
    const glConstant = Number(key);
    const setter = GL_PARAMETER_SETTERS[key];
    if (setter) {
      if (typeof setter === "string") {
        compositeSetters[setter] = true;
      } else {
        setter(gl, parameters[key], glConstant);
      }
    }
  }
  const cache2 = gl.state && gl.state.cache;
  if (cache2) {
    for (const key in compositeSetters) {
      const compositeSetter = GL_COMPOSITE_PARAMETER_SETTERS[key];
      compositeSetter(gl, parameters, cache2);
    }
  }
}
function getGLParameters(gl, parameters = GL_PARAMETER_DEFAULTS) {
  if (typeof parameters === "number") {
    const key = parameters;
    const getter = GL_PARAMETER_GETTERS[key];
    return getter ? getter(gl, key) : gl.getParameter(key);
  }
  const parameterKeys = Array.isArray(parameters) ? parameters : Object.keys(parameters);
  const state = {};
  for (const key of parameterKeys) {
    const getter = GL_PARAMETER_GETTERS[key];
    state[key] = getter ? getter(gl, Number(key)) : gl.getParameter(Number(key));
  }
  return state;
}
function resetGLParameters(gl) {
  setGLParameters(gl, GL_PARAMETER_DEFAULTS);
}
function isObjectEmpty2(object) {
  for (const key in object) {
    return false;
  }
  return true;
}

// .yarn/__virtual__/@luma.gl-webgl-virtual-decc58d7ee/4/.yarn/berry/cache/@luma.gl-webgl-npm-9.1.9-e2e597afc9-10c0.zip/node_modules/@luma.gl/webgl/dist/context/state-tracker/deep-array-equal.js
function deepArrayEqual(x3, y3) {
  if (x3 === y3) {
    return true;
  }
  const isArrayX = Array.isArray(x3) || ArrayBuffer.isView(x3);
  const isArrayY = Array.isArray(y3) || ArrayBuffer.isView(y3);
  if (isArrayX && isArrayY && x3.length === y3.length) {
    for (let i4 = 0; i4 < x3.length; ++i4) {
      if (x3[i4] !== y3[i4]) {
        return false;
      }
    }
    return true;
  }
  return false;
}

// .yarn/__virtual__/@luma.gl-webgl-virtual-decc58d7ee/4/.yarn/berry/cache/@luma.gl-webgl-npm-9.1.9-e2e597afc9-10c0.zip/node_modules/@luma.gl/webgl/dist/context/state-tracker/webgl-state-tracker.js
var WebGLStateTracker = class {
  constructor(gl, props) {
    __publicField(this, "gl");
    __publicField(this, "program", null);
    __publicField(this, "stateStack", []);
    __publicField(this, "enable", true);
    __publicField(this, "cache", null);
    __publicField(this, "log");
    __publicField(this, "initialized", false);
    this.gl = gl;
    this.log = (props == null ? void 0 : props.log) || (() => {
    });
    this._updateCache = this._updateCache.bind(this);
    Object.seal(this);
  }
  static get(gl) {
    return gl.state;
  }
  push(values = {}) {
    this.stateStack.push({});
  }
  pop() {
    const oldValues = this.stateStack[this.stateStack.length - 1];
    setGLParameters(this.gl, oldValues);
    this.stateStack.pop();
  }
  /**
   * Initialize WebGL state caching on a context
   * can be called multiple times to enable/disable
   *
   * @note After calling this function, context state will be cached
   * .push() and .pop() will be available for saving,
   * temporarily modifying, and then restoring state.
   */
  trackState(gl, options) {
    this.cache = options.copyState ? getGLParameters(gl) : Object.assign({}, GL_PARAMETER_DEFAULTS);
    if (this.initialized) {
      throw new Error("WebGLStateTracker");
    }
    this.initialized = true;
    this.gl.state = this;
    installProgramSpy(gl);
    for (const key in GL_HOOKED_SETTERS) {
      const setter = GL_HOOKED_SETTERS[key];
      installSetterSpy(gl, key, setter);
    }
    installGetterOverride(gl, "getParameter");
    installGetterOverride(gl, "isEnabled");
  }
  /**
  // interceptor for context set functions - update our cache and our stack
  // values (Object) - the key values for this setter
   * @param values
   * @returns
   */
  _updateCache(values) {
    let valueChanged = false;
    let oldValue;
    const oldValues = this.stateStack.length > 0 ? this.stateStack[this.stateStack.length - 1] : null;
    for (const key in values) {
      const value = values[key];
      const cached = this.cache[key];
      if (!deepArrayEqual(value, cached)) {
        valueChanged = true;
        oldValue = cached;
        if (oldValues && !(key in oldValues)) {
          oldValues[key] = cached;
        }
        this.cache[key] = value;
      }
    }
    return { valueChanged, oldValue };
  }
};
function installGetterOverride(gl, functionName) {
  const originalGetterFunc = gl[functionName].bind(gl);
  gl[functionName] = function get(pname) {
    if (pname === void 0 || NON_CACHE_PARAMETERS.has(pname)) {
      return originalGetterFunc(pname);
    }
    const glState = WebGLStateTracker.get(gl);
    if (!(pname in glState.cache)) {
      glState.cache[pname] = originalGetterFunc(pname);
    }
    return glState.enable ? (
      // Call the getter the params so that it can e.g. serve from a cache
      glState.cache[pname]
    ) : (
      // Optionally call the original function to do a "hard" query from the WebGL2RenderingContext
      originalGetterFunc(pname)
    );
  };
  Object.defineProperty(gl[functionName], "name", {
    value: `${functionName}-from-cache`,
    configurable: false
  });
}
function installSetterSpy(gl, functionName, setter) {
  if (!gl[functionName]) {
    return;
  }
  const originalSetterFunc = gl[functionName].bind(gl);
  gl[functionName] = function set7(...params) {
    const glState = WebGLStateTracker.get(gl);
    const { valueChanged, oldValue } = setter(glState._updateCache, ...params);
    if (valueChanged) {
      originalSetterFunc(...params);
    }
    return oldValue;
  };
  Object.defineProperty(gl[functionName], "name", {
    value: `${functionName}-to-cache`,
    configurable: false
  });
}
function installProgramSpy(gl) {
  const originalUseProgram = gl.useProgram.bind(gl);
  gl.useProgram = function useProgramLuma(handle) {
    const glState = WebGLStateTracker.get(gl);
    if (glState.program !== handle) {
      originalUseProgram(handle);
      glState.program = handle;
    }
  };
}

// .yarn/__virtual__/@luma.gl-webgl-virtual-decc58d7ee/4/.yarn/berry/cache/@luma.gl-webgl-npm-9.1.9-e2e597afc9-10c0.zip/node_modules/@luma.gl/webgl/dist/context/helpers/create-browser-context.js
function createBrowserContext(canvas2, props, webglContextAttributes) {
  let errorMessage = "";
  const webglProps = {
    preserveDrawingBuffer: true,
    // failIfMajorPerformanceCaveat: true,
    ...webglContextAttributes
  };
  let gl = null;
  gl || (gl = canvas2.getContext("webgl2", webglProps));
  if (webglProps.failIfMajorPerformanceCaveat) {
    errorMessage || (errorMessage = "Only software GPU is available. Set `failIfMajorPerformanceCaveat: false` to allow.");
  }
  if (!gl && !webglContextAttributes.failIfMajorPerformanceCaveat) {
    webglProps.failIfMajorPerformanceCaveat = false;
    gl = canvas2.getContext("webgl2", webglProps);
    gl.luma || (gl.luma = {});
    gl.luma.softwareRenderer = true;
  }
  if (!gl) {
    gl = canvas2.getContext("webgl", {});
    if (gl) {
      gl = null;
      errorMessage || (errorMessage = "Your browser only supports WebGL1");
    }
  }
  if (!gl) {
    errorMessage || (errorMessage = "Your browser does not support WebGL");
    throw new Error(`Failed to create WebGL context: ${errorMessage}`);
  }
  const { onContextLost, onContextRestored } = props;
  canvas2.addEventListener("webglcontextlost", (event) => onContextLost(event), false);
  canvas2.addEventListener("webglcontextrestored", (event) => onContextRestored(event), false);
  gl.luma || (gl.luma = {});
  return gl;
}

// .yarn/__virtual__/@luma.gl-webgl-virtual-decc58d7ee/4/.yarn/berry/cache/@luma.gl-webgl-npm-9.1.9-e2e597afc9-10c0.zip/node_modules/@luma.gl/webgl/dist/context/helpers/webgl-extensions.js
function getWebGLExtension(gl, name2, extensions) {
  if (extensions[name2] === void 0) {
    extensions[name2] = gl.getExtension(name2) || null;
  }
  return extensions[name2];
}

// .yarn/__virtual__/@luma.gl-webgl-virtual-decc58d7ee/4/.yarn/berry/cache/@luma.gl-webgl-npm-9.1.9-e2e597afc9-10c0.zip/node_modules/@luma.gl/webgl/dist/adapter/device-helpers/webgl-device-info.js
function getDeviceInfo(gl, extensions) {
  const vendorMasked = gl.getParameter(7936);
  const rendererMasked = gl.getParameter(7937);
  getWebGLExtension(gl, "WEBGL_debug_renderer_info", extensions);
  const ext = extensions.WEBGL_debug_renderer_info;
  const vendorUnmasked = gl.getParameter(ext ? ext.UNMASKED_VENDOR_WEBGL : 7936);
  const rendererUnmasked = gl.getParameter(ext ? ext.UNMASKED_RENDERER_WEBGL : 7937);
  const vendor = vendorUnmasked || vendorMasked;
  const renderer = rendererUnmasked || rendererMasked;
  const version2 = gl.getParameter(7938);
  const gpu = identifyGPUVendor(vendor, renderer);
  const gpuBackend = identifyGPUBackend(vendor, renderer);
  const gpuType = identifyGPUType(vendor, renderer);
  const shadingLanguage = "glsl";
  const shadingLanguageVersion = 300;
  return {
    type: "webgl",
    gpu,
    gpuType,
    gpuBackend,
    vendor,
    renderer,
    version: version2,
    shadingLanguage,
    shadingLanguageVersion
  };
}
function identifyGPUVendor(vendor, renderer) {
  if (/NVIDIA/i.exec(vendor) || /NVIDIA/i.exec(renderer)) {
    return "nvidia";
  }
  if (/INTEL/i.exec(vendor) || /INTEL/i.exec(renderer)) {
    return "intel";
  }
  if (/Apple/i.exec(vendor) || /Apple/i.exec(renderer)) {
    return "apple";
  }
  if (/AMD/i.exec(vendor) || /AMD/i.exec(renderer) || /ATI/i.exec(vendor) || /ATI/i.exec(renderer)) {
    return "amd";
  }
  if (/SwiftShader/i.exec(vendor) || /SwiftShader/i.exec(renderer)) {
    return "software";
  }
  return "unknown";
}
function identifyGPUBackend(vendor, renderer) {
  if (/Metal/i.exec(vendor) || /Metal/i.exec(renderer)) {
    return "metal";
  }
  if (/ANGLE/i.exec(vendor) || /ANGLE/i.exec(renderer)) {
    return "opengl";
  }
  return "unknown";
}
function identifyGPUType(vendor, renderer) {
  if (/SwiftShader/i.exec(vendor) || /SwiftShader/i.exec(renderer)) {
    return "cpu";
  }
  const gpuVendor = identifyGPUVendor(vendor, renderer);
  switch (gpuVendor) {
    case "intel":
      return "integrated";
    case "software":
      return "cpu";
    case "unknown":
      return "unknown";
    default:
      return "discrete";
  }
}

// .yarn/__virtual__/@luma.gl-webgl-virtual-decc58d7ee/4/.yarn/berry/cache/@luma.gl-webgl-npm-9.1.9-e2e597afc9-10c0.zip/node_modules/@luma.gl/webgl/dist/adapter/converters/vertex-formats.js
function getGLFromVertexType(dataType) {
  switch (dataType) {
    case "uint8":
      return 5121;
    case "sint8":
      return 5120;
    case "unorm8":
      return 5121;
    case "snorm8":
      return 5120;
    case "uint16":
      return 5123;
    case "sint16":
      return 5122;
    case "unorm16":
      return 5123;
    case "snorm16":
      return 5122;
    case "uint32":
      return 5125;
    case "sint32":
      return 5124;
    // WebGPU does not support normalized 32 bit integer attributes
    // case 'unorm32': return GL.UNSIGNED_INT;
    // case 'snorm32': return GL.INT;
    case "float16":
      return 5131;
    case "float32":
      return 5126;
  }
  throw new Error(String(dataType));
}

// .yarn/__virtual__/@luma.gl-webgl-virtual-decc58d7ee/4/.yarn/berry/cache/@luma.gl-webgl-npm-9.1.9-e2e597afc9-10c0.zip/node_modules/@luma.gl/webgl/dist/adapter/converters/webgl-texture-table.js
var X_S3TC = "WEBGL_compressed_texture_s3tc";
var X_S3TC_SRGB = "WEBGL_compressed_texture_s3tc_srgb";
var X_RGTC = "EXT_texture_compression_rgtc";
var X_BPTC = "EXT_texture_compression_bptc";
var X_ETC2 = "WEBGL_compressed_texture_etc";
var X_ASTC = "WEBGL_compressed_texture_astc";
var X_ETC1 = "WEBGL_compressed_texture_etc1";
var X_PVRTC = "WEBGL_compressed_texture_pvrtc";
var X_ATC = "WEBGL_compressed_texture_atc";
var EXT_texture_norm16 = "EXT_texture_norm16";
var EXT_render_snorm = "EXT_render_snorm";
var EXT_color_buffer_float = "EXT_color_buffer_float";
var TEXTURE_FEATURES = {
  "float32-renderable-webgl": ["EXT_color_buffer_float"],
  "float16-renderable-webgl": ["EXT_color_buffer_half_float"],
  "rgb9e5ufloat-renderable-webgl": ["WEBGL_render_shared_exponent"],
  "snorm8-renderable-webgl": [EXT_render_snorm],
  "norm16-renderable-webgl": [EXT_texture_norm16],
  "snorm16-renderable-webgl": [EXT_texture_norm16, EXT_render_snorm],
  "float32-filterable": ["OES_texture_float_linear"],
  "float16-filterable-webgl": ["OES_texture_half_float_linear"],
  "texture-filterable-anisotropic-webgl": ["EXT_texture_filter_anisotropic"],
  "texture-blend-float-webgl": ["EXT_float_blend"],
  "texture-compression-bc": [X_S3TC, X_S3TC_SRGB, X_RGTC, X_BPTC],
  // 'texture-compression-bc3-srgb-webgl': [X_S3TC_SRGB],
  // 'texture-compression-bc3-webgl': [X_S3TC],
  "texture-compression-bc5-webgl": [X_RGTC],
  "texture-compression-bc7-webgl": [X_BPTC],
  "texture-compression-etc2": [X_ETC2],
  "texture-compression-astc": [X_ASTC],
  "texture-compression-etc1-webgl": [X_ETC1],
  "texture-compression-pvrtc-webgl": [X_PVRTC],
  "texture-compression-atc-webgl": [X_ATC]
};
function isTextureFeature(feature) {
  return feature in TEXTURE_FEATURES;
}
function checkTextureFeature(gl, feature, extensions) {
  const textureExtensions = TEXTURE_FEATURES[feature] || [];
  return textureExtensions.every((extension) => getWebGLExtension(gl, extension, extensions));
}
var WEBGL_TEXTURE_FORMATS = {
  // 8-bit formats
  "r8unorm": { gl: 33321, rb: true },
  "r8snorm": { gl: 36756 },
  "r8uint": { gl: 33330, rb: true },
  "r8sint": { gl: 33329, rb: true },
  // 16-bit formats
  "rg8unorm": { gl: 33323, rb: true },
  "rg8snorm": { gl: 36757 },
  "rg8uint": { gl: 33336, rb: true },
  "rg8sint": { gl: 33335, rb: true },
  "r16uint": { gl: 33332, rb: true },
  "r16sint": { gl: 33331, rb: true },
  "r16float": { gl: 33325, rb: true },
  "r16unorm-webgl": { gl: 33322, rb: true },
  "r16snorm-webgl": { gl: 36760 },
  // Packed 16-bit formats
  "rgba4unorm-webgl": { gl: 32854, rb: true },
  "rgb565unorm-webgl": { gl: 36194, rb: true },
  "rgb5a1unorm-webgl": { gl: 32855, rb: true },
  // 24-bit formats
  "rgb8unorm-webgl": { gl: 32849 },
  "rgb8snorm-webgl": { gl: 36758 },
  // 32-bit formats  
  "rgba8unorm": { gl: 32856 },
  "rgba8unorm-srgb": { gl: 35907 },
  "rgba8snorm": { gl: 36759 },
  "rgba8uint": { gl: 36220 },
  "rgba8sint": { gl: 36238 },
  // reverse colors, webgpu only
  "bgra8unorm": {},
  "bgra8unorm-srgb": {},
  "rg16uint": { gl: 33338 },
  "rg16sint": { gl: 33337 },
  "rg16float": { gl: 33327, rb: true },
  "rg16unorm-webgl": { gl: 33324 },
  "rg16snorm-webgl": { gl: 36761 },
  "r32uint": { gl: 33334, rb: true },
  "r32sint": { gl: 33333, rb: true },
  "r32float": { gl: 33326 },
  // Packed 32-bit formats
  "rgb9e5ufloat": { gl: 35901 },
  // , filter: true},
  "rg11b10ufloat": { gl: 35898, rb: true },
  "rgb10a2unorm": { gl: 32857, rb: true },
  "rgb10a2uint-webgl": { gl: 36975, rb: true },
  // 48-bit formats
  "rgb16unorm-webgl": { gl: 32852 },
  // rgb not renderable
  "rgb16snorm-webgl": { gl: 36762 },
  // rgb not renderable
  // 64-bit formats
  "rg32uint": { gl: 33340, rb: true },
  "rg32sint": { gl: 33339, rb: true },
  "rg32float": { gl: 33328, rb: true },
  "rgba16uint": { gl: 36214, rb: true },
  "rgba16sint": { gl: 36232, rb: true },
  "rgba16float": { gl: 34842 },
  "rgba16unorm-webgl": { gl: 32859, rb: true },
  "rgba16snorm-webgl": { gl: 36763 },
  // 96-bit formats (deprecated!)
  "rgb32float-webgl": { gl: 34837, x: EXT_color_buffer_float, dataFormat: 6407, types: [5126] },
  // 128-bit formats
  "rgba32uint": { gl: 36208, rb: true },
  "rgba32sint": { gl: 36226, rb: true },
  "rgba32float": { gl: 34836, rb: true },
  // Depth and stencil formats
  "stencil8": { gl: 36168, rb: true },
  // 8 stencil bits
  "depth16unorm": { gl: 33189, dataFormat: 6402, types: [5123], rb: true },
  // 16 depth bits
  "depth24plus": { gl: 33190, dataFormat: 6402, types: [5125] },
  "depth32float": { gl: 36012, dataFormat: 6402, types: [5126], rb: true },
  // The depth component of the "depth24plus" and "depth24plus-stencil8" formats may be implemented as either a 24-bit depth value or a "depth32float" value.
  "depth24plus-stencil8": { gl: 35056, rb: true, depthTexture: true, dataFormat: 34041, types: [34042] },
  // "depth32float-stencil8" feature - TODO below is render buffer only?
  "depth32float-stencil8": { gl: 36013, dataFormat: 34041, types: [36269], rb: true },
  // BC compressed formats: check device.features.has("texture-compression-bc");
  "bc1-rgb-unorm-webgl": { gl: 33776, x: X_S3TC },
  "bc1-rgb-unorm-srgb-webgl": { gl: 35916, x: X_S3TC_SRGB },
  "bc1-rgba-unorm": { gl: 33777, x: X_S3TC },
  "bc1-rgba-unorm-srgb": { gl: 35916, x: X_S3TC_SRGB },
  "bc2-rgba-unorm": { gl: 33778, x: X_S3TC },
  "bc2-rgba-unorm-srgb": { gl: 35918, x: X_S3TC_SRGB },
  "bc3-rgba-unorm": { gl: 33779, x: X_S3TC },
  "bc3-rgba-unorm-srgb": { gl: 35919, x: X_S3TC_SRGB },
  "bc4-r-unorm": { gl: 36283, x: X_RGTC },
  "bc4-r-snorm": { gl: 36284, x: X_RGTC },
  "bc5-rg-unorm": { gl: 36285, x: X_RGTC },
  "bc5-rg-snorm": { gl: 36286, x: X_RGTC },
  "bc6h-rgb-ufloat": { gl: 36495, x: X_BPTC },
  "bc6h-rgb-float": { gl: 36494, x: X_BPTC },
  "bc7-rgba-unorm": { gl: 36492, x: X_BPTC },
  "bc7-rgba-unorm-srgb": { gl: 36493, x: X_BPTC },
  // WEBGL_compressed_texture_etc: device.features.has("texture-compression-etc2")
  // Note: Supposedly guaranteed availability compressed formats in WebGL2, but through CPU decompression
  "etc2-rgb8unorm": { gl: 37492 },
  "etc2-rgb8unorm-srgb": { gl: 37494 },
  "etc2-rgb8a1unorm": { gl: 37496 },
  "etc2-rgb8a1unorm-srgb": { gl: 37497 },
  "etc2-rgba8unorm": { gl: 37493 },
  "etc2-rgba8unorm-srgb": { gl: 37495 },
  "eac-r11unorm": { gl: 37488 },
  "eac-r11snorm": { gl: 37489 },
  "eac-rg11unorm": { gl: 37490 },
  "eac-rg11snorm": { gl: 37491 },
  // X_ASTC compressed formats: device.features.has("texture-compression-astc")
  "astc-4x4-unorm": { gl: 37808 },
  "astc-4x4-unorm-srgb": { gl: 37840 },
  "astc-5x4-unorm": { gl: 37809 },
  "astc-5x4-unorm-srgb": { gl: 37841 },
  "astc-5x5-unorm": { gl: 37810 },
  "astc-5x5-unorm-srgb": { gl: 37842 },
  "astc-6x5-unorm": { gl: 37811 },
  "astc-6x5-unorm-srgb": { gl: 37843 },
  "astc-6x6-unorm": { gl: 37812 },
  "astc-6x6-unorm-srgb": { gl: 37844 },
  "astc-8x5-unorm": { gl: 37813 },
  "astc-8x5-unorm-srgb": { gl: 37845 },
  "astc-8x6-unorm": { gl: 37814 },
  "astc-8x6-unorm-srgb": { gl: 37846 },
  "astc-8x8-unorm": { gl: 37815 },
  "astc-8x8-unorm-srgb": { gl: 37847 },
  "astc-10x5-unorm": { gl: 37819 },
  "astc-10x5-unorm-srgb": { gl: 37851 },
  "astc-10x6-unorm": { gl: 37817 },
  "astc-10x6-unorm-srgb": { gl: 37849 },
  "astc-10x8-unorm": { gl: 37818 },
  "astc-10x8-unorm-srgb": { gl: 37850 },
  "astc-10x10-unorm": { gl: 37819 },
  "astc-10x10-unorm-srgb": { gl: 37851 },
  "astc-12x10-unorm": { gl: 37820 },
  "astc-12x10-unorm-srgb": { gl: 37852 },
  "astc-12x12-unorm": { gl: 37821 },
  "astc-12x12-unorm-srgb": { gl: 37853 },
  // WEBGL_compressed_texture_pvrtc
  "pvrtc-rgb4unorm-webgl": { gl: 35840 },
  "pvrtc-rgba4unorm-webgl": { gl: 35842 },
  "pvrtc-rbg2unorm-webgl": { gl: 35841 },
  "pvrtc-rgba2unorm-webgl": { gl: 35843 },
  // WEBGL_compressed_texture_etc1
  "etc1-rbg-unorm-webgl": { gl: 36196 },
  // WEBGL_compressed_texture_atc
  "atc-rgb-unorm-webgl": { gl: 35986 },
  "atc-rgba-unorm-webgl": { gl: 35986 },
  "atc-rgbai-unorm-webgl": { gl: 34798 }
};
function getTextureFormatCapabilitiesWebGL(gl, formatSupport, extensions) {
  let supported = formatSupport.create;
  const webglFormatInfo = WEBGL_TEXTURE_FORMATS[formatSupport.format];
  if ((webglFormatInfo == null ? void 0 : webglFormatInfo.gl) === void 0) {
    supported = false;
  }
  if (webglFormatInfo == null ? void 0 : webglFormatInfo.x) {
    supported = supported && Boolean(getWebGLExtension(gl, webglFormatInfo.x, extensions));
  }
  return {
    format: formatSupport.format,
    // @ts-ignore
    create: supported && formatSupport.create,
    // @ts-ignore
    render: supported && formatSupport.render,
    // @ts-ignore
    filter: supported && formatSupport.filter,
    // @ts-ignore
    blend: supported && formatSupport.blend,
    // @ts-ignore
    store: supported && formatSupport.store
  };
}
function getTextureFormatWebGL(format) {
  var _a3;
  const formatData = WEBGL_TEXTURE_FORMATS[format];
  const webglFormat = convertTextureFormatToGL(format);
  const decoded = decodeTextureFormat(format);
  return {
    internalFormat: webglFormat,
    format: (formatData == null ? void 0 : formatData.dataFormat) || getWebGLPixelDataFormat(decoded.channels, decoded.integer, decoded.normalized, webglFormat),
    // depth formats don't have a type
    type: decoded.dataType ? getGLFromVertexType(decoded.dataType) : ((_a3 = formatData == null ? void 0 : formatData.types) == null ? void 0 : _a3[0]) || 5121,
    compressed: decoded.compressed || false
  };
}
function getDepthStencilAttachmentWebGL(format) {
  const formatInfo = decodeTextureFormat(format);
  switch (formatInfo.attachment) {
    case "depth":
      return 36096;
    case "stencil":
      return 36128;
    case "depth-stencil":
      return 33306;
    default:
      throw new Error(`Not a depth stencil format: ${format}`);
  }
}
function getWebGLPixelDataFormat(channels, integer, normalized, format) {
  if (format === 6408 || format === 6407) {
    return format;
  }
  switch (channels) {
    case "r":
      return integer && !normalized ? 36244 : 6403;
    case "rg":
      return integer && !normalized ? 33320 : 33319;
    case "rgb":
      return integer && !normalized ? 36248 : 6407;
    case "rgba":
      return integer && !normalized ? 36249 : 6408;
    case "bgra":
      throw new Error("bgra pixels not supported by WebGL");
    default:
      return 6408;
  }
}
function convertTextureFormatToGL(format) {
  const formatInfo = WEBGL_TEXTURE_FORMATS[format];
  const webglFormat = formatInfo == null ? void 0 : formatInfo.gl;
  if (webglFormat === void 0) {
    throw new Error(`Unsupported texture format ${format}`);
  }
  return webglFormat;
}

// .yarn/__virtual__/@luma.gl-webgl-virtual-decc58d7ee/4/.yarn/berry/cache/@luma.gl-webgl-npm-9.1.9-e2e597afc9-10c0.zip/node_modules/@luma.gl/webgl/dist/adapter/device-helpers/webgl-device-features.js
var WEBGL_FEATURES = {
  // optional WebGPU features
  "depth-clip-control": "EXT_depth_clamp",
  // TODO these seem subtly different
  // 'timestamp-query' // GPUQueryType "timestamp-query"
  // "indirect-first-instance"
  // Textures are handled by getTextureFeatures()
  // 'depth32float-stencil8' // GPUTextureFormat 'depth32float-stencil8'
  // optional WebGL features
  "timer-query-webgl": "EXT_disjoint_timer_query_webgl2",
  "compilation-status-async-webgl": "KHR_parallel_shader_compile",
  "polygon-mode-webgl": "WEBGL_polygon_mode",
  "provoking-vertex-webgl": "WEBGL_provoking_vertex",
  "shader-clip-cull-distance-webgl": "WEBGL_clip_cull_distance",
  "shader-noperspective-interpolation-webgl": "NV_shader_noperspective_interpolation",
  "shader-conservative-depth-webgl": "EXT_conservative_depth"
  // Textures are handled by getTextureFeatures()
};
var WebGLDeviceFeatures = class extends DeviceFeatures {
  constructor(gl, extensions, disabledFeatures) {
    super([], disabledFeatures);
    __publicField(this, "gl");
    __publicField(this, "extensions");
    __publicField(this, "testedFeatures", /* @__PURE__ */ new Set());
    this.gl = gl;
    this.extensions = extensions;
    getWebGLExtension(gl, "EXT_color_buffer_float", extensions);
  }
  *[Symbol.iterator]() {
    const features = this.getFeatures();
    for (const feature of features) {
      if (this.has(feature)) {
        yield feature;
      }
    }
    return [];
  }
  has(feature) {
    var _a3;
    if ((_a3 = this.disabledFeatures) == null ? void 0 : _a3[feature]) {
      return false;
    }
    if (!this.testedFeatures.has(feature)) {
      this.testedFeatures.add(feature);
      if (isTextureFeature(feature) && checkTextureFeature(this.gl, feature, this.extensions)) {
        this.features.add(feature);
      }
      if (this.getWebGLFeature(feature)) {
        this.features.add(feature);
      }
    }
    return this.features.has(feature);
  }
  // FOR DEVICE
  initializeFeatures() {
    const features = this.getFeatures().filter((feature) => feature !== "polygon-mode-webgl");
    for (const feature of features) {
      this.has(feature);
    }
  }
  // IMPLEMENTATION
  getFeatures() {
    return [...Object.keys(WEBGL_FEATURES), ...Object.keys(TEXTURE_FEATURES)];
  }
  /** Extract all WebGL features */
  getWebGLFeature(feature) {
    const featureInfo = WEBGL_FEATURES[feature];
    const isSupported = typeof featureInfo === "string" ? Boolean(getWebGLExtension(this.gl, featureInfo, this.extensions)) : Boolean(featureInfo);
    return isSupported;
  }
};

// .yarn/__virtual__/@luma.gl-webgl-virtual-decc58d7ee/4/.yarn/berry/cache/@luma.gl-webgl-npm-9.1.9-e2e597afc9-10c0.zip/node_modules/@luma.gl/webgl/dist/adapter/device-helpers/webgl-device-limits.js
var WebGLDeviceLimits = class extends DeviceLimits {
  constructor(gl) {
    super();
    // WebGL does not support compute shaders
    // PRIVATE
    __publicField(this, "gl");
    __publicField(this, "limits", {});
    this.gl = gl;
  }
  get maxTextureDimension1D() {
    return 0;
  }
  // WebGL does not support 1D textures
  get maxTextureDimension2D() {
    return this.getParameter(3379);
  }
  get maxTextureDimension3D() {
    return this.getParameter(32883);
  }
  get maxTextureArrayLayers() {
    return this.getParameter(35071);
  }
  get maxBindGroups() {
    return 0;
  }
  get maxDynamicUniformBuffersPerPipelineLayout() {
    return 0;
  }
  // TBD
  get maxDynamicStorageBuffersPerPipelineLayout() {
    return 0;
  }
  // TBD
  get maxSampledTexturesPerShaderStage() {
    return this.getParameter(35660);
  }
  // ) TBD
  get maxSamplersPerShaderStage() {
    return this.getParameter(35661);
  }
  get maxStorageBuffersPerShaderStage() {
    return 0;
  }
  // TBD
  get maxStorageTexturesPerShaderStage() {
    return 0;
  }
  // TBD
  get maxUniformBuffersPerShaderStage() {
    return this.getParameter(35375);
  }
  get maxUniformBufferBindingSize() {
    return this.getParameter(35376);
  }
  get maxStorageBufferBindingSize() {
    return 0;
  }
  get minUniformBufferOffsetAlignment() {
    return this.getParameter(35380);
  }
  get minStorageBufferOffsetAlignment() {
    return 0;
  }
  get maxVertexBuffers() {
    return 16;
  }
  // WebGL 2 supports 16 buffers, see https://github.com/gpuweb/gpuweb/issues/4284
  get maxVertexAttributes() {
    return this.getParameter(34921);
  }
  get maxVertexBufferArrayStride() {
    return 2048;
  }
  // TBD, this is just the default value from WebGPU
  get maxInterStageShaderComponents() {
    return this.getParameter(35659);
  }
  get maxComputeWorkgroupStorageSize() {
    return 0;
  }
  // WebGL does not support compute shaders
  get maxComputeInvocationsPerWorkgroup() {
    return 0;
  }
  // WebGL does not support compute shaders
  get maxComputeWorkgroupSizeX() {
    return 0;
  }
  // WebGL does not support compute shaders
  get maxComputeWorkgroupSizeY() {
    return 0;
  }
  // WebGL does not support compute shaders
  get maxComputeWorkgroupSizeZ() {
    return 0;
  }
  // WebGL does not support compute shaders
  get maxComputeWorkgroupsPerDimension() {
    return 0;
  }
  getParameter(parameter) {
    if (this.limits[parameter] === void 0) {
      this.limits[parameter] = this.gl.getParameter(parameter);
    }
    return this.limits[parameter] || 0;
  }
};

// .yarn/__virtual__/@luma.gl-webgl-virtual-decc58d7ee/4/.yarn/berry/cache/@luma.gl-webgl-npm-9.1.9-e2e597afc9-10c0.zip/node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-framebuffer.js
var WEBGLFramebuffer = class extends Framebuffer {
  constructor(device, props) {
    super(device, props);
    __publicField(this, "device");
    __publicField(this, "gl");
    __publicField(this, "handle");
    __publicField(this, "colorAttachments", []);
    __publicField(this, "depthStencilAttachment", null);
    const isDefaultFramebuffer = props.handle === null;
    this.device = device;
    this.gl = device.gl;
    this.handle = this.props.handle || isDefaultFramebuffer ? this.props.handle : this.gl.createFramebuffer();
    if (!isDefaultFramebuffer) {
      device.setSpectorMetadata(this.handle, { id: this.props.id, props: this.props });
      this.autoCreateAttachmentTextures();
      this.updateAttachments();
    }
  }
  /** destroys any auto created resources etc. */
  destroy() {
    super.destroy();
    if (!this.destroyed && this.handle !== null) {
      this.gl.deleteFramebuffer(this.handle);
    }
  }
  updateAttachments() {
    const prevHandle = this.gl.bindFramebuffer(36160, this.handle);
    for (let i4 = 0; i4 < this.colorAttachments.length; ++i4) {
      const attachment = this.colorAttachments[i4];
      if (attachment) {
        const attachmentPoint = 36064 + i4;
        this._attachTextureView(attachmentPoint, attachment);
      }
    }
    if (this.depthStencilAttachment) {
      const attachmentPoint = getDepthStencilAttachmentWebGL(this.depthStencilAttachment.props.format);
      this._attachTextureView(attachmentPoint, this.depthStencilAttachment);
    }
    if (this.device.props.debug) {
      const status = this.gl.checkFramebufferStatus(36160);
      if (status !== 36053) {
        throw new Error(`Framebuffer ${_getFrameBufferStatus(status)}`);
      }
    }
    this.gl.bindFramebuffer(36160, prevHandle);
  }
  // PRIVATE
  /** In WebGL we must use renderbuffers for depth/stencil attachments (unless we have extensions) */
  // protected override createDepthStencilTexture(format: TextureFormat): Texture {
  //   // return new WEBGLRenderbuffer(this.device, {
  //   return new WEBGLTexture(this.device, {
  //     id: `${this.id}-depth-stencil`,
  //     format,
  //     width: this.width,
  //     height: this.height,
  //     mipmaps: false
  //   });
  // }
  /**
   * @param attachment
   * @param texture
   * @param layer = 0 - index into WEBGLTextureArray and Texture3D or face for `TextureCubeMap`
   * @param level = 0 - mipmapLevel
   */
  _attachTextureView(attachment, textureView) {
    const { gl } = this.device;
    const { texture } = textureView;
    const level = textureView.props.baseMipLevel;
    const layer = textureView.props.baseArrayLayer;
    gl.bindTexture(texture.glTarget, texture.handle);
    switch (texture.glTarget) {
      case 35866:
      case 32879:
        gl.framebufferTextureLayer(36160, attachment, texture.handle, level, layer);
        break;
      case 34067:
        const face = mapIndexToCubeMapFace(layer);
        gl.framebufferTexture2D(36160, attachment, face, texture.handle, level);
        break;
      case 3553:
        gl.framebufferTexture2D(36160, attachment, 3553, texture.handle, level);
        break;
      default:
        throw new Error("Illegal texture type");
    }
    gl.bindTexture(texture.glTarget, null);
  }
};
function mapIndexToCubeMapFace(layer) {
  return layer < 34069 ? layer + 34069 : layer;
}
function _getFrameBufferStatus(status) {
  switch (status) {
    case 36053:
      return "success";
    case 36054:
      return "Mismatched attachments";
    case 36055:
      return "No attachments";
    case 36057:
      return "Height/width mismatch";
    case 36061:
      return "Unsupported or split attachments";
    // WebGL2
    case 36182:
      return "Samples mismatch";
    // OVR_multiview2 extension
    // case GL.FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR: return 'baseViewIndex mismatch';
    default:
      return `${status}`;
  }
}

// .yarn/__virtual__/@luma.gl-webgl-virtual-decc58d7ee/4/.yarn/berry/cache/@luma.gl-webgl-npm-9.1.9-e2e597afc9-10c0.zip/node_modules/@luma.gl/webgl/dist/adapter/webgl-canvas-context.js
var WebGLCanvasContext = class extends CanvasContext {
  constructor(device, props) {
    super(props);
    __publicField(this, "device");
    __publicField(this, "format", "rgba8unorm");
    __publicField(this, "depthStencilFormat", "depth24plus");
    __publicField(this, "presentationSize");
    __publicField(this, "_framebuffer", null);
    this.device = device;
    this.presentationSize = [-1, -1];
    this._setAutoCreatedCanvasId(`${this.device.id}-canvas`);
    this.update();
  }
  get [Symbol.toStringTag]() {
    return "WebGLCanvasContext";
  }
  getCurrentFramebuffer() {
    this.update();
    this._framebuffer = this._framebuffer || new WEBGLFramebuffer(this.device, { handle: null });
    return this._framebuffer;
  }
  /** Resizes and updates render targets if necessary */
  update() {
    const size = this.getPixelSize();
    const sizeChanged = size[0] !== this.presentationSize[0] || size[1] !== this.presentationSize[1];
    if (sizeChanged) {
      this.presentationSize = size;
      this.resize();
    }
  }
  /**
   * Resize the canvas' drawing buffer.
   *
   * Can match the canvas CSS size, and optionally also consider devicePixelRatio
   * Can be called every frame
   *
   * Regardless of size, the drawing buffer will always be scaled to the viewport, but
   * for best visual results, usually set to either:
   *  canvas CSS width x canvas CSS height
   *  canvas CSS width * devicePixelRatio x canvas CSS height * devicePixelRatio
   * See http://webgl2fundamentals.org/webgl/lessons/webgl-resizing-the-canvas.html
   */
  resize(options) {
    if (!this.device.gl)
      return;
    if (this.canvas) {
      const devicePixelRatio = this.getDevicePixelRatio(options == null ? void 0 : options.useDevicePixels);
      this.setDevicePixelRatio(devicePixelRatio, options);
      return;
    }
  }
  commit() {
  }
};

// .yarn/__virtual__/@luma.gl-webgl-virtual-decc58d7ee/4/.yarn/berry/cache/@luma.gl-webgl-npm-9.1.9-e2e597afc9-10c0.zip/node_modules/@luma.gl/webgl/dist/utils/load-script.js
async function loadScript(scriptUrl, scriptId) {
  const head = document.getElementsByTagName("head")[0];
  if (!head) {
    throw new Error("loadScript");
  }
  const script = document.createElement("script");
  script.setAttribute("type", "text/javascript");
  script.setAttribute("src", scriptUrl);
  if (scriptId) {
    script.id = scriptId;
  }
  return new Promise((resolve2, reject) => {
    script.onload = resolve2;
    script.onerror = (error) => reject(new Error(`Unable to load script '${scriptUrl}': ${error}`));
    head.appendChild(script);
  });
}

// .yarn/__virtual__/@luma.gl-webgl-virtual-decc58d7ee/4/.yarn/berry/cache/@luma.gl-webgl-npm-9.1.9-e2e597afc9-10c0.zip/node_modules/@luma.gl/webgl/dist/context/debug/spector.js
var LOG_LEVEL = 1;
var spector = null;
var initialized = false;
var DEFAULT_SPECTOR_PROPS = {
  debugSpectorJS: log2.get("debug-spectorjs"),
  // https://github.com/BabylonJS/Spector.js#basic-usage
  // https://forum.babylonjs.com/t/spectorcdn-is-temporarily-off/48241
  // spectorUrl: 'https://spectorcdn.babylonjs.com/spector.bundle.js';
  debugSpectorJSUrl: "https://cdn.jsdelivr.net/npm/spectorjs@0.9.30/dist/spector.bundle.js",
  gl: void 0
};
async function loadSpectorJS(props) {
  if (!globalThis.SPECTOR) {
    try {
      await loadScript(props.debugSpectorJSUrl || DEFAULT_SPECTOR_PROPS.debugSpectorJSUrl);
    } catch (error) {
      log2.warn(String(error));
    }
  }
}
function initializeSpectorJS(props) {
  var _a3;
  props = { ...DEFAULT_SPECTOR_PROPS, ...props };
  if (!props.debugSpectorJS) {
    return null;
  }
  if (!spector && globalThis.SPECTOR && !((_a3 = globalThis.luma) == null ? void 0 : _a3.spector)) {
    log2.probe(LOG_LEVEL, "SPECTOR found and initialized. Start with `luma.spector.displayUI()`")();
    const { Spector: SpectorJS } = globalThis.SPECTOR;
    spector = new SpectorJS();
    if (globalThis.luma) {
      globalThis.luma.spector = spector;
    }
  }
  if (!spector) {
    return null;
  }
  if (!initialized) {
    initialized = true;
    spector.spyCanvases();
    spector == null ? void 0 : spector.onCaptureStarted.add((capture) => log2.info("Spector capture started:", capture)());
    spector == null ? void 0 : spector.onCapture.add((capture) => {
      log2.info("Spector capture complete:", capture)();
      spector == null ? void 0 : spector.getResultUI();
      spector == null ? void 0 : spector.resultView.display();
      spector == null ? void 0 : spector.resultView.addCapture(capture);
    });
  }
  if (props.gl) {
    const gl = props.gl;
    const device = gl.device;
    spector == null ? void 0 : spector.startCapture(props.gl, 500);
    gl.device = device;
    new Promise((resolve2) => setTimeout(resolve2, 2e3)).then((_3) => {
      log2.info("Spector capture stopped after 2 seconds")();
      spector == null ? void 0 : spector.stopCapture();
    });
  }
  return spector;
}

// .yarn/__virtual__/@luma.gl-webgl-virtual-decc58d7ee/4/.yarn/berry/cache/@luma.gl-webgl-npm-9.1.9-e2e597afc9-10c0.zip/node_modules/@luma.gl/webgl/dist/context/debug/webgl-developer-tools.js
var WEBGL_DEBUG_CDN_URL = "https://unpkg.com/webgl-debug@2.0.1/index.js";
function getWebGLContextData(gl) {
  gl.luma = gl.luma || {};
  return gl.luma;
}
async function loadWebGLDeveloperTools() {
  if (isBrowser2() && !globalThis.WebGLDebugUtils) {
    globalThis.global = globalThis.global || globalThis;
    globalThis.global.module = {};
    await loadScript(WEBGL_DEBUG_CDN_URL);
  }
}
function makeDebugContext(gl, props = {}) {
  return props.debugWebGL || props.traceWebGL ? getDebugContext(gl, props) : getRealContext(gl);
}
function getRealContext(gl) {
  const data = getWebGLContextData(gl);
  return data.realContext ? data.realContext : gl;
}
function getDebugContext(gl, props) {
  if (!globalThis.WebGLDebugUtils) {
    log2.warn("webgl-debug not loaded")();
    return gl;
  }
  const data = getWebGLContextData(gl);
  if (data.debugContext) {
    return data.debugContext;
  }
  globalThis.WebGLDebugUtils.init({ ...GLEnum, ...gl });
  const glDebug = globalThis.WebGLDebugUtils.makeDebugContext(gl, onGLError.bind(null, props), onValidateGLFunc.bind(null, props));
  for (const key in GLEnum) {
    if (!(key in glDebug) && typeof GLEnum[key] === "number") {
      glDebug[key] = GLEnum[key];
    }
  }
  class WebGLDebugContext {
  }
  Object.setPrototypeOf(glDebug, Object.getPrototypeOf(gl));
  Object.setPrototypeOf(WebGLDebugContext, glDebug);
  const debugContext = Object.create(WebGLDebugContext);
  data.realContext = gl;
  data.debugContext = debugContext;
  debugContext.debug = true;
  return debugContext;
}
function getFunctionString(functionName, functionArgs) {
  functionArgs = Array.from(functionArgs).map((arg) => arg === void 0 ? "undefined" : arg);
  let args = globalThis.WebGLDebugUtils.glFunctionArgsToString(functionName, functionArgs);
  args = `${args.slice(0, 100)}${args.length > 100 ? "..." : ""}`;
  return `gl.${functionName}(${args})`;
}
function onGLError(props, err, functionName, args) {
  args = Array.from(args).map((arg) => arg === void 0 ? "undefined" : arg);
  const errorMessage = globalThis.WebGLDebugUtils.glEnumToString(err);
  const functionArgs = globalThis.WebGLDebugUtils.glFunctionArgsToString(functionName, args);
  const message2 = `${errorMessage} in gl.${functionName}(${functionArgs})`;
  log2.error(message2)();
  debugger;
}
function onValidateGLFunc(props, functionName, functionArgs) {
  let functionString = "";
  if (log2.level >= 1) {
    functionString = getFunctionString(functionName, functionArgs);
    if (props.traceWebGL) {
      log2.log(1, functionString)();
    }
  }
  for (const arg of functionArgs) {
    if (arg === void 0) {
      functionString = functionString || getFunctionString(functionName, functionArgs);
      debugger;
    }
  }
}

// .yarn/__virtual__/@luma.gl-webgl-virtual-decc58d7ee/4/.yarn/berry/cache/@luma.gl-webgl-npm-9.1.9-e2e597afc9-10c0.zip/node_modules/@luma.gl/webgl/dist/utils/uid.js
var uidCounters3 = {};
function uid3(id = "id") {
  uidCounters3[id] = uidCounters3[id] || 1;
  const count2 = uidCounters3[id]++;
  return `${id}-${count2}`;
}

// .yarn/__virtual__/@luma.gl-webgl-virtual-decc58d7ee/4/.yarn/berry/cache/@luma.gl-webgl-npm-9.1.9-e2e597afc9-10c0.zip/node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-buffer.js
var WEBGLBuffer = class extends Buffer {
  constructor(device, props = {}) {
    super(device, props);
    __publicField(this, "device");
    __publicField(this, "gl");
    __publicField(this, "handle");
    /** Target in OpenGL defines the type of buffer */
    __publicField(this, "glTarget");
    /** Usage is a hint on how frequently the buffer will be updates */
    __publicField(this, "glUsage");
    /** Index type is needed when issuing draw calls, so we pre-compute it */
    __publicField(this, "glIndexType", 5123);
    /** Number of bytes allocated on the GPU for this buffer */
    __publicField(this, "byteLength");
    /** Number of bytes used */
    __publicField(this, "bytesUsed");
    this.device = device;
    this.gl = this.device.gl;
    const handle = typeof props === "object" ? props.handle : void 0;
    this.handle = handle || this.gl.createBuffer();
    device.setSpectorMetadata(this.handle, { ...this.props, data: typeof this.props.data });
    this.glTarget = getWebGLTarget(this.props.usage);
    this.glUsage = getWebGLUsage(this.props.usage);
    this.glIndexType = this.props.indexType === "uint32" ? 5125 : 5123;
    if (props.data) {
      this._initWithData(props.data, props.byteOffset, props.byteLength);
    } else {
      this._initWithByteLength(props.byteLength || 0);
    }
  }
  // PRIVATE METHODS
  /** Allocate a new buffer and initialize to contents of typed array */
  _initWithData(data, byteOffset = 0, byteLength = data.byteLength + byteOffset) {
    const glTarget = this.glTarget;
    this.gl.bindBuffer(glTarget, this.handle);
    this.gl.bufferData(glTarget, byteLength, this.glUsage);
    this.gl.bufferSubData(glTarget, byteOffset, data);
    this.gl.bindBuffer(glTarget, null);
    this.bytesUsed = byteLength;
    this.byteLength = byteLength;
    this._setDebugData(data, byteOffset, byteLength);
    this.trackAllocatedMemory(byteLength);
  }
  // Allocate a GPU buffer of specified size.
  _initWithByteLength(byteLength) {
    let data = byteLength;
    if (byteLength === 0) {
      data = new Float32Array(0);
    }
    const glTarget = this.glTarget;
    this.gl.bindBuffer(glTarget, this.handle);
    this.gl.bufferData(glTarget, data, this.glUsage);
    this.gl.bindBuffer(glTarget, null);
    this.bytesUsed = byteLength;
    this.byteLength = byteLength;
    this._setDebugData(null, 0, byteLength);
    this.trackAllocatedMemory(byteLength);
    return this;
  }
  destroy() {
    if (!this.destroyed && this.handle) {
      this.removeStats();
      this.trackDeallocatedMemory();
      this.gl.deleteBuffer(this.handle);
      this.destroyed = true;
      this.handle = null;
    }
  }
  write(data, byteOffset = 0) {
    const srcOffset = 0;
    const byteLength = void 0;
    const glTarget = 36663;
    this.gl.bindBuffer(glTarget, this.handle);
    if (srcOffset !== 0 || byteLength !== void 0) {
      this.gl.bufferSubData(glTarget, byteOffset, data, srcOffset, byteLength);
    } else {
      this.gl.bufferSubData(glTarget, byteOffset, data);
    }
    this.gl.bindBuffer(glTarget, null);
    this._setDebugData(data, byteOffset, data.byteLength);
  }
  /** Asynchronously read data from the buffer */
  async readAsync(byteOffset = 0, byteLength) {
    return this.readSyncWebGL(byteOffset, byteLength);
  }
  /** Synchronously read data from the buffer. WebGL only. */
  readSyncWebGL(byteOffset = 0, byteLength) {
    byteLength = byteLength ?? this.byteLength - byteOffset;
    const data = new Uint8Array(byteLength);
    const dstOffset = 0;
    this.gl.bindBuffer(36662, this.handle);
    this.gl.getBufferSubData(36662, byteOffset, data, dstOffset, byteLength);
    this.gl.bindBuffer(36662, null);
    this._setDebugData(data, byteOffset, byteLength);
    return data;
  }
};
function getWebGLTarget(usage) {
  if (usage & Buffer.INDEX) {
    return 34963;
  }
  if (usage & Buffer.VERTEX) {
    return 34962;
  }
  if (usage & Buffer.UNIFORM) {
    return 35345;
  }
  return 34962;
}
function getWebGLUsage(usage) {
  if (usage & Buffer.INDEX) {
    return 35044;
  }
  if (usage & Buffer.VERTEX) {
    return 35044;
  }
  if (usage & Buffer.UNIFORM) {
    return 35048;
  }
  return 35044;
}

// .yarn/__virtual__/@luma.gl-webgl-virtual-decc58d7ee/4/.yarn/berry/cache/@luma.gl-webgl-npm-9.1.9-e2e597afc9-10c0.zip/node_modules/@luma.gl/webgl/dist/adapter/helpers/parse-shader-compiler-log.js
function parseShaderCompilerLog(errLog) {
  const lines = errLog.split(/\r?\n/);
  const messages = [];
  for (const line of lines) {
    if (line.length <= 1) {
      continue;
    }
    const segments = line.split(":");
    if (segments.length === 2) {
      const [messageType2, message2] = segments;
      messages.push({
        message: message2.trim(),
        type: getMessageType(messageType2),
        lineNum: 0,
        linePos: 0
      });
      continue;
    }
    const [messageType, linePosition, lineNumber, ...rest] = segments;
    let lineNum = parseInt(lineNumber, 10);
    if (isNaN(lineNum)) {
      lineNum = 0;
    }
    let linePos = parseInt(linePosition, 10);
    if (isNaN(linePos)) {
      linePos = 0;
    }
    messages.push({
      message: rest.join(":").trim(),
      type: getMessageType(messageType),
      lineNum,
      linePos
      // TODO
    });
  }
  return messages;
}
function getMessageType(messageType) {
  const MESSAGE_TYPES = ["warning", "error", "info"];
  const lowerCaseType = messageType.toLowerCase();
  return MESSAGE_TYPES.includes(lowerCaseType) ? lowerCaseType : "info";
}

// .yarn/__virtual__/@luma.gl-webgl-virtual-decc58d7ee/4/.yarn/berry/cache/@luma.gl-webgl-npm-9.1.9-e2e597afc9-10c0.zip/node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-shader.js
var WEBGLShader = class extends Shader {
  constructor(device, props) {
    super(device, props);
    __publicField(this, "device");
    __publicField(this, "handle");
    this.device = device;
    switch (this.props.stage) {
      case "vertex":
        this.handle = this.props.handle || this.device.gl.createShader(35633);
        break;
      case "fragment":
        this.handle = this.props.handle || this.device.gl.createShader(35632);
        break;
      default:
        throw new Error(this.props.stage);
    }
    this._compile(this.source);
  }
  destroy() {
    if (this.handle) {
      this.removeStats();
      this.device.gl.deleteShader(this.handle);
      this.destroyed = true;
    }
  }
  get asyncCompilationStatus() {
    return this._waitForCompilationComplete().then(() => this.compilationStatus);
  }
  async getCompilationInfo() {
    await this._waitForCompilationComplete();
    return this.getCompilationInfoSync();
  }
  getCompilationInfoSync() {
    const shaderLog = this.device.gl.getShaderInfoLog(this.handle);
    return shaderLog ? parseShaderCompilerLog(shaderLog) : [];
  }
  getTranslatedSource() {
    const extensions = this.device.getExtension("WEBGL_debug_shaders");
    const ext = extensions.WEBGL_debug_shaders;
    return (ext == null ? void 0 : ext.getTranslatedShaderSource(this.handle)) || null;
  }
  // PRIVATE METHODS
  /** Compile a shader and get compilation status */
  async _compile(source4) {
    source4 = source4.startsWith("#version ") ? source4 : `#version 300 es
${source4}`;
    const { gl } = this.device;
    gl.shaderSource(this.handle, source4);
    gl.compileShader(this.handle);
    if (!this.device.props.debug) {
      this.compilationStatus = "pending";
      return;
    }
    if (!this.device.features.has("compilation-status-async-webgl")) {
      this._getCompilationStatus();
      this.debugShader();
      if (this.compilationStatus === "error") {
        throw new Error(`GLSL compilation errors in ${this.props.stage} shader ${this.props.id}`);
      }
      return;
    }
    log2.once(1, "Shader compilation is asynchronous")();
    await this._waitForCompilationComplete();
    log2.info(2, `Shader ${this.id} - async compilation complete: ${this.compilationStatus}`)();
    this._getCompilationStatus();
    this.debugShader();
  }
  /** Use KHR_parallel_shader_compile extension if available */
  async _waitForCompilationComplete() {
    const waitMs = async (ms) => await new Promise((resolve2) => setTimeout(resolve2, ms));
    const DELAY_MS = 10;
    if (!this.device.features.has("compilation-status-async-webgl")) {
      await waitMs(DELAY_MS);
      return;
    }
    const { gl } = this.device;
    for (; ; ) {
      const complete = gl.getShaderParameter(this.handle, 37297);
      if (complete) {
        return;
      }
      await waitMs(DELAY_MS);
    }
  }
  /**
   * Get the shader compilation status
   * TODO - Load log even when no error reported, to catch warnings?
   * https://gamedev.stackexchange.com/questions/30429/how-to-detect-glsl-warnings
   */
  _getCompilationStatus() {
    this.compilationStatus = this.device.gl.getShaderParameter(this.handle, 35713) ? "success" : "error";
  }
};

// .yarn/__virtual__/@luma.gl-webgl-virtual-decc58d7ee/4/.yarn/berry/cache/@luma.gl-webgl-npm-9.1.9-e2e597afc9-10c0.zip/node_modules/@luma.gl/webgl/dist/adapter/converters/device-parameters.js
function withDeviceAndGLParameters(device, parameters, glParameters, func) {
  if (isObjectEmpty3(parameters)) {
    return func(device);
  }
  const webglDevice = device;
  webglDevice.pushState();
  try {
    setDeviceParameters(device, parameters);
    setGLParameters(webglDevice.gl, glParameters);
    return func(device);
  } finally {
    webglDevice.popState();
  }
}
function setDeviceParameters(device, parameters) {
  const webglDevice = device;
  const { gl } = webglDevice;
  if (parameters.cullMode) {
    switch (parameters.cullMode) {
      case "none":
        gl.disable(2884);
        break;
      case "front":
        gl.enable(2884);
        gl.cullFace(1028);
        break;
      case "back":
        gl.enable(2884);
        gl.cullFace(1029);
        break;
    }
  }
  if (parameters.frontFace) {
    gl.frontFace(map2("frontFace", parameters.frontFace, {
      ccw: 2305,
      cw: 2304
    }));
  }
  if (parameters.unclippedDepth) {
    if (device.features.has("depth-clip-control")) {
      gl.enable(34383);
    }
  }
  if (parameters.depthBias !== void 0) {
    gl.enable(32823);
    gl.polygonOffset(parameters.depthBias, parameters.depthBiasSlopeScale || 0);
  }
  if (parameters.provokingVertex) {
    if (device.features.has("provoking-vertex-webgl")) {
      const extensions = webglDevice.getExtension("WEBGL_provoking_vertex");
      const ext = extensions.WEBGL_provoking_vertex;
      const vertex2 = map2("provokingVertex", parameters.provokingVertex, {
        first: 36429,
        last: 36430
      });
      ext == null ? void 0 : ext.provokingVertexWEBGL(vertex2);
    }
  }
  if (parameters.polygonMode || parameters.polygonOffsetLine) {
    if (device.features.has("polygon-mode-webgl")) {
      if (parameters.polygonMode) {
        const extensions = webglDevice.getExtension("WEBGL_polygon_mode");
        const ext = extensions.WEBGL_polygon_mode;
        const mode = map2("polygonMode", parameters.polygonMode, {
          fill: 6914,
          line: 6913
        });
        ext == null ? void 0 : ext.polygonModeWEBGL(1028, mode);
        ext == null ? void 0 : ext.polygonModeWEBGL(1029, mode);
      }
      if (parameters.polygonOffsetLine) {
        gl.enable(10754);
      }
    }
  }
  if (device.features.has("shader-clip-cull-distance-webgl")) {
    if (parameters.clipDistance0) {
      gl.enable(12288);
    }
    if (parameters.clipDistance1) {
      gl.enable(12289);
    }
    if (parameters.clipDistance2) {
      gl.enable(12290);
    }
    if (parameters.clipDistance3) {
      gl.enable(12291);
    }
    if (parameters.clipDistance4) {
      gl.enable(12292);
    }
    if (parameters.clipDistance5) {
      gl.enable(12293);
    }
    if (parameters.clipDistance6) {
      gl.enable(12294);
    }
    if (parameters.clipDistance7) {
      gl.enable(12295);
    }
  }
  if (parameters.depthWriteEnabled !== void 0) {
    gl.depthMask(mapBoolean("depthWriteEnabled", parameters.depthWriteEnabled));
  }
  if (parameters.depthCompare) {
    parameters.depthCompare !== "always" ? gl.enable(2929) : gl.disable(2929);
    gl.depthFunc(convertCompareFunction("depthCompare", parameters.depthCompare));
  }
  if (parameters.stencilWriteMask) {
    const mask = parameters.stencilWriteMask;
    gl.stencilMaskSeparate(1028, mask);
    gl.stencilMaskSeparate(1029, mask);
  }
  if (parameters.stencilReadMask) {
    log2.warn("stencilReadMask not supported under WebGL");
  }
  if (parameters.stencilCompare) {
    const mask = parameters.stencilReadMask || 4294967295;
    const glValue = convertCompareFunction("depthCompare", parameters.stencilCompare);
    parameters.stencilCompare !== "always" ? gl.enable(2960) : gl.disable(2960);
    gl.stencilFuncSeparate(1028, glValue, 0, mask);
    gl.stencilFuncSeparate(1029, glValue, 0, mask);
  }
  if (parameters.stencilPassOperation && parameters.stencilFailOperation && parameters.stencilDepthFailOperation) {
    const dppass = convertStencilOperation("stencilPassOperation", parameters.stencilPassOperation);
    const sfail = convertStencilOperation("stencilFailOperation", parameters.stencilFailOperation);
    const dpfail = convertStencilOperation("stencilDepthFailOperation", parameters.stencilDepthFailOperation);
    gl.stencilOpSeparate(1028, sfail, dpfail, dppass);
    gl.stencilOpSeparate(1029, sfail, dpfail, dppass);
  }
  switch (parameters.blend) {
    case true:
      gl.enable(3042);
      break;
    case false:
      gl.disable(3042);
      break;
    default:
  }
  if (parameters.blendColorOperation || parameters.blendAlphaOperation) {
    const colorEquation = convertBlendOperationToEquation("blendColorOperation", parameters.blendColorOperation || "add");
    const alphaEquation = convertBlendOperationToEquation("blendAlphaOperation", parameters.blendAlphaOperation || "add");
    gl.blendEquationSeparate(colorEquation, alphaEquation);
    const colorSrcFactor = convertBlendFactorToFunction("blendColorSrcFactor", parameters.blendColorSrcFactor || "one");
    const colorDstFactor = convertBlendFactorToFunction("blendColorDstFactor", parameters.blendColorDstFactor || "zero");
    const alphaSrcFactor = convertBlendFactorToFunction("blendAlphaSrcFactor", parameters.blendAlphaSrcFactor || "one");
    const alphaDstFactor = convertBlendFactorToFunction("blendAlphaDstFactor", parameters.blendAlphaDstFactor || "zero");
    gl.blendFuncSeparate(colorSrcFactor, colorDstFactor, alphaSrcFactor, alphaDstFactor);
  }
}
function convertCompareFunction(parameter, value) {
  return map2(parameter, value, {
    never: 512,
    less: 513,
    equal: 514,
    "less-equal": 515,
    greater: 516,
    "not-equal": 517,
    "greater-equal": 518,
    always: 519
  });
}
function convertStencilOperation(parameter, value) {
  return map2(parameter, value, {
    keep: 7680,
    zero: 0,
    replace: 7681,
    invert: 5386,
    "increment-clamp": 7682,
    "decrement-clamp": 7683,
    "increment-wrap": 34055,
    "decrement-wrap": 34056
  });
}
function convertBlendOperationToEquation(parameter, value) {
  return map2(parameter, value, {
    add: 32774,
    subtract: 32778,
    "reverse-subtract": 32779,
    min: 32775,
    max: 32776
  });
}
function convertBlendFactorToFunction(parameter, value) {
  return map2(parameter, value, {
    one: 1,
    zero: 0,
    "src-color": 768,
    "one-minus-src-color": 769,
    "dst-color": 774,
    "one-minus-dst-color": 775,
    "src-alpha": 770,
    "one-minus-src-alpha": 771,
    "dst-alpha": 772,
    "one-minus-dst-alpha": 773,
    "src-alpha-saturated": 776,
    "constant-color": 32769,
    "one-minus-constant-color": 32770,
    "constant-alpha": 32771,
    "one-minus-constant-alpha": 32772
  });
}
function message(parameter, value) {
  return `Illegal parameter ${value} for ${parameter}`;
}
function map2(parameter, value, valueMap) {
  if (!(value in valueMap)) {
    throw new Error(message(parameter, value));
  }
  return valueMap[value];
}
function mapBoolean(parameter, value) {
  return value;
}
function isObjectEmpty3(obj) {
  let isEmpty = true;
  for (const key in obj) {
    isEmpty = false;
    break;
  }
  return isEmpty;
}

// .yarn/__virtual__/@luma.gl-webgl-virtual-decc58d7ee/4/.yarn/berry/cache/@luma.gl-webgl-npm-9.1.9-e2e597afc9-10c0.zip/node_modules/@luma.gl/webgl/dist/adapter/converters/sampler-parameters.js
function convertSamplerParametersToWebGL(props) {
  const params = {};
  if (props.addressModeU) {
    params[10242] = convertAddressMode(props.addressModeU);
  }
  if (props.addressModeV) {
    params[10243] = convertAddressMode(props.addressModeV);
  }
  if (props.addressModeW) {
    params[32882] = convertAddressMode(props.addressModeW);
  }
  if (props.magFilter) {
    params[10240] = convertMaxFilterMode(props.magFilter);
  }
  if (props.minFilter || props.mipmapFilter) {
    params[10241] = convertMinFilterMode(props.minFilter || "linear", props.mipmapFilter);
  }
  if (props.lodMinClamp !== void 0) {
    params[33082] = props.lodMinClamp;
  }
  if (props.lodMaxClamp !== void 0) {
    params[33083] = props.lodMaxClamp;
  }
  if (props.type === "comparison-sampler") {
    params[34892] = 34894;
  }
  if (props.compare) {
    params[34893] = convertCompareFunction("compare", props.compare);
  }
  if (props.maxAnisotropy) {
    params[34046] = props.maxAnisotropy;
  }
  return params;
}
function convertAddressMode(addressMode) {
  switch (addressMode) {
    case "clamp-to-edge":
      return 33071;
    case "repeat":
      return 10497;
    case "mirror-repeat":
      return 33648;
  }
}
function convertMaxFilterMode(maxFilter) {
  switch (maxFilter) {
    case "nearest":
      return 9728;
    case "linear":
      return 9729;
  }
}
function convertMinFilterMode(minFilter, mipmapFilter = "none") {
  if (!mipmapFilter) {
    return convertMaxFilterMode(minFilter);
  }
  switch (mipmapFilter) {
    case "none":
      return convertMaxFilterMode(minFilter);
    case "nearest":
      return minFilter === "nearest" ? 9984 : 9986;
    case "linear":
      return minFilter === "nearest" ? 9985 : 9987;
  }
}

// .yarn/__virtual__/@luma.gl-webgl-virtual-decc58d7ee/4/.yarn/berry/cache/@luma.gl-webgl-npm-9.1.9-e2e597afc9-10c0.zip/node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-sampler.js
var WEBGLSampler = class extends Sampler {
  constructor(device, props) {
    super(device, props);
    __publicField(this, "device");
    __publicField(this, "handle");
    __publicField(this, "parameters");
    this.device = device;
    this.parameters = convertSamplerParametersToWebGL(props);
    this.handle = this.handle || this.device.gl.createSampler();
    this._setSamplerParameters(this.parameters);
  }
  destroy() {
    if (this.handle) {
      this.device.gl.deleteSampler(this.handle);
      this.handle = void 0;
    }
  }
  toString() {
    return `Sampler(${this.id},${JSON.stringify(this.props)})`;
  }
  /** Set sampler parameters on the sampler */
  _setSamplerParameters(parameters) {
    for (const [pname, value] of Object.entries(parameters)) {
      const param = Number(pname);
      switch (param) {
        case 33082:
        case 33083:
          this.device.gl.samplerParameterf(this.handle, param, value);
          break;
        default:
          this.device.gl.samplerParameteri(this.handle, param, value);
          break;
      }
    }
  }
};

// .yarn/__virtual__/@luma.gl-webgl-virtual-decc58d7ee/4/.yarn/berry/cache/@luma.gl-webgl-npm-9.1.9-e2e597afc9-10c0.zip/node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-texture-view.js
var WEBGLTextureView = class extends TextureView {
  constructor(device, props) {
    super(device, { ...Texture.defaultProps, ...props });
    __publicField(this, "device");
    __publicField(this, "gl");
    __publicField(this, "handle");
    // Does not have a WebGL representation
    __publicField(this, "texture");
    this.device = device;
    this.gl = this.device.gl;
    this.handle = null;
    this.texture = props.texture;
  }
};

// .yarn/__virtual__/@luma.gl-webgl-virtual-decc58d7ee/4/.yarn/berry/cache/@luma.gl-webgl-npm-9.1.9-e2e597afc9-10c0.zip/node_modules/@luma.gl/webgl/dist/adapter/helpers/typed-array-utils.js
var ERR_TYPE_DEDUCTION = "Failed to deduce GL constant from typed array";
function getGLTypeFromTypedArray(arrayOrType) {
  const type = ArrayBuffer.isView(arrayOrType) ? arrayOrType.constructor : arrayOrType;
  switch (type) {
    case Float32Array:
      return 5126;
    case Uint16Array:
      return 5123;
    case Uint32Array:
      return 5125;
    case Uint8Array:
      return 5121;
    case Uint8ClampedArray:
      return 5121;
    case Int8Array:
      return 5120;
    case Int16Array:
      return 5122;
    case Int32Array:
      return 5124;
    default:
      throw new Error(ERR_TYPE_DEDUCTION);
  }
}
function getTypedArrayFromGLType(glType, options) {
  const { clamped = true } = options || {};
  switch (glType) {
    case 5126:
      return Float32Array;
    case 5123:
    case 33635:
    case 32819:
    case 32820:
      return Uint16Array;
    case 5125:
      return Uint32Array;
    case 5121:
      return clamped ? Uint8ClampedArray : Uint8Array;
    case 5120:
      return Int8Array;
    case 5122:
      return Int16Array;
    case 5124:
      return Int32Array;
    default:
      throw new Error("Failed to deduce typed array type from GL constant");
  }
}

// .yarn/__virtual__/@luma.gl-webgl-virtual-decc58d7ee/4/.yarn/berry/cache/@luma.gl-webgl-npm-9.1.9-e2e597afc9-10c0.zip/node_modules/@luma.gl/webgl/dist/adapter/helpers/format-utils.js
function glFormatToComponents(format) {
  switch (format) {
    case 6406:
    case 33326:
    case 6403:
    case 36244:
      return 1;
    case 33339:
    case 33340:
    case 33328:
    case 33320:
    case 33319:
      return 2;
    case 6407:
    case 36248:
    case 34837:
      return 3;
    case 6408:
    case 36249:
    case 34836:
      return 4;
    // TODO: Add support for additional WebGL2 formats
    default:
      return 0;
  }
}
function glTypeToBytes(type) {
  switch (type) {
    case 5121:
      return 1;
    case 33635:
    case 32819:
    case 32820:
      return 2;
    case 5126:
      return 4;
    // TODO: Add support for additional WebGL2 types
    default:
      return 0;
  }
}

// .yarn/__virtual__/@luma.gl-webgl-virtual-decc58d7ee/4/.yarn/berry/cache/@luma.gl-webgl-npm-9.1.9-e2e597afc9-10c0.zip/node_modules/@luma.gl/webgl/dist/context/state-tracker/with-parameters.js
function withGLParameters(gl, parameters, func) {
  if (isObjectEmpty4(parameters)) {
    return func(gl);
  }
  const { nocatch = true } = parameters;
  const webglState = WebGLStateTracker.get(gl);
  webglState.push();
  setGLParameters(gl, parameters);
  let value;
  if (nocatch) {
    value = func(gl);
    webglState.pop();
  } else {
    try {
      value = func(gl);
    } finally {
      webglState.pop();
    }
  }
  return value;
}
function isObjectEmpty4(object) {
  for (const key in object) {
    return false;
  }
  return true;
}

// .yarn/__virtual__/@luma.gl-webgl-virtual-decc58d7ee/4/.yarn/berry/cache/@luma.gl-webgl-npm-9.1.9-e2e597afc9-10c0.zip/node_modules/@luma.gl/webgl/dist/adapter/helpers/webgl-texture-utils.js
function initializeTextureStorage(gl, levels, options) {
  const { dimension, width, height, depth = 0 } = options;
  const { glInternalFormat } = options;
  const glTarget = options.glTarget;
  switch (dimension) {
    case "2d-array":
    case "3d":
      gl.texStorage3D(glTarget, levels, glInternalFormat, width, height, depth);
      break;
    default:
      gl.texStorage2D(glTarget, levels, glInternalFormat, width, height);
  }
}
function copyExternalImageToMipLevel(gl, handle, image, options) {
  const { width, height } = options;
  const { dimension, depth = 0, mipLevel = 0 } = options;
  const { x: x3 = 0, y: y3 = 0, z: z3 = 0 } = options;
  const { glFormat, glType } = options;
  const glTarget = getWebGLCubeFaceTarget(options.glTarget, dimension, depth);
  const glParameters = options.flipY ? { [37440]: true } : {};
  withGLParameters(gl, glParameters, () => {
    switch (dimension) {
      case "2d-array":
      case "3d":
        gl.bindTexture(glTarget, handle);
        gl.texSubImage3D(glTarget, mipLevel, x3, y3, z3, width, height, depth, glFormat, glType, image);
        gl.bindTexture(glTarget, null);
        break;
      case "2d":
      case "cube":
        gl.bindTexture(glTarget, handle);
        gl.texSubImage2D(glTarget, mipLevel, x3, y3, width, height, glFormat, glType, image);
        gl.bindTexture(glTarget, null);
        break;
      default:
        throw new Error(dimension);
    }
  });
}
function copyCPUDataToMipLevel(gl, typedArray, options) {
  const { dimension, width, height, depth = 0, mipLevel = 0, byteOffset = 0 } = options;
  const { x: x3 = 0, y: y3 = 0, z: z3 = 0 } = options;
  const { glFormat, glType, compressed } = options;
  const glTarget = getWebGLCubeFaceTarget(options.glTarget, dimension, depth);
  switch (dimension) {
    case "2d-array":
    case "3d":
      if (compressed) {
        gl.compressedTexSubImage3D(glTarget, mipLevel, x3, y3, z3, width, height, depth, glFormat, typedArray, byteOffset);
      } else {
        gl.texSubImage3D(glTarget, mipLevel, x3, y3, z3, width, height, depth, glFormat, glType, typedArray, byteOffset);
      }
      break;
    case "2d":
    case "cube":
      if (compressed) {
        gl.compressedTexSubImage2D(glTarget, mipLevel, x3, y3, width, height, glFormat, typedArray, byteOffset);
      } else {
        gl.texSubImage2D(glTarget, mipLevel, x3, y3, width, height, glFormat, glType, typedArray, byteOffset);
      }
      break;
    default:
      throw new Error(dimension);
  }
}
function getWebGLTextureTarget(dimension) {
  switch (dimension) {
    case "1d":
      break;
    // not supported in any WebGL version
    case "2d":
      return 3553;
    // supported in WebGL1
    case "3d":
      return 32879;
    // supported in WebGL2
    case "cube":
      return 34067;
    // supported in WebGL1
    case "2d-array":
      return 35866;
    // supported in WebGL2
    case "cube-array":
      break;
  }
  throw new Error(dimension);
}
function getWebGLCubeFaceTarget(glTarget, dimension, level) {
  return dimension === "cube" ? 34069 + level : glTarget;
}
function readPixelsToArray(source4, options) {
  var _a3;
  const {
    sourceX = 0,
    sourceY = 0,
    sourceAttachment = 0
    // TODO - support gl.readBuffer
  } = options || {};
  let {
    target: target2 = null,
    // following parameters are auto deduced if not provided
    sourceWidth,
    sourceHeight,
    sourceDepth,
    sourceFormat,
    sourceType
  } = options || {};
  const { framebuffer, deleteFramebuffer } = getFramebuffer(source4);
  const { gl, handle } = framebuffer;
  sourceWidth || (sourceWidth = framebuffer.width);
  sourceHeight || (sourceHeight = framebuffer.height);
  const texture = (_a3 = framebuffer.colorAttachments[sourceAttachment]) == null ? void 0 : _a3.texture;
  if (!texture) {
    throw new Error(`Invalid framebuffer attachment ${sourceAttachment}`);
  }
  sourceDepth = (texture == null ? void 0 : texture.depth) || 1;
  sourceFormat || (sourceFormat = (texture == null ? void 0 : texture.glFormat) || 6408);
  sourceType || (sourceType = (texture == null ? void 0 : texture.glType) || 5121);
  target2 = getPixelArray(target2, sourceType, sourceFormat, sourceWidth, sourceHeight, sourceDepth);
  sourceType = sourceType || getGLTypeFromTypedArray(target2);
  const prevHandle = gl.bindFramebuffer(36160, handle);
  gl.readBuffer(36064 + sourceAttachment);
  gl.readPixels(sourceX, sourceY, sourceWidth, sourceHeight, sourceFormat, sourceType, target2);
  gl.readBuffer(36064);
  gl.bindFramebuffer(36160, prevHandle || null);
  if (deleteFramebuffer) {
    framebuffer.destroy();
  }
  return target2;
}
function readPixelsToBuffer(source4, options) {
  const { target: target2, sourceX = 0, sourceY = 0, sourceFormat = 6408, targetByteOffset = 0 } = options || {};
  let { sourceWidth, sourceHeight, sourceType } = options || {};
  const { framebuffer, deleteFramebuffer } = getFramebuffer(source4);
  sourceWidth = sourceWidth || framebuffer.width;
  sourceHeight = sourceHeight || framebuffer.height;
  const webglFramebuffer = framebuffer;
  sourceType = sourceType || 5121;
  let webglBufferTarget = target2;
  if (!webglBufferTarget) {
    const components = glFormatToComponents(sourceFormat);
    const byteCount = glTypeToBytes(sourceType);
    const byteLength = targetByteOffset + sourceWidth * sourceHeight * components * byteCount;
    webglBufferTarget = webglFramebuffer.device.createBuffer({ byteLength });
  }
  const commandEncoder = source4.device.createCommandEncoder();
  commandEncoder.copyTextureToBuffer({
    sourceTexture: source4,
    width: sourceWidth,
    height: sourceHeight,
    origin: [sourceX, sourceY],
    destinationBuffer: webglBufferTarget,
    byteOffset: targetByteOffset
  });
  commandEncoder.destroy();
  if (deleteFramebuffer) {
    framebuffer.destroy();
  }
  return webglBufferTarget;
}
function getFramebuffer(source4) {
  if (!(source4 instanceof Framebuffer)) {
    return { framebuffer: toFramebuffer(source4), deleteFramebuffer: true };
  }
  return { framebuffer: source4, deleteFramebuffer: false };
}
function toFramebuffer(texture, props) {
  const { device, width, height, id } = texture;
  const framebuffer = device.createFramebuffer({
    ...props,
    id: `framebuffer-for-${id}`,
    width,
    height,
    colorAttachments: [texture]
  });
  return framebuffer;
}
function getPixelArray(pixelArray, glType, glFormat, width, height, depth) {
  if (pixelArray) {
    return pixelArray;
  }
  glType || (glType = 5121);
  const ArrayType = getTypedArrayFromGLType(glType, { clamped: false });
  const components = glFormatToComponents(glFormat);
  return new ArrayType(width * height * components);
}

// .yarn/__virtual__/@luma.gl-webgl-virtual-decc58d7ee/4/.yarn/berry/cache/@luma.gl-webgl-npm-9.1.9-e2e597afc9-10c0.zip/node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-texture.js
var WEBGLTexture = class extends Texture {
  constructor(device, props) {
    super(device, props);
    // readonly MAX_ATTRIBUTES: number;
    __publicField(this, "device");
    __publicField(this, "gl");
    __publicField(this, "handle");
    __publicField(this, "sampler");
    // TODO - currently unused in WebGL. Create dummy sampler?
    __publicField(this, "view");
    // TODO - currently unused in WebGL. Create dummy view?
    __publicField(this, "mipmaps");
    // Texture type
    /** Whether the internal format is compressed */
    __publicField(this, "compressed");
    /**
     * The WebGL target corresponding to the texture type
     * @note `target` cannot be modified by bind:
     * textures are special because when you first bind them to a target,
     * When you first bind a texture as a GL_TEXTURE_2D, you are saying that this texture is a 2D texture.
     * And it will always be a 2D texture; this state cannot be changed ever.
     * A texture that was first bound as a GL_TEXTURE_2D, must always be bound as a GL_TEXTURE_2D;
     * attempting to bind it as GL_TEXTURE_3D will give rise to a run-time error
     */
    __publicField(this, "glTarget");
    /** The WebGL format - essentially channel structure */
    __publicField(this, "glFormat");
    /** The WebGL data format - the type of each channel */
    __publicField(this, "glType");
    /** The WebGL constant corresponding to the WebGPU style constant in format */
    __publicField(this, "glInternalFormat");
    // state
    /** Texture binding slot - TODO - move to texture view? */
    __publicField(this, "textureUnit", 0);
    const propsWithData = { ...this.props };
    propsWithData.data = props.data;
    this.device = device;
    this.gl = this.device.gl;
    this.glTarget = getWebGLTextureTarget(this.props.dimension);
    const formatInfo = getTextureFormatWebGL(this.props.format);
    this.glInternalFormat = formatInfo.internalFormat;
    this.glFormat = formatInfo.format;
    this.glType = formatInfo.type;
    this.compressed = formatInfo.compressed;
    this.mipmaps = Boolean(this.props.mipmaps);
    this._initialize(propsWithData);
    Object.seal(this);
  }
  /** Initialize texture with supplied props */
  // eslint-disable-next-line max-statements
  _initialize(propsWithData) {
    this.handle = this.props.handle || this.gl.createTexture();
    this.device.setSpectorMetadata(this.handle, { ...this.props, data: propsWithData.data });
    let { width, height } = propsWithData;
    if (!width || !height) {
      const textureSize = Texture.getTextureDataSize(propsWithData.data);
      width = (textureSize == null ? void 0 : textureSize.width) || 1;
      height = (textureSize == null ? void 0 : textureSize.height) || 1;
    }
    this.width = width;
    this.height = height;
    this.depth = propsWithData.depth;
    this.setSampler(propsWithData.sampler);
    this.view = new WEBGLTextureView(this.device, { ...this.props, texture: this });
    this.bind();
    initializeTextureStorage(this.gl, this.mipLevels, this);
    if (propsWithData.data) {
      switch (propsWithData.dimension) {
        case "1d":
          this.setTexture1DData(propsWithData.data);
          break;
        case "2d":
          this.setTexture2DData(propsWithData.data);
          break;
        case "3d":
          this.setTexture3DData(propsWithData.data);
          break;
        case "cube":
          this.setTextureCubeData(propsWithData.data);
          break;
        case "2d-array":
          this.setTextureArrayData(propsWithData.data);
          break;
        case "cube-array":
          this.setTextureCubeArrayData(propsWithData.data);
          break;
        // @ts-expect-error
        default:
          throw new Error(propsWithData.dimension);
      }
    }
    if (this.mipmaps) {
      this.generateMipmap();
    }
  }
  destroy() {
    if (this.handle) {
      this.gl.deleteTexture(this.handle);
      this.removeStats();
      this.trackDeallocatedMemory("Texture");
      this.destroyed = true;
    }
  }
  createView(props) {
    return new WEBGLTextureView(this.device, { ...props, texture: this });
  }
  setSampler(sampler = {}) {
    let samplerProps;
    if (sampler instanceof WEBGLSampler) {
      this.sampler = sampler;
      samplerProps = sampler.props;
    } else {
      this.sampler = new WEBGLSampler(this.device, sampler);
      samplerProps = sampler;
    }
    const parameters = convertSamplerParametersToWebGL(samplerProps);
    this._setSamplerParameters(parameters);
  }
  // Call to regenerate mipmaps after modifying texture(s)
  generateMipmap(options) {
    const isFilterableAndRenderable = this.device.isTextureFormatRenderable(this.props.format) && this.device.isTextureFormatFilterable(this.props.format);
    if (!isFilterableAndRenderable) {
      log2.warn(`${this} is not renderable or filterable, may not be able to generate mipmaps`)();
      if (!(options == null ? void 0 : options.force)) {
        return;
      }
    }
    try {
      this.gl.bindTexture(this.glTarget, this.handle);
      this.gl.generateMipmap(this.glTarget);
    } catch (error) {
      log2.warn(`Error generating mipmap for ${this}: ${error.message}`)();
    } finally {
      this.gl.bindTexture(this.glTarget, null);
    }
  }
  // Image Data Setters
  copyExternalImage(options) {
    const size = Texture.getExternalImageSize(options.image);
    const opts = { ...Texture.defaultCopyExternalImageOptions, ...size, ...options };
    const { image, depth, mipLevel, x: x3, y: y3, z: z3, flipY } = opts;
    let { width, height } = opts;
    const { dimension, glTarget, glFormat, glInternalFormat, glType } = this;
    width = Math.min(width, this.width - x3);
    height = Math.min(height, this.height - y3);
    if (options.sourceX || options.sourceY) {
      throw new Error("WebGL does not support sourceX/sourceY)");
    }
    copyExternalImageToMipLevel(this.device.gl, this.handle, image, {
      dimension,
      mipLevel,
      x: x3,
      y: y3,
      z: z3,
      width,
      height,
      depth,
      glFormat,
      glInternalFormat,
      glType,
      glTarget,
      flipY
    });
    return { width: opts.width, height: opts.height };
  }
  setTexture1DData(data) {
    throw new Error("setTexture1DData not supported in WebGL.");
  }
  /** Set a simple texture */
  setTexture2DData(lodData, depth = 0) {
    this.bind();
    const lodArray = Texture.normalizeTextureData(lodData, this);
    if (lodArray.length > 1 && this.props.mipmaps !== false) {
      log2.warn(`Texture ${this.id} mipmap and multiple LODs.`)();
    }
    for (let lodLevel = 0; lodLevel < lodArray.length; lodLevel++) {
      const imageData = lodArray[lodLevel];
      this._setMipLevel(depth, lodLevel, imageData);
    }
    this.unbind();
  }
  /**
   * Sets a 3D texture
   * @param data
   */
  setTexture3DData(data) {
    if (this.props.dimension !== "3d") {
      throw new Error(this.id);
    }
    if (ArrayBuffer.isView(data)) {
      this.bind();
      copyCPUDataToMipLevel(this.device.gl, data, this);
      this.unbind();
    }
  }
  /**
   * Set a Texture Cube Data
   * @todo - could support TextureCubeArray with depth
   * @param data
   * @param index
   */
  setTextureCubeData(data, depth = 0) {
    if (this.props.dimension !== "cube") {
      throw new Error(this.id);
    }
    for (const face of Texture.CubeFaces) {
      this.setTextureCubeFaceData(data[face], face);
    }
  }
  /**
   * Sets an entire texture array
   * @param data
   */
  setTextureArrayData(data) {
    if (this.props.dimension !== "2d-array") {
      throw new Error(this.id);
    }
    throw new Error("setTextureArrayData not implemented.");
  }
  /**
   * Sets an entire texture cube array
   * @param data
   */
  setTextureCubeArrayData(data) {
    throw new Error("setTextureCubeArrayData not supported in WebGL2.");
  }
  setTextureCubeFaceData(lodData, face, depth = 0) {
    if (Array.isArray(lodData) && lodData.length > 1 && this.props.mipmaps !== false) {
      log2.warn(`${this.id} has mipmap and multiple LODs.`)();
    }
    const faceDepth = Texture.CubeFaces.indexOf(face);
    this.setTexture2DData(lodData, faceDepth);
  }
  // DEPRECATED METHODS
  /** Update external texture (video frame or canvas) @deprecated Use ExternalTexture */
  update() {
    throw new Error("Texture.update() not implemented. Use ExternalTexture");
  }
  // INTERNAL METHODS
  /** @todo update this method to accept LODs */
  setImageDataForFace(options) {
    const {
      face,
      width,
      height,
      pixels,
      data,
      format = 6408,
      type = 5121
      // generateMipmap = false // TODO
    } = options;
    const { gl } = this;
    const imageData = pixels || data;
    this.bind();
    if (imageData instanceof Promise) {
      imageData.then((resolvedImageData) => this.setImageDataForFace(Object.assign({}, options, {
        face,
        data: resolvedImageData,
        pixels: resolvedImageData
      })));
    } else if (this.width || this.height) {
      gl.texImage2D(face, 0, format, width, height, 0, format, type, imageData);
    } else {
      gl.texImage2D(face, 0, format, format, type, imageData);
    }
  }
  _getImageDataMap(faceData) {
    for (let i4 = 0; i4 < Texture.CubeFaces.length; ++i4) {
      const faceName = Texture.CubeFaces[i4];
      if (faceData[faceName]) {
        faceData[34069 + i4] = faceData[faceName];
        delete faceData[faceName];
      }
    }
    return faceData;
  }
  // RESOURCE METHODS
  /**
   * Sets sampler parameters on texture
   */
  _setSamplerParameters(parameters) {
    log2.log(1, `${this.id} sampler parameters`, this.device.getGLKeys(parameters))();
    this.gl.bindTexture(this.glTarget, this.handle);
    for (const [pname, pvalue] of Object.entries(parameters)) {
      const param = Number(pname);
      const value = pvalue;
      switch (param) {
        case 33082:
        case 33083:
          this.gl.texParameterf(this.glTarget, param, value);
          break;
        case 10241:
          this.gl.texParameteri(this.glTarget, param, value);
          break;
        case 10242:
        case 10243:
          this.gl.texParameteri(this.glTarget, param, value);
          break;
        case 34046:
          if (this.device.features.has("texture-filterable-anisotropic-webgl")) {
            this.gl.texParameteri(this.glTarget, param, value);
          }
          break;
        default:
          this.gl.texParameteri(this.glTarget, param, value);
          break;
      }
    }
    this.gl.bindTexture(this.glTarget, null);
  }
  // INTERNAL SETTERS
  /**
   * Copy a region of data from a CPU memory buffer into this texture.
   * @todo -   GLUnpackParameters parameters
   */
  _setMipLevel(depth, mipLevel, textureData, glTarget = this.glTarget) {
    if (Texture.isExternalImage(textureData)) {
      copyExternalImageToMipLevel(this.device.gl, this.handle, textureData, {
        ...this,
        depth,
        mipLevel,
        glTarget,
        flipY: this.props.flipY
      });
      return;
    }
    if (Texture.isTextureLevelData(textureData)) {
      copyCPUDataToMipLevel(this.device.gl, textureData.data, {
        ...this,
        depth,
        mipLevel,
        glTarget
      });
      return;
    }
    throw new Error("Texture: invalid image data");
  }
  // HELPERS
  getActiveUnit() {
    return this.gl.getParameter(34016) - 33984;
  }
  bind(textureUnit) {
    const { gl } = this;
    if (textureUnit !== void 0) {
      this.textureUnit = textureUnit;
      gl.activeTexture(33984 + textureUnit);
    }
    gl.bindTexture(this.glTarget, this.handle);
    return textureUnit;
  }
  unbind(textureUnit) {
    const { gl } = this;
    if (textureUnit !== void 0) {
      this.textureUnit = textureUnit;
      gl.activeTexture(33984 + textureUnit);
    }
    gl.bindTexture(this.glTarget, null);
    return textureUnit;
  }
};

// .yarn/__virtual__/@luma.gl-webgl-virtual-decc58d7ee/4/.yarn/berry/cache/@luma.gl-webgl-npm-9.1.9-e2e597afc9-10c0.zip/node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-render-pass.js
var COLOR_CHANNELS = [1, 2, 4, 8];
var WEBGLRenderPass = class extends RenderPass {
  constructor(device, props) {
    var _a3;
    super(device, props);
    __publicField(this, "device");
    /** Parameters that should be applied before each draw call */
    __publicField(this, "glParameters");
    this.device = device;
    let viewport;
    if (!((_a3 = props == null ? void 0 : props.parameters) == null ? void 0 : _a3.viewport)) {
      if (props == null ? void 0 : props.framebuffer) {
        const { width, height } = props.framebuffer;
        viewport = [0, 0, width, height];
      } else {
        const [width, height] = device.getCanvasContext().getDrawingBufferSize();
        viewport = [0, 0, width, height];
      }
    }
    this.device.pushState();
    this.setParameters({ viewport, ...this.props.parameters });
    const webglFramebuffer = this.props.framebuffer;
    if (webglFramebuffer == null ? void 0 : webglFramebuffer.handle) {
      if (this.props.framebuffer) {
        const drawBuffers = this.props.framebuffer.colorAttachments.map((_3, i4) => 36064 + i4);
        this.device.gl.drawBuffers(drawBuffers);
      } else {
        this.device.gl.drawBuffers([1029]);
      }
    }
    this.clear();
  }
  end() {
    this.device.popState();
  }
  pushDebugGroup(groupLabel) {
  }
  popDebugGroup() {
  }
  insertDebugMarker(markerLabel) {
  }
  // beginOcclusionQuery(queryIndex: number): void;
  // endOcclusionQuery(): void;
  // executeBundles(bundles: Iterable<GPURenderBundle>): void;
  /**
   * Maps RenderPass parameters to GL parameters
   */
  setParameters(parameters = {}) {
    const glParameters = { ...this.glParameters };
    glParameters.framebuffer = this.props.framebuffer || null;
    if (this.props.depthReadOnly) {
      glParameters.depthMask = !this.props.depthReadOnly;
    }
    glParameters.stencilMask = this.props.stencilReadOnly ? 0 : 1;
    glParameters[35977] = this.props.discard;
    if (parameters.viewport) {
      if (parameters.viewport.length >= 6) {
        glParameters.viewport = parameters.viewport.slice(0, 4);
        glParameters.depthRange = [parameters.viewport[4], parameters.viewport[5]];
      } else {
        glParameters.viewport = parameters.viewport;
      }
    }
    if (parameters.scissorRect) {
      glParameters.scissorTest = true;
      glParameters.scissor = parameters.scissorRect;
    }
    if (parameters.blendConstant) {
      glParameters.blendColor = parameters.blendConstant;
    }
    if (parameters.stencilReference) {
      console.warn("RenderPassParameters.stencilReference not yet implemented in WebGL");
      parameters[2967] = parameters.stencilReference;
    }
    if (parameters.colorMask) {
      glParameters.colorMask = COLOR_CHANNELS.map((channel) => Boolean(channel & parameters.colorMask));
    }
    this.glParameters = glParameters;
    setGLParameters(this.device.gl, glParameters);
  }
  beginOcclusionQuery(queryIndex) {
    const webglQuerySet = this.props.occlusionQuerySet;
    webglQuerySet == null ? void 0 : webglQuerySet.beginOcclusionQuery();
  }
  endOcclusionQuery() {
    const webglQuerySet = this.props.occlusionQuerySet;
    webglQuerySet == null ? void 0 : webglQuerySet.endOcclusionQuery();
  }
  // PRIVATE
  /**
   * Optionally clears depth, color and stencil buffers based on parameters
   */
  clear() {
    const glParameters = { ...this.glParameters };
    let clearMask = 0;
    if (this.props.clearColors) {
      this.props.clearColors.forEach((color, drawBufferIndex) => {
        if (color) {
          this.clearColorBuffer(drawBufferIndex, color);
        }
      });
    }
    if (this.props.clearColor !== false && this.props.clearColors === void 0) {
      clearMask |= 16384;
      glParameters.clearColor = this.props.clearColor;
    }
    if (this.props.clearDepth !== false) {
      clearMask |= 256;
      glParameters.clearDepth = this.props.clearDepth;
    }
    if (this.props.clearStencil !== false) {
      clearMask |= 1024;
      glParameters.clearStencil = this.props.clearStencil;
    }
    if (clearMask !== 0) {
      withGLParameters(this.device.gl, glParameters, () => {
        this.device.gl.clear(clearMask);
      });
    }
  }
  /**
   * WebGL2 - clear a specific color buffer
   */
  clearColorBuffer(drawBuffer = 0, value = [0, 0, 0, 0]) {
    withGLParameters(this.device.gl, { framebuffer: this.props.framebuffer }, () => {
      switch (value.constructor) {
        case Int8Array:
        case Int16Array:
        case Int32Array:
          this.device.gl.clearBufferiv(6144, drawBuffer, value);
          break;
        case Uint8Array:
        case Uint8ClampedArray:
        case Uint16Array:
        case Uint32Array:
          this.device.gl.clearBufferuiv(6144, drawBuffer, value);
          break;
        case Float32Array:
          this.device.gl.clearBufferfv(6144, drawBuffer, value);
          break;
        default:
          throw new Error("clearColorBuffer: color must be typed array");
      }
    });
  }
};

// .yarn/__virtual__/@luma.gl-webgl-virtual-decc58d7ee/4/.yarn/berry/cache/@luma.gl-webgl-npm-9.1.9-e2e597afc9-10c0.zip/node_modules/@luma.gl/webgl/dist/adapter/helpers/decode-webgl-types.js
function isSamplerUniform(type) {
  return SAMPLER_TYPES.includes(type);
}
var SAMPLER_TYPES = [
  35678,
  35680,
  35679,
  35682,
  36289,
  36292,
  36293,
  36298,
  36299,
  36300,
  36303,
  36306,
  36307,
  36308,
  36311
];
var COMPOSITE_GL_TYPES = {
  [5126]: [5126, 1, "float", "f32", "float32"],
  [35664]: [5126, 2, "vec2", "vec2<f32>", "float32x2"],
  [35665]: [5126, 3, "vec3", "vec3<f32>", "float32x3"],
  [35666]: [5126, 4, "vec4", "vec4<f32>", "float32x4"],
  [5124]: [5124, 1, "int", "i32", "sint32"],
  [35667]: [5124, 2, "ivec2", "vec2<i32>", "sint32x2"],
  [35668]: [5124, 3, "ivec3", "vec3<i32>", "sint32x3"],
  [35669]: [5124, 4, "ivec4", "vec4<i32>", "sint32x4"],
  [5125]: [5125, 1, "uint", "u32", "uint32"],
  [36294]: [5125, 2, "uvec2", "vec2<u32>", "uint32x2"],
  [36295]: [5125, 3, "uvec3", "vec3<u32>", "uint32x3"],
  [36296]: [5125, 4, "uvec4", "vec4<u32>", "uint32x4"],
  [35670]: [5126, 1, "bool", "f32", "float32"],
  [35671]: [5126, 2, "bvec2", "vec2<f32>", "float32x2"],
  [35672]: [5126, 3, "bvec3", "vec3<f32>", "float32x3"],
  [35673]: [5126, 4, "bvec4", "vec4<f32>", "float32x4"],
  // TODO - are sizes/components below correct?
  [35674]: [5126, 8, "mat2", "mat2x2<f32>"],
  // 4
  [35685]: [5126, 8, "mat2x3", "mat2x3<f32>"],
  // 6
  [35686]: [5126, 8, "mat2x4", "mat2x4<f32>"],
  // 8
  [35687]: [5126, 12, "mat3x2", "mat3x2<f32>"],
  // 6
  [35675]: [5126, 12, "mat3", "mat3x3<f32>"],
  // 9
  [35688]: [5126, 12, "mat3x4", "mat3x4<f32>"],
  // 12
  [35689]: [5126, 16, "mat4x2", "mat4x2<f32>"],
  // 8
  [35690]: [5126, 16, "mat4x3", "mat4x3<f32>"],
  // 12
  [35676]: [5126, 16, "mat4", "mat4x4<f32>"]
  // 16
};
function decodeGLUniformType(glUniformType) {
  const typeAndSize = COMPOSITE_GL_TYPES[glUniformType];
  if (!typeAndSize) {
    throw new Error("uniform");
  }
  const [glType, components, , format] = typeAndSize;
  return { format, components, glType };
}
function decodeGLAttributeType(glAttributeType) {
  const typeAndSize = COMPOSITE_GL_TYPES[glAttributeType];
  if (!typeAndSize) {
    throw new Error("attribute");
  }
  const [, components, , shaderType, vertexFormat] = typeAndSize;
  const attributeType = shaderType;
  return { attributeType, vertexFormat, components };
}

// .yarn/__virtual__/@luma.gl-webgl-virtual-decc58d7ee/4/.yarn/berry/cache/@luma.gl-webgl-npm-9.1.9-e2e597afc9-10c0.zip/node_modules/@luma.gl/webgl/dist/adapter/helpers/get-shader-layout.js
function getShaderLayoutFromGLSL(gl, program) {
  const shaderLayout = {
    attributes: [],
    bindings: []
  };
  shaderLayout.attributes = readAttributeDeclarations(gl, program);
  const uniformBlocks = readUniformBlocks(gl, program);
  for (const uniformBlock5 of uniformBlocks) {
    const uniforms2 = uniformBlock5.uniforms.map((uniform) => ({
      name: uniform.name,
      format: uniform.format,
      byteOffset: uniform.byteOffset,
      byteStride: uniform.byteStride,
      arrayLength: uniform.arrayLength
    }));
    shaderLayout.bindings.push({
      type: "uniform",
      name: uniformBlock5.name,
      group: 0,
      location: uniformBlock5.location,
      visibility: (uniformBlock5.vertex ? 1 : 0) & (uniformBlock5.fragment ? 2 : 0),
      minBindingSize: uniformBlock5.byteLength,
      uniforms: uniforms2
    });
  }
  const uniforms = readUniformBindings(gl, program);
  let textureUnit = 0;
  for (const uniform of uniforms) {
    if (isSamplerUniform(uniform.type)) {
      const { viewDimension, sampleType } = getSamplerInfo(uniform.type);
      shaderLayout.bindings.push({
        type: "texture",
        name: uniform.name,
        group: 0,
        location: textureUnit,
        viewDimension,
        sampleType
      });
      uniform.textureUnit = textureUnit;
      textureUnit += 1;
    }
  }
  if (uniforms.length) {
    shaderLayout.uniforms = uniforms;
  }
  const varyings = readVaryings(gl, program);
  if (varyings == null ? void 0 : varyings.length) {
    shaderLayout.varyings = varyings;
  }
  return shaderLayout;
}
function readAttributeDeclarations(gl, program) {
  const attributes = [];
  const count2 = gl.getProgramParameter(program, 35721);
  for (let index = 0; index < count2; index++) {
    const activeInfo = gl.getActiveAttrib(program, index);
    if (!activeInfo) {
      throw new Error("activeInfo");
    }
    const {
      name: name2,
      type: compositeType
      /* , size*/
    } = activeInfo;
    const location = gl.getAttribLocation(program, name2);
    if (location >= 0) {
      const { attributeType } = decodeGLAttributeType(compositeType);
      const stepMode = /instance/i.test(name2) ? "instance" : "vertex";
      attributes.push({
        name: name2,
        location,
        stepMode,
        type: attributeType
        // size - for arrays, size is the number of elements in the array
      });
    }
  }
  attributes.sort((a3, b2) => a3.location - b2.location);
  return attributes;
}
function readVaryings(gl, program) {
  const varyings = [];
  const count2 = gl.getProgramParameter(program, 35971);
  for (let location = 0; location < count2; location++) {
    const activeInfo = gl.getTransformFeedbackVarying(program, location);
    if (!activeInfo) {
      throw new Error("activeInfo");
    }
    const { name: name2, type: compositeType, size } = activeInfo;
    const { glType, components } = decodeGLUniformType(compositeType);
    const varying = { location, name: name2, type: glType, size: size * components };
    varyings.push(varying);
  }
  varyings.sort((a3, b2) => a3.location - b2.location);
  return varyings;
}
function readUniformBindings(gl, program) {
  const uniforms = [];
  const uniformCount = gl.getProgramParameter(program, 35718);
  for (let i4 = 0; i4 < uniformCount; i4++) {
    const activeInfo = gl.getActiveUniform(program, i4);
    if (!activeInfo) {
      throw new Error("activeInfo");
    }
    const { name: rawName, size, type } = activeInfo;
    const { name: name2, isArray: isArray4 } = parseUniformName(rawName);
    let webglLocation = gl.getUniformLocation(program, name2);
    const uniformInfo = {
      // WebGL locations are uniquely typed but just numbers
      location: webglLocation,
      name: name2,
      size,
      type,
      isArray: isArray4
    };
    uniforms.push(uniformInfo);
    if (uniformInfo.size > 1) {
      for (let j3 = 0; j3 < uniformInfo.size; j3++) {
        const elementName = `${name2}[${j3}]`;
        webglLocation = gl.getUniformLocation(program, elementName);
        const arrayElementUniformInfo = {
          ...uniformInfo,
          name: elementName,
          location: webglLocation
        };
        uniforms.push(arrayElementUniformInfo);
      }
    }
  }
  return uniforms;
}
function readUniformBlocks(gl, program) {
  const getBlockParameter = (blockIndex, pname) => gl.getActiveUniformBlockParameter(program, blockIndex, pname);
  const uniformBlocks = [];
  const blockCount = gl.getProgramParameter(program, 35382);
  for (let blockIndex = 0; blockIndex < blockCount; blockIndex++) {
    const blockInfo = {
      name: gl.getActiveUniformBlockName(program, blockIndex) || "",
      location: getBlockParameter(blockIndex, 35391),
      byteLength: getBlockParameter(blockIndex, 35392),
      vertex: getBlockParameter(blockIndex, 35396),
      fragment: getBlockParameter(blockIndex, 35398),
      uniformCount: getBlockParameter(blockIndex, 35394),
      uniforms: []
    };
    const uniformIndices = getBlockParameter(blockIndex, 35395) || [];
    const uniformType = gl.getActiveUniforms(program, uniformIndices, 35383);
    const uniformArrayLength = gl.getActiveUniforms(program, uniformIndices, 35384);
    const uniformOffset = gl.getActiveUniforms(program, uniformIndices, 35387);
    const uniformStride = gl.getActiveUniforms(program, uniformIndices, 35388);
    for (let i4 = 0; i4 < blockInfo.uniformCount; ++i4) {
      const activeInfo = gl.getActiveUniform(program, uniformIndices[i4]);
      if (!activeInfo) {
        throw new Error("activeInfo");
      }
      blockInfo.uniforms.push({
        name: activeInfo.name,
        format: decodeGLUniformType(uniformType[i4]).format,
        type: uniformType[i4],
        arrayLength: uniformArrayLength[i4],
        byteOffset: uniformOffset[i4],
        byteStride: uniformStride[i4]
        // matrixStride: uniformStride[i],
        // rowMajor: uniformRowMajor[i]
      });
    }
    uniformBlocks.push(blockInfo);
  }
  uniformBlocks.sort((a3, b2) => a3.location - b2.location);
  return uniformBlocks;
}
var SAMPLER_UNIFORMS_GL_TO_GPU = {
  [35678]: ["2d", "float"],
  [35680]: ["cube", "float"],
  [35679]: ["3d", "float"],
  [35682]: ["3d", "depth"],
  [36289]: ["2d-array", "float"],
  [36292]: ["2d-array", "depth"],
  [36293]: ["cube", "float"],
  [36298]: ["2d", "sint"],
  [36299]: ["3d", "sint"],
  [36300]: ["cube", "sint"],
  [36303]: ["2d-array", "uint"],
  [36306]: ["2d", "uint"],
  [36307]: ["3d", "uint"],
  [36308]: ["cube", "uint"],
  [36311]: ["2d-array", "uint"]
};
function getSamplerInfo(type) {
  const sampler = SAMPLER_UNIFORMS_GL_TO_GPU[type];
  if (!sampler) {
    throw new Error("sampler");
  }
  const [viewDimension, sampleType] = sampler;
  return { viewDimension, sampleType };
}
function parseUniformName(name2) {
  if (name2[name2.length - 1] !== "]") {
    return {
      name: name2,
      length: 1,
      isArray: false
    };
  }
  const UNIFORM_NAME_REGEXP = /([^[]*)(\[[0-9]+\])?/;
  const matches3 = UNIFORM_NAME_REGEXP.exec(name2);
  if (!matches3 || matches3.length < 2) {
    throw new Error(`Failed to parse GLSL uniform name ${name2}`);
  }
  return {
    name: matches3[1],
    length: matches3[2] ? 1 : 0,
    isArray: Boolean(matches3[2])
  };
}

// .yarn/__virtual__/@luma.gl-webgl-virtual-decc58d7ee/4/.yarn/berry/cache/@luma.gl-webgl-npm-9.1.9-e2e597afc9-10c0.zip/node_modules/@luma.gl/webgl/dist/adapter/helpers/set-uniform.js
function setUniform(gl, location, type, value) {
  const gl2 = gl;
  let uniformValue = value;
  if (uniformValue === true) {
    uniformValue = 1;
  }
  if (uniformValue === false) {
    uniformValue = 0;
  }
  const arrayValue = typeof uniformValue === "number" ? [uniformValue] : uniformValue;
  switch (type) {
    case 35678:
    case 35680:
    case 35679:
    case 35682:
    case 36289:
    case 36292:
    case 36293:
    case 36298:
    case 36299:
    case 36300:
    case 36303:
    case 36306:
    case 36307:
    case 36308:
    case 36311:
      if (typeof value !== "number") {
        throw new Error("samplers must be set to integers");
      }
      return gl.uniform1i(location, value);
    case 5126:
      return gl.uniform1fv(location, arrayValue);
    case 35664:
      return gl.uniform2fv(location, arrayValue);
    case 35665:
      return gl.uniform3fv(location, arrayValue);
    case 35666:
      return gl.uniform4fv(location, arrayValue);
    case 5124:
      return gl.uniform1iv(location, arrayValue);
    case 35667:
      return gl.uniform2iv(location, arrayValue);
    case 35668:
      return gl.uniform3iv(location, arrayValue);
    case 35669:
      return gl.uniform4iv(location, arrayValue);
    case 35670:
      return gl.uniform1iv(location, arrayValue);
    case 35671:
      return gl.uniform2iv(location, arrayValue);
    case 35672:
      return gl.uniform3iv(location, arrayValue);
    case 35673:
      return gl.uniform4iv(location, arrayValue);
    // WEBGL2 - unsigned integers
    case 5125:
      return gl2.uniform1uiv(location, arrayValue, 1);
    case 36294:
      return gl2.uniform2uiv(location, arrayValue, 2);
    case 36295:
      return gl2.uniform3uiv(location, arrayValue, 3);
    case 36296:
      return gl2.uniform4uiv(location, arrayValue, 4);
    // WebGL2 - quadratic matrices
    // false: don't transpose the matrix
    case 35674:
      return gl.uniformMatrix2fv(location, false, arrayValue);
    case 35675:
      return gl.uniformMatrix3fv(location, false, arrayValue);
    case 35676:
      return gl.uniformMatrix4fv(location, false, arrayValue);
    // WebGL2 - rectangular matrices
    case 35685:
      return gl2.uniformMatrix2x3fv(location, false, arrayValue);
    case 35686:
      return gl2.uniformMatrix2x4fv(location, false, arrayValue);
    case 35687:
      return gl2.uniformMatrix3x2fv(location, false, arrayValue);
    case 35688:
      return gl2.uniformMatrix3x4fv(location, false, arrayValue);
    case 35689:
      return gl2.uniformMatrix4x2fv(location, false, arrayValue);
    case 35690:
      return gl2.uniformMatrix4x3fv(location, false, arrayValue);
  }
  throw new Error("Illegal uniform");
}

// .yarn/__virtual__/@luma.gl-webgl-virtual-decc58d7ee/4/.yarn/berry/cache/@luma.gl-webgl-npm-9.1.9-e2e597afc9-10c0.zip/node_modules/@luma.gl/webgl/dist/utils/split-uniforms-and-bindings.js
function isUniformValue2(value) {
  return isNumericArray(value) !== null || typeof value === "number" || typeof value === "boolean";
}
function splitUniformsAndBindings2(uniforms) {
  const result = { bindings: {}, uniforms: {} };
  Object.keys(uniforms).forEach((name2) => {
    const uniform = uniforms[name2];
    if (isUniformValue2(uniform)) {
      result.uniforms[name2] = uniform;
    } else {
      result.bindings[name2] = uniform;
    }
  });
  return result;
}

// .yarn/__virtual__/@luma.gl-webgl-virtual-decc58d7ee/4/.yarn/berry/cache/@luma.gl-webgl-npm-9.1.9-e2e597afc9-10c0.zip/node_modules/@luma.gl/webgl/dist/adapter/helpers/webgl-topology-utils.js
function getGLDrawMode(topology) {
  switch (topology) {
    case "point-list":
      return 0;
    case "line-list":
      return 1;
    case "line-strip":
      return 3;
    case "triangle-list":
      return 4;
    case "triangle-strip":
      return 5;
    default:
      throw new Error(topology);
  }
}
function getGLPrimitive(topology) {
  switch (topology) {
    case "point-list":
      return 0;
    case "line-list":
      return 1;
    case "line-strip":
      return 1;
    case "triangle-list":
      return 4;
    case "triangle-strip":
      return 4;
    default:
      throw new Error(topology);
  }
}

// .yarn/__virtual__/@luma.gl-webgl-virtual-decc58d7ee/4/.yarn/berry/cache/@luma.gl-webgl-npm-9.1.9-e2e597afc9-10c0.zip/node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-render-pipeline.js
var LOG_PROGRAM_PERF_PRIORITY = 4;
var WEBGLRenderPipeline = class extends RenderPipeline {
  // TODO are these used?
  constructor(device, props) {
    super(device, props);
    /** The WebGL device that created this render pipeline */
    __publicField(this, "device");
    /** Handle to underlying WebGL program */
    __publicField(this, "handle");
    /** vertex shader */
    __publicField(this, "vs");
    /** fragment shader */
    __publicField(this, "fs");
    /** The layout extracted from shader by WebGL introspection APIs */
    __publicField(this, "introspectedLayout");
    /** Uniforms set on this model */
    __publicField(this, "uniforms", {});
    /** Bindings set on this model */
    __publicField(this, "bindings", {});
    /** WebGL varyings */
    __publicField(this, "varyings", null);
    __publicField(this, "_uniformCount", 0);
    __publicField(this, "_uniformSetters", {});
    this.device = device;
    this.handle = this.props.handle || this.device.gl.createProgram();
    this.device.setSpectorMetadata(this.handle, { id: this.props.id });
    this.vs = props.vs;
    this.fs = props.fs;
    const { varyings, bufferMode = 35981 } = props;
    if (varyings && varyings.length > 0) {
      this.varyings = varyings;
      this.device.gl.transformFeedbackVaryings(this.handle, varyings, bufferMode);
    }
    this._linkShaders();
    log2.time(1, `RenderPipeline ${this.id} - shaderLayout introspection`)();
    this.introspectedLayout = getShaderLayoutFromGLSL(this.device.gl, this.handle);
    log2.timeEnd(1, `RenderPipeline ${this.id} - shaderLayout introspection`)();
    this.shaderLayout = mergeShaderLayout(this.introspectedLayout, props.shaderLayout);
  }
  destroy() {
    if (this.handle) {
      this.device.gl.deleteProgram(this.handle);
      this.destroyed = true;
    }
  }
  /**
   * Bindings include: textures, samplers and uniform buffers
   * @todo needed for portable model
   */
  setBindings(bindings, options) {
    for (const [name2, value] of Object.entries(bindings)) {
      const binding = this.shaderLayout.bindings.find((binding_) => binding_.name === name2) || this.shaderLayout.bindings.find((binding_) => binding_.name === `${name2}Uniforms`);
      if (!binding) {
        const validBindings = this.shaderLayout.bindings.map((binding_) => `"${binding_.name}"`).join(", ");
        if (!(options == null ? void 0 : options.disableWarnings)) {
          log2.warn(`No binding "${name2}" in render pipeline "${this.id}", expected one of ${validBindings}`, value)();
        }
        continue;
      }
      if (!value) {
        log2.warn(`Unsetting binding "${name2}" in render pipeline "${this.id}"`)();
      }
      switch (binding.type) {
        case "uniform":
          if (!(value instanceof WEBGLBuffer) && !(value.buffer instanceof WEBGLBuffer)) {
            throw new Error("buffer value");
          }
          break;
        case "texture":
          if (!(value instanceof WEBGLTextureView || value instanceof WEBGLTexture || value instanceof WEBGLFramebuffer)) {
            throw new Error("texture value");
          }
          break;
        case "sampler":
          log2.warn(`Ignoring sampler ${name2}`)();
          break;
        default:
          throw new Error(binding.type);
      }
      this.bindings[name2] = value;
    }
  }
  /** @todo needed for portable model
   * @note The WebGL API is offers many ways to draw things
   * This function unifies those ways into a single call using common parameters with sane defaults
   */
  draw(options) {
    var _a3;
    const {
      renderPass,
      parameters = this.props.parameters,
      topology = this.props.topology,
      vertexArray,
      vertexCount,
      // indexCount,
      instanceCount,
      isInstanced = false,
      firstVertex = 0,
      // firstIndex,
      // firstInstance,
      // baseVertex,
      transformFeedback
    } = options;
    const glDrawMode = getGLDrawMode(topology);
    const isIndexed = Boolean(vertexArray.indexBuffer);
    const glIndexType = (_a3 = vertexArray.indexBuffer) == null ? void 0 : _a3.glIndexType;
    if (this.linkStatus !== "success") {
      log2.info(2, `RenderPipeline:${this.id}.draw() aborted - waiting for shader linking`)();
      return false;
    }
    if (!this._areTexturesRenderable()) {
      log2.info(2, `RenderPipeline:${this.id}.draw() aborted - textures not yet loaded`)();
      return false;
    }
    this.device.gl.useProgram(this.handle);
    vertexArray.bindBeforeRender(renderPass);
    if (transformFeedback) {
      transformFeedback.begin(this.props.topology);
    }
    this._applyBindings();
    this._applyUniforms();
    const webglRenderPass = renderPass;
    withDeviceAndGLParameters(this.device, parameters, webglRenderPass.glParameters, () => {
      if (isIndexed && isInstanced) {
        this.device.gl.drawElementsInstanced(
          glDrawMode,
          vertexCount || 0,
          // indexCount?
          glIndexType,
          firstVertex,
          instanceCount || 0
        );
      } else if (isIndexed) {
        this.device.gl.drawElements(glDrawMode, vertexCount || 0, glIndexType, firstVertex);
      } else if (isInstanced) {
        this.device.gl.drawArraysInstanced(glDrawMode, firstVertex, vertexCount || 0, instanceCount || 0);
      } else {
        this.device.gl.drawArrays(glDrawMode, firstVertex, vertexCount || 0);
      }
      if (transformFeedback) {
        transformFeedback.end();
      }
    });
    vertexArray.unbindAfterRender(renderPass);
    return true;
  }
  // DEPRECATED METHODS
  setUniformsWebGL(uniforms) {
    const { bindings } = splitUniformsAndBindings2(uniforms);
    Object.keys(bindings).forEach((name2) => {
      log2.warn(`Unsupported value "${JSON.stringify(bindings[name2])}" used in setUniforms() for key ${name2}. Use setBindings() instead?`)();
    });
    Object.assign(this.uniforms, uniforms);
  }
  // PRIVATE METHODS
  // setAttributes(attributes: Record<string, Buffer>): void {}
  // setBindings(bindings: Record<string, Binding>): void {}
  async _linkShaders() {
    const { gl } = this.device;
    gl.attachShader(this.handle, this.vs.handle);
    gl.attachShader(this.handle, this.fs.handle);
    log2.time(LOG_PROGRAM_PERF_PRIORITY, `linkProgram for ${this.id}`)();
    gl.linkProgram(this.handle);
    log2.timeEnd(LOG_PROGRAM_PERF_PRIORITY, `linkProgram for ${this.id}`)();
    if (log2.level === 0) {
    }
    if (!this.device.features.has("compilation-status-async-webgl")) {
      const status2 = this._getLinkStatus();
      this._reportLinkStatus(status2);
      return;
    }
    log2.once(1, "RenderPipeline linking is asynchronous")();
    await this._waitForLinkComplete();
    log2.info(2, `RenderPipeline ${this.id} - async linking complete: ${this.linkStatus}`)();
    const status = this._getLinkStatus();
    this._reportLinkStatus(status);
  }
  /** Report link status. First, check for shader compilation failures if linking fails */
  async _reportLinkStatus(status) {
    var _a3;
    switch (status) {
      case "success":
        return;
      default:
        switch (this.vs.compilationStatus) {
          case "error":
            this.vs.debugShader();
            throw new Error(`Error during compilation of shader ${this.vs.id}`);
          case "pending":
            this.vs.asyncCompilationStatus.then(() => this.vs.debugShader());
            break;
          case "success":
            break;
        }
        switch ((_a3 = this.fs) == null ? void 0 : _a3.compilationStatus) {
          case "error":
            this.fs.debugShader();
            throw new Error(`Error during compilation of shader ${this.fs.id}`);
          case "pending":
            this.fs.asyncCompilationStatus.then(() => this.fs.debugShader());
            break;
          case "success":
            break;
        }
        const linkErrorLog = this.device.gl.getProgramInfoLog(this.handle);
        throw new Error(`Error during ${status}: ${linkErrorLog}`);
    }
  }
  /**
   * Get the shader compilation status
   * TODO - Load log even when no error reported, to catch warnings?
   * https://gamedev.stackexchange.com/questions/30429/how-to-detect-glsl-warnings
   */
  _getLinkStatus() {
    const { gl } = this.device;
    const linked = gl.getProgramParameter(this.handle, 35714);
    if (!linked) {
      this.linkStatus = "error";
      return "linking";
    }
    gl.validateProgram(this.handle);
    const validated = gl.getProgramParameter(this.handle, 35715);
    if (!validated) {
      this.linkStatus = "error";
      return "validation";
    }
    this.linkStatus = "success";
    return "success";
  }
  /** Use KHR_parallel_shader_compile extension if available */
  async _waitForLinkComplete() {
    const waitMs = async (ms) => await new Promise((resolve2) => setTimeout(resolve2, ms));
    const DELAY_MS = 10;
    if (!this.device.features.has("compilation-status-async-webgl")) {
      await waitMs(DELAY_MS);
      return;
    }
    const { gl } = this.device;
    for (; ; ) {
      const complete = gl.getProgramParameter(this.handle, 37297);
      if (complete) {
        return;
      }
      await waitMs(DELAY_MS);
    }
  }
  /**
   * Checks if all texture-values uniforms are renderable (i.e. loaded)
   * Update a texture if needed (e.g. from video)
   * Note: This is currently done before every draw call
   */
  _areTexturesRenderable() {
    let texturesRenderable = true;
    for (const bindingInfo of this.shaderLayout.bindings) {
      if (!this.bindings[bindingInfo.name] && !this.bindings[bindingInfo.name.replace(/Uniforms$/, "")]) {
        log2.warn(`Binding ${bindingInfo.name} not found in ${this.id}`)();
        texturesRenderable = false;
      }
    }
    return texturesRenderable;
  }
  /** Apply any bindings (before each draw call) */
  _applyBindings() {
    if (this.linkStatus !== "success") {
      return;
    }
    const { gl } = this.device;
    gl.useProgram(this.handle);
    let textureUnit = 0;
    let uniformBufferIndex = 0;
    for (const binding of this.shaderLayout.bindings) {
      const value = this.bindings[binding.name] || this.bindings[binding.name.replace(/Uniforms$/, "")];
      if (!value) {
        throw new Error(`No value for binding ${binding.name} in ${this.id}`);
      }
      switch (binding.type) {
        case "uniform":
          const { name: name2 } = binding;
          const location = gl.getUniformBlockIndex(this.handle, name2);
          if (location === 4294967295) {
            throw new Error(`Invalid uniform block name ${name2}`);
          }
          gl.uniformBlockBinding(this.handle, uniformBufferIndex, location);
          if (value instanceof WEBGLBuffer) {
            gl.bindBufferBase(35345, uniformBufferIndex, value.handle);
          } else {
            gl.bindBufferRange(
              35345,
              uniformBufferIndex,
              // @ts-expect-error
              value.buffer.handle,
              // @ts-expect-error
              value.offset || 0,
              // @ts-expect-error
              value.size || value.buffer.byteLength - value.offset
            );
          }
          uniformBufferIndex += 1;
          break;
        case "texture":
          if (!(value instanceof WEBGLTextureView || value instanceof WEBGLTexture || value instanceof WEBGLFramebuffer)) {
            throw new Error("texture");
          }
          let texture;
          if (value instanceof WEBGLTextureView) {
            texture = value.texture;
          } else if (value instanceof WEBGLTexture) {
            texture = value;
          } else if (value instanceof WEBGLFramebuffer && value.colorAttachments[0] instanceof WEBGLTextureView) {
            log2.warn("Passing framebuffer in texture binding may be deprecated. Use fbo.colorAttachments[0] instead")();
            texture = value.colorAttachments[0].texture;
          } else {
            throw new Error("No texture");
          }
          gl.activeTexture(33984 + textureUnit);
          gl.bindTexture(texture.glTarget, texture.handle);
          textureUnit += 1;
          break;
        case "sampler":
          break;
        case "storage":
        case "read-only-storage":
          throw new Error(`binding type '${binding.type}' not supported in WebGL`);
      }
    }
  }
  /**
   * Due to program sharing, uniforms need to be reset before every draw call
   * (though caching will avoid redundant WebGL calls)
   */
  _applyUniforms() {
    for (const uniformLayout of this.shaderLayout.uniforms || []) {
      const { name: name2, location, type, textureUnit } = uniformLayout;
      const value = this.uniforms[name2] ?? textureUnit;
      if (value !== void 0) {
        setUniform(this.device.gl, location, type, value);
      }
    }
  }
};
function mergeShaderLayout(baseLayout, overrideLayout) {
  const mergedLayout = {
    ...baseLayout,
    attributes: baseLayout.attributes.map((attribute) => ({ ...attribute }))
  };
  for (const attribute of (overrideLayout == null ? void 0 : overrideLayout.attributes) || []) {
    const baseAttribute = mergedLayout.attributes.find((attr) => attr.name === attribute.name);
    if (!baseAttribute) {
      log2.warn(`shader layout attribute ${attribute.name} not present in shader`);
    } else {
      baseAttribute.type = attribute.type || baseAttribute.type;
      baseAttribute.stepMode = attribute.stepMode || baseAttribute.stepMode;
    }
  }
  return mergedLayout;
}

// .yarn/__virtual__/@luma.gl-webgl-virtual-decc58d7ee/4/.yarn/berry/cache/@luma.gl-webgl-npm-9.1.9-e2e597afc9-10c0.zip/node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-command-buffer.js
var WEBGLCommandBuffer = class extends CommandBuffer {
  constructor(device) {
    super(device, {});
    __publicField(this, "device");
    __publicField(this, "commands", []);
    this.device = device;
  }
  submitCommands(commands = this.commands) {
    for (const command of commands) {
      switch (command.name) {
        case "copy-buffer-to-buffer":
          _copyBufferToBuffer(this.device, command.options);
          break;
        case "copy-buffer-to-texture":
          _copyBufferToTexture(this.device, command.options);
          break;
        case "copy-texture-to-buffer":
          _copyTextureToBuffer(this.device, command.options);
          break;
        case "copy-texture-to-texture":
          _copyTextureToTexture(this.device, command.options);
          break;
        // case 'clear-texture':
        //   _clearTexture(this.device, command.options);
        //   break;
        default:
          throw new Error(command.name);
      }
    }
  }
};
function _copyBufferToBuffer(device, options) {
  const source4 = options.sourceBuffer;
  const destination = options.destinationBuffer;
  device.gl.bindBuffer(36662, source4.handle);
  device.gl.bindBuffer(36663, destination.handle);
  device.gl.copyBufferSubData(36662, 36663, options.sourceOffset ?? 0, options.destinationOffset ?? 0, options.size);
  device.gl.bindBuffer(36662, null);
  device.gl.bindBuffer(36663, null);
}
function _copyBufferToTexture(device, options) {
  throw new Error("Not implemented");
}
function _copyTextureToBuffer(device, options) {
  const {
    /** Texture to copy to/from. */
    sourceTexture,
    /**  Mip-map level of the texture to copy to/from. (Default 0) */
    mipLevel = 0,
    /** Defines which aspects of the texture to copy to/from. */
    aspect = "all",
    /** Width to copy */
    width = options.sourceTexture.width,
    /** Height to copy */
    height = options.sourceTexture.height,
    depthOrArrayLayers = 0,
    /** Defines the origin of the copy - the minimum corner of the texture sub-region to copy to/from. */
    origin = [0, 0],
    /** Destination buffer */
    destinationBuffer,
    /** Offset, in bytes, from the beginning of the buffer to the start of the image data (default 0) */
    byteOffset = 0,
    /**
     * The stride, in bytes, between the beginning of each block row and the subsequent block row.
     * Required if there are multiple block rows (i.e. the copy height or depth is more than one block).
     */
    bytesPerRow,
    /**
     * Number of block rows per single image of the texture.
     * rowsPerImage &times; bytesPerRow is the stride, in bytes, between the beginning of each image of data and the subsequent image.
     * Required if there are multiple images (i.e. the copy depth is more than one).
     */
    rowsPerImage
  } = options;
  if (aspect !== "all") {
    throw new Error("aspect not supported in WebGL");
  }
  if (mipLevel !== 0 || depthOrArrayLayers !== 0 || bytesPerRow || rowsPerImage) {
    throw new Error("not implemented");
  }
  const { framebuffer, destroyFramebuffer } = getFramebuffer2(sourceTexture);
  let prevHandle;
  try {
    const webglBuffer = destinationBuffer;
    const sourceWidth = width || framebuffer.width;
    const sourceHeight = height || framebuffer.height;
    const sourceParams = getTextureFormatWebGL(framebuffer.colorAttachments[0].texture.props.format);
    const sourceFormat = sourceParams.format;
    const sourceType = sourceParams.type;
    device.gl.bindBuffer(35051, webglBuffer.handle);
    prevHandle = device.gl.bindFramebuffer(36160, framebuffer.handle);
    device.gl.readPixels(origin[0], origin[1], sourceWidth, sourceHeight, sourceFormat, sourceType, byteOffset);
  } finally {
    device.gl.bindBuffer(35051, null);
    if (prevHandle !== void 0) {
      device.gl.bindFramebuffer(36160, prevHandle);
    }
    if (destroyFramebuffer) {
      framebuffer.destroy();
    }
  }
}
function _copyTextureToTexture(device, options) {
  const {
    /** Texture to copy to/from. */
    sourceTexture,
    /**  Mip-map level of the texture to copy to (Default 0) */
    destinationMipLevel = 0,
    /** Defines which aspects of the texture to copy to/from. */
    // aspect = 'all',
    /** Defines the origin of the copy - the minimum corner of the texture sub-region to copy from. */
    origin = [0, 0],
    /** Defines the origin of the copy - the minimum corner of the texture sub-region to copy to. */
    destinationOrigin = [0, 0],
    /** Texture to copy to/from. */
    destinationTexture
    /**  Mip-map level of the texture to copy to/from. (Default 0) */
    // destinationMipLevel = options.mipLevel,
    /** Defines the origin of the copy - the minimum corner of the texture sub-region to copy to/from. */
    // destinationOrigin = [0, 0],
    /** Defines which aspects of the texture to copy to/from. */
    // destinationAspect = options.aspect,
  } = options;
  let {
    width = options.destinationTexture.width,
    height = options.destinationTexture.height
    // depthOrArrayLayers = 0
  } = options;
  const { framebuffer, destroyFramebuffer } = getFramebuffer2(sourceTexture);
  const [sourceX, sourceY] = origin;
  const [destinationX, destinationY, destinationZ] = destinationOrigin;
  const prevHandle = device.gl.bindFramebuffer(36160, framebuffer.handle);
  let texture = null;
  let textureTarget;
  if (destinationTexture instanceof WEBGLTexture) {
    texture = destinationTexture;
    width = Number.isFinite(width) ? width : texture.width;
    height = Number.isFinite(height) ? height : texture.height;
    texture.bind(0);
    textureTarget = texture.glTarget;
  } else {
    throw new Error("invalid destination");
  }
  switch (textureTarget) {
    case 3553:
    case 34067:
      device.gl.copyTexSubImage2D(textureTarget, destinationMipLevel, destinationX, destinationY, sourceX, sourceY, width, height);
      break;
    case 35866:
    case 32879:
      device.gl.copyTexSubImage3D(textureTarget, destinationMipLevel, destinationX, destinationY, destinationZ, sourceX, sourceY, width, height);
      break;
    default:
  }
  if (texture) {
    texture.unbind();
  }
  device.gl.bindFramebuffer(36160, prevHandle);
  if (destroyFramebuffer) {
    framebuffer.destroy();
  }
}
function getFramebuffer2(source4) {
  if (source4 instanceof Texture) {
    const { width, height, id } = source4;
    const framebuffer = source4.device.createFramebuffer({
      id: `framebuffer-for-${id}`,
      width,
      height,
      colorAttachments: [source4]
    });
    return { framebuffer, destroyFramebuffer: true };
  }
  return { framebuffer: source4, destroyFramebuffer: false };
}

// .yarn/__virtual__/@luma.gl-webgl-virtual-decc58d7ee/4/.yarn/berry/cache/@luma.gl-webgl-npm-9.1.9-e2e597afc9-10c0.zip/node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-command-encoder.js
var WEBGLCommandEncoder = class extends CommandEncoder {
  constructor(device, props) {
    super(device, props);
    __publicField(this, "device");
    __publicField(this, "commandBuffer");
    this.device = device;
    this.commandBuffer = new WEBGLCommandBuffer(device);
  }
  destroy() {
  }
  finish() {
    this.commandBuffer.submitCommands();
  }
  // beginRenderPass(GPURenderPassDescriptor descriptor): GPURenderPassEncoder;
  // beginComputePass(optional GPUComputePassDescriptor descriptor = {}): GPUComputePassEncoder;
  // finish(options?: {id?: string}): GPUCommandBuffer;
  copyBufferToBuffer(options) {
    this.commandBuffer.commands.push({ name: "copy-buffer-to-buffer", options });
  }
  copyBufferToTexture(options) {
    this.commandBuffer.commands.push({ name: "copy-buffer-to-texture", options });
  }
  copyTextureToBuffer(options) {
    this.commandBuffer.commands.push({ name: "copy-texture-to-buffer", options });
  }
  copyTextureToTexture(options) {
    this.commandBuffer.commands.push({ name: "copy-texture-to-texture", options });
  }
  // clearTexture(options: ClearTextureOptions): void {
  //   this.commandBuffer.commands.push({name: 'copy-texture-to-texture', options});
  // }
  pushDebugGroup(groupLabel) {
  }
  popDebugGroup() {
  }
  insertDebugMarker(markerLabel) {
  }
  resolveQuerySet(querySet, destination, options) {
  }
};

// .yarn/__virtual__/@luma.gl-webgl-virtual-decc58d7ee/4/.yarn/berry/cache/@luma.gl-webgl-npm-9.1.9-e2e597afc9-10c0.zip/node_modules/@luma.gl/webgl/dist/utils/fill-array.js
function fillArray2(options) {
  const { target: target2, source: source4, start = 0, count: count2 = 1 } = options;
  const length5 = source4.length;
  const total = count2 * length5;
  let copied = 0;
  for (let i4 = start; copied < length5; copied++) {
    target2[i4++] = source4[copied];
  }
  while (copied < total) {
    if (copied < total - copied) {
      target2.copyWithin(start + copied, start, start + copied);
      copied *= 2;
    } else {
      target2.copyWithin(start + copied, start, start + total - copied);
      copied = total;
    }
  }
  return options.target;
}

// .yarn/__virtual__/@luma.gl-webgl-virtual-decc58d7ee/4/.yarn/berry/cache/@luma.gl-webgl-npm-9.1.9-e2e597afc9-10c0.zip/node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-vertex-array.js
var WEBGLVertexArray = class _WEBGLVertexArray extends VertexArray {
  // Create a VertexArray
  constructor(device, props) {
    super(device, props);
    __publicField(this, "device");
    __publicField(this, "handle");
    /** Attribute 0 buffer constant */
    __publicField(this, "buffer", null);
    __publicField(this, "bufferValue", null);
    this.device = device;
    this.handle = this.device.gl.createVertexArray();
  }
  get [Symbol.toStringTag]() {
    return "VertexArray";
  }
  /** * Attribute 0 can not be disable on most desktop OpenGL based browsers */
  static isConstantAttributeZeroSupported(device) {
    return getBrowser() === "Chrome";
  }
  destroy() {
    var _a3;
    super.destroy();
    if (this.buffer) {
      (_a3 = this.buffer) == null ? void 0 : _a3.destroy();
    }
    if (this.handle) {
      this.device.gl.deleteVertexArray(this.handle);
      this.handle = void 0;
    }
  }
  /**
  // Set (bind/unbind) an elements buffer, for indexed rendering.
  // Must be a Buffer bound to GL.ELEMENT_ARRAY_BUFFER or null. Constants not supported
   *
   * @param elementBuffer
   */
  setIndexBuffer(indexBuffer) {
    const buffer2 = indexBuffer;
    if (buffer2 && buffer2.glTarget !== 34963) {
      throw new Error("Use .setBuffer()");
    }
    this.device.gl.bindVertexArray(this.handle);
    this.device.gl.bindBuffer(34963, buffer2 ? buffer2.handle : null);
    this.indexBuffer = buffer2;
    this.device.gl.bindVertexArray(null);
  }
  /** Set a location in vertex attributes array to a buffer, enables the location, sets divisor */
  setBuffer(location, attributeBuffer) {
    const buffer2 = attributeBuffer;
    if (buffer2.glTarget === 34963) {
      throw new Error("Use .setIndexBuffer()");
    }
    const { size, type, stride, offset, normalized, integer, divisor } = this._getAccessor(location);
    this.device.gl.bindVertexArray(this.handle);
    this.device.gl.bindBuffer(34962, buffer2.handle);
    if (integer) {
      this.device.gl.vertexAttribIPointer(location, size, type, stride, offset);
    } else {
      this.device.gl.vertexAttribPointer(location, size, type, normalized, stride, offset);
    }
    this.device.gl.bindBuffer(34962, null);
    this.device.gl.enableVertexAttribArray(location);
    this.device.gl.vertexAttribDivisor(location, divisor || 0);
    this.attributes[location] = buffer2;
    this.device.gl.bindVertexArray(null);
  }
  /** Set a location in vertex attributes array to a constant value, disables the location */
  setConstantWebGL(location, value) {
    this._enable(location, false);
    this.attributes[location] = value;
  }
  bindBeforeRender() {
    this.device.gl.bindVertexArray(this.handle);
    this._applyConstantAttributes();
  }
  unbindAfterRender() {
    this.device.gl.bindVertexArray(null);
  }
  // Internal methods
  /**
   * Constant attributes need to be reset before every draw call
   * Any attribute that is disabled in the current vertex array object
   * is read from the context's global constant value for that attribute location.
   * @note Constant attributes are only supported in WebGL, not in WebGPU
   */
  _applyConstantAttributes() {
    for (let location = 0; location < this.maxVertexAttributes; ++location) {
      const constant = this.attributes[location];
      if (ArrayBuffer.isView(constant)) {
        this.device.setConstantAttributeWebGL(location, constant);
      }
    }
  }
  /**
   * Set a location in vertex attributes array to a buffer, enables the location, sets divisor
   * @note requires vertex array to be bound
   */
  // protected _setAttributeLayout(location: number): void {
  //   const {size, type, stride, offset, normalized, integer, divisor} = this._getAccessor(location);
  //   // WebGL2 supports *integer* data formats, i.e. GPU will see integer values
  //   if (integer) {
  //     this.device.gl.vertexAttribIPointer(location, size, type, stride, offset);
  //   } else {
  //     // Attaches ARRAY_BUFFER with specified buffer format to location
  //     this.device.gl.vertexAttribPointer(location, size, type, normalized, stride, offset);
  //   }
  //   this.device.gl.vertexAttribDivisor(location, divisor || 0);
  // }
  /** Get an accessor from the  */
  _getAccessor(location) {
    const attributeInfo = this.attributeInfos[location];
    if (!attributeInfo) {
      throw new Error(`Unknown attribute location ${location}`);
    }
    const glType = getGLFromVertexType(attributeInfo.bufferDataType);
    return {
      size: attributeInfo.bufferComponents,
      type: glType,
      stride: attributeInfo.byteStride,
      offset: attributeInfo.byteOffset,
      normalized: attributeInfo.normalized,
      // it is the shader attribute declaration, not the vertex memory format,
      // that determines if the data in the buffer will be treated as integers.
      //
      // Also note that WebGL supports assigning non-normalized integer data to floating point attributes,
      // but as far as we can tell, WebGPU does not.
      integer: attributeInfo.integer,
      divisor: attributeInfo.stepMode === "instance" ? 1 : 0
    };
  }
  /**
   * Enabling an attribute location makes it reference the currently bound buffer
   * Disabling an attribute location makes it reference the global constant value
   * TODO - handle single values for size 1 attributes?
   * TODO - convert classic arrays based on known type?
   */
  _enable(location, enable2 = true) {
    const canDisableAttributeZero = _WEBGLVertexArray.isConstantAttributeZeroSupported(this.device);
    const canDisableAttribute = canDisableAttributeZero || location !== 0;
    if (enable2 || canDisableAttribute) {
      location = Number(location);
      this.device.gl.bindVertexArray(this.handle);
      if (enable2) {
        this.device.gl.enableVertexAttribArray(location);
      } else {
        this.device.gl.disableVertexAttribArray(location);
      }
      this.device.gl.bindVertexArray(null);
    }
  }
  /**
   * Provide a means to create a buffer that is equivalent to a constant.
   * NOTE: Desktop OpenGL cannot disable attribute 0.
   * https://stackoverflow.com/questions/20305231/webgl-warning-attribute-0-is-disabled-
   * this-has-significant-performance-penalty
   */
  getConstantBuffer(elementCount, value) {
    const constantValue = normalizeConstantArrayValue(value);
    const byteLength = constantValue.byteLength * elementCount;
    const length5 = constantValue.length * elementCount;
    if (this.buffer && byteLength !== this.buffer.byteLength) {
      throw new Error(`Buffer size is immutable, byte length ${byteLength} !== ${this.buffer.byteLength}.`);
    }
    let updateNeeded = !this.buffer;
    this.buffer = this.buffer || this.device.createBuffer({ byteLength });
    updateNeeded = updateNeeded || !compareConstantArrayValues(constantValue, this.bufferValue);
    if (updateNeeded) {
      const typedArray = getScratchArray(value.constructor, length5);
      fillArray2({ target: typedArray, source: constantValue, start: 0, count: length5 });
      this.buffer.write(typedArray);
      this.bufferValue = value;
    }
    return this.buffer;
  }
};
function normalizeConstantArrayValue(arrayValue) {
  if (Array.isArray(arrayValue)) {
    return new Float32Array(arrayValue);
  }
  return arrayValue;
}
function compareConstantArrayValues(v1, v22) {
  if (!v1 || !v22 || v1.length !== v22.length || v1.constructor !== v22.constructor) {
    return false;
  }
  for (let i4 = 0; i4 < v1.length; ++i4) {
    if (v1[i4] !== v22[i4]) {
      return false;
    }
  }
  return true;
}

// .yarn/__virtual__/@luma.gl-webgl-virtual-decc58d7ee/4/.yarn/berry/cache/@luma.gl-webgl-npm-9.1.9-e2e597afc9-10c0.zip/node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-transform-feedback.js
var WEBGLTransformFeedback = class extends TransformFeedback {
  constructor(device, props) {
    super(device, props);
    __publicField(this, "device");
    __publicField(this, "gl");
    __publicField(this, "handle");
    /**
     * NOTE: The Model already has this information while drawing, but
     * TransformFeedback currently needs it internally, to look up
     * varying information outside of a draw() call.
     */
    __publicField(this, "layout");
    __publicField(this, "buffers", {});
    __publicField(this, "unusedBuffers", {});
    /**
     * Allows us to avoid a Chrome bug where a buffer that is already bound to a
     * different target cannot be bound to 'TRANSFORM_FEEDBACK_BUFFER' target.
     * This a major workaround, see: https://github.com/KhronosGroup/WebGL/issues/2346
     */
    __publicField(this, "bindOnUse", true);
    __publicField(this, "_bound", false);
    this.device = device;
    this.gl = device.gl;
    this.handle = this.props.handle || this.gl.createTransformFeedback();
    this.layout = this.props.layout;
    if (props.buffers) {
      this.setBuffers(props.buffers);
    }
    Object.seal(this);
  }
  destroy() {
    this.gl.deleteTransformFeedback(this.handle);
    super.destroy();
  }
  begin(topology = "point-list") {
    this.gl.bindTransformFeedback(36386, this.handle);
    if (this.bindOnUse) {
      this._bindBuffers();
    }
    this.gl.beginTransformFeedback(getGLPrimitive(topology));
  }
  end() {
    this.gl.endTransformFeedback();
    if (this.bindOnUse) {
      this._unbindBuffers();
    }
    this.gl.bindTransformFeedback(36386, null);
  }
  // SUBCLASS
  setBuffers(buffers) {
    this.buffers = {};
    this.unusedBuffers = {};
    this.bind(() => {
      for (const bufferName in buffers) {
        this.setBuffer(bufferName, buffers[bufferName]);
      }
    });
  }
  setBuffer(locationOrName, bufferOrRange) {
    const location = this._getVaryingIndex(locationOrName);
    const { buffer: buffer2, byteLength, byteOffset } = this._getBufferRange(bufferOrRange);
    if (location < 0) {
      this.unusedBuffers[locationOrName] = buffer2;
      log2.warn(`${this.id} unusedBuffers varying buffer ${locationOrName}`)();
      return;
    }
    this.buffers[location] = { buffer: buffer2, byteLength, byteOffset };
    if (!this.bindOnUse) {
      this._bindBuffer(location, buffer2, byteOffset, byteLength);
    }
  }
  getBuffer(locationOrName) {
    if (isIndex(locationOrName)) {
      return this.buffers[locationOrName] || null;
    }
    const location = this._getVaryingIndex(locationOrName);
    return location >= 0 ? this.buffers[location] : null;
  }
  bind(funcOrHandle = this.handle) {
    if (typeof funcOrHandle !== "function") {
      this.gl.bindTransformFeedback(36386, funcOrHandle);
      return this;
    }
    let value;
    if (!this._bound) {
      this.gl.bindTransformFeedback(36386, this.handle);
      this._bound = true;
      value = funcOrHandle();
      this._bound = false;
      this.gl.bindTransformFeedback(36386, null);
    } else {
      value = funcOrHandle();
    }
    return value;
  }
  unbind() {
    this.bind(null);
  }
  // PRIVATE METHODS
  /** Extract offsets for bindBufferRange */
  _getBufferRange(bufferOrRange) {
    if (bufferOrRange instanceof WEBGLBuffer) {
      return { buffer: bufferOrRange, byteOffset: 0, byteLength: bufferOrRange.byteLength };
    }
    const { buffer: buffer2, byteOffset = 0, byteLength = bufferOrRange.buffer.byteLength } = bufferOrRange;
    return { buffer: buffer2, byteOffset, byteLength };
  }
  _getVaryingIndex(locationOrName) {
    if (isIndex(locationOrName)) {
      return Number(locationOrName);
    }
    for (const varying of this.layout.varyings) {
      if (locationOrName === varying.name) {
        return varying.location;
      }
    }
    return -1;
  }
  /**
   * Need to avoid chrome bug where buffer that is already bound to a different target
   * cannot be bound to 'TRANSFORM_FEEDBACK_BUFFER' target.
   */
  _bindBuffers() {
    for (const bufferIndex in this.buffers) {
      const { buffer: buffer2, byteLength, byteOffset } = this._getBufferRange(this.buffers[bufferIndex]);
      this._bindBuffer(Number(bufferIndex), buffer2, byteOffset, byteLength);
    }
  }
  _unbindBuffers() {
    for (const bufferIndex in this.buffers) {
      this.gl.bindBufferBase(35982, Number(bufferIndex), null);
    }
  }
  _bindBuffer(index, buffer2, byteOffset = 0, byteLength) {
    const handle = buffer2 && buffer2.handle;
    if (!handle || byteLength === void 0) {
      this.gl.bindBufferBase(35982, index, handle);
    } else {
      this.gl.bindBufferRange(35982, index, handle, byteOffset, byteLength);
    }
  }
};
function isIndex(value) {
  if (typeof value === "number") {
    return Number.isInteger(value);
  }
  return /^\d+$/.test(value);
}

// .yarn/__virtual__/@luma.gl-webgl-virtual-decc58d7ee/4/.yarn/berry/cache/@luma.gl-webgl-npm-9.1.9-e2e597afc9-10c0.zip/node_modules/@luma.gl/webgl/dist/adapter/resources/webgl-query-set.js
var WEBGLQuerySet = class extends QuerySet {
  // Create a query class
  constructor(device, props) {
    super(device, props);
    __publicField(this, "device");
    __publicField(this, "handle");
    __publicField(this, "target", null);
    __publicField(this, "_queryPending", false);
    __publicField(this, "_pollingPromise", null);
    this.device = device;
    if (props.count > 1) {
      throw new Error("WebGL QuerySet can only have one value");
    }
    this.handle = this.device.gl.createQuery();
    Object.seal(this);
  }
  get [Symbol.toStringTag]() {
    return "Query";
  }
  destroy() {
    this.device.gl.deleteQuery(this.handle);
  }
  // FOR RENDER PASS AND COMMAND ENCODER
  /**
   * Shortcut for timer query (dependent on extension in both WebGL1 and 2)
   * Measures GPU time delta between this call and a matching `end` call in the
   * GPU instruction stream.
   */
  beginTimestampQuery() {
    return this._begin(35007);
  }
  endTimestampQuery() {
    this._end();
  }
  // Shortcut for occlusion queries
  beginOcclusionQuery(options) {
    return this._begin((options == null ? void 0 : options.conservative) ? 36202 : 35887);
  }
  endOcclusionQuery() {
    this._end();
  }
  // Shortcut for transformFeedbackQuery
  beginTransformFeedbackQuery() {
    return this._begin(35976);
  }
  endTransformFeedbackQuery() {
    this._end();
  }
  async resolveQuery() {
    const value = await this.pollQuery();
    return [value];
  }
  // PRIVATE METHODS
  /**
   * Due to OpenGL API limitations, after calling `begin()` on one Query
   * instance, `end()` must be called on that same instance before
   * calling `begin()` on another query. While there can be multiple
   * outstanding queries representing disjoint `begin()`/`end()` intervals.
   * It is not possible to interleave or overlap `begin` and `end` calls.
   */
  _begin(target2) {
    if (this._queryPending) {
      return;
    }
    this.target = target2;
    this.device.gl.beginQuery(this.target, this.handle);
    return;
  }
  // ends the current query
  _end() {
    if (this._queryPending) {
      return;
    }
    if (this.target) {
      this.device.gl.endQuery(this.target);
      this.target = null;
      this._queryPending = true;
    }
    return;
  }
  // Returns true if the query result is available
  isResultAvailable() {
    if (!this._queryPending) {
      return false;
    }
    const resultAvailable = this.device.gl.getQueryParameter(this.handle, 34919);
    if (resultAvailable) {
      this._queryPending = false;
    }
    return resultAvailable;
  }
  // Timing query is disjoint, i.e. results are invalid
  isTimerDisjoint() {
    return this.device.gl.getParameter(36795);
  }
  // Returns query result.
  getResult() {
    return this.device.gl.getQueryParameter(this.handle, 34918);
  }
  // Returns the query result, converted to milliseconds to match JavaScript conventions.
  getTimerMilliseconds() {
    return this.getResult() / 1e6;
  }
  // Polls the query
  pollQuery(limit = Number.POSITIVE_INFINITY) {
    if (this._pollingPromise) {
      return this._pollingPromise;
    }
    let counter2 = 0;
    this._pollingPromise = new Promise((resolve2, reject) => {
      const poll = () => {
        if (this.isResultAvailable()) {
          resolve2(this.getResult());
          this._pollingPromise = null;
        } else if (counter2++ > limit) {
          reject("Timed out");
          this._pollingPromise = null;
        } else {
          requestAnimationFrame(poll);
        }
      };
      requestAnimationFrame(poll);
    });
    return this._pollingPromise;
  }
};

// .yarn/__virtual__/@luma.gl-webgl-virtual-decc58d7ee/4/.yarn/berry/cache/@luma.gl-webgl-npm-9.1.9-e2e597afc9-10c0.zip/node_modules/@luma.gl/webgl/dist/adapter/webgl-device.js
var WebGLDevice = class extends Device {
  //
  // Public API
  //
  constructor(props) {
    var _a3, _b;
    super({ ...props, id: props.id || uid3("webgl-device") });
    //
    // Public `Device` API
    //
    /** type of this device */
    __publicField(this, "type", "webgl");
    // Use the ! assertion to handle the case where _reuseDevices causes the constructor to return early
    /** The underlying WebGL context */
    __publicField(this, "handle");
    __publicField(this, "features");
    __publicField(this, "limits");
    __publicField(this, "info");
    __publicField(this, "canvasContext");
    __publicField(this, "lost");
    __publicField(this, "_resolveContextLost");
    /** WebGL2 context. */
    __publicField(this, "gl");
    __publicField(this, "debug", false);
    /** State used by luma.gl classes: TODO - move to canvasContext*/
    __publicField(this, "_canvasSizeInfo", { clientWidth: 0, clientHeight: 0, devicePixelRatio: 1 });
    /** State used by luma.gl classes - TODO - not used? */
    __publicField(this, "_extensions", {});
    __publicField(this, "_polyfilled", false);
    /** Instance of Spector.js (if initialized) */
    __publicField(this, "spectorJS");
    __publicField(this, "renderPass", null);
    /** Store constants */
    __publicField(this, "_constants");
    const canvasContextProps = Device._getCanvasContextProps(props);
    if (!canvasContextProps) {
      throw new Error("WebGLDevice requires props.createCanvasContext to be set");
    }
    let device = (_b = (_a3 = canvasContextProps.canvas) == null ? void 0 : _a3.gl) == null ? void 0 : _b.device;
    if (device) {
      throw new Error(`WebGL context already attached to device ${device.id}`);
    }
    this.canvasContext = new WebGLCanvasContext(this, canvasContextProps);
    this.lost = new Promise((resolve2) => {
      this._resolveContextLost = resolve2;
    });
    const webglContextAttributes = { ...props.webgl };
    if (canvasContextProps.alphaMode === "premultiplied") {
      webglContextAttributes.premultipliedAlpha = true;
    }
    if (props.powerPreference !== void 0) {
      webglContextAttributes.powerPreference = props.powerPreference;
    }
    const externalGLContext = this.props._handle;
    const gl = externalGLContext || createBrowserContext(this.canvasContext.canvas, {
      onContextLost: (event) => {
        var _a4;
        return (_a4 = this._resolveContextLost) == null ? void 0 : _a4.call(this, {
          reason: "destroyed",
          message: "Entered sleep mode, or too many apps or browser tabs are using the GPU."
        });
      },
      // eslint-disable-next-line no-console
      onContextRestored: (event) => console.log("WebGL context restored")
    }, webglContextAttributes);
    if (!gl) {
      throw new Error("WebGL context creation failed");
    }
    device = gl.device;
    if (device) {
      if (props._reuseDevices) {
        log2.log(1, `Not creating a new Device, instead returning a reference to Device ${device.id} already attached to WebGL context`, device)();
        device._reused = true;
        return device;
      }
      throw new Error(`WebGL context already attached to device ${device.id}`);
    }
    this.handle = gl;
    this.gl = gl;
    this.spectorJS = initializeSpectorJS({ ...this.props, gl: this.handle });
    this.gl.device = this;
    this.gl._version = 2;
    this.info = getDeviceInfo(this.gl, this._extensions);
    this.limits = new WebGLDeviceLimits(this.gl);
    this.features = new WebGLDeviceFeatures(this.gl, this._extensions, this.props._disabledFeatures);
    if (this.props._initializeFeatures) {
      this.features.initializeFeatures();
    }
    if (canvasContextProps.autoResize !== false) {
      this.canvasContext.resize();
    }
    const glState = new WebGLStateTracker(this.gl, {
      log: (...args) => log2.log(1, ...args)()
    });
    glState.trackState(this.gl, { copyState: false });
    const debugWebGL = props.debugWebGL || props.debug;
    const traceWebGL = props.debugWebGL;
    if (debugWebGL) {
      this.gl = makeDebugContext(this.gl, { debugWebGL, traceWebGL });
      log2.warn("WebGL debug mode activated. Performance reduced.")();
      if (props.debugWebGL) {
        log2.level = Math.max(log2.level, 1);
      }
    }
  }
  /**
   * Destroys the device
   *
   * @note "Detaches" from the WebGL context unless _reuseDevices is true.
   *
   * @note The underlying WebGL context is not immediately destroyed,
   * but may be destroyed later through normal JavaScript garbage collection.
   * This is a fundamental limitation since WebGL does not offer any
   * browser API for destroying WebGL contexts.
   */
  destroy() {
    if (!this.props._reuseDevices && !this._reused) {
      delete this.gl.device;
    }
  }
  get isLost() {
    return this.gl.isContextLost();
  }
  // IMPLEMENTATION OF ABSTRACT DEVICE
  createCanvasContext(props) {
    throw new Error("WebGL only supports a single canvas");
  }
  createBuffer(props) {
    const newProps = this._normalizeBufferProps(props);
    return new WEBGLBuffer(this, newProps);
  }
  createTexture(props) {
    return new WEBGLTexture(this, props);
  }
  createExternalTexture(props) {
    throw new Error("createExternalTexture() not implemented");
  }
  createSampler(props) {
    return new WEBGLSampler(this, props);
  }
  createShader(props) {
    return new WEBGLShader(this, props);
  }
  createFramebuffer(props) {
    return new WEBGLFramebuffer(this, props);
  }
  createVertexArray(props) {
    return new WEBGLVertexArray(this, props);
  }
  createTransformFeedback(props) {
    return new WEBGLTransformFeedback(this, props);
  }
  createQuerySet(props) {
    return new WEBGLQuerySet(this, props);
  }
  createRenderPipeline(props) {
    return new WEBGLRenderPipeline(this, props);
  }
  beginRenderPass(props) {
    return new WEBGLRenderPass(this, props);
  }
  createComputePipeline(props) {
    throw new Error("ComputePipeline not supported in WebGL");
  }
  beginComputePass(props) {
    throw new Error("ComputePass not supported in WebGL");
  }
  createCommandEncoder(props = {}) {
    return new WEBGLCommandEncoder(this, props);
  }
  /**
   * Offscreen Canvas Support: Commit the frame
   * https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/commit
   * Chrome's offscreen canvas does not require gl.commit
   */
  submit() {
    var _a3;
    (_a3 = this.renderPass) == null ? void 0 : _a3.end();
    this.renderPass = null;
  }
  //
  // TEMPORARY HACKS - will be removed in v9.1
  //
  /** @deprecated - should use command encoder */
  readPixelsToArrayWebGL(source4, options) {
    return readPixelsToArray(source4, options);
  }
  /** @deprecated - should use command encoder */
  readPixelsToBufferWebGL(source4, options) {
    return readPixelsToBuffer(source4, options);
  }
  setParametersWebGL(parameters) {
    setGLParameters(this.gl, parameters);
  }
  getParametersWebGL(parameters) {
    return getGLParameters(this.gl, parameters);
  }
  withParametersWebGL(parameters, func) {
    return withGLParameters(this.gl, parameters, func);
  }
  resetWebGL() {
    log2.warn("WebGLDevice.resetWebGL is deprecated, use only for debugging")();
    resetGLParameters(this.gl);
  }
  _getDeviceSpecificTextureFormatCapabilities(capabilities) {
    return getTextureFormatCapabilitiesWebGL(this.gl, capabilities, this._extensions);
  }
  //
  // WebGL-only API (not part of `Device` API)
  //
  /**
   * Triggers device (or WebGL context) loss.
   * @note primarily intended for testing how application reacts to device loss
   */
  loseDevice() {
    var _a3;
    let deviceLossTriggered = false;
    const extensions = this.getExtension("WEBGL_lose_context");
    const ext = extensions.WEBGL_lose_context;
    if (ext) {
      deviceLossTriggered = true;
      ext.loseContext();
    }
    (_a3 = this._resolveContextLost) == null ? void 0 : _a3.call(this, {
      reason: "destroyed",
      message: "Application triggered context loss"
    });
    return deviceLossTriggered;
  }
  /** Save current WebGL context state onto an internal stack */
  pushState() {
    const webglState = WebGLStateTracker.get(this.gl);
    webglState.push();
  }
  /** Restores previously saved context state */
  popState() {
    const webglState = WebGLStateTracker.get(this.gl);
    webglState.pop();
  }
  /**
   * Storing data on a special field on WebGLObjects makes that data visible in SPECTOR chrome debug extension
   * luma.gl ids and props can be inspected
   */
  setSpectorMetadata(handle, props) {
    handle.__SPECTOR_Metadata = props;
  }
  /**
   * Returns the GL.<KEY> constant that corresponds to a numeric value of a GL constant
   * Be aware that there are some duplicates especially for constants that are 0,
   * so this isn't guaranteed to return the right key in all cases.
   */
  getGLKey(value, options) {
    const number = Number(value);
    for (const key in this.gl) {
      if (this.gl[key] === number) {
        return `GL.${key}`;
      }
    }
    return (options == null ? void 0 : options.emptyIfUnknown) ? "" : String(value);
  }
  /**
   * Returns a map with any GL.<KEY> constants mapped to strings, both for keys and values
   */
  getGLKeys(glParameters) {
    const opts = { emptyIfUnknown: true };
    return Object.entries(glParameters).reduce((keys, [key, value]) => {
      keys[`${key}:${this.getGLKey(key, opts)}`] = `${value}:${this.getGLKey(value, opts)}`;
      return keys;
    }, {});
  }
  /**
   * Set a constant value for a location. Disabled attributes at that location will read from this value
   * @note WebGL constants are stored globally on the WebGL context, not the VertexArray
   * so they need to be updated before every render
   * @todo - remember/cache values to avoid setting them unnecessarily?
   */
  setConstantAttributeWebGL(location, constant) {
    const maxVertexAttributes = this.limits.maxVertexAttributes;
    this._constants = this._constants || new Array(maxVertexAttributes).fill(null);
    const currentConstant = this._constants[location];
    if (currentConstant && compareConstantArrayValues2(currentConstant, constant)) {
      log2.info(1, `setConstantAttributeWebGL(${location}) could have been skipped, value unchanged`)();
    }
    this._constants[location] = constant;
    switch (constant.constructor) {
      case Float32Array:
        setConstantFloatArray(this, location, constant);
        break;
      case Int32Array:
        setConstantIntArray(this, location, constant);
        break;
      case Uint32Array:
        setConstantUintArray(this, location, constant);
        break;
      default:
        throw new Error("constant");
    }
  }
  /** Ensure extensions are only requested once */
  getExtension(name2) {
    getWebGLExtension(this.gl, name2, this._extensions);
    return this._extensions;
  }
};
function setConstantFloatArray(device, location, array) {
  switch (array.length) {
    case 1:
      device.gl.vertexAttrib1fv(location, array);
      break;
    case 2:
      device.gl.vertexAttrib2fv(location, array);
      break;
    case 3:
      device.gl.vertexAttrib3fv(location, array);
      break;
    case 4:
      device.gl.vertexAttrib4fv(location, array);
      break;
    default:
  }
}
function setConstantIntArray(device, location, array) {
  device.gl.vertexAttribI4iv(location, array);
}
function setConstantUintArray(device, location, array) {
  device.gl.vertexAttribI4uiv(location, array);
}
function compareConstantArrayValues2(v1, v22) {
  if (!v1 || !v22 || v1.length !== v22.length || v1.constructor !== v22.constructor) {
    return false;
  }
  for (let i4 = 0; i4 < v1.length; ++i4) {
    if (v1[i4] !== v22[i4]) {
      return false;
    }
  }
  return true;
}

// .yarn/__virtual__/@luma.gl-webgl-virtual-decc58d7ee/4/.yarn/berry/cache/@luma.gl-webgl-npm-9.1.9-e2e597afc9-10c0.zip/node_modules/@luma.gl/webgl/dist/context/polyfills/polyfill-webgl1-extensions.js
var WEBGL1_STATIC_EXTENSIONS = {
  WEBGL_depth_texture: {
    UNSIGNED_INT_24_8_WEBGL: 34042
  },
  OES_element_index_uint: {},
  OES_texture_float: {},
  OES_texture_half_float: {
    // @ts-expect-error different numbers?
    HALF_FLOAT_OES: 5131
  },
  EXT_color_buffer_float: {},
  OES_standard_derivatives: {
    FRAGMENT_SHADER_DERIVATIVE_HINT_OES: 35723
  },
  EXT_frag_depth: {},
  EXT_blend_minmax: {
    MIN_EXT: 32775,
    MAX_EXT: 32776
  },
  EXT_shader_texture_lod: {}
};
var getWEBGL_draw_buffers = (gl) => ({
  drawBuffersWEBGL(buffers) {
    return gl.drawBuffers(buffers);
  },
  COLOR_ATTACHMENT0_WEBGL: 36064,
  COLOR_ATTACHMENT1_WEBGL: 36065,
  COLOR_ATTACHMENT2_WEBGL: 36066,
  COLOR_ATTACHMENT3_WEBGL: 36067
});
var getOES_vertex_array_object = (gl) => ({
  VERTEX_ARRAY_BINDING_OES: 34229,
  createVertexArrayOES() {
    return gl.createVertexArray();
  },
  deleteVertexArrayOES(vertexArray) {
    return gl.deleteVertexArray(vertexArray);
  },
  isVertexArrayOES(vertexArray) {
    return gl.isVertexArray(vertexArray);
  },
  bindVertexArrayOES(vertexArray) {
    return gl.bindVertexArray(vertexArray);
  }
});
var getANGLE_instanced_arrays = (gl) => ({
  VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE: 35070,
  drawArraysInstancedANGLE(...args) {
    return gl.drawArraysInstanced(...args);
  },
  drawElementsInstancedANGLE(...args) {
    return gl.drawElementsInstanced(...args);
  },
  vertexAttribDivisorANGLE(...args) {
    return gl.vertexAttribDivisor(...args);
  }
});
function enforceWebGL2(enforce = true) {
  const prototype = HTMLCanvasElement.prototype;
  if (!enforce && prototype.originalGetContext) {
    prototype.getContext = prototype.originalGetContext;
    prototype.originalGetContext = void 0;
    return;
  }
  prototype.originalGetContext = prototype.getContext;
  prototype.getContext = function(contextId, options) {
    if (contextId === "webgl" || contextId === "experimental-webgl") {
      const context = this.originalGetContext("webgl2", options);
      if (context instanceof HTMLElement) {
        polyfillWebGL1Extensions(context);
      }
      return context;
    }
    return this.originalGetContext(contextId, options);
  };
}
function polyfillWebGL1Extensions(gl) {
  gl.getExtension("EXT_color_buffer_float");
  const boundExtensions = {
    ...WEBGL1_STATIC_EXTENSIONS,
    WEBGL_disjoint_timer_query: gl.getExtension("EXT_disjoint_timer_query_webgl2"),
    WEBGL_draw_buffers: getWEBGL_draw_buffers(gl),
    OES_vertex_array_object: getOES_vertex_array_object(gl),
    ANGLE_instanced_arrays: getANGLE_instanced_arrays(gl)
  };
  const originalGetExtension = gl.getExtension;
  gl.getExtension = function(extensionName) {
    const ext = originalGetExtension.call(gl, extensionName);
    if (ext) {
      return ext;
    }
    if (extensionName in boundExtensions) {
      return boundExtensions[extensionName];
    }
    return null;
  };
  const originalGetSupportedExtensions = gl.getSupportedExtensions;
  gl.getSupportedExtensions = function() {
    const extensions = originalGetSupportedExtensions.apply(gl) || [];
    return extensions == null ? void 0 : extensions.concat(Object.keys(boundExtensions));
  };
}

// .yarn/__virtual__/@luma.gl-webgl-virtual-decc58d7ee/4/.yarn/berry/cache/@luma.gl-webgl-npm-9.1.9-e2e597afc9-10c0.zip/node_modules/@luma.gl/webgl/dist/adapter/webgl-adapter.js
var LOG_LEVEL2 = 1;
var WebGLAdapter = class extends Adapter {
  constructor() {
    super();
    /** type of device's created by this adapter */
    __publicField(this, "type", "webgl");
    Device.defaultProps = { ...Device.defaultProps, ...DEFAULT_SPECTOR_PROPS };
    WebGLDevice.adapter = this;
  }
  /** Check if WebGL 2 is available */
  isSupported() {
    return typeof WebGL2RenderingContext !== "undefined";
  }
  /** Force any created WebGL contexts to be WebGL2 contexts, polyfilled with WebGL1 extensions */
  enforceWebGL2(enable2) {
    enforceWebGL2(enable2);
  }
  /**
   * Get a device instance from a GL context
   * Creates a WebGLCanvasContext against the contexts canvas
   * @note autoResize will be disabled, assuming that whoever created the external context will be handling resizes.
   * @param gl
   * @returns
   */
  async attach(gl) {
    if (gl instanceof WebGLDevice) {
      return gl;
    }
    if ((gl == null ? void 0 : gl.device) instanceof Device) {
      return gl.device;
    }
    if (!isWebGL(gl)) {
      throw new Error("Invalid WebGL2RenderingContext");
    }
    return new WebGLDevice({
      _handle: gl,
      createCanvasContext: { canvas: gl.canvas, autoResize: false }
    });
  }
  async create(props = {}) {
    log2.groupCollapsed(LOG_LEVEL2, "WebGLDevice created")();
    const promises = [];
    if (props.debugWebGL || props.debug) {
      promises.push(loadWebGLDeveloperTools());
    }
    if (props.debugSpectorJS) {
      promises.push(loadSpectorJS(props));
    }
    const results = await Promise.allSettled(promises);
    for (const result of results) {
      if (result.status === "rejected") {
        log2.error(`Failed to initialize debug libraries ${result.reason}`)();
      }
    }
    const device = new WebGLDevice(props);
    const message2 = `${device._reused ? "Reusing" : "Created"} device with WebGL2 ${device.debug ? "debug " : ""}context: ${device.info.vendor}, ${device.info.renderer} for canvas: ${device.canvasContext.id}`;
    log2.probe(LOG_LEVEL2, message2)();
    log2.table(LOG_LEVEL2, device.info)();
    log2.groupEnd(LOG_LEVEL2)();
    return device;
  }
};
function isWebGL(gl) {
  if (typeof WebGL2RenderingContext !== "undefined" && gl instanceof WebGL2RenderingContext) {
    return true;
  }
  return Boolean(gl && Number.isFinite(gl._version));
}
var webgl2Adapter = new WebGLAdapter();

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/lib/deck.js
function noop3() {
}
var getCursor = ({ isDragging }) => isDragging ? "grabbing" : "grab";
var defaultProps = {
  id: "",
  width: "100%",
  height: "100%",
  style: null,
  viewState: null,
  initialViewState: null,
  pickingRadius: 0,
  layerFilter: null,
  parameters: {},
  parent: null,
  device: null,
  deviceProps: {},
  gl: null,
  canvas: null,
  layers: [],
  effects: [],
  views: null,
  controller: null,
  // Rely on external controller, e.g. react-map-gl
  useDevicePixels: true,
  touchAction: "none",
  eventRecognizerOptions: {},
  _framebuffer: null,
  _animate: false,
  _pickable: true,
  _typedArrayManagerProps: {},
  _customRender: null,
  widgets: [],
  onDeviceInitialized: noop3,
  onWebGLInitialized: noop3,
  onResize: noop3,
  onViewStateChange: noop3,
  onInteractionStateChange: noop3,
  onBeforeRender: noop3,
  onAfterRender: noop3,
  onLoad: noop3,
  onError: (error) => log_default.error(error.message, error.cause)(),
  onHover: null,
  onClick: null,
  onDragStart: null,
  onDrag: null,
  onDragEnd: null,
  _onMetrics: null,
  getCursor,
  getTooltip: null,
  debug: false,
  drawPickingColors: false
};
var Deck = class {
  constructor(props) {
    this.width = 0;
    this.height = 0;
    this.userData = {};
    this.device = null;
    this.canvas = null;
    this.viewManager = null;
    this.layerManager = null;
    this.effectManager = null;
    this.deckRenderer = null;
    this.deckPicker = null;
    this.eventManager = null;
    this.widgetManager = null;
    this.tooltip = null;
    this.animationLoop = null;
    this.cursorState = {
      isHovering: false,
      isDragging: false
    };
    this.stats = new Stats({ id: "deck.gl" });
    this.metrics = {
      fps: 0,
      setPropsTime: 0,
      updateAttributesTime: 0,
      framesRedrawn: 0,
      pickTime: 0,
      pickCount: 0,
      gpuTime: 0,
      gpuTimePerFrame: 0,
      cpuTime: 0,
      cpuTimePerFrame: 0,
      bufferMemory: 0,
      textureMemory: 0,
      renderbufferMemory: 0,
      gpuMemory: 0
    };
    this._metricsCounter = 0;
    this._needsRedraw = "Initial render";
    this._pickRequest = {
      mode: "hover",
      x: -1,
      y: -1,
      radius: 0,
      event: null
    };
    this._lastPointerDownInfo = null;
    this._onPointerMove = (event) => {
      const { _pickRequest } = this;
      if (event.type === "pointerleave") {
        _pickRequest.x = -1;
        _pickRequest.y = -1;
        _pickRequest.radius = 0;
      } else if (event.leftButton || event.rightButton) {
        return;
      } else {
        const pos = event.offsetCenter;
        if (!pos) {
          return;
        }
        _pickRequest.x = pos.x;
        _pickRequest.y = pos.y;
        _pickRequest.radius = this.props.pickingRadius;
      }
      if (this.layerManager) {
        this.layerManager.context.mousePosition = { x: _pickRequest.x, y: _pickRequest.y };
      }
      _pickRequest.event = event;
    };
    this._onEvent = (event) => {
      const eventHandlerProp = EVENT_HANDLERS[event.type];
      const pos = event.offsetCenter;
      if (!eventHandlerProp || !pos || !this.layerManager) {
        return;
      }
      const layers = this.layerManager.getLayers();
      const info = this.deckPicker.getLastPickedObject({
        x: pos.x,
        y: pos.y,
        layers,
        viewports: this.getViewports(pos)
      }, this._lastPointerDownInfo);
      const { layer } = info;
      const layerHandler = layer && (layer[eventHandlerProp] || layer.props[eventHandlerProp]);
      const rootHandler = this.props[eventHandlerProp];
      let handled = false;
      if (layerHandler) {
        handled = layerHandler.call(layer, info, event);
      }
      if (!handled) {
        rootHandler == null ? void 0 : rootHandler(info, event);
        this.widgetManager.onEvent(info, event);
      }
    };
    this._onPointerDown = (event) => {
      var _a3;
      if (((_a3 = this.device) == null ? void 0 : _a3.type) === "webgpu") {
        return;
      }
      const pos = event.offsetCenter;
      const pickedInfo = this._pick("pickObject", "pickObject Time", {
        x: pos.x,
        y: pos.y,
        radius: this.props.pickingRadius
      });
      this._lastPointerDownInfo = pickedInfo.result[0] || pickedInfo.emptyInfo;
    };
    this.props = { ...defaultProps, ...props };
    props = this.props;
    if (props.viewState && props.initialViewState) {
      log_default.warn("View state tracking is disabled. Use either `initialViewState` for auto update or `viewState` for manual update.")();
    }
    this.viewState = this.props.initialViewState;
    if (props.device) {
      this.device = props.device;
    }
    let deviceOrPromise = this.device;
    if (!deviceOrPromise && props.gl) {
      if (props.gl instanceof WebGLRenderingContext) {
        log_default.error("WebGL1 context not supported.")();
      }
      deviceOrPromise = webgl2Adapter.attach(props.gl);
    }
    if (!deviceOrPromise) {
      deviceOrPromise = luma.createDevice({
        type: "best-available",
        // luma by default throws if a device is already attached
        // asynchronous device creation could happen after finalize() is called
        // TODO - createDevice should support AbortController?
        _reuseDevices: true,
        adapters: [webgl2Adapter],
        ...props.deviceProps,
        createCanvasContext: {
          canvas: this._createCanvas(props),
          useDevicePixels: this.props.useDevicePixels,
          // TODO v9.2 - replace AnimationLoop's `autoResizeDrawingBuffer` with CanvasContext's `autoResize`
          autoResize: false
        }
      });
    }
    this.animationLoop = this._createAnimationLoop(deviceOrPromise, props);
    this.setProps(props);
    if (props._typedArrayManagerProps) {
      typed_array_manager_default.setOptions(props._typedArrayManagerProps);
    }
    this.animationLoop.start();
  }
  /** Stop rendering and dispose all resources */
  finalize() {
    var _a3, _b, _c, _d, _e2, _f, _g, _h, _i, _j;
    (_a3 = this.animationLoop) == null ? void 0 : _a3.stop();
    (_b = this.animationLoop) == null ? void 0 : _b.destroy();
    this.animationLoop = null;
    this._lastPointerDownInfo = null;
    (_c = this.layerManager) == null ? void 0 : _c.finalize();
    this.layerManager = null;
    (_d = this.viewManager) == null ? void 0 : _d.finalize();
    this.viewManager = null;
    (_e2 = this.effectManager) == null ? void 0 : _e2.finalize();
    this.effectManager = null;
    (_f = this.deckRenderer) == null ? void 0 : _f.finalize();
    this.deckRenderer = null;
    (_g = this.deckPicker) == null ? void 0 : _g.finalize();
    this.deckPicker = null;
    (_h = this.eventManager) == null ? void 0 : _h.destroy();
    this.eventManager = null;
    (_i = this.widgetManager) == null ? void 0 : _i.finalize();
    this.widgetManager = null;
    if (!this.props.canvas && !this.props.device && !this.props.gl && this.canvas) {
      (_j = this.canvas.parentElement) == null ? void 0 : _j.removeChild(this.canvas);
      this.canvas = null;
    }
  }
  /** Partially update props */
  setProps(props) {
    var _a3;
    this.stats.get("setProps Time").timeStart();
    if ("onLayerHover" in props) {
      log_default.removed("onLayerHover", "onHover")();
    }
    if ("onLayerClick" in props) {
      log_default.removed("onLayerClick", "onClick")();
    }
    if (props.initialViewState && // depth = 3 when comparing viewStates: viewId.position.0
    !deepEqual2(this.props.initialViewState, props.initialViewState, 3)) {
      this.viewState = props.initialViewState;
    }
    Object.assign(this.props, props);
    this._setCanvasSize(this.props);
    const resolvedProps = Object.create(this.props);
    Object.assign(resolvedProps, {
      views: this._getViews(),
      width: this.width,
      height: this.height,
      viewState: this._getViewState()
    });
    (_a3 = this.animationLoop) == null ? void 0 : _a3.setProps(resolvedProps);
    if (this.layerManager) {
      this.viewManager.setProps(resolvedProps);
      this.layerManager.activateViewport(this.getViewports()[0]);
      this.layerManager.setProps(resolvedProps);
      this.effectManager.setProps(resolvedProps);
      this.deckRenderer.setProps(resolvedProps);
      this.deckPicker.setProps(resolvedProps);
      this.widgetManager.setProps(resolvedProps);
    }
    this.stats.get("setProps Time").timeEnd();
  }
  // Public API
  /**
   * Check if a redraw is needed
   * @returns `false` or a string summarizing the redraw reason
   */
  needsRedraw(opts = { clearRedrawFlags: false }) {
    if (!this.layerManager) {
      return false;
    }
    if (this.props._animate) {
      return "Deck._animate";
    }
    let redraw = this._needsRedraw;
    if (opts.clearRedrawFlags) {
      this._needsRedraw = false;
    }
    const viewManagerNeedsRedraw = this.viewManager.needsRedraw(opts);
    const layerManagerNeedsRedraw = this.layerManager.needsRedraw(opts);
    const effectManagerNeedsRedraw = this.effectManager.needsRedraw(opts);
    const deckRendererNeedsRedraw = this.deckRenderer.needsRedraw(opts);
    redraw = redraw || viewManagerNeedsRedraw || layerManagerNeedsRedraw || effectManagerNeedsRedraw || deckRendererNeedsRedraw;
    return redraw;
  }
  /**
   * Redraw the GL context
   * @param reason If not provided, only redraw if deemed necessary. Otherwise redraw regardless of internal states.
   * @returns
   */
  redraw(reason) {
    if (!this.layerManager) {
      return;
    }
    let redrawReason = this.needsRedraw({ clearRedrawFlags: true });
    redrawReason = reason || redrawReason;
    if (!redrawReason) {
      return;
    }
    this.stats.get("Redraw Count").incrementCount();
    if (this.props._customRender) {
      this.props._customRender(redrawReason);
    } else {
      this._drawLayers(redrawReason);
    }
  }
  /** Flag indicating that the Deck instance has initialized its resources and it's safe to call public methods. */
  get isInitialized() {
    return this.viewManager !== null;
  }
  /** Get a list of views that are currently rendered */
  getViews() {
    assert8(this.viewManager);
    return this.viewManager.views;
  }
  /** Get a list of viewports that are currently rendered.
   * @param rect If provided, only returns viewports within the given bounding box.
   */
  getViewports(rect) {
    assert8(this.viewManager);
    return this.viewManager.getViewports(rect);
  }
  /** Get the current canvas element. */
  getCanvas() {
    return this.canvas;
  }
  /** Query the object rendered on top at a given point */
  pickObject(opts) {
    const infos = this._pick("pickObject", "pickObject Time", opts).result;
    return infos.length ? infos[0] : null;
  }
  /* Query all rendered objects at a given point */
  pickMultipleObjects(opts) {
    opts.depth = opts.depth || 10;
    return this._pick("pickObject", "pickMultipleObjects Time", opts).result;
  }
  /* Query all objects rendered on top within a bounding box */
  pickObjects(opts) {
    return this._pick("pickObjects", "pickObjects Time", opts);
  }
  /** Experimental
   * Add a global resource for sharing among layers
   */
  _addResources(resources, forceUpdate = false) {
    for (const id in resources) {
      this.layerManager.resourceManager.add({ resourceId: id, data: resources[id], forceUpdate });
    }
  }
  /** Experimental
   * Remove a global resource
   */
  _removeResources(resourceIds) {
    for (const id of resourceIds) {
      this.layerManager.resourceManager.remove(id);
    }
  }
  /** Experimental
   * Register a default effect. Effects will be sorted by order, those with a low order will be rendered first
   */
  _addDefaultEffect(effect) {
    this.effectManager.addDefaultEffect(effect);
  }
  _addDefaultShaderModule(module) {
    this.layerManager.addDefaultShaderModule(module);
  }
  _removeDefaultShaderModule(module) {
    var _a3;
    (_a3 = this.layerManager) == null ? void 0 : _a3.removeDefaultShaderModule(module);
  }
  _pick(method, statKey, opts) {
    assert8(this.deckPicker);
    const { stats } = this;
    stats.get("Pick Count").incrementCount();
    stats.get(statKey).timeStart();
    const infos = this.deckPicker[method]({
      // layerManager, viewManager and effectManager are always defined if deckPicker is
      layers: this.layerManager.getLayers(opts),
      views: this.viewManager.getViews(),
      viewports: this.getViewports(opts),
      onViewportActive: this.layerManager.activateViewport,
      effects: this.effectManager.getEffects(),
      ...opts
    });
    stats.get(statKey).timeEnd();
    return infos;
  }
  /** Resolve props.canvas to element */
  _createCanvas(props) {
    let canvas2 = props.canvas;
    if (typeof canvas2 === "string") {
      canvas2 = document.getElementById(canvas2);
      assert8(canvas2);
    }
    if (!canvas2) {
      canvas2 = document.createElement("canvas");
      canvas2.id = props.id || "deckgl-overlay";
      const parent = props.parent || document.body;
      parent.appendChild(canvas2);
    }
    Object.assign(canvas2.style, props.style);
    return canvas2;
  }
  /** Updates canvas width and/or height, if provided as props */
  _setCanvasSize(props) {
    var _a3;
    if (!this.canvas) {
      return;
    }
    const { width, height } = props;
    if (width || width === 0) {
      const cssWidth = Number.isFinite(width) ? `${width}px` : width;
      this.canvas.style.width = cssWidth;
    }
    if (height || height === 0) {
      const cssHeight = Number.isFinite(height) ? `${height}px` : height;
      this.canvas.style.position = ((_a3 = props.style) == null ? void 0 : _a3.position) || "absolute";
      this.canvas.style.height = cssHeight;
    }
  }
  /** If canvas size has changed, reads out the new size and update */
  _updateCanvasSize() {
    var _a3, _b;
    const { canvas: canvas2 } = this;
    if (!canvas2) {
      return;
    }
    const newWidth = canvas2.clientWidth ?? canvas2.width;
    const newHeight = canvas2.clientHeight ?? canvas2.height;
    if (newWidth !== this.width || newHeight !== this.height) {
      this.width = newWidth;
      this.height = newHeight;
      (_a3 = this.viewManager) == null ? void 0 : _a3.setProps({ width: newWidth, height: newHeight });
      (_b = this.layerManager) == null ? void 0 : _b.activateViewport(this.getViewports()[0]);
      this.props.onResize({ width: newWidth, height: newHeight });
    }
  }
  _createAnimationLoop(deviceOrPromise, props) {
    const {
      // width,
      // height,
      gl,
      // debug,
      onError,
      // onBeforeRender,
      // onAfterRender,
      useDevicePixels
    } = props;
    return new AnimationLoop({
      device: deviceOrPromise,
      useDevicePixels,
      // TODO v9
      autoResizeDrawingBuffer: !gl,
      // do not auto resize external context
      autoResizeViewport: false,
      // @ts-expect-error luma.gl needs to accept Promise<void> return value
      onInitialize: (context) => this._setDevice(context.device),
      onRender: this._onRenderFrame.bind(this),
      // @ts-expect-error typing mismatch: AnimationLoop does not accept onError:null
      onError
      // onBeforeRender,
      // onAfterRender,
    });
  }
  // Get the most relevant view state: props.viewState, if supplied, shadows internal viewState
  // TODO: For backwards compatibility ensure numeric width and height is added to the viewState
  _getViewState() {
    return this.props.viewState || this.viewState;
  }
  // Get the view descriptor list
  _getViews() {
    const { views } = this.props;
    const normalizedViews = Array.isArray(views) ? views : (
      // If null, default to a full screen map view port
      views ? [views] : [new map_view_default({ id: "default-view" })]
    );
    if (normalizedViews.length && this.props.controller) {
      normalizedViews[0].props.controller = this.props.controller;
    }
    return normalizedViews;
  }
  _onContextLost() {
    const { onError } = this.props;
    if (this.animationLoop && onError) {
      onError(new Error("WebGL context is lost"));
    }
  }
  /** Actually run picking */
  _pickAndCallback() {
    var _a3, _b, _c, _d;
    if (((_a3 = this.device) == null ? void 0 : _a3.type) === "webgpu") {
      return;
    }
    const { _pickRequest } = this;
    if (_pickRequest.event) {
      const { result, emptyInfo } = this._pick("pickObject", "pickObject Time", _pickRequest);
      this.cursorState.isHovering = result.length > 0;
      let pickedInfo = emptyInfo;
      let handled = false;
      for (const info of result) {
        pickedInfo = info;
        handled = ((_b = info.layer) == null ? void 0 : _b.onHover(info, _pickRequest.event)) || handled;
      }
      if (!handled) {
        (_d = (_c = this.props).onHover) == null ? void 0 : _d.call(_c, pickedInfo, _pickRequest.event);
        this.widgetManager.onHover(pickedInfo, _pickRequest.event);
      }
      _pickRequest.event = null;
    }
  }
  _updateCursor() {
    const container = this.props.parent || this.canvas;
    if (container) {
      container.style.cursor = this.props.getCursor(this.cursorState);
    }
  }
  _setDevice(device) {
    var _a3, _b;
    this.device = device;
    if (!this.animationLoop) {
      return;
    }
    if (!this.canvas) {
      this.canvas = (_a3 = this.device.canvasContext) == null ? void 0 : _a3.canvas;
    }
    if (this.device.type === "webgl") {
      this.device.setParametersWebGL({
        blend: true,
        blendFunc: [770, 771, 1, 771],
        polygonOffsetFill: true,
        depthTest: true,
        depthFunc: 515
      });
    }
    this.props.onDeviceInitialized(this.device);
    if (this.device.type === "webgl") {
      this.props.onWebGLInitialized(this.device.gl);
    }
    const timeline = new Timeline();
    timeline.play();
    this.animationLoop.attachTimeline(timeline);
    this.eventManager = new EventManager(this.props.parent || this.canvas, {
      touchAction: this.props.touchAction,
      recognizers: Object.keys(RECOGNIZERS).map((eventName) => {
        var _a4;
        const [RecognizerConstructor, defaultOptions2, recognizeWith, requestFailure] = RECOGNIZERS[eventName];
        const optionsOverride = (_a4 = this.props.eventRecognizerOptions) == null ? void 0 : _a4[eventName];
        const options = { ...defaultOptions2, ...optionsOverride, event: eventName };
        return {
          recognizer: new RecognizerConstructor(options),
          recognizeWith,
          requestFailure
        };
      }),
      events: {
        pointerdown: this._onPointerDown,
        pointermove: this._onPointerMove,
        pointerleave: this._onPointerMove
      }
    });
    for (const eventType in EVENT_HANDLERS) {
      this.eventManager.on(eventType, this._onEvent);
    }
    this.viewManager = new ViewManager({
      timeline,
      eventManager: this.eventManager,
      onViewStateChange: this._onViewStateChange.bind(this),
      onInteractionStateChange: this._onInteractionStateChange.bind(this),
      views: this._getViews(),
      viewState: this._getViewState(),
      width: this.width,
      height: this.height
    });
    const viewport = this.viewManager.getViewports()[0];
    this.layerManager = new LayerManager(this.device, {
      deck: this,
      stats: this.stats,
      viewport,
      timeline
    });
    this.effectManager = new EffectManager({
      deck: this,
      device: this.device
    });
    this.deckRenderer = new DeckRenderer(this.device);
    this.deckPicker = new DeckPicker(this.device);
    this.widgetManager = new WidgetManager({
      deck: this,
      parentElement: (_b = this.canvas) == null ? void 0 : _b.parentElement
    });
    this.widgetManager.addDefault(new Tooltip());
    this.setProps(this.props);
    this._updateCanvasSize();
    this.props.onLoad();
  }
  /** Internal only: default render function (redraw all layers and views) */
  _drawLayers(redrawReason, renderOptions) {
    var _a3;
    const { device, gl } = this.layerManager.context;
    this.props.onBeforeRender({ device, gl });
    const opts = {
      target: this.props._framebuffer,
      layers: this.layerManager.getLayers(),
      viewports: this.viewManager.getViewports(),
      onViewportActive: this.layerManager.activateViewport,
      views: this.viewManager.getViews(),
      pass: "screen",
      effects: this.effectManager.getEffects(),
      ...renderOptions
    };
    (_a3 = this.deckRenderer) == null ? void 0 : _a3.renderLayers(opts);
    if (opts.pass === "screen") {
      this.widgetManager.onRedraw({
        viewports: opts.viewports,
        layers: opts.layers
      });
    }
    this.props.onAfterRender({ device, gl });
  }
  // Callbacks
  _onRenderFrame() {
    var _a3;
    this._getFrameStats();
    if (this._metricsCounter++ % 60 === 0) {
      this._getMetrics();
      this.stats.reset();
      log_default.table(4, this.metrics)();
      if (this.props._onMetrics) {
        this.props._onMetrics(this.metrics);
      }
    }
    this._updateCanvasSize();
    this._updateCursor();
    this.layerManager.updateLayers();
    if (((_a3 = this.device) == null ? void 0 : _a3.type) !== "webgpu") {
      this._pickAndCallback();
    }
    this.redraw();
    if (this.viewManager) {
      this.viewManager.updateViewStates();
    }
  }
  // Callbacks
  _onViewStateChange(params) {
    const viewState = this.props.onViewStateChange(params) || params.viewState;
    if (this.viewState) {
      this.viewState = { ...this.viewState, [params.viewId]: viewState };
      if (!this.props.viewState) {
        if (this.viewManager) {
          this.viewManager.setProps({ viewState: this.viewState });
        }
      }
    }
  }
  _onInteractionStateChange(interactionState) {
    this.cursorState.isDragging = interactionState.isDragging || false;
    this.props.onInteractionStateChange(interactionState);
  }
  _getFrameStats() {
    const { stats } = this;
    stats.get("frameRate").timeEnd();
    stats.get("frameRate").timeStart();
    const animationLoopStats = this.animationLoop.stats;
    stats.get("GPU Time").addTime(animationLoopStats.get("GPU Time").lastTiming);
    stats.get("CPU Time").addTime(animationLoopStats.get("CPU Time").lastTiming);
  }
  _getMetrics() {
    const { metrics, stats } = this;
    metrics.fps = stats.get("frameRate").getHz();
    metrics.setPropsTime = stats.get("setProps Time").time;
    metrics.updateAttributesTime = stats.get("Update Attributes").time;
    metrics.framesRedrawn = stats.get("Redraw Count").count;
    metrics.pickTime = stats.get("pickObject Time").time + stats.get("pickMultipleObjects Time").time + stats.get("pickObjects Time").time;
    metrics.pickCount = stats.get("Pick Count").count;
    metrics.gpuTime = stats.get("GPU Time").time;
    metrics.cpuTime = stats.get("CPU Time").time;
    metrics.gpuTimePerFrame = stats.get("GPU Time").getAverageTime();
    metrics.cpuTimePerFrame = stats.get("CPU Time").getAverageTime();
    const memoryStats = luma.stats.get("Memory Usage");
    metrics.bufferMemory = memoryStats.get("Buffer Memory").count;
    metrics.textureMemory = memoryStats.get("Texture Memory").count;
    metrics.renderbufferMemory = memoryStats.get("Renderbuffer Memory").count;
    metrics.gpuMemory = memoryStats.get("GPU Memory").count;
  }
};
Deck.defaultProps = defaultProps;
Deck.VERSION = VERSION5;
var deck_default = Deck;

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/lib/attribute/gl-utils.js
function typedArrayFromDataType(type) {
  switch (type) {
    case "float64":
      return Float64Array;
    case "uint8":
    case "unorm8":
      return Uint8ClampedArray;
    default:
      return getTypedArrayFromDataType(type);
  }
}
var dataTypeFromTypedArray = getDataTypeFromTypedArray2;
function getBufferAttributeLayout(name2, accessor, deviceType) {
  const type = deviceType === "webgpu" && accessor.type === "uint8" ? "unorm8" : accessor.type;
  return {
    attribute: name2,
    // @ts-expect-error Not all combinations are valid vertex formats; it's up to DataColumn to ensure
    format: accessor.size > 1 ? `${type}x${accessor.size}` : accessor.type,
    byteOffset: accessor.offset || 0
    // Note stride is set on the top level
  };
}
function getStride(accessor) {
  return accessor.stride || accessor.size * accessor.bytesPerElement;
}
function bufferLayoutEqual(accessor1, accessor2) {
  return accessor1.type === accessor2.type && accessor1.size === accessor2.size && getStride(accessor1) === getStride(accessor2) && (accessor1.offset || 0) === (accessor2.offset || 0);
}

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/lib/attribute/data-column.js
function resolveShaderAttribute(baseAccessor, shaderAttributeOptions) {
  if (shaderAttributeOptions.offset) {
    log_default.removed("shaderAttribute.offset", "vertexOffset, elementOffset")();
  }
  const stride = getStride(baseAccessor);
  const vertexOffset = shaderAttributeOptions.vertexOffset !== void 0 ? shaderAttributeOptions.vertexOffset : baseAccessor.vertexOffset || 0;
  const elementOffset = shaderAttributeOptions.elementOffset || 0;
  const offset = (
    // offsets defined by the attribute
    vertexOffset * stride + elementOffset * baseAccessor.bytesPerElement + // offsets defined by external buffers if any
    (baseAccessor.offset || 0)
  );
  return {
    ...shaderAttributeOptions,
    offset,
    stride
  };
}
function resolveDoublePrecisionShaderAttributes(baseAccessor, shaderAttributeOptions) {
  const resolvedOptions = resolveShaderAttribute(baseAccessor, shaderAttributeOptions);
  return {
    high: resolvedOptions,
    low: {
      ...resolvedOptions,
      offset: resolvedOptions.offset + baseAccessor.size * 4
    }
  };
}
var DataColumn = class {
  /* eslint-disable max-statements */
  constructor(device, opts, state) {
    this._buffer = null;
    this.device = device;
    this.id = opts.id || "";
    this.size = opts.size || 1;
    const logicalType = opts.logicalType || opts.type;
    const doublePrecision = logicalType === "float64";
    let { defaultValue } = opts;
    defaultValue = Number.isFinite(defaultValue) ? [defaultValue] : defaultValue || new Array(this.size).fill(0);
    let bufferType;
    if (doublePrecision) {
      bufferType = "float32";
    } else if (!logicalType && opts.isIndexed) {
      bufferType = "uint32";
    } else {
      bufferType = logicalType || "float32";
    }
    let defaultType = typedArrayFromDataType(logicalType || bufferType);
    this.doublePrecision = doublePrecision;
    if (doublePrecision && opts.fp64 === false) {
      defaultType = Float32Array;
    }
    this.value = null;
    this.settings = {
      ...opts,
      defaultType,
      defaultValue,
      logicalType,
      type: bufferType,
      normalized: bufferType.includes("norm"),
      size: this.size,
      bytesPerElement: defaultType.BYTES_PER_ELEMENT
    };
    this.state = {
      ...state,
      externalBuffer: null,
      bufferAccessor: this.settings,
      allocatedValue: null,
      numInstances: 0,
      bounds: null,
      constant: false
    };
  }
  /* eslint-enable max-statements */
  get isConstant() {
    return this.state.constant;
  }
  get buffer() {
    return this._buffer;
  }
  get byteOffset() {
    const accessor = this.getAccessor();
    if (accessor.vertexOffset) {
      return accessor.vertexOffset * getStride(accessor);
    }
    return 0;
  }
  get numInstances() {
    return this.state.numInstances;
  }
  set numInstances(n3) {
    this.state.numInstances = n3;
  }
  delete() {
    if (this._buffer) {
      this._buffer.delete();
      this._buffer = null;
    }
    typed_array_manager_default.release(this.state.allocatedValue);
  }
  getBuffer() {
    if (this.state.constant) {
      return null;
    }
    return this.state.externalBuffer || this._buffer;
  }
  getValue(attributeName = this.id, options = null) {
    const result = {};
    if (this.state.constant) {
      const value = this.value;
      if (options) {
        const shaderAttributeDef = resolveShaderAttribute(this.getAccessor(), options);
        const offset = shaderAttributeDef.offset / value.BYTES_PER_ELEMENT;
        const size = shaderAttributeDef.size || this.size;
        result[attributeName] = value.subarray(offset, offset + size);
      } else {
        result[attributeName] = value;
      }
    } else {
      result[attributeName] = this.getBuffer();
    }
    if (this.doublePrecision) {
      if (this.value instanceof Float64Array) {
        result[`${attributeName}64Low`] = result[attributeName];
      } else {
        result[`${attributeName}64Low`] = new Float32Array(this.size);
      }
    }
    return result;
  }
  _getBufferLayout(attributeName = this.id, options = null) {
    const accessor = this.getAccessor();
    const attributes = [];
    const result = {
      name: this.id,
      byteStride: getStride(accessor),
      attributes
    };
    if (this.doublePrecision) {
      const doubleShaderAttributeDefs = resolveDoublePrecisionShaderAttributes(accessor, options || {});
      attributes.push(getBufferAttributeLayout(attributeName, { ...accessor, ...doubleShaderAttributeDefs.high }, this.device.type), getBufferAttributeLayout(`${attributeName}64Low`, {
        ...accessor,
        ...doubleShaderAttributeDefs.low
      }, this.device.type));
    } else if (options) {
      const shaderAttributeDef = resolveShaderAttribute(accessor, options);
      attributes.push(getBufferAttributeLayout(attributeName, { ...accessor, ...shaderAttributeDef }, this.device.type));
    } else {
      attributes.push(getBufferAttributeLayout(attributeName, accessor, this.device.type));
    }
    return result;
  }
  setAccessor(accessor) {
    this.state.bufferAccessor = accessor;
  }
  getAccessor() {
    return this.state.bufferAccessor;
  }
  // Returns [min: Array(size), max: Array(size)]
  /* eslint-disable max-depth */
  getBounds() {
    if (this.state.bounds) {
      return this.state.bounds;
    }
    let result = null;
    if (this.state.constant && this.value) {
      const min4 = Array.from(this.value);
      result = [min4, min4];
    } else {
      const { value, numInstances, size } = this;
      const len5 = numInstances * size;
      if (value && len5 && value.length >= len5) {
        const min4 = new Array(size).fill(Infinity);
        const max4 = new Array(size).fill(-Infinity);
        for (let i4 = 0; i4 < len5; ) {
          for (let j3 = 0; j3 < size; j3++) {
            const v3 = value[i4++];
            if (v3 < min4[j3])
              min4[j3] = v3;
            if (v3 > max4[j3])
              max4[j3] = v3;
          }
        }
        result = [min4, max4];
      }
    }
    this.state.bounds = result;
    return result;
  }
  // returns true if success
  // eslint-disable-next-line max-statements
  setData(data) {
    const { state } = this;
    let opts;
    if (ArrayBuffer.isView(data)) {
      opts = { value: data };
    } else if (data instanceof Buffer) {
      opts = { buffer: data };
    } else {
      opts = data;
    }
    const accessor = { ...this.settings, ...opts };
    if (ArrayBuffer.isView(opts.value)) {
      if (!opts.type) {
        const is64Bit = this.doublePrecision && opts.value instanceof Float64Array;
        if (is64Bit) {
          accessor.type = "float32";
        } else {
          const type = dataTypeFromTypedArray(opts.value);
          accessor.type = accessor.normalized ? type.replace("int", "norm") : type;
        }
      }
      accessor.bytesPerElement = opts.value.BYTES_PER_ELEMENT;
      accessor.stride = getStride(accessor);
    }
    state.bounds = null;
    if (opts.constant) {
      let value = opts.value;
      value = this._normalizeValue(value, [], 0);
      if (this.settings.normalized) {
        value = this.normalizeConstant(value);
      }
      const hasChanged = !state.constant || !this._areValuesEqual(value, this.value);
      if (!hasChanged) {
        return false;
      }
      state.externalBuffer = null;
      state.constant = true;
      this.value = ArrayBuffer.isView(value) ? value : new Float32Array(value);
    } else if (opts.buffer) {
      const buffer2 = opts.buffer;
      state.externalBuffer = buffer2;
      state.constant = false;
      this.value = opts.value || null;
    } else if (opts.value) {
      this._checkExternalBuffer(opts);
      let value = opts.value;
      state.externalBuffer = null;
      state.constant = false;
      this.value = value;
      let { buffer: buffer2 } = this;
      const stride = getStride(accessor);
      const byteOffset = (accessor.vertexOffset || 0) * stride;
      if (this.doublePrecision && value instanceof Float64Array) {
        value = toDoublePrecisionArray(value, accessor);
      }
      if (this.settings.isIndexed) {
        const ArrayType = this.settings.defaultType;
        if (value.constructor !== ArrayType) {
          value = new ArrayType(value);
        }
      }
      const requiredBufferSize = value.byteLength + byteOffset + stride * 2;
      if (!buffer2 || buffer2.byteLength < requiredBufferSize) {
        buffer2 = this._createBuffer(requiredBufferSize);
      }
      buffer2.write(value, byteOffset);
    }
    this.setAccessor(accessor);
    return true;
  }
  updateSubBuffer(opts = {}) {
    this.state.bounds = null;
    const value = this.value;
    const { startOffset = 0, endOffset } = opts;
    this.buffer.write(this.doublePrecision && value instanceof Float64Array ? toDoublePrecisionArray(value, {
      size: this.size,
      startIndex: startOffset,
      endIndex: endOffset
    }) : value.subarray(startOffset, endOffset), startOffset * value.BYTES_PER_ELEMENT + this.byteOffset);
  }
  allocate(numInstances, copy7 = false) {
    const { state } = this;
    const oldValue = state.allocatedValue;
    const value = typed_array_manager_default.allocate(oldValue, numInstances + 1, {
      size: this.size,
      type: this.settings.defaultType,
      copy: copy7
    });
    this.value = value;
    const { byteOffset } = this;
    let { buffer: buffer2 } = this;
    if (!buffer2 || buffer2.byteLength < value.byteLength + byteOffset) {
      buffer2 = this._createBuffer(value.byteLength + byteOffset);
      if (copy7 && oldValue) {
        buffer2.write(oldValue instanceof Float64Array ? toDoublePrecisionArray(oldValue, this) : oldValue, byteOffset);
      }
    }
    state.allocatedValue = value;
    state.constant = false;
    state.externalBuffer = null;
    this.setAccessor(this.settings);
    return true;
  }
  // PRIVATE HELPER METHODS
  _checkExternalBuffer(opts) {
    const { value } = opts;
    if (!ArrayBuffer.isView(value)) {
      throw new Error(`Attribute ${this.id} value is not TypedArray`);
    }
    const ArrayType = this.settings.defaultType;
    let illegalArrayType = false;
    if (this.doublePrecision) {
      illegalArrayType = value.BYTES_PER_ELEMENT < 4;
    }
    if (illegalArrayType) {
      throw new Error(`Attribute ${this.id} does not support ${value.constructor.name}`);
    }
    if (!(value instanceof ArrayType) && this.settings.normalized && !("normalized" in opts)) {
      log_default.warn(`Attribute ${this.id} is normalized`)();
    }
  }
  // https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttribPointer
  normalizeConstant(value) {
    switch (this.settings.type) {
      case "snorm8":
        return new Float32Array(value).map((x3) => (x3 + 128) / 255 * 2 - 1);
      case "snorm16":
        return new Float32Array(value).map((x3) => (x3 + 32768) / 65535 * 2 - 1);
      case "unorm8":
        return new Float32Array(value).map((x3) => x3 / 255);
      case "unorm16":
        return new Float32Array(value).map((x3) => x3 / 65535);
      default:
        return value;
    }
  }
  /* check user supplied values and apply fallback */
  _normalizeValue(value, out, start) {
    const { defaultValue, size } = this.settings;
    if (Number.isFinite(value)) {
      out[start] = value;
      return out;
    }
    if (!value) {
      let i4 = size;
      while (--i4 >= 0) {
        out[start + i4] = defaultValue[i4];
      }
      return out;
    }
    switch (size) {
      case 4:
        out[start + 3] = Number.isFinite(value[3]) ? value[3] : defaultValue[3];
      case 3:
        out[start + 2] = Number.isFinite(value[2]) ? value[2] : defaultValue[2];
      case 2:
        out[start + 1] = Number.isFinite(value[1]) ? value[1] : defaultValue[1];
      case 1:
        out[start + 0] = Number.isFinite(value[0]) ? value[0] : defaultValue[0];
        break;
      default:
        let i4 = size;
        while (--i4 >= 0) {
          out[start + i4] = Number.isFinite(value[i4]) ? value[i4] : defaultValue[i4];
        }
    }
    return out;
  }
  _areValuesEqual(value1, value2) {
    if (!value1 || !value2) {
      return false;
    }
    const { size } = this;
    for (let i4 = 0; i4 < size; i4++) {
      if (value1[i4] !== value2[i4]) {
        return false;
      }
    }
    return true;
  }
  _createBuffer(byteLength) {
    var _a3;
    if (this._buffer) {
      this._buffer.destroy();
    }
    const { isIndexed, type } = this.settings;
    this._buffer = this.device.createBuffer({
      ...(_a3 = this._buffer) == null ? void 0 : _a3.props,
      id: this.id,
      // TODO(ibgreen) - WebGPU requires COPY_DST and COPY_SRC to allow write / read
      usage: (isIndexed ? Buffer.INDEX : Buffer.VERTEX) | Buffer.COPY_DST,
      indexType: isIndexed ? type : void 0,
      byteLength
    });
    return this._buffer;
  }
};

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/utils/iterable-utils.js
var EMPTY_ARRAY = [];
var placeholderArray = [];
function createIterable(data, startRow = 0, endRow = Infinity) {
  let iterable = EMPTY_ARRAY;
  const objectInfo = {
    index: -1,
    data,
    // visitor can optionally utilize this to avoid constructing a new array for every object
    target: []
  };
  if (!data) {
    iterable = EMPTY_ARRAY;
  } else if (typeof data[Symbol.iterator] === "function") {
    iterable = data;
  } else if (data.length > 0) {
    placeholderArray.length = data.length;
    iterable = placeholderArray;
  }
  if (startRow > 0 || Number.isFinite(endRow)) {
    iterable = (Array.isArray(iterable) ? iterable : Array.from(iterable)).slice(startRow, endRow);
    objectInfo.index = startRow - 1;
  }
  return { iterable, objectInfo };
}
function isAsyncIterable2(data) {
  return data && data[Symbol.asyncIterator];
}
function getAccessorFromBuffer(typedArray, options) {
  const { size, stride, offset, startIndices, nested } = options;
  const bytesPerElement = typedArray.BYTES_PER_ELEMENT;
  const elementStride = stride ? stride / bytesPerElement : size;
  const elementOffset = offset ? offset / bytesPerElement : 0;
  const vertexCount = Math.floor((typedArray.length - elementOffset) / elementStride);
  return (_3, { index, target: target2 }) => {
    if (!startIndices) {
      const sourceIndex = index * elementStride + elementOffset;
      for (let j3 = 0; j3 < size; j3++) {
        target2[j3] = typedArray[sourceIndex + j3];
      }
      return target2;
    }
    const startIndex = startIndices[index];
    const endIndex = startIndices[index + 1] || vertexCount;
    let result;
    if (nested) {
      result = new Array(endIndex - startIndex);
      for (let i4 = startIndex; i4 < endIndex; i4++) {
        const sourceIndex = i4 * elementStride + elementOffset;
        target2 = new Array(size);
        for (let j3 = 0; j3 < size; j3++) {
          target2[j3] = typedArray[sourceIndex + j3];
        }
        result[i4 - startIndex] = target2;
      }
    } else if (elementStride === size) {
      result = typedArray.subarray(startIndex * size + elementOffset, endIndex * size + elementOffset);
    } else {
      result = new typedArray.constructor((endIndex - startIndex) * size);
      let targetIndex = 0;
      for (let i4 = startIndex; i4 < endIndex; i4++) {
        const sourceIndex = i4 * elementStride + elementOffset;
        for (let j3 = 0; j3 < size; j3++) {
          result[targetIndex++] = typedArray[sourceIndex + j3];
        }
      }
    }
    return result;
  };
}

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/utils/range.js
var EMPTY = [];
var FULL = [[0, Infinity]];
function add7(rangeList, range) {
  if (rangeList === FULL) {
    return rangeList;
  }
  if (range[0] < 0) {
    range[0] = 0;
  }
  if (range[0] >= range[1]) {
    return rangeList;
  }
  const newRangeList = [];
  const len5 = rangeList.length;
  let insertPosition = 0;
  for (let i4 = 0; i4 < len5; i4++) {
    const range0 = rangeList[i4];
    if (range0[1] < range[0]) {
      newRangeList.push(range0);
      insertPosition = i4 + 1;
    } else if (range0[0] > range[1]) {
      newRangeList.push(range0);
    } else {
      range = [Math.min(range0[0], range[0]), Math.max(range0[1], range[1])];
    }
  }
  newRangeList.splice(insertPosition, 0, range);
  return newRangeList;
}

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/lib/attribute/transition-settings.js
var DEFAULT_TRANSITION_SETTINGS = {
  interpolation: {
    duration: 0,
    easing: (t3) => t3
  },
  spring: {
    stiffness: 0.05,
    damping: 0.5
  }
};
function normalizeTransitionSettings(userSettings, layerSettings) {
  if (!userSettings) {
    return null;
  }
  if (Number.isFinite(userSettings)) {
    userSettings = { type: "interpolation", duration: userSettings };
  }
  const type = userSettings.type || "interpolation";
  return {
    ...DEFAULT_TRANSITION_SETTINGS[type],
    ...layerSettings,
    ...userSettings,
    type
  };
}

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/lib/attribute/attribute.js
var Attribute = class extends DataColumn {
  constructor(device, opts) {
    super(device, opts, {
      startIndices: null,
      lastExternalBuffer: null,
      binaryValue: null,
      binaryAccessor: null,
      needsUpdate: true,
      needsRedraw: false,
      layoutChanged: false,
      updateRanges: FULL
    });
    this.constant = false;
    this.settings.update = opts.update || (opts.accessor ? this._autoUpdater : void 0);
    Object.seal(this.settings);
    Object.seal(this.state);
    this._validateAttributeUpdaters();
  }
  get startIndices() {
    return this.state.startIndices;
  }
  set startIndices(layout) {
    this.state.startIndices = layout;
  }
  needsUpdate() {
    return this.state.needsUpdate;
  }
  needsRedraw({ clearChangedFlags = false } = {}) {
    const needsRedraw = this.state.needsRedraw;
    this.state.needsRedraw = needsRedraw && !clearChangedFlags;
    return needsRedraw;
  }
  layoutChanged() {
    return this.state.layoutChanged;
  }
  setAccessor(accessor) {
    var _a3;
    (_a3 = this.state).layoutChanged || (_a3.layoutChanged = !bufferLayoutEqual(accessor, this.getAccessor()));
    super.setAccessor(accessor);
  }
  getUpdateTriggers() {
    const { accessor } = this.settings;
    return [this.id].concat(typeof accessor !== "function" && accessor || []);
  }
  supportsTransition() {
    return Boolean(this.settings.transition);
  }
  // Resolve transition settings object if transition is enabled, otherwise `null`
  getTransitionSetting(opts) {
    if (!opts || !this.supportsTransition()) {
      return null;
    }
    const { accessor } = this.settings;
    const layerSettings = this.settings.transition;
    const userSettings = Array.isArray(accessor) ? (
      // @ts-ignore
      opts[accessor.find((a3) => opts[a3])]
    ) : (
      // @ts-ignore
      opts[accessor]
    );
    return normalizeTransitionSettings(userSettings, layerSettings);
  }
  setNeedsUpdate(reason = this.id, dataRange) {
    this.state.needsUpdate = this.state.needsUpdate || reason;
    this.setNeedsRedraw(reason);
    if (dataRange) {
      const { startRow = 0, endRow = Infinity } = dataRange;
      this.state.updateRanges = add7(this.state.updateRanges, [startRow, endRow]);
    } else {
      this.state.updateRanges = FULL;
    }
  }
  clearNeedsUpdate() {
    this.state.needsUpdate = false;
    this.state.updateRanges = EMPTY;
  }
  setNeedsRedraw(reason = this.id) {
    this.state.needsRedraw = this.state.needsRedraw || reason;
  }
  allocate(numInstances) {
    const { state, settings } = this;
    if (settings.noAlloc) {
      return false;
    }
    if (settings.update) {
      super.allocate(numInstances, state.updateRanges !== FULL);
      return true;
    }
    return false;
  }
  updateBuffer({ numInstances, data, props, context }) {
    if (!this.needsUpdate()) {
      return false;
    }
    const { state: { updateRanges }, settings: { update, noAlloc } } = this;
    let updated = true;
    if (update) {
      for (const [startRow, endRow] of updateRanges) {
        update.call(context, this, { data, startRow, endRow, props, numInstances });
      }
      if (!this.value) {
      } else if (this.constant || !this.buffer || this.buffer.byteLength < this.value.byteLength + this.byteOffset) {
        this.setData({
          value: this.value,
          constant: this.constant
        });
        this.constant = false;
      } else {
        for (const [startRow, endRow] of updateRanges) {
          const startOffset = Number.isFinite(startRow) ? this.getVertexOffset(startRow) : 0;
          const endOffset = Number.isFinite(endRow) ? this.getVertexOffset(endRow) : noAlloc || !Number.isFinite(numInstances) ? this.value.length : numInstances * this.size;
          super.updateSubBuffer({ startOffset, endOffset });
        }
      }
      this._checkAttributeArray();
    } else {
      updated = false;
    }
    this.clearNeedsUpdate();
    this.setNeedsRedraw();
    return updated;
  }
  // Use generic value
  // Returns true if successful
  setConstantValue(value) {
    const isWebGPU = this.device.type === "webgpu";
    if (isWebGPU || value === void 0 || typeof value === "function") {
      return false;
    }
    const hasChanged = this.setData({ constant: true, value });
    if (hasChanged) {
      this.setNeedsRedraw();
    }
    this.clearNeedsUpdate();
    return true;
  }
  // Use external buffer
  // Returns true if successful
  // eslint-disable-next-line max-statements
  setExternalBuffer(buffer2) {
    const { state } = this;
    if (!buffer2) {
      state.lastExternalBuffer = null;
      return false;
    }
    this.clearNeedsUpdate();
    if (state.lastExternalBuffer === buffer2) {
      return true;
    }
    state.lastExternalBuffer = buffer2;
    this.setNeedsRedraw();
    this.setData(buffer2);
    return true;
  }
  // Binary value is a typed array packed from mapping the source data with the accessor
  // If the returned value from the accessor is the same as the attribute value, set it directly
  // Otherwise use the auto updater for transform/normalization
  setBinaryValue(buffer2, startIndices = null) {
    const { state, settings } = this;
    if (!buffer2) {
      state.binaryValue = null;
      state.binaryAccessor = null;
      return false;
    }
    if (settings.noAlloc) {
      return false;
    }
    if (state.binaryValue === buffer2) {
      this.clearNeedsUpdate();
      return true;
    }
    state.binaryValue = buffer2;
    this.setNeedsRedraw();
    const needsUpdate = settings.transform || startIndices !== this.startIndices;
    if (needsUpdate) {
      if (ArrayBuffer.isView(buffer2)) {
        buffer2 = { value: buffer2 };
      }
      const binaryValue = buffer2;
      assert8(ArrayBuffer.isView(binaryValue.value), `invalid ${settings.accessor}`);
      const needsNormalize = Boolean(binaryValue.size) && binaryValue.size !== this.size;
      state.binaryAccessor = getAccessorFromBuffer(binaryValue.value, {
        size: binaryValue.size || this.size,
        stride: binaryValue.stride,
        offset: binaryValue.offset,
        startIndices,
        nested: needsNormalize
      });
      return false;
    }
    this.clearNeedsUpdate();
    this.setData(buffer2);
    return true;
  }
  getVertexOffset(row) {
    const { startIndices } = this;
    const vertexIndex = startIndices ? row < startIndices.length ? startIndices[row] : this.numInstances : row;
    return vertexIndex * this.size;
  }
  getValue() {
    const shaderAttributeDefs = this.settings.shaderAttributes;
    const result = super.getValue();
    if (!shaderAttributeDefs) {
      return result;
    }
    for (const shaderAttributeName in shaderAttributeDefs) {
      Object.assign(result, super.getValue(shaderAttributeName, shaderAttributeDefs[shaderAttributeName]));
    }
    return result;
  }
  /** Generate WebGPU-style buffer layout descriptor from this attribute */
  getBufferLayout(modelInfo) {
    this.state.layoutChanged = false;
    const shaderAttributeDefs = this.settings.shaderAttributes;
    const result = super._getBufferLayout();
    const { stepMode } = this.settings;
    if (stepMode === "dynamic") {
      result.stepMode = modelInfo ? modelInfo.isInstanced ? "instance" : "vertex" : "instance";
    } else {
      result.stepMode = stepMode ?? "vertex";
    }
    if (!shaderAttributeDefs) {
      return result;
    }
    for (const shaderAttributeName in shaderAttributeDefs) {
      const map3 = super._getBufferLayout(shaderAttributeName, shaderAttributeDefs[shaderAttributeName]);
      result.attributes.push(...map3.attributes);
    }
    return result;
  }
  /* eslint-disable max-depth, max-statements */
  _autoUpdater(attribute, { data, startRow, endRow, props, numInstances }) {
    if (attribute.constant) {
      if (this.context.device.type !== "webgpu") {
        return;
      }
    }
    const { settings, state, value, size, startIndices } = attribute;
    const { accessor, transform } = settings;
    let accessorFunc = state.binaryAccessor || // @ts-ignore
    (typeof accessor === "function" ? accessor : props[accessor]);
    if (typeof accessorFunc !== "function") {
      accessorFunc = () => accessorFunc;
    }
    assert8(typeof accessorFunc === "function", `accessor "${accessor}" is not a function`);
    let i4 = attribute.getVertexOffset(startRow);
    const { iterable, objectInfo } = createIterable(data, startRow, endRow);
    for (const object of iterable) {
      objectInfo.index++;
      let objectValue = accessorFunc(object, objectInfo);
      if (transform) {
        objectValue = transform.call(this, objectValue);
      }
      if (startIndices) {
        const numVertices = (objectInfo.index < startIndices.length - 1 ? startIndices[objectInfo.index + 1] : numInstances) - startIndices[objectInfo.index];
        if (objectValue && Array.isArray(objectValue[0])) {
          let startIndex = i4;
          for (const item of objectValue) {
            attribute._normalizeValue(item, value, startIndex);
            startIndex += size;
          }
        } else if (objectValue && objectValue.length > size) {
          value.set(objectValue, i4);
        } else {
          attribute._normalizeValue(objectValue, objectInfo.target, 0);
          fillArray({
            target: value,
            source: objectInfo.target,
            start: i4,
            count: numVertices
          });
        }
        i4 += numVertices * size;
      } else {
        attribute._normalizeValue(objectValue, value, i4);
        i4 += size;
      }
    }
  }
  /* eslint-enable max-depth, max-statements */
  // Validate deck.gl level fields
  _validateAttributeUpdaters() {
    const { settings } = this;
    const hasUpdater = settings.noAlloc || typeof settings.update === "function";
    if (!hasUpdater) {
      throw new Error(`Attribute ${this.id} missing update or accessor`);
    }
  }
  // check that the first few elements of the attribute are reasonable
  /* eslint-disable no-fallthrough */
  _checkAttributeArray() {
    const { value } = this;
    const limit = Math.min(4, this.size);
    if (value && value.length >= limit) {
      let valid = true;
      switch (limit) {
        case 4:
          valid = valid && Number.isFinite(value[3]);
        case 3:
          valid = valid && Number.isFinite(value[2]);
        case 2:
          valid = valid && Number.isFinite(value[1]);
        case 1:
          valid = valid && Number.isFinite(value[0]);
          break;
        default:
          valid = false;
      }
      if (!valid) {
        throw new Error(`Illegal attribute generated for ${this.id}`);
      }
    }
  }
};

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/utils/array-utils.js
function padArrayChunk(options) {
  const { source: source4, target: target2, start = 0, size, getData } = options;
  const end = options.end || target2.length;
  const sourceLength = source4.length;
  const targetLength = end - start;
  if (sourceLength > targetLength) {
    target2.set(source4.subarray(0, targetLength), start);
    return;
  }
  target2.set(source4, start);
  if (!getData) {
    return;
  }
  let i4 = sourceLength;
  while (i4 < targetLength) {
    const datum = getData(i4, source4);
    for (let j3 = 0; j3 < size; j3++) {
      target2[start + i4] = datum[j3] || 0;
      i4++;
    }
  }
}
function padArray({ source: source4, target: target2, size, getData, sourceStartIndices, targetStartIndices }) {
  if (!sourceStartIndices || !targetStartIndices) {
    padArrayChunk({
      source: source4,
      target: target2,
      size,
      getData
    });
    return target2;
  }
  let sourceIndex = 0;
  let targetIndex = 0;
  const getChunkData = getData && ((i4, chunk) => getData(i4 + targetIndex, chunk));
  const n3 = Math.min(sourceStartIndices.length, targetStartIndices.length);
  for (let i4 = 1; i4 < n3; i4++) {
    const nextSourceIndex = sourceStartIndices[i4] * size;
    const nextTargetIndex = targetStartIndices[i4] * size;
    padArrayChunk({
      source: source4.subarray(sourceIndex, nextSourceIndex),
      target: target2,
      start: targetIndex,
      end: nextTargetIndex,
      size,
      getData: getChunkData
    });
    sourceIndex = nextSourceIndex;
    targetIndex = nextTargetIndex;
  }
  if (targetIndex < target2.length) {
    padArrayChunk({
      // @ts-ignore
      source: [],
      target: target2,
      start: targetIndex,
      size,
      getData: getChunkData
    });
  }
  return target2;
}

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/transitions/gpu-transition-utils.js
function cloneAttribute(attribute) {
  const { device, settings, value } = attribute;
  const newAttribute = new Attribute(device, settings);
  newAttribute.setData({
    value: value instanceof Float64Array ? new Float64Array(0) : new Float32Array(0),
    normalized: settings.normalized
  });
  return newAttribute;
}
function getAttributeTypeFromSize(size) {
  switch (size) {
    case 1:
      return "float";
    case 2:
      return "vec2";
    case 3:
      return "vec3";
    case 4:
      return "vec4";
    default:
      throw new Error(`No defined attribute type for size "${size}"`);
  }
}
function getFloat32VertexFormat(size) {
  switch (size) {
    case 1:
      return "float32";
    case 2:
      return "float32x2";
    case 3:
      return "float32x3";
    case 4:
      return "float32x4";
    default:
      throw new Error("invalid type size");
  }
}
function cycleBuffers(buffers) {
  buffers.push(buffers.shift());
}
function getAttributeBufferLength(attribute, numInstances) {
  const { doublePrecision, settings, value, size } = attribute;
  const multiplier = doublePrecision && value instanceof Float64Array ? 2 : 1;
  let maxVertexOffset = 0;
  const { shaderAttributes } = attribute.settings;
  if (shaderAttributes) {
    for (const shaderAttribute of Object.values(shaderAttributes)) {
      maxVertexOffset = Math.max(maxVertexOffset, shaderAttribute.vertexOffset ?? 0);
    }
  }
  return (settings.noAlloc ? value.length : (numInstances + maxVertexOffset) * size) * multiplier;
}
function matchBuffer({ device, source: source4, target: target2 }) {
  if (!target2 || target2.byteLength < source4.byteLength) {
    target2 == null ? void 0 : target2.destroy();
    target2 = device.createBuffer({
      byteLength: source4.byteLength,
      usage: source4.usage
    });
  }
  return target2;
}
function padBuffer({ device, buffer: buffer2, attribute, fromLength, toLength, fromStartIndices, getData = (x3) => x3 }) {
  const precisionMultiplier = attribute.doublePrecision && attribute.value instanceof Float64Array ? 2 : 1;
  const size = attribute.size * precisionMultiplier;
  const byteOffset = attribute.byteOffset;
  const targetByteOffset = attribute.settings.bytesPerElement < 4 ? byteOffset / attribute.settings.bytesPerElement * 4 : byteOffset;
  const toStartIndices = attribute.startIndices;
  const hasStartIndices = fromStartIndices && toStartIndices;
  const isConstant = attribute.isConstant;
  if (!hasStartIndices && buffer2 && fromLength >= toLength) {
    return buffer2;
  }
  const ArrayType = attribute.value instanceof Float64Array ? Float32Array : attribute.value.constructor;
  const toData = isConstant ? attribute.value : (
    // TODO(v9.1): Avoid non-portable synchronous reads.
    new ArrayType(attribute.getBuffer().readSyncWebGL(byteOffset, toLength * ArrayType.BYTES_PER_ELEMENT).buffer)
  );
  if (attribute.settings.normalized && !isConstant) {
    const getter = getData;
    getData = (value, chunk) => attribute.normalizeConstant(getter(value, chunk));
  }
  const getMissingData = isConstant ? (i4, chunk) => getData(toData, chunk) : (i4, chunk) => getData(toData.subarray(i4 + byteOffset, i4 + byteOffset + size), chunk);
  const source4 = buffer2 ? new Float32Array(buffer2.readSyncWebGL(targetByteOffset, fromLength * 4).buffer) : new Float32Array(0);
  const target2 = new Float32Array(toLength);
  padArray({
    source: source4,
    target: target2,
    sourceStartIndices: fromStartIndices,
    targetStartIndices: toStartIndices,
    size,
    getData: getMissingData
  });
  if (!buffer2 || buffer2.byteLength < target2.byteLength + targetByteOffset) {
    buffer2 == null ? void 0 : buffer2.destroy();
    buffer2 = device.createBuffer({
      byteLength: target2.byteLength + targetByteOffset,
      usage: 35050
    });
  }
  buffer2.write(target2, targetByteOffset);
  return buffer2;
}

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/transitions/gpu-transition.js
var GPUTransitionBase = class {
  constructor({ device, attribute, timeline }) {
    this.buffers = [];
    this.currentLength = 0;
    this.device = device;
    this.transition = new Transition(timeline);
    this.attribute = attribute;
    this.attributeInTransition = cloneAttribute(attribute);
    this.currentStartIndices = attribute.startIndices;
  }
  get inProgress() {
    return this.transition.inProgress;
  }
  start(transitionSettings, numInstances, duration = Infinity) {
    this.settings = transitionSettings;
    this.currentStartIndices = this.attribute.startIndices;
    this.currentLength = getAttributeBufferLength(this.attribute, numInstances);
    this.transition.start({ ...transitionSettings, duration });
  }
  update() {
    const updated = this.transition.update();
    if (updated) {
      this.onUpdate();
    }
    return updated;
  }
  setBuffer(buffer2) {
    this.attributeInTransition.setData({
      buffer: buffer2,
      normalized: this.attribute.settings.normalized,
      // Retain placeholder value to generate correct shader layout
      value: this.attributeInTransition.value
    });
  }
  cancel() {
    this.transition.cancel();
  }
  delete() {
    this.cancel();
    for (const buffer2 of this.buffers) {
      buffer2.destroy();
    }
    this.buffers.length = 0;
  }
};

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/transitions/gpu-interpolation-transition.js
var GPUInterpolationTransition = class extends GPUTransitionBase {
  constructor({ device, attribute, timeline }) {
    super({ device, attribute, timeline });
    this.type = "interpolation";
    this.transform = getTransform(device, attribute);
  }
  start(transitionSettings, numInstances) {
    const prevLength = this.currentLength;
    const prevStartIndices = this.currentStartIndices;
    super.start(transitionSettings, numInstances, transitionSettings.duration);
    if (transitionSettings.duration <= 0) {
      this.transition.cancel();
      return;
    }
    const { buffers, attribute } = this;
    cycleBuffers(buffers);
    buffers[0] = padBuffer({
      device: this.device,
      buffer: buffers[0],
      attribute,
      fromLength: prevLength,
      toLength: this.currentLength,
      fromStartIndices: prevStartIndices,
      getData: transitionSettings.enter
    });
    buffers[1] = matchBuffer({
      device: this.device,
      source: buffers[0],
      target: buffers[1]
    });
    this.setBuffer(buffers[1]);
    const { transform } = this;
    const model = transform.model;
    let vertexCount = Math.floor(this.currentLength / attribute.size);
    if (useFp64(attribute)) {
      vertexCount /= 2;
    }
    model.setVertexCount(vertexCount);
    if (attribute.isConstant) {
      model.setAttributes({ aFrom: buffers[0] });
      model.setConstantAttributes({ aTo: attribute.value });
    } else {
      model.setAttributes({
        aFrom: buffers[0],
        aTo: attribute.getBuffer()
      });
    }
    transform.transformFeedback.setBuffers({ vCurrent: buffers[1] });
  }
  onUpdate() {
    const { duration, easing } = this.settings;
    const { time } = this.transition;
    let t3 = time / duration;
    if (easing) {
      t3 = easing(t3);
    }
    const { model } = this.transform;
    const interpolationProps = { time: t3 };
    model.shaderInputs.setProps({ interpolation: interpolationProps });
    this.transform.run({ discard: true });
  }
  delete() {
    super.delete();
    this.transform.destroy();
  }
};
var uniformBlock3 = `uniform interpolationUniforms {
  float time;
} interpolation;
`;
var interpolationUniforms = {
  name: "interpolation",
  vs: uniformBlock3,
  uniformTypes: {
    time: "f32"
  }
};
var vs9 = `#version 300 es
#define SHADER_NAME interpolation-transition-vertex-shader

in ATTRIBUTE_TYPE aFrom;
in ATTRIBUTE_TYPE aTo;
out ATTRIBUTE_TYPE vCurrent;

void main(void) {
  vCurrent = mix(aFrom, aTo, interpolation.time);
  gl_Position = vec4(0.0);
}
`;
var vs64 = `#version 300 es
#define SHADER_NAME interpolation-transition-vertex-shader

in ATTRIBUTE_TYPE aFrom;
in ATTRIBUTE_TYPE aFrom64Low;
in ATTRIBUTE_TYPE aTo;
in ATTRIBUTE_TYPE aTo64Low;
out ATTRIBUTE_TYPE vCurrent;
out ATTRIBUTE_TYPE vCurrent64Low;

vec2 mix_fp64(vec2 a, vec2 b, float x) {
  vec2 range = sub_fp64(b, a);
  return sum_fp64(a, mul_fp64(range, vec2(x, 0.0)));
}

void main(void) {
  for (int i=0; i<ATTRIBUTE_SIZE; i++) {
    vec2 value = mix_fp64(vec2(aFrom[i], aFrom64Low[i]), vec2(aTo[i], aTo64Low[i]), interpolation.time);
    vCurrent[i] = value.x;
    vCurrent64Low[i] = value.y;
  }
  gl_Position = vec4(0.0);
}
`;
function useFp64(attribute) {
  return attribute.doublePrecision && attribute.value instanceof Float64Array;
}
function getTransform(device, attribute) {
  const attributeSize = attribute.size;
  const attributeType = getAttributeTypeFromSize(attributeSize);
  const inputFormat = getFloat32VertexFormat(attributeSize);
  const bufferLayout = attribute.getBufferLayout();
  if (useFp64(attribute)) {
    return new BufferTransform(device, {
      vs: vs64,
      bufferLayout: [
        {
          name: "aFrom",
          byteStride: 8 * attributeSize,
          attributes: [
            { attribute: "aFrom", format: inputFormat, byteOffset: 0 },
            { attribute: "aFrom64Low", format: inputFormat, byteOffset: 4 * attributeSize }
          ]
        },
        {
          name: "aTo",
          byteStride: 8 * attributeSize,
          attributes: [
            { attribute: "aTo", format: inputFormat, byteOffset: 0 },
            { attribute: "aTo64Low", format: inputFormat, byteOffset: 4 * attributeSize }
          ]
        }
      ],
      // @ts-expect-error fp64 module only sets ONE uniform via defaultUniforms
      modules: [fp64arithmetic, interpolationUniforms],
      defines: {
        ATTRIBUTE_TYPE: attributeType,
        ATTRIBUTE_SIZE: attributeSize
      },
      // Default uniforms are not set without this
      moduleSettings: {},
      varyings: ["vCurrent", "vCurrent64Low"],
      bufferMode: 35980,
      disableWarnings: true
    });
  }
  return new BufferTransform(device, {
    vs: vs9,
    bufferLayout: [
      { name: "aFrom", format: inputFormat },
      { name: "aTo", format: bufferLayout.attributes[0].format }
    ],
    modules: [interpolationUniforms],
    defines: {
      ATTRIBUTE_TYPE: attributeType
    },
    varyings: ["vCurrent"],
    // TODO investigate why this is needed
    disableWarnings: true
  });
}

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/transitions/gpu-spring-transition.js
var GPUSpringTransition = class extends GPUTransitionBase {
  constructor({ device, attribute, timeline }) {
    super({ device, attribute, timeline });
    this.type = "spring";
    this.texture = getTexture(device);
    this.framebuffer = getFramebuffer3(device, this.texture);
    this.transform = getTransform2(device, attribute);
  }
  start(transitionSettings, numInstances) {
    const prevLength = this.currentLength;
    const prevStartIndices = this.currentStartIndices;
    super.start(transitionSettings, numInstances);
    const { buffers, attribute } = this;
    for (let i4 = 0; i4 < 2; i4++) {
      buffers[i4] = padBuffer({
        device: this.device,
        buffer: buffers[i4],
        attribute,
        fromLength: prevLength,
        toLength: this.currentLength,
        fromStartIndices: prevStartIndices,
        getData: transitionSettings.enter
      });
    }
    buffers[2] = matchBuffer({
      device: this.device,
      source: buffers[0],
      target: buffers[2]
    });
    this.setBuffer(buffers[1]);
    const { model } = this.transform;
    model.setVertexCount(Math.floor(this.currentLength / attribute.size));
    if (attribute.isConstant) {
      model.setConstantAttributes({ aTo: attribute.value });
    } else {
      model.setAttributes({ aTo: attribute.getBuffer() });
    }
  }
  onUpdate() {
    const { buffers, transform, framebuffer, transition } = this;
    const settings = this.settings;
    transform.model.setAttributes({
      aPrev: buffers[0],
      aCur: buffers[1]
    });
    transform.transformFeedback.setBuffers({ vNext: buffers[2] });
    const springProps = {
      stiffness: settings.stiffness,
      damping: settings.damping
    };
    transform.model.shaderInputs.setProps({ spring: springProps });
    transform.run({
      framebuffer,
      discard: false,
      parameters: { viewport: [0, 0, 1, 1] },
      clearColor: [0, 0, 0, 0]
    });
    cycleBuffers(buffers);
    this.setBuffer(buffers[1]);
    const isTransitioning = this.device.readPixelsToArrayWebGL(framebuffer)[0] > 0;
    if (!isTransitioning) {
      transition.end();
    }
  }
  delete() {
    super.delete();
    this.transform.destroy();
    this.texture.destroy();
    this.framebuffer.destroy();
  }
};
var uniformBlock4 = `uniform springUniforms {
  float damping;
  float stiffness;
} spring;
`;
var springUniforms = {
  name: "spring",
  vs: uniformBlock4,
  uniformTypes: {
    damping: "f32",
    stiffness: "f32"
  }
};
var vs10 = `#version 300 es
#define SHADER_NAME spring-transition-vertex-shader

#define EPSILON 0.00001

in ATTRIBUTE_TYPE aPrev;
in ATTRIBUTE_TYPE aCur;
in ATTRIBUTE_TYPE aTo;
out ATTRIBUTE_TYPE vNext;
out float vIsTransitioningFlag;

ATTRIBUTE_TYPE getNextValue(ATTRIBUTE_TYPE cur, ATTRIBUTE_TYPE prev, ATTRIBUTE_TYPE dest) {
  ATTRIBUTE_TYPE velocity = cur - prev;
  ATTRIBUTE_TYPE delta = dest - cur;
  ATTRIBUTE_TYPE force = delta * spring.stiffness;
  ATTRIBUTE_TYPE resistance = velocity * spring.damping;
  return force - resistance + velocity + cur;
}

void main(void) {
  bool isTransitioning = length(aCur - aPrev) > EPSILON || length(aTo - aCur) > EPSILON;
  vIsTransitioningFlag = isTransitioning ? 1.0 : 0.0;

  vNext = getNextValue(aCur, aPrev, aTo);
  gl_Position = vec4(0, 0, 0, 1);
  gl_PointSize = 100.0;
}
`;
var fs9 = `#version 300 es
#define SHADER_NAME spring-transition-is-transitioning-fragment-shader

in float vIsTransitioningFlag;

out vec4 fragColor;

void main(void) {
  if (vIsTransitioningFlag == 0.0) {
    discard;
  }
  fragColor = vec4(1.0);
}`;
function getTransform2(device, attribute) {
  const attributeType = getAttributeTypeFromSize(attribute.size);
  const format = getFloat32VertexFormat(attribute.size);
  return new BufferTransform(device, {
    vs: vs10,
    fs: fs9,
    bufferLayout: [
      { name: "aPrev", format },
      { name: "aCur", format },
      { name: "aTo", format: attribute.getBufferLayout().attributes[0].format }
    ],
    varyings: ["vNext"],
    modules: [springUniforms],
    defines: { ATTRIBUTE_TYPE: attributeType },
    parameters: {
      depthCompare: "always",
      blendColorOperation: "max",
      blendColorSrcFactor: "one",
      blendColorDstFactor: "one",
      blendAlphaOperation: "max",
      blendAlphaSrcFactor: "one",
      blendAlphaDstFactor: "one"
    }
  });
}
function getTexture(device) {
  return device.createTexture({
    data: new Uint8Array(4),
    format: "rgba8unorm",
    mipmaps: false,
    width: 1,
    height: 1
  });
}
function getFramebuffer3(device, texture) {
  return device.createFramebuffer({
    id: "spring-transition-is-transitioning-framebuffer",
    width: 1,
    height: 1,
    colorAttachments: [texture]
  });
}

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/lib/attribute/attribute-transition-manager.js
var TRANSITION_TYPES = {
  interpolation: GPUInterpolationTransition,
  spring: GPUSpringTransition
};
var AttributeTransitionManager = class {
  constructor(device, { id, timeline }) {
    if (!device)
      throw new Error("AttributeTransitionManager is constructed without device");
    this.id = id;
    this.device = device;
    this.timeline = timeline;
    this.transitions = {};
    this.needsRedraw = false;
    this.numInstances = 1;
  }
  finalize() {
    for (const attributeName in this.transitions) {
      this._removeTransition(attributeName);
    }
  }
  /* Public methods */
  // Called when attribute manager updates
  // Check the latest attributes for updates.
  update({ attributes, transitions, numInstances }) {
    this.numInstances = numInstances || 1;
    for (const attributeName in attributes) {
      const attribute = attributes[attributeName];
      const settings = attribute.getTransitionSetting(transitions);
      if (!settings)
        continue;
      this._updateAttribute(attributeName, attribute, settings);
    }
    for (const attributeName in this.transitions) {
      const attribute = attributes[attributeName];
      if (!attribute || !attribute.getTransitionSetting(transitions)) {
        this._removeTransition(attributeName);
      }
    }
  }
  // Returns `true` if attribute is transition-enabled
  hasAttribute(attributeName) {
    const transition = this.transitions[attributeName];
    return transition && transition.inProgress;
  }
  // Get all the animated attributes
  getAttributes() {
    const animatedAttributes = {};
    for (const attributeName in this.transitions) {
      const transition = this.transitions[attributeName];
      if (transition.inProgress) {
        animatedAttributes[attributeName] = transition.attributeInTransition;
      }
    }
    return animatedAttributes;
  }
  /* eslint-disable max-statements */
  // Called every render cycle, run transform feedback
  // Returns `true` if anything changes
  run() {
    if (this.numInstances === 0) {
      return false;
    }
    for (const attributeName in this.transitions) {
      const updated = this.transitions[attributeName].update();
      if (updated) {
        this.needsRedraw = true;
      }
    }
    const needsRedraw = this.needsRedraw;
    this.needsRedraw = false;
    return needsRedraw;
  }
  /* eslint-enable max-statements */
  /* Private methods */
  _removeTransition(attributeName) {
    this.transitions[attributeName].delete();
    delete this.transitions[attributeName];
  }
  // Check an attributes for updates
  // Returns a transition object if a new transition is triggered.
  _updateAttribute(attributeName, attribute, settings) {
    const transition = this.transitions[attributeName];
    let isNew = !transition || transition.type !== settings.type;
    if (isNew) {
      if (transition) {
        this._removeTransition(attributeName);
      }
      const TransitionType = TRANSITION_TYPES[settings.type];
      if (TransitionType) {
        this.transitions[attributeName] = new TransitionType({
          attribute,
          timeline: this.timeline,
          device: this.device
        });
      } else {
        log_default.error(`unsupported transition type '${settings.type}'`)();
        isNew = false;
      }
    }
    if (isNew || attribute.needsRedraw()) {
      this.needsRedraw = true;
      this.transitions[attributeName].start(settings, this.numInstances);
    }
  }
};

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/lib/attribute/attribute-manager.js
var TRACE_INVALIDATE = "attributeManager.invalidate";
var TRACE_UPDATE_START = "attributeManager.updateStart";
var TRACE_UPDATE_END = "attributeManager.updateEnd";
var TRACE_ATTRIBUTE_UPDATE_START = "attribute.updateStart";
var TRACE_ATTRIBUTE_ALLOCATE = "attribute.allocate";
var TRACE_ATTRIBUTE_UPDATE_END = "attribute.updateEnd";
var AttributeManager = class {
  constructor(device, { id = "attribute-manager", stats, timeline } = {}) {
    this.mergeBoundsMemoized = memoize(mergeBounds);
    this.id = id;
    this.device = device;
    this.attributes = {};
    this.updateTriggers = {};
    this.needsRedraw = true;
    this.userData = {};
    this.stats = stats;
    this.attributeTransitionManager = new AttributeTransitionManager(device, {
      id: `${id}-transitions`,
      timeline
    });
    Object.seal(this);
  }
  finalize() {
    for (const attributeName in this.attributes) {
      this.attributes[attributeName].delete();
    }
    this.attributeTransitionManager.finalize();
  }
  // Returns the redraw flag, optionally clearing it.
  // Redraw flag will be set if any attributes attributes changed since
  // flag was last cleared.
  //
  // @param {String} [clearRedrawFlags=false] - whether to clear the flag
  // @return {false|String} - reason a redraw is needed.
  getNeedsRedraw(opts = { clearRedrawFlags: false }) {
    const redraw = this.needsRedraw;
    this.needsRedraw = this.needsRedraw && !opts.clearRedrawFlags;
    return redraw && this.id;
  }
  // Sets the redraw flag.
  // @param {Boolean} redraw=true
  setNeedsRedraw() {
    this.needsRedraw = true;
  }
  // Adds attributes
  add(attributes) {
    this._add(attributes);
  }
  // Adds attributes
  addInstanced(attributes) {
    this._add(attributes, { stepMode: "instance" });
  }
  /**
   * Removes attributes
   * Takes an array of attribute names and delete them from
   * the attribute map if they exists
   *
   * @example
   * attributeManager.remove(['position']);
   *
   * @param {Object} attributeNameArray - attribute name array (see above)
   */
  remove(attributeNameArray) {
    for (const name2 of attributeNameArray) {
      if (this.attributes[name2] !== void 0) {
        this.attributes[name2].delete();
        delete this.attributes[name2];
      }
    }
  }
  // Marks an attribute for update
  invalidate(triggerName, dataRange) {
    const invalidatedAttributes = this._invalidateTrigger(triggerName, dataRange);
    debug(TRACE_INVALIDATE, this, triggerName, invalidatedAttributes);
  }
  invalidateAll(dataRange) {
    for (const attributeName in this.attributes) {
      this.attributes[attributeName].setNeedsUpdate(attributeName, dataRange);
    }
    debug(TRACE_INVALIDATE, this, "all");
  }
  // Ensure all attribute buffers are updated from props or data.
  // eslint-disable-next-line complexity
  update({ data, numInstances, startIndices = null, transitions, props = {}, buffers = {}, context = {} }) {
    let updated = false;
    debug(TRACE_UPDATE_START, this);
    if (this.stats) {
      this.stats.get("Update Attributes").timeStart();
    }
    for (const attributeName in this.attributes) {
      const attribute = this.attributes[attributeName];
      const accessorName = attribute.settings.accessor;
      attribute.startIndices = startIndices;
      attribute.numInstances = numInstances;
      if (props[attributeName]) {
        log_default.removed(`props.${attributeName}`, `data.attributes.${attributeName}`)();
      }
      if (attribute.setExternalBuffer(buffers[attributeName])) {
      } else if (attribute.setBinaryValue(typeof accessorName === "string" ? buffers[accessorName] : void 0, data.startIndices)) {
      } else if (typeof accessorName === "string" && !buffers[accessorName] && attribute.setConstantValue(props[accessorName])) {
      } else if (attribute.needsUpdate()) {
        updated = true;
        this._updateAttribute({
          attribute,
          numInstances,
          data,
          props,
          context
        });
      }
      this.needsRedraw = this.needsRedraw || attribute.needsRedraw();
    }
    if (updated) {
      debug(TRACE_UPDATE_END, this, numInstances);
    }
    if (this.stats) {
      this.stats.get("Update Attributes").timeEnd();
    }
    this.attributeTransitionManager.update({
      attributes: this.attributes,
      numInstances,
      transitions
    });
  }
  // Update attribute transition to the current timestamp
  // Returns `true` if any transition is in progress
  updateTransition() {
    const { attributeTransitionManager } = this;
    const transitionUpdated = attributeTransitionManager.run();
    this.needsRedraw = this.needsRedraw || transitionUpdated;
    return transitionUpdated;
  }
  /**
   * Returns all attribute descriptors
   * Note: Format matches luma.gl Model/Program.setAttributes()
   * @return {Object} attributes - descriptors
   */
  getAttributes() {
    return { ...this.attributes, ...this.attributeTransitionManager.getAttributes() };
  }
  /**
   * Computes the spatial bounds of a given set of attributes
   */
  getBounds(attributeNames) {
    const bounds = attributeNames.map((attributeName) => {
      var _a3;
      return (_a3 = this.attributes[attributeName]) == null ? void 0 : _a3.getBounds();
    });
    return this.mergeBoundsMemoized(bounds);
  }
  /**
   * Returns changed attribute descriptors
   * This indicates which WebGLBuffers need to be updated
   * @return {Object} attributes - descriptors
   */
  getChangedAttributes(opts = { clearChangedFlags: false }) {
    const { attributes, attributeTransitionManager } = this;
    const changedAttributes = { ...attributeTransitionManager.getAttributes() };
    for (const attributeName in attributes) {
      const attribute = attributes[attributeName];
      if (attribute.needsRedraw(opts) && !attributeTransitionManager.hasAttribute(attributeName)) {
        changedAttributes[attributeName] = attribute;
      }
    }
    return changedAttributes;
  }
  /** Generate WebGPU-style buffer layout descriptors from all attributes */
  getBufferLayouts(modelInfo) {
    return Object.values(this.getAttributes()).map((attribute) => attribute.getBufferLayout(modelInfo));
  }
  // PRIVATE METHODS
  /** Register new attributes */
  _add(attributes, overrideOptions) {
    for (const attributeName in attributes) {
      const attribute = attributes[attributeName];
      const props = {
        ...attribute,
        id: attributeName,
        size: attribute.isIndexed && 1 || attribute.size || 1,
        ...overrideOptions
      };
      this.attributes[attributeName] = new Attribute(this.device, props);
    }
    this._mapUpdateTriggersToAttributes();
  }
  // build updateTrigger name to attribute name mapping
  _mapUpdateTriggersToAttributes() {
    const triggers = {};
    for (const attributeName in this.attributes) {
      const attribute = this.attributes[attributeName];
      attribute.getUpdateTriggers().forEach((triggerName) => {
        if (!triggers[triggerName]) {
          triggers[triggerName] = [];
        }
        triggers[triggerName].push(attributeName);
      });
    }
    this.updateTriggers = triggers;
  }
  _invalidateTrigger(triggerName, dataRange) {
    const { attributes, updateTriggers } = this;
    const invalidatedAttributes = updateTriggers[triggerName];
    if (invalidatedAttributes) {
      invalidatedAttributes.forEach((name2) => {
        const attribute = attributes[name2];
        if (attribute) {
          attribute.setNeedsUpdate(attribute.id, dataRange);
        }
      });
    }
    return invalidatedAttributes;
  }
  _updateAttribute(opts) {
    const { attribute, numInstances } = opts;
    debug(TRACE_ATTRIBUTE_UPDATE_START, attribute);
    if (attribute.constant) {
      attribute.setConstantValue(attribute.value);
      return;
    }
    if (attribute.allocate(numInstances)) {
      debug(TRACE_ATTRIBUTE_ALLOCATE, attribute, numInstances);
    }
    const updated = attribute.updateBuffer(opts);
    if (updated) {
      this.needsRedraw = true;
      debug(TRACE_ATTRIBUTE_UPDATE_END, attribute, numInstances);
    }
  }
};

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/transitions/cpu-interpolation-transition.js
var CPUInterpolationTransition = class extends Transition {
  get value() {
    return this._value;
  }
  _onUpdate() {
    const { time, settings: { fromValue, toValue, duration, easing } } = this;
    const t3 = easing(time / duration);
    this._value = lerp(fromValue, toValue, t3);
  }
};

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/transitions/cpu-spring-transition.js
var EPSILON23 = 1e-5;
function updateSpringElement(prev, cur, dest, damping, stiffness) {
  const velocity = cur - prev;
  const delta = dest - cur;
  const spring = delta * stiffness;
  const damper = -velocity * damping;
  return spring + damper + velocity + cur;
}
function updateSpring(prev, cur, dest, damping, stiffness) {
  if (Array.isArray(dest)) {
    const next = [];
    for (let i4 = 0; i4 < dest.length; i4++) {
      next[i4] = updateSpringElement(prev[i4], cur[i4], dest[i4], damping, stiffness);
    }
    return next;
  }
  return updateSpringElement(prev, cur, dest, damping, stiffness);
}
function distance4(value1, value2) {
  if (Array.isArray(value1)) {
    let distanceSquare = 0;
    for (let i4 = 0; i4 < value1.length; i4++) {
      const d3 = value1[i4] - value2[i4];
      distanceSquare += d3 * d3;
    }
    return Math.sqrt(distanceSquare);
  }
  return Math.abs(value1 - value2);
}
var CPUSpringTransition = class extends Transition {
  get value() {
    return this._currValue;
  }
  _onUpdate() {
    const { fromValue, toValue, damping, stiffness } = this.settings;
    const { _prevValue = fromValue, _currValue = fromValue } = this;
    let nextValue = updateSpring(_prevValue, _currValue, toValue, damping, stiffness);
    const delta = distance4(nextValue, toValue);
    const velocity = distance4(nextValue, _currValue);
    if (delta < EPSILON23 && velocity < EPSILON23) {
      nextValue = toValue;
      this.end();
    }
    this._prevValue = _currValue;
    this._currValue = nextValue;
  }
};

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/lib/uniform-transition-manager.js
var TRANSITION_TYPES2 = {
  interpolation: CPUInterpolationTransition,
  spring: CPUSpringTransition
};
var UniformTransitionManager = class {
  constructor(timeline) {
    this.transitions = /* @__PURE__ */ new Map();
    this.timeline = timeline;
  }
  get active() {
    return this.transitions.size > 0;
  }
  add(key, fromValue, toValue, settings) {
    const { transitions } = this;
    if (transitions.has(key)) {
      const transition2 = transitions.get(key);
      const { value = transition2.settings.fromValue } = transition2;
      fromValue = value;
      this.remove(key);
    }
    settings = normalizeTransitionSettings(settings);
    if (!settings) {
      return;
    }
    const TransitionType = TRANSITION_TYPES2[settings.type];
    if (!TransitionType) {
      log_default.error(`unsupported transition type '${settings.type}'`)();
      return;
    }
    const transition = new TransitionType(this.timeline);
    transition.start({
      ...settings,
      fromValue,
      toValue
    });
    transitions.set(key, transition);
  }
  remove(key) {
    const { transitions } = this;
    if (transitions.has(key)) {
      transitions.get(key).cancel();
      transitions.delete(key);
    }
  }
  update() {
    const propsInTransition = {};
    for (const [key, transition] of this.transitions) {
      transition.update();
      propsInTransition[key] = transition.value;
      if (!transition.inProgress) {
        this.remove(key);
      }
    }
    return propsInTransition;
  }
  clear() {
    for (const key of this.transitions.keys()) {
      this.remove(key);
    }
  }
};

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/lifecycle/props.js
function validateProps(props) {
  const propTypes = props[PROP_TYPES_SYMBOL];
  for (const propName in propTypes) {
    const propType = propTypes[propName];
    const { validate } = propType;
    if (validate && !validate(props[propName], propType)) {
      throw new Error(`Invalid prop ${propName}: ${props[propName]}`);
    }
  }
}
function diffProps(props, oldProps) {
  const propsChangedReason = compareProps({
    newProps: props,
    oldProps,
    propTypes: props[PROP_TYPES_SYMBOL],
    ignoreProps: { data: null, updateTriggers: null, extensions: null, transitions: null }
  });
  const dataChangedReason = diffDataProps(props, oldProps);
  let updateTriggersChangedReason = false;
  if (!dataChangedReason) {
    updateTriggersChangedReason = diffUpdateTriggers(props, oldProps);
  }
  return {
    dataChanged: dataChangedReason,
    propsChanged: propsChangedReason,
    updateTriggersChanged: updateTriggersChangedReason,
    extensionsChanged: diffExtensions(props, oldProps),
    transitionsChanged: diffTransitions(props, oldProps)
  };
}
function diffTransitions(props, oldProps) {
  if (!props.transitions) {
    return false;
  }
  const result = {};
  const propTypes = props[PROP_TYPES_SYMBOL];
  let changed = false;
  for (const key in props.transitions) {
    const propType = propTypes[key];
    const type = propType && propType.type;
    const isTransitionable = type === "number" || type === "color" || type === "array";
    if (isTransitionable && comparePropValues(props[key], oldProps[key], propType)) {
      result[key] = true;
      changed = true;
    }
  }
  return changed ? result : false;
}
function compareProps({ newProps, oldProps, ignoreProps = {}, propTypes = {}, triggerName = "props" }) {
  if (oldProps === newProps) {
    return false;
  }
  if (typeof newProps !== "object" || newProps === null) {
    return `${triggerName} changed shallowly`;
  }
  if (typeof oldProps !== "object" || oldProps === null) {
    return `${triggerName} changed shallowly`;
  }
  for (const key of Object.keys(newProps)) {
    if (!(key in ignoreProps)) {
      if (!(key in oldProps)) {
        return `${triggerName}.${key} added`;
      }
      const changed = comparePropValues(newProps[key], oldProps[key], propTypes[key]);
      if (changed) {
        return `${triggerName}.${key} ${changed}`;
      }
    }
  }
  for (const key of Object.keys(oldProps)) {
    if (!(key in ignoreProps)) {
      if (!(key in newProps)) {
        return `${triggerName}.${key} dropped`;
      }
      if (!Object.hasOwnProperty.call(newProps, key)) {
        const changed = comparePropValues(newProps[key], oldProps[key], propTypes[key]);
        if (changed) {
          return `${triggerName}.${key} ${changed}`;
        }
      }
    }
  }
  return false;
}
function comparePropValues(newProp, oldProp, propType) {
  let equal = propType && propType.equal;
  if (equal && !equal(newProp, oldProp, propType)) {
    return "changed deeply";
  }
  if (!equal) {
    equal = newProp && oldProp && newProp.equals;
    if (equal && !equal.call(newProp, oldProp)) {
      return "changed deeply";
    }
  }
  if (!equal && oldProp !== newProp) {
    return "changed shallowly";
  }
  return null;
}
function diffDataProps(props, oldProps) {
  if (oldProps === null) {
    return "oldProps is null, initial diff";
  }
  let dataChanged = false;
  const { dataComparator, _dataDiff } = props;
  if (dataComparator) {
    if (!dataComparator(props.data, oldProps.data)) {
      dataChanged = "Data comparator detected a change";
    }
  } else if (props.data !== oldProps.data) {
    dataChanged = "A new data container was supplied";
  }
  if (dataChanged && _dataDiff) {
    dataChanged = _dataDiff(props.data, oldProps.data) || dataChanged;
  }
  return dataChanged;
}
function diffUpdateTriggers(props, oldProps) {
  if (oldProps === null) {
    return { all: true };
  }
  if ("all" in props.updateTriggers) {
    const diffReason = diffUpdateTrigger(props, oldProps, "all");
    if (diffReason) {
      return { all: true };
    }
  }
  const reason = {};
  let changed = false;
  for (const triggerName in props.updateTriggers) {
    if (triggerName !== "all") {
      const diffReason = diffUpdateTrigger(props, oldProps, triggerName);
      if (diffReason) {
        reason[triggerName] = true;
        changed = true;
      }
    }
  }
  return changed ? reason : false;
}
function diffExtensions(props, oldProps) {
  if (oldProps === null) {
    return true;
  }
  const oldExtensions = oldProps.extensions;
  const { extensions } = props;
  if (extensions === oldExtensions) {
    return false;
  }
  if (!oldExtensions || !extensions) {
    return true;
  }
  if (extensions.length !== oldExtensions.length) {
    return true;
  }
  for (let i4 = 0; i4 < extensions.length; i4++) {
    if (!extensions[i4].equals(oldExtensions[i4])) {
      return true;
    }
  }
  return false;
}
function diffUpdateTrigger(props, oldProps, triggerName) {
  let newTriggers = props.updateTriggers[triggerName];
  newTriggers = newTriggers === void 0 || newTriggers === null ? {} : newTriggers;
  let oldTriggers = oldProps.updateTriggers[triggerName];
  oldTriggers = oldTriggers === void 0 || oldTriggers === null ? {} : oldTriggers;
  const diffReason = compareProps({
    oldProps: oldTriggers,
    newProps: newTriggers,
    triggerName
  });
  return diffReason;
}

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/utils/count.js
var ERR_NOT_OBJECT = "count(): argument not an object";
var ERR_NOT_CONTAINER = "count(): argument not a container";
function count(container) {
  if (!isObject2(container)) {
    throw new Error(ERR_NOT_OBJECT);
  }
  if (typeof container.count === "function") {
    return container.count();
  }
  if (Number.isFinite(container.size)) {
    return container.size;
  }
  if (Number.isFinite(container.length)) {
    return container.length;
  }
  if (isPlainObject(container)) {
    return Object.keys(container).length;
  }
  throw new Error(ERR_NOT_CONTAINER);
}
function isPlainObject(value) {
  return value !== null && typeof value === "object" && value.constructor === Object;
}
function isObject2(value) {
  return value !== null && typeof value === "object";
}

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/utils/shader.js
function mergeShaders(target2, source4) {
  if (!source4) {
    return target2;
  }
  const result = { ...target2, ...source4 };
  if ("defines" in source4) {
    result.defines = { ...target2.defines, ...source4.defines };
  }
  if ("modules" in source4) {
    result.modules = (target2.modules || []).concat(source4.modules);
    if (source4.modules.some((module) => module.name === "project64")) {
      const index = result.modules.findIndex((module) => module.name === "project32");
      if (index >= 0) {
        result.modules.splice(index, 1);
      }
    }
  }
  if ("inject" in source4) {
    if (!target2.inject) {
      result.inject = source4.inject;
    } else {
      const mergedInjection = { ...target2.inject };
      for (const key in source4.inject) {
        mergedInjection[key] = (mergedInjection[key] || "") + source4.inject[key];
      }
      result.inject = mergedInjection;
    }
  }
  return result;
}

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/utils/texture.js
var DEFAULT_TEXTURE_PARAMETERS = {
  minFilter: "linear",
  mipmapFilter: "linear",
  magFilter: "linear",
  addressModeU: "clamp-to-edge",
  addressModeV: "clamp-to-edge"
};
var internalTextures = {};
function createTexture(owner, device, image, sampler) {
  if (image instanceof Texture) {
    return image;
  } else if (image.constructor && image.constructor.name !== "Object") {
    image = { data: image };
  }
  let samplerParameters = null;
  if (image.compressed) {
    samplerParameters = {
      minFilter: "linear",
      mipmapFilter: image.data.length > 1 ? "nearest" : "linear"
    };
  }
  const texture = device.createTexture({
    ...image,
    sampler: {
      ...DEFAULT_TEXTURE_PARAMETERS,
      ...samplerParameters,
      ...sampler
    },
    mipmaps: true
  });
  internalTextures[texture.id] = owner;
  return texture;
}
function destroyTexture(owner, texture) {
  if (!texture || !(texture instanceof Texture)) {
    return;
  }
  if (internalTextures[texture.id] === owner) {
    texture.delete();
    delete internalTextures[texture.id];
  }
}

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/lifecycle/prop-types.js
var TYPE_DEFINITIONS = {
  boolean: {
    validate(value, propType) {
      return true;
    },
    equal(value1, value2, propType) {
      return Boolean(value1) === Boolean(value2);
    }
  },
  number: {
    validate(value, propType) {
      return Number.isFinite(value) && (!("max" in propType) || value <= propType.max) && (!("min" in propType) || value >= propType.min);
    }
  },
  color: {
    validate(value, propType) {
      return propType.optional && !value || isArray3(value) && (value.length === 3 || value.length === 4);
    },
    equal(value1, value2, propType) {
      return deepEqual2(value1, value2, 1);
    }
  },
  accessor: {
    validate(value, propType) {
      const valueType = getTypeOf2(value);
      return valueType === "function" || valueType === getTypeOf2(propType.value);
    },
    equal(value1, value2, propType) {
      if (typeof value2 === "function") {
        return true;
      }
      return deepEqual2(value1, value2, 1);
    }
  },
  array: {
    validate(value, propType) {
      return propType.optional && !value || isArray3(value);
    },
    equal(value1, value2, propType) {
      const { compare } = propType;
      const depth = Number.isInteger(compare) ? compare : compare ? 1 : 0;
      return compare ? deepEqual2(value1, value2, depth) : value1 === value2;
    }
  },
  object: {
    equal(value1, value2, propType) {
      if (propType.ignore) {
        return true;
      }
      const { compare } = propType;
      const depth = Number.isInteger(compare) ? compare : compare ? 1 : 0;
      return compare ? deepEqual2(value1, value2, depth) : value1 === value2;
    }
  },
  function: {
    validate(value, propType) {
      return propType.optional && !value || typeof value === "function";
    },
    equal(value1, value2, propType) {
      const shouldIgnore = !propType.compare && propType.ignore !== false;
      return shouldIgnore || value1 === value2;
    }
  },
  data: {
    transform: (value, propType, component) => {
      if (!value) {
        return value;
      }
      const { dataTransform } = component.props;
      if (dataTransform) {
        return dataTransform(value);
      }
      if (typeof value.shape === "string" && value.shape.endsWith("-table") && Array.isArray(value.data)) {
        return value.data;
      }
      return value;
    }
  },
  image: {
    transform: (value, propType, component) => {
      const context = component.context;
      if (!context || !context.device) {
        return null;
      }
      return createTexture(component.id, context.device, value, {
        ...propType.parameters,
        ...component.props.textureParameters
      });
    },
    release: (value, propType, component) => {
      destroyTexture(component.id, value);
    }
  }
};
function parsePropTypes(propDefs) {
  const propTypes = {};
  const defaultProps3 = {};
  const deprecatedProps = {};
  for (const [propName, propDef] of Object.entries(propDefs)) {
    const deprecated = propDef == null ? void 0 : propDef.deprecatedFor;
    if (deprecated) {
      deprecatedProps[propName] = Array.isArray(deprecated) ? deprecated : [deprecated];
    } else {
      const propType = parsePropType(propName, propDef);
      propTypes[propName] = propType;
      defaultProps3[propName] = propType.value;
    }
  }
  return { propTypes, defaultProps: defaultProps3, deprecatedProps };
}
function parsePropType(name2, propDef) {
  switch (getTypeOf2(propDef)) {
    case "object":
      return normalizePropDefinition(name2, propDef);
    case "array":
      return normalizePropDefinition(name2, { type: "array", value: propDef, compare: false });
    case "boolean":
      return normalizePropDefinition(name2, { type: "boolean", value: propDef });
    case "number":
      return normalizePropDefinition(name2, { type: "number", value: propDef });
    case "function":
      return normalizePropDefinition(name2, { type: "function", value: propDef, compare: true });
    default:
      return { name: name2, type: "unknown", value: propDef };
  }
}
function normalizePropDefinition(name2, propDef) {
  if (!("type" in propDef)) {
    if (!("value" in propDef)) {
      return { name: name2, type: "object", value: propDef };
    }
    return { name: name2, type: getTypeOf2(propDef.value), ...propDef };
  }
  return { name: name2, ...TYPE_DEFINITIONS[propDef.type], ...propDef };
}
function isArray3(value) {
  return Array.isArray(value) || ArrayBuffer.isView(value);
}
function getTypeOf2(value) {
  if (isArray3(value)) {
    return "array";
  }
  if (value === null) {
    return "null";
  }
  return typeof value;
}

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/lifecycle/create-props.js
function createProps(component, propObjects) {
  let extensions;
  for (let i4 = propObjects.length - 1; i4 >= 0; i4--) {
    const props = propObjects[i4];
    if ("extensions" in props) {
      extensions = props.extensions;
    }
  }
  const propsPrototype = getPropsPrototype(component.constructor, extensions);
  const propsInstance = Object.create(propsPrototype);
  propsInstance[COMPONENT_SYMBOL] = component;
  propsInstance[ASYNC_ORIGINAL_SYMBOL] = {};
  propsInstance[ASYNC_RESOLVED_SYMBOL] = {};
  for (let i4 = 0; i4 < propObjects.length; ++i4) {
    const props = propObjects[i4];
    for (const key in props) {
      propsInstance[key] = props[key];
    }
  }
  Object.freeze(propsInstance);
  return propsInstance;
}
var MergedDefaultPropsCacheKey = "_mergedDefaultProps";
function getPropsPrototype(componentClass, extensions) {
  if (!(componentClass instanceof component_default.constructor))
    return {};
  let cacheKey = MergedDefaultPropsCacheKey;
  if (extensions) {
    for (const extension of extensions) {
      const ExtensionClass = extension.constructor;
      if (ExtensionClass) {
        cacheKey += `:${ExtensionClass.extensionName || ExtensionClass.name}`;
      }
    }
  }
  const defaultProps3 = getOwnProperty(componentClass, cacheKey);
  if (!defaultProps3) {
    return componentClass[cacheKey] = createPropsPrototypeAndTypes(componentClass, extensions || []);
  }
  return defaultProps3;
}
function createPropsPrototypeAndTypes(componentClass, extensions) {
  const parent = componentClass.prototype;
  if (!parent) {
    return null;
  }
  const parentClass = Object.getPrototypeOf(componentClass);
  const parentDefaultProps = getPropsPrototype(parentClass);
  const componentDefaultProps = getOwnProperty(componentClass, "defaultProps") || {};
  const componentPropDefs = parsePropTypes(componentDefaultProps);
  const defaultProps3 = Object.assign(/* @__PURE__ */ Object.create(null), parentDefaultProps, componentPropDefs.defaultProps);
  const propTypes = Object.assign(/* @__PURE__ */ Object.create(null), parentDefaultProps == null ? void 0 : parentDefaultProps[PROP_TYPES_SYMBOL], componentPropDefs.propTypes);
  const deprecatedProps = Object.assign(/* @__PURE__ */ Object.create(null), parentDefaultProps == null ? void 0 : parentDefaultProps[DEPRECATED_PROPS_SYMBOL], componentPropDefs.deprecatedProps);
  for (const extension of extensions) {
    const extensionDefaultProps = getPropsPrototype(extension.constructor);
    if (extensionDefaultProps) {
      Object.assign(defaultProps3, extensionDefaultProps);
      Object.assign(propTypes, extensionDefaultProps[PROP_TYPES_SYMBOL]);
      Object.assign(deprecatedProps, extensionDefaultProps[DEPRECATED_PROPS_SYMBOL]);
    }
  }
  createPropsPrototype(defaultProps3, componentClass);
  addAsyncPropsToPropPrototype(defaultProps3, propTypes);
  addDeprecatedPropsToPropPrototype(defaultProps3, deprecatedProps);
  defaultProps3[PROP_TYPES_SYMBOL] = propTypes;
  defaultProps3[DEPRECATED_PROPS_SYMBOL] = deprecatedProps;
  if (extensions.length === 0 && !hasOwnProperty(componentClass, "_propTypes")) {
    componentClass._propTypes = propTypes;
  }
  return defaultProps3;
}
function createPropsPrototype(defaultProps3, componentClass) {
  const id = getComponentName(componentClass);
  Object.defineProperties(defaultProps3, {
    // `id` is treated specially because layer might need to override it
    id: {
      writable: true,
      value: id
    }
  });
}
function addDeprecatedPropsToPropPrototype(defaultProps3, deprecatedProps) {
  for (const propName in deprecatedProps) {
    Object.defineProperty(defaultProps3, propName, {
      enumerable: false,
      set(newValue) {
        const nameStr = `${this.id}: ${propName}`;
        for (const newPropName of deprecatedProps[propName]) {
          if (!hasOwnProperty(this, newPropName)) {
            this[newPropName] = newValue;
          }
        }
        log_default.deprecated(nameStr, deprecatedProps[propName].join("/"))();
      }
    });
  }
}
function addAsyncPropsToPropPrototype(defaultProps3, propTypes) {
  const defaultValues = {};
  const descriptors = {};
  for (const propName in propTypes) {
    const propType = propTypes[propName];
    const { name: name2, value } = propType;
    if (propType.async) {
      defaultValues[name2] = value;
      descriptors[name2] = getDescriptorForAsyncProp(name2);
    }
  }
  defaultProps3[ASYNC_DEFAULTS_SYMBOL] = defaultValues;
  defaultProps3[ASYNC_ORIGINAL_SYMBOL] = {};
  Object.defineProperties(defaultProps3, descriptors);
}
function getDescriptorForAsyncProp(name2) {
  return {
    enumerable: true,
    // Save the provided value for async props in a special map
    set(newValue) {
      if (typeof newValue === "string" || newValue instanceof Promise || isAsyncIterable2(newValue)) {
        this[ASYNC_ORIGINAL_SYMBOL][name2] = newValue;
      } else {
        this[ASYNC_RESOLVED_SYMBOL][name2] = newValue;
      }
    },
    // Only the component's state knows the true value of async prop
    get() {
      if (this[ASYNC_RESOLVED_SYMBOL]) {
        if (name2 in this[ASYNC_RESOLVED_SYMBOL]) {
          const value = this[ASYNC_RESOLVED_SYMBOL][name2];
          return value || this[ASYNC_DEFAULTS_SYMBOL][name2];
        }
        if (name2 in this[ASYNC_ORIGINAL_SYMBOL]) {
          const state = this[COMPONENT_SYMBOL] && this[COMPONENT_SYMBOL].internalState;
          if (state && state.hasAsyncProp(name2)) {
            return state.getAsyncProp(name2) || this[ASYNC_DEFAULTS_SYMBOL][name2];
          }
        }
      }
      return this[ASYNC_DEFAULTS_SYMBOL][name2];
    }
  };
}
function hasOwnProperty(object, prop) {
  return Object.prototype.hasOwnProperty.call(object, prop);
}
function getOwnProperty(object, prop) {
  return hasOwnProperty(object, prop) && object[prop];
}
function getComponentName(componentClass) {
  const componentName = componentClass.componentName;
  if (!componentName) {
    log_default.warn(`${componentClass.name}.componentName not specified`)();
  }
  return componentName || componentClass.name;
}

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/lifecycle/component.js
var counter = 0;
var Component = class {
  constructor(...propObjects) {
    this.props = createProps(this, propObjects);
    this.id = this.props.id;
    this.count = counter++;
  }
  // clone this layer with modified props
  clone(newProps) {
    const { props } = this;
    const asyncProps = {};
    for (const key in props[ASYNC_DEFAULTS_SYMBOL]) {
      if (key in props[ASYNC_RESOLVED_SYMBOL]) {
        asyncProps[key] = props[ASYNC_RESOLVED_SYMBOL][key];
      } else if (key in props[ASYNC_ORIGINAL_SYMBOL]) {
        asyncProps[key] = props[ASYNC_ORIGINAL_SYMBOL][key];
      }
    }
    return new this.constructor({ ...props, ...asyncProps, ...newProps });
  }
};
Component.componentName = "Component";
Component.defaultProps = {};
var component_default = Component;

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/lifecycle/component-state.js
var EMPTY_PROPS = Object.freeze({});
var ComponentState = class {
  constructor(component) {
    this.component = component;
    this.asyncProps = {};
    this.onAsyncPropUpdated = () => {
    };
    this.oldProps = null;
    this.oldAsyncProps = null;
  }
  finalize() {
    for (const propName in this.asyncProps) {
      const asyncProp = this.asyncProps[propName];
      if (asyncProp && asyncProp.type && asyncProp.type.release) {
        asyncProp.type.release(asyncProp.resolvedValue, asyncProp.type, this.component);
      }
    }
    this.asyncProps = {};
    this.component = null;
    this.resetOldProps();
  }
  /* Layer-facing props API */
  getOldProps() {
    return this.oldAsyncProps || this.oldProps || EMPTY_PROPS;
  }
  resetOldProps() {
    this.oldAsyncProps = null;
    this.oldProps = this.component ? this.component.props : null;
  }
  // Checks if a prop is overridden
  hasAsyncProp(propName) {
    return propName in this.asyncProps;
  }
  // Returns value of an overriden prop
  getAsyncProp(propName) {
    const asyncProp = this.asyncProps[propName];
    return asyncProp && asyncProp.resolvedValue;
  }
  isAsyncPropLoading(propName) {
    if (propName) {
      const asyncProp = this.asyncProps[propName];
      return Boolean(asyncProp && asyncProp.pendingLoadCount > 0 && asyncProp.pendingLoadCount !== asyncProp.resolvedLoadCount);
    }
    for (const key in this.asyncProps) {
      if (this.isAsyncPropLoading(key)) {
        return true;
      }
    }
    return false;
  }
  // Without changing the original prop value, swap out the data resolution under the hood
  reloadAsyncProp(propName, value) {
    this._watchPromise(propName, Promise.resolve(value));
  }
  // Updates all async/overridden props (when new props come in)
  // Checks if urls have changed, starts loading, or removes override
  setAsyncProps(props) {
    this.component = props[COMPONENT_SYMBOL] || this.component;
    const resolvedValues = props[ASYNC_RESOLVED_SYMBOL] || {};
    const originalValues = props[ASYNC_ORIGINAL_SYMBOL] || props;
    const defaultValues = props[ASYNC_DEFAULTS_SYMBOL] || {};
    for (const propName in resolvedValues) {
      const value = resolvedValues[propName];
      this._createAsyncPropData(propName, defaultValues[propName]);
      this._updateAsyncProp(propName, value);
      resolvedValues[propName] = this.getAsyncProp(propName);
    }
    for (const propName in originalValues) {
      const value = originalValues[propName];
      this._createAsyncPropData(propName, defaultValues[propName]);
      this._updateAsyncProp(propName, value);
    }
  }
  /* Placeholder methods for subclassing */
  _fetch(propName, url) {
    return null;
  }
  _onResolve(propName, value) {
  }
  // eslint-disable-line @typescript-eslint/no-empty-function
  _onError(propName, error) {
  }
  // eslint-disable-line @typescript-eslint/no-empty-function
  // Intercept strings (URLs) and Promises and activates loading and prop rewriting
  _updateAsyncProp(propName, value) {
    if (!this._didAsyncInputValueChange(propName, value)) {
      return;
    }
    if (typeof value === "string") {
      value = this._fetch(propName, value);
    }
    if (value instanceof Promise) {
      this._watchPromise(propName, value);
      return;
    }
    if (isAsyncIterable2(value)) {
      this._resolveAsyncIterable(propName, value);
      return;
    }
    this._setPropValue(propName, value);
  }
  // Whenever async props are changing, we need to make a copy of oldProps
  // otherwise the prop rewriting will affect the value both in props and oldProps.
  // While the copy is relatively expensive, this only happens on load completion.
  _freezeAsyncOldProps() {
    if (!this.oldAsyncProps && this.oldProps) {
      this.oldAsyncProps = Object.create(this.oldProps);
      for (const propName in this.asyncProps) {
        Object.defineProperty(this.oldAsyncProps, propName, {
          enumerable: true,
          value: this.oldProps[propName]
        });
      }
    }
  }
  // Checks if an input value actually changed (to avoid reloading/rewatching promises/urls)
  _didAsyncInputValueChange(propName, value) {
    const asyncProp = this.asyncProps[propName];
    if (value === asyncProp.resolvedValue || value === asyncProp.lastValue) {
      return false;
    }
    asyncProp.lastValue = value;
    return true;
  }
  // Set normal, non-async value
  _setPropValue(propName, value) {
    this._freezeAsyncOldProps();
    const asyncProp = this.asyncProps[propName];
    if (asyncProp) {
      value = this._postProcessValue(asyncProp, value);
      asyncProp.resolvedValue = value;
      asyncProp.pendingLoadCount++;
      asyncProp.resolvedLoadCount = asyncProp.pendingLoadCount;
    }
  }
  // Set a just resolved async value, calling onAsyncPropUpdates if value changes asynchronously
  _setAsyncPropValue(propName, value, loadCount) {
    const asyncProp = this.asyncProps[propName];
    if (asyncProp && loadCount >= asyncProp.resolvedLoadCount && value !== void 0) {
      this._freezeAsyncOldProps();
      asyncProp.resolvedValue = value;
      asyncProp.resolvedLoadCount = loadCount;
      this.onAsyncPropUpdated(propName, value);
    }
  }
  // Tracks a promise, sets the prop when loaded, handles load count
  _watchPromise(propName, promise) {
    const asyncProp = this.asyncProps[propName];
    if (asyncProp) {
      asyncProp.pendingLoadCount++;
      const loadCount = asyncProp.pendingLoadCount;
      promise.then((data) => {
        if (!this.component) {
          return;
        }
        data = this._postProcessValue(asyncProp, data);
        this._setAsyncPropValue(propName, data, loadCount);
        this._onResolve(propName, data);
      }).catch((error) => {
        this._onError(propName, error);
      });
    }
  }
  async _resolveAsyncIterable(propName, iterable) {
    if (propName !== "data") {
      this._setPropValue(propName, iterable);
      return;
    }
    const asyncProp = this.asyncProps[propName];
    if (!asyncProp) {
      return;
    }
    asyncProp.pendingLoadCount++;
    const loadCount = asyncProp.pendingLoadCount;
    let data = [];
    let count2 = 0;
    for await (const chunk of iterable) {
      if (!this.component) {
        return;
      }
      const { dataTransform } = this.component.props;
      if (dataTransform) {
        data = dataTransform(chunk, data);
      } else {
        data = data.concat(chunk);
      }
      Object.defineProperty(data, "__diff", {
        enumerable: false,
        value: [{ startRow: count2, endRow: data.length }]
      });
      count2 = data.length;
      this._setAsyncPropValue(propName, data, loadCount);
    }
    this._onResolve(propName, data);
  }
  // Give the app a chance to post process the loaded data
  _postProcessValue(asyncProp, value) {
    const propType = asyncProp.type;
    if (propType && this.component) {
      if (propType.release) {
        propType.release(asyncProp.resolvedValue, propType, this.component);
      }
      if (propType.transform) {
        return propType.transform(value, propType, this.component);
      }
    }
    return value;
  }
  // Creating an asyncProp record if needed
  _createAsyncPropData(propName, defaultValue) {
    const asyncProp = this.asyncProps[propName];
    if (!asyncProp) {
      const propTypes = this.component && this.component.props[PROP_TYPES_SYMBOL];
      this.asyncProps[propName] = {
        type: propTypes && propTypes[propName],
        lastValue: null,
        resolvedValue: defaultValue,
        pendingLoadCount: 0,
        resolvedLoadCount: 0
      };
    }
  }
};

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/lib/layer-state.js
var LayerState = class extends ComponentState {
  constructor({ attributeManager, layer }) {
    super(layer);
    this.attributeManager = attributeManager;
    this.needsRedraw = true;
    this.needsUpdate = true;
    this.subLayers = null;
    this.usesPickingColorCache = false;
  }
  get layer() {
    return this.component;
  }
  /* Override base Component methods with Layer-specific handling */
  _fetch(propName, url) {
    const layer = this.layer;
    const fetch2 = layer == null ? void 0 : layer.props.fetch;
    if (fetch2) {
      return fetch2(url, { propName, layer });
    }
    return super._fetch(propName, url);
  }
  _onResolve(propName, value) {
    const layer = this.layer;
    if (layer) {
      const onDataLoad = layer.props.onDataLoad;
      if (propName === "data" && onDataLoad) {
        onDataLoad(value, { propName, layer });
      }
    }
  }
  _onError(propName, error) {
    const layer = this.layer;
    if (layer) {
      layer.raiseError(error, `loading ${propName} of ${this.layer}`);
    }
  }
};

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/lib/layer.js
var TRACE_CHANGE_FLAG = "layer.changeFlag";
var TRACE_INITIALIZE = "layer.initialize";
var TRACE_UPDATE = "layer.update";
var TRACE_FINALIZE = "layer.finalize";
var TRACE_MATCHED = "layer.matched";
var MAX_PICKING_COLOR_CACHE_SIZE = 2 ** 24 - 1;
var EMPTY_ARRAY2 = Object.freeze([]);
var areViewportsEqual = memoize(({ oldViewport, viewport }) => {
  return oldViewport.equals(viewport);
});
var pickingColorCache = new Uint8ClampedArray(0);
var defaultProps2 = {
  // data: Special handling for null, see below
  data: { type: "data", value: EMPTY_ARRAY2, async: true },
  dataComparator: { type: "function", value: null, optional: true },
  _dataDiff: {
    type: "function",
    // @ts-ignore __diff is not defined on data
    value: (data) => data && data.__diff,
    optional: true
  },
  dataTransform: { type: "function", value: null, optional: true },
  onDataLoad: { type: "function", value: null, optional: true },
  onError: { type: "function", value: null, optional: true },
  fetch: {
    type: "function",
    value: (url, { propName, layer, loaders, loadOptions, signal }) => {
      const { resourceManager } = layer.context;
      loadOptions = loadOptions || layer.getLoadOptions();
      loaders = loaders || layer.props.loaders;
      if (signal) {
        loadOptions = {
          ...loadOptions,
          fetch: {
            ...loadOptions == null ? void 0 : loadOptions.fetch,
            signal
          }
        };
      }
      let inResourceManager = resourceManager.contains(url);
      if (!inResourceManager && !loadOptions) {
        resourceManager.add({ resourceId: url, data: load(url, loaders), persistent: false });
        inResourceManager = true;
      }
      if (inResourceManager) {
        return resourceManager.subscribe({
          resourceId: url,
          onChange: (data) => {
            var _a3;
            return (_a3 = layer.internalState) == null ? void 0 : _a3.reloadAsyncProp(propName, data);
          },
          consumerId: layer.id,
          requestId: propName
        });
      }
      return load(url, loaders, loadOptions);
    }
  },
  updateTriggers: {},
  // Update triggers: a core change detection mechanism in deck.gl
  visible: true,
  pickable: false,
  opacity: { type: "number", min: 0, max: 1, value: 1 },
  operation: "draw",
  onHover: { type: "function", value: null, optional: true },
  onClick: { type: "function", value: null, optional: true },
  onDragStart: { type: "function", value: null, optional: true },
  onDrag: { type: "function", value: null, optional: true },
  onDragEnd: { type: "function", value: null, optional: true },
  coordinateSystem: COORDINATE_SYSTEM.DEFAULT,
  coordinateOrigin: { type: "array", value: [0, 0, 0], compare: true },
  modelMatrix: { type: "array", value: null, compare: true, optional: true },
  wrapLongitude: false,
  positionFormat: "XYZ",
  colorFormat: "RGBA",
  parameters: { type: "object", value: {}, optional: true, compare: 2 },
  loadOptions: { type: "object", value: null, optional: true, ignore: true },
  transitions: null,
  extensions: [],
  loaders: { type: "array", value: [], optional: true, ignore: true },
  // Offset depth based on layer index to avoid z-fighting.
  // Negative values pull layer towards the camera
  // https://www.opengl.org/archives/resources/faq/technical/polygonoffset.htm
  getPolygonOffset: {
    type: "function",
    value: ({ layerIndex }) => [0, -layerIndex * 100]
  },
  // Selection/Highlighting
  highlightedObjectIndex: null,
  autoHighlight: false,
  highlightColor: { type: "accessor", value: [0, 0, 128, 128] }
};
var Layer = class extends component_default {
  constructor() {
    super(...arguments);
    this.internalState = null;
    this.lifecycle = LIFECYCLE.NO_STATE;
    this.parent = null;
  }
  static get componentName() {
    return Object.prototype.hasOwnProperty.call(this, "layerName") ? this.layerName : "";
  }
  get root() {
    let layer = this;
    while (layer.parent) {
      layer = layer.parent;
    }
    return layer;
  }
  toString() {
    const className = this.constructor.layerName || this.constructor.name;
    return `${className}({id: '${this.props.id}'})`;
  }
  // Public API for users
  /** Projects a point with current view state from the current layer's coordinate system to screen */
  project(xyz) {
    assert8(this.internalState);
    const viewport = this.internalState.viewport || this.context.viewport;
    const worldPosition = getWorldPosition(xyz, {
      viewport,
      modelMatrix: this.props.modelMatrix,
      coordinateOrigin: this.props.coordinateOrigin,
      coordinateSystem: this.props.coordinateSystem
    });
    const [x3, y3, z3] = worldToPixels(worldPosition, viewport.pixelProjectionMatrix);
    return xyz.length === 2 ? [x3, y3] : [x3, y3, z3];
  }
  /** Unprojects a screen pixel to the current view's default coordinate system
      Note: this does not reverse `project`. */
  unproject(xy) {
    assert8(this.internalState);
    const viewport = this.internalState.viewport || this.context.viewport;
    return viewport.unproject(xy);
  }
  /** Projects a point with current view state from the current layer's coordinate system to the world space */
  projectPosition(xyz, params) {
    assert8(this.internalState);
    const viewport = this.internalState.viewport || this.context.viewport;
    return projectPosition(xyz, {
      viewport,
      modelMatrix: this.props.modelMatrix,
      coordinateOrigin: this.props.coordinateOrigin,
      coordinateSystem: this.props.coordinateSystem,
      ...params
    });
  }
  // Public API for custom layer implementation
  /** `true` if this layer renders other layers */
  get isComposite() {
    return false;
  }
  /** `true` if the layer renders to screen */
  get isDrawable() {
    return true;
  }
  /** Updates selected state members and marks the layer for redraw */
  setState(partialState) {
    this.setChangeFlags({ stateChanged: true });
    Object.assign(this.state, partialState);
    this.setNeedsRedraw();
  }
  /** Sets the redraw flag for this layer, will trigger a redraw next animation frame */
  setNeedsRedraw() {
    if (this.internalState) {
      this.internalState.needsRedraw = true;
    }
  }
  /** Mark this layer as needs a deep update */
  setNeedsUpdate() {
    if (this.internalState) {
      this.context.layerManager.setNeedsUpdate(String(this));
      this.internalState.needsUpdate = true;
    }
  }
  /** Returns true if all async resources are loaded */
  get isLoaded() {
    return this.internalState ? !this.internalState.isAsyncPropLoading() : false;
  }
  /** Returns true if using shader-based WGS84 longitude wrapping */
  get wrapLongitude() {
    return this.props.wrapLongitude;
  }
  /** @deprecated Returns true if the layer is visible in the picking pass */
  isPickable() {
    return this.props.pickable && this.props.visible;
  }
  /** Returns an array of models used by this layer, can be overriden by layer subclass */
  getModels() {
    const state = this.state;
    return state && (state.models || state.model && [state.model]) || [];
  }
  /** Update shader input parameters */
  setShaderModuleProps(...props) {
    for (const model of this.getModels()) {
      model.shaderInputs.setProps(...props);
    }
  }
  /** Returns the attribute manager of this layer */
  getAttributeManager() {
    return this.internalState && this.internalState.attributeManager;
  }
  /** Returns the most recent layer that matched to this state
    (When reacting to an async event, this layer may no longer be the latest) */
  getCurrentLayer() {
    return this.internalState && this.internalState.layer;
  }
  /** Returns the default parse options for async props */
  getLoadOptions() {
    return this.props.loadOptions;
  }
  use64bitPositions() {
    const { coordinateSystem } = this.props;
    return coordinateSystem === COORDINATE_SYSTEM.DEFAULT || coordinateSystem === COORDINATE_SYSTEM.LNGLAT || coordinateSystem === COORDINATE_SYSTEM.CARTESIAN;
  }
  // Event handling
  onHover(info, pickingEvent) {
    if (this.props.onHover) {
      return this.props.onHover(info, pickingEvent) || false;
    }
    return false;
  }
  onClick(info, pickingEvent) {
    if (this.props.onClick) {
      return this.props.onClick(info, pickingEvent) || false;
    }
    return false;
  }
  // Returns the picking color that doesn't match any subfeature
  // Use if some graphics do not belong to any pickable subfeature
  // @return {Array} - a black color
  nullPickingColor() {
    return [0, 0, 0];
  }
  // Returns the picking color that doesn't match any subfeature
  // Use if some graphics do not belong to any pickable subfeature
  encodePickingColor(i4, target2 = []) {
    target2[0] = i4 + 1 & 255;
    target2[1] = i4 + 1 >> 8 & 255;
    target2[2] = i4 + 1 >> 8 >> 8 & 255;
    return target2;
  }
  // Returns the index corresponding to a picking color that doesn't match any subfeature
  // @param {Uint8Array} color - color array to be decoded
  // @return {Array} - the decoded picking color
  decodePickingColor(color) {
    assert8(color instanceof Uint8Array);
    const [i1, i22, i32] = color;
    const index = i1 + i22 * 256 + i32 * 65536 - 1;
    return index;
  }
  /** Deduces number of instances. Intention is to support:
    - Explicit setting of numInstances
    - Auto-deduction for ES6 containers that define a size member
    - Auto-deduction for Classic Arrays via the built-in length attribute
    - Auto-deduction via arrays */
  getNumInstances() {
    if (Number.isFinite(this.props.numInstances)) {
      return this.props.numInstances;
    }
    if (this.state && this.state.numInstances !== void 0) {
      return this.state.numInstances;
    }
    return count(this.props.data);
  }
  /** Buffer layout describes how many attribute values are packed for each data object
      The default (null) is one value each object.
      Some data formats (e.g. paths, polygons) have various length. Their buffer layout
      is in the form of [L0, L1, L2, ...] */
  getStartIndices() {
    if (this.props.startIndices) {
      return this.props.startIndices;
    }
    if (this.state && this.state.startIndices) {
      return this.state.startIndices;
    }
    return null;
  }
  // Default implementation
  getBounds() {
    var _a3;
    return (_a3 = this.getAttributeManager()) == null ? void 0 : _a3.getBounds(["positions", "instancePositions"]);
  }
  getShaders(shaders) {
    shaders = mergeShaders(shaders, {
      disableWarnings: true,
      modules: this.context.defaultShaderModules
    });
    for (const extension of this.props.extensions) {
      shaders = mergeShaders(shaders, extension.getShaders.call(this, extension));
    }
    return shaders;
  }
  /** Controls if updateState should be called. By default returns true if any prop has changed */
  shouldUpdateState(params) {
    return params.changeFlags.propsOrDataChanged;
  }
  /** Default implementation, all attributes will be invalidated and updated when data changes */
  // eslint-disable-next-line complexity
  updateState(params) {
    const attributeManager = this.getAttributeManager();
    const { dataChanged } = params.changeFlags;
    if (dataChanged && attributeManager) {
      if (Array.isArray(dataChanged)) {
        for (const dataRange of dataChanged) {
          attributeManager.invalidateAll(dataRange);
        }
      } else {
        attributeManager.invalidateAll();
      }
    }
    if (attributeManager) {
      const { props } = params;
      const hasPickingBuffer = this.internalState.hasPickingBuffer;
      const needsPickingBuffer = Number.isInteger(props.highlightedObjectIndex) || props.pickable || props.extensions.some((extension) => extension.getNeedsPickingBuffer.call(this, extension));
      if (hasPickingBuffer !== needsPickingBuffer) {
        this.internalState.hasPickingBuffer = needsPickingBuffer;
        const { pickingColors, instancePickingColors } = attributeManager.attributes;
        const pickingColorsAttribute = pickingColors || instancePickingColors;
        if (pickingColorsAttribute) {
          if (needsPickingBuffer && pickingColorsAttribute.constant) {
            pickingColorsAttribute.constant = false;
            attributeManager.invalidate(pickingColorsAttribute.id);
          }
          if (!pickingColorsAttribute.value && !needsPickingBuffer) {
            pickingColorsAttribute.constant = true;
            pickingColorsAttribute.value = [0, 0, 0];
          }
        }
      }
    }
  }
  /** Called once when layer is no longer matched and state will be discarded. Layers can destroy WebGL resources here. */
  finalizeState(context) {
    for (const model of this.getModels()) {
      model.destroy();
    }
    const attributeManager = this.getAttributeManager();
    if (attributeManager) {
      attributeManager.finalize();
    }
    if (this.context) {
      this.context.resourceManager.unsubscribe({ consumerId: this.id });
    }
    if (this.internalState) {
      this.internalState.uniformTransitions.clear();
      this.internalState.finalize();
    }
  }
  // If state has a model, draw it with supplied uniforms
  draw(opts) {
    for (const model of this.getModels()) {
      model.draw(opts.renderPass);
    }
  }
  // called to populate the info object that is passed to the event handler
  // @return null to cancel event
  getPickingInfo({ info, mode, sourceLayer }) {
    const { index } = info;
    if (index >= 0) {
      if (Array.isArray(this.props.data)) {
        info.object = this.props.data[index];
      }
    }
    return info;
  }
  // END LIFECYCLE METHODS
  // / INTERNAL METHODS - called by LayerManager, DeckRenderer and DeckPicker
  /** (Internal) Propagate an error event through the system */
  raiseError(error, message2) {
    var _a3, _b, _c, _d;
    if (message2) {
      error = new Error(`${message2}: ${error.message}`, { cause: error });
    }
    if (!((_b = (_a3 = this.props).onError) == null ? void 0 : _b.call(_a3, error))) {
      (_d = (_c = this.context) == null ? void 0 : _c.onError) == null ? void 0 : _d.call(_c, error, this);
    }
  }
  /** (Internal) Checks if this layer needs redraw */
  getNeedsRedraw(opts = { clearRedrawFlags: false }) {
    return this._getNeedsRedraw(opts);
  }
  /** (Internal) Checks if this layer needs a deep update */
  needsUpdate() {
    if (!this.internalState) {
      return false;
    }
    return this.internalState.needsUpdate || this.hasUniformTransition() || this.shouldUpdateState(this._getUpdateParams());
  }
  /** Checks if this layer has ongoing uniform transition */
  hasUniformTransition() {
    var _a3;
    return ((_a3 = this.internalState) == null ? void 0 : _a3.uniformTransitions.active) || false;
  }
  /** Called when this layer is rendered into the given viewport */
  activateViewport(viewport) {
    if (!this.internalState) {
      return;
    }
    const oldViewport = this.internalState.viewport;
    this.internalState.viewport = viewport;
    if (!oldViewport || !areViewportsEqual({ oldViewport, viewport })) {
      this.setChangeFlags({ viewportChanged: true });
      if (this.isComposite) {
        if (this.needsUpdate()) {
          this.setNeedsUpdate();
        }
      } else {
        this._update();
      }
    }
  }
  /** Default implementation of attribute invalidation, can be redefined */
  invalidateAttribute(name2 = "all") {
    const attributeManager = this.getAttributeManager();
    if (!attributeManager) {
      return;
    }
    if (name2 === "all") {
      attributeManager.invalidateAll();
    } else {
      attributeManager.invalidate(name2);
    }
  }
  /** Send updated attributes to the WebGL model */
  updateAttributes(changedAttributes) {
    let bufferLayoutChanged = false;
    for (const id in changedAttributes) {
      if (changedAttributes[id].layoutChanged()) {
        bufferLayoutChanged = true;
      }
    }
    for (const model of this.getModels()) {
      this._setModelAttributes(model, changedAttributes, bufferLayoutChanged);
    }
  }
  /** Recalculate any attributes if needed */
  _updateAttributes() {
    const attributeManager = this.getAttributeManager();
    if (!attributeManager) {
      return;
    }
    const props = this.props;
    const numInstances = this.getNumInstances();
    const startIndices = this.getStartIndices();
    attributeManager.update({
      data: props.data,
      numInstances,
      startIndices,
      props,
      transitions: props.transitions,
      // @ts-ignore (TS2339) property attribute is not present on some acceptable data types
      buffers: props.data.attributes,
      context: this
    });
    const changedAttributes = attributeManager.getChangedAttributes({ clearChangedFlags: true });
    this.updateAttributes(changedAttributes);
  }
  /** Update attribute transitions. This is called in drawLayer, no model updates required. */
  _updateAttributeTransition() {
    const attributeManager = this.getAttributeManager();
    if (attributeManager) {
      attributeManager.updateTransition();
    }
  }
  /** Update uniform (prop) transitions. This is called in updateState, may result in model updates. */
  _updateUniformTransition() {
    const { uniformTransitions } = this.internalState;
    if (uniformTransitions.active) {
      const propsInTransition = uniformTransitions.update();
      const props = Object.create(this.props);
      for (const key in propsInTransition) {
        Object.defineProperty(props, key, { value: propsInTransition[key] });
      }
      return props;
    }
    return this.props;
  }
  /** Updater for the automatically populated instancePickingColors attribute */
  calculateInstancePickingColors(attribute, { numInstances }) {
    if (attribute.constant) {
      return;
    }
    const cacheSize = Math.floor(pickingColorCache.length / 4);
    this.internalState.usesPickingColorCache = true;
    if (cacheSize < numInstances) {
      if (numInstances > MAX_PICKING_COLOR_CACHE_SIZE) {
        log_default.warn("Layer has too many data objects. Picking might not be able to distinguish all objects.")();
      }
      pickingColorCache = typed_array_manager_default.allocate(pickingColorCache, numInstances, {
        size: 4,
        copy: true,
        maxCount: Math.max(numInstances, MAX_PICKING_COLOR_CACHE_SIZE)
      });
      const newCacheSize = Math.floor(pickingColorCache.length / 4);
      const pickingColor = [0, 0, 0];
      for (let i4 = cacheSize; i4 < newCacheSize; i4++) {
        this.encodePickingColor(i4, pickingColor);
        pickingColorCache[i4 * 4 + 0] = pickingColor[0];
        pickingColorCache[i4 * 4 + 1] = pickingColor[1];
        pickingColorCache[i4 * 4 + 2] = pickingColor[2];
        pickingColorCache[i4 * 4 + 3] = 0;
      }
    }
    attribute.value = pickingColorCache.subarray(0, numInstances * 4);
  }
  /** Apply changed attributes to model */
  _setModelAttributes(model, changedAttributes, bufferLayoutChanged = false) {
    var _a3;
    if (!Object.keys(changedAttributes).length) {
      return;
    }
    if (bufferLayoutChanged) {
      const attributeManager = this.getAttributeManager();
      model.setBufferLayout(attributeManager.getBufferLayouts(model));
      changedAttributes = attributeManager.getAttributes();
    }
    const excludeAttributes = ((_a3 = model.userData) == null ? void 0 : _a3.excludeAttributes) || {};
    const attributeBuffers = {};
    const constantAttributes = {};
    for (const name2 in changedAttributes) {
      if (excludeAttributes[name2]) {
        continue;
      }
      const values = changedAttributes[name2].getValue();
      for (const attributeName in values) {
        const value = values[attributeName];
        if (value instanceof Buffer) {
          if (changedAttributes[name2].settings.isIndexed) {
            model.setIndexBuffer(value);
          } else {
            attributeBuffers[attributeName] = value;
          }
        } else if (value) {
          constantAttributes[attributeName] = value;
        }
      }
    }
    model.setAttributes(attributeBuffers);
    model.setConstantAttributes(constantAttributes);
  }
  /** (Internal) Sets the picking color at the specified index to null picking color. Used for multi-depth picking.
     This method may be overriden by layer implementations */
  disablePickingIndex(objectIndex) {
    const data = this.props.data;
    if (!("attributes" in data)) {
      this._disablePickingIndex(objectIndex);
      return;
    }
    const { pickingColors, instancePickingColors } = this.getAttributeManager().attributes;
    const colors = pickingColors || instancePickingColors;
    const externalColorAttribute = colors && data.attributes && data.attributes[colors.id];
    if (externalColorAttribute && externalColorAttribute.value) {
      const values = externalColorAttribute.value;
      const objectColor = this.encodePickingColor(objectIndex);
      for (let index = 0; index < data.length; index++) {
        const i4 = colors.getVertexOffset(index);
        if (values[i4] === objectColor[0] && values[i4 + 1] === objectColor[1] && values[i4 + 2] === objectColor[2]) {
          this._disablePickingIndex(index);
        }
      }
    } else {
      this._disablePickingIndex(objectIndex);
    }
  }
  // TODO - simplify subclassing interface
  _disablePickingIndex(objectIndex) {
    const { pickingColors, instancePickingColors } = this.getAttributeManager().attributes;
    const colors = pickingColors || instancePickingColors;
    if (!colors) {
      return;
    }
    const start = colors.getVertexOffset(objectIndex);
    const end = colors.getVertexOffset(objectIndex + 1);
    colors.buffer.write(new Uint8Array(end - start), start);
  }
  /** (Internal) Re-enable all picking indices after multi-depth picking */
  restorePickingColors() {
    const { pickingColors, instancePickingColors } = this.getAttributeManager().attributes;
    const colors = pickingColors || instancePickingColors;
    if (!colors) {
      return;
    }
    if (
      // @ts-ignore (TS2531) this method is only called internally with internalState defined
      this.internalState.usesPickingColorCache && colors.value.buffer !== pickingColorCache.buffer
    ) {
      colors.value = pickingColorCache.subarray(0, colors.value.length);
    }
    colors.updateSubBuffer({ startOffset: 0 });
  }
  /* eslint-disable max-statements */
  /* (Internal) Called by layer manager when a new layer is found */
  _initialize() {
    assert8(!this.internalState);
    assert8(Number.isFinite(this.props.coordinateSystem));
    debug(TRACE_INITIALIZE, this);
    const attributeManager = this._getAttributeManager();
    if (attributeManager) {
      attributeManager.addInstanced({
        instancePickingColors: {
          type: "uint8",
          size: 4,
          noAlloc: true,
          // Updaters are always called with `this` pointing to the layer
          // eslint-disable-next-line @typescript-eslint/unbound-method
          update: this.calculateInstancePickingColors
        }
      });
    }
    this.internalState = new LayerState({
      attributeManager,
      layer: this
    });
    this._clearChangeFlags();
    this.state = {};
    Object.defineProperty(this.state, "attributeManager", {
      get: () => {
        log_default.deprecated("layer.state.attributeManager", "layer.getAttributeManager()")();
        return attributeManager;
      }
    });
    this.internalState.uniformTransitions = new UniformTransitionManager(this.context.timeline);
    this.internalState.onAsyncPropUpdated = this._onAsyncPropUpdated.bind(this);
    this.internalState.setAsyncProps(this.props);
    this.initializeState(this.context);
    for (const extension of this.props.extensions) {
      extension.initializeState.call(this, this.context, extension);
    }
    this.setChangeFlags({
      dataChanged: "init",
      propsChanged: "init",
      viewportChanged: true,
      extensionsChanged: true
    });
    this._update();
  }
  /** (Internal) Called by layer manager to transfer state from an old layer */
  _transferState(oldLayer) {
    debug(TRACE_MATCHED, this, this === oldLayer);
    const { state, internalState } = oldLayer;
    if (this === oldLayer) {
      return;
    }
    this.internalState = internalState;
    this.state = state;
    this.internalState.setAsyncProps(this.props);
    this._diffProps(this.props, this.internalState.getOldProps());
  }
  /** (Internal) Called by layer manager when a new layer is added or an existing layer is matched with a new instance */
  _update() {
    const stateNeedsUpdate = this.needsUpdate();
    debug(TRACE_UPDATE, this, stateNeedsUpdate);
    if (!stateNeedsUpdate) {
      return;
    }
    const currentProps = this.props;
    const context = this.context;
    const internalState = this.internalState;
    const currentViewport = context.viewport;
    const propsInTransition = this._updateUniformTransition();
    internalState.propsInTransition = propsInTransition;
    context.viewport = internalState.viewport || currentViewport;
    this.props = propsInTransition;
    try {
      const updateParams = this._getUpdateParams();
      const oldModels = this.getModels();
      if (context.device) {
        this.updateState(updateParams);
      } else {
        try {
          this.updateState(updateParams);
        } catch (error) {
        }
      }
      for (const extension of this.props.extensions) {
        extension.updateState.call(this, updateParams, extension);
      }
      this.setNeedsRedraw();
      this._updateAttributes();
      const modelChanged = this.getModels()[0] !== oldModels[0];
      this._postUpdate(updateParams, modelChanged);
    } finally {
      context.viewport = currentViewport;
      this.props = currentProps;
      this._clearChangeFlags();
      internalState.needsUpdate = false;
      internalState.resetOldProps();
    }
  }
  /* eslint-enable max-statements */
  /** (Internal) Called by manager when layer is about to be disposed
      Note: not guaranteed to be called on application shutdown */
  _finalize() {
    debug(TRACE_FINALIZE, this);
    this.finalizeState(this.context);
    for (const extension of this.props.extensions) {
      extension.finalizeState.call(this, this.context, extension);
    }
  }
  // Calculates uniforms
  _drawLayer({ renderPass, shaderModuleProps = null, uniforms = {}, parameters = {} }) {
    this._updateAttributeTransition();
    const currentProps = this.props;
    const context = this.context;
    this.props = this.internalState.propsInTransition || currentProps;
    try {
      if (shaderModuleProps) {
        this.setShaderModuleProps(shaderModuleProps);
      }
      const { getPolygonOffset } = this.props;
      const offsets = getPolygonOffset && getPolygonOffset(uniforms) || [0, 0];
      if (context.device instanceof WebGLDevice) {
        context.device.setParametersWebGL({ polygonOffset: offsets });
      }
      for (const model of this.getModels()) {
        if (model.device.type === "webgpu") {
          model.setParameters({ ...model.parameters, ...parameters });
        } else {
          model.setParameters(parameters);
        }
      }
      if (context.device instanceof WebGLDevice) {
        context.device.withParametersWebGL(parameters, () => {
          const opts = { renderPass, shaderModuleProps, uniforms, parameters, context };
          for (const extension of this.props.extensions) {
            extension.draw.call(this, opts, extension);
          }
          this.draw(opts);
        });
      } else {
        const opts = { renderPass, shaderModuleProps, uniforms, parameters, context };
        for (const extension of this.props.extensions) {
          extension.draw.call(this, opts, extension);
        }
        this.draw(opts);
      }
    } finally {
      this.props = currentProps;
    }
  }
  // Helper methods
  /** Returns the current change flags */
  getChangeFlags() {
    var _a3;
    return (_a3 = this.internalState) == null ? void 0 : _a3.changeFlags;
  }
  /* eslint-disable complexity */
  /** Dirty some change flags, will be handled by updateLayer */
  setChangeFlags(flags) {
    if (!this.internalState) {
      return;
    }
    const { changeFlags } = this.internalState;
    for (const key in flags) {
      if (flags[key]) {
        let flagChanged = false;
        switch (key) {
          case "dataChanged":
            const dataChangedReason = flags[key];
            const prevDataChangedReason = changeFlags[key];
            if (dataChangedReason && Array.isArray(prevDataChangedReason)) {
              changeFlags.dataChanged = Array.isArray(dataChangedReason) ? prevDataChangedReason.concat(dataChangedReason) : dataChangedReason;
              flagChanged = true;
            }
          default:
            if (!changeFlags[key]) {
              changeFlags[key] = flags[key];
              flagChanged = true;
            }
        }
        if (flagChanged) {
          debug(TRACE_CHANGE_FLAG, this, key, flags);
        }
      }
    }
    const propsOrDataChanged = Boolean(changeFlags.dataChanged || changeFlags.updateTriggersChanged || changeFlags.propsChanged || changeFlags.extensionsChanged);
    changeFlags.propsOrDataChanged = propsOrDataChanged;
    changeFlags.somethingChanged = propsOrDataChanged || changeFlags.viewportChanged || changeFlags.stateChanged;
  }
  /* eslint-enable complexity */
  /** Clear all changeFlags, typically after an update */
  _clearChangeFlags() {
    this.internalState.changeFlags = {
      dataChanged: false,
      propsChanged: false,
      updateTriggersChanged: false,
      viewportChanged: false,
      stateChanged: false,
      extensionsChanged: false,
      propsOrDataChanged: false,
      somethingChanged: false
    };
  }
  /** Compares the layers props with old props from a matched older layer
      and extracts change flags that describe what has change so that state
      can be update correctly with minimal effort */
  _diffProps(newProps, oldProps) {
    var _a3;
    const changeFlags = diffProps(newProps, oldProps);
    if (changeFlags.updateTriggersChanged) {
      for (const key in changeFlags.updateTriggersChanged) {
        if (changeFlags.updateTriggersChanged[key]) {
          this.invalidateAttribute(key);
        }
      }
    }
    if (changeFlags.transitionsChanged) {
      for (const key in changeFlags.transitionsChanged) {
        this.internalState.uniformTransitions.add(key, oldProps[key], newProps[key], (_a3 = newProps.transitions) == null ? void 0 : _a3[key]);
      }
    }
    return this.setChangeFlags(changeFlags);
  }
  /** (Internal) called by layer manager to perform extra props validation (in development only) */
  validateProps() {
    validateProps(this.props);
  }
  /** (Internal) Called by deck picker when the hovered object changes to update the auto highlight */
  updateAutoHighlight(info) {
    if (this.props.autoHighlight && !Number.isInteger(this.props.highlightedObjectIndex)) {
      this._updateAutoHighlight(info);
    }
  }
  // May be overriden by subclasses
  // TODO - simplify subclassing interface
  /** Update picking module parameters to highlight the hovered object */
  _updateAutoHighlight(info) {
    const picking4 = {
      // @ts-ignore
      highlightedObjectColor: info.picked ? info.color : null
    };
    const { highlightColor } = this.props;
    if (info.picked && typeof highlightColor === "function") {
      picking4.highlightColor = highlightColor(info);
    }
    this.setShaderModuleProps({ picking: picking4 });
    this.setNeedsRedraw();
  }
  /** Create new attribute manager */
  _getAttributeManager() {
    const context = this.context;
    return new AttributeManager(context.device, {
      id: this.props.id,
      stats: context.stats,
      timeline: context.timeline
    });
  }
  // Private methods
  /** Called after updateState to perform common tasks */
  _postUpdate(updateParams, forceUpdate) {
    const { props, oldProps } = updateParams;
    const model = this.state.model;
    if (model == null ? void 0 : model.isInstanced) {
      model.setInstanceCount(this.getNumInstances());
    }
    const { autoHighlight, highlightedObjectIndex, highlightColor } = props;
    if (forceUpdate || oldProps.autoHighlight !== autoHighlight || oldProps.highlightedObjectIndex !== highlightedObjectIndex || oldProps.highlightColor !== highlightColor) {
      const picking4 = {};
      if (Array.isArray(highlightColor)) {
        picking4.highlightColor = highlightColor;
      }
      if (forceUpdate || oldProps.autoHighlight !== autoHighlight || highlightedObjectIndex !== oldProps.highlightedObjectIndex) {
        picking4.highlightedObjectColor = Number.isFinite(highlightedObjectIndex) && highlightedObjectIndex >= 0 ? this.encodePickingColor(highlightedObjectIndex) : null;
      }
      this.setShaderModuleProps({ picking: picking4 });
    }
  }
  _getUpdateParams() {
    return {
      props: this.props,
      // @ts-ignore TS2531 this method can only be called internally with internalState assigned
      oldProps: this.internalState.getOldProps(),
      context: this.context,
      // @ts-ignore TS2531 this method can only be called internally with internalState assigned
      changeFlags: this.internalState.changeFlags
    };
  }
  /** Checks state of attributes and model */
  _getNeedsRedraw(opts) {
    if (!this.internalState) {
      return false;
    }
    let redraw = false;
    redraw = redraw || this.internalState.needsRedraw && this.id;
    const attributeManager = this.getAttributeManager();
    const attributeManagerNeedsRedraw = attributeManager ? attributeManager.getNeedsRedraw(opts) : false;
    redraw = redraw || attributeManagerNeedsRedraw;
    if (redraw) {
      for (const extension of this.props.extensions) {
        extension.onNeedsRedraw.call(this, extension);
      }
    }
    this.internalState.needsRedraw = this.internalState.needsRedraw && !opts.clearRedrawFlags;
    return redraw;
  }
  /** Callback when asyn prop is loaded */
  _onAsyncPropUpdated() {
    this._diffProps(this.props, this.internalState.getOldProps());
    this.setNeedsUpdate();
  }
};
Layer.defaultProps = defaultProps2;
Layer.layerName = "Layer";
var layer_default = Layer;

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/lib/composite-layer.js
var TRACE_RENDER_LAYERS2 = "compositeLayer.renderLayers";
var CompositeLayer = class extends layer_default {
  /** `true` if this layer renders other layers */
  get isComposite() {
    return true;
  }
  /** `true` if the layer renders to screen */
  get isDrawable() {
    return false;
  }
  /** Returns true if all async resources are loaded */
  get isLoaded() {
    return super.isLoaded && this.getSubLayers().every((layer) => layer.isLoaded);
  }
  /** Return last rendered sub layers */
  getSubLayers() {
    return this.internalState && this.internalState.subLayers || [];
  }
  // initializeState is usually not needed for composite layers
  // Provide empty definition to disable check for missing definition
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  initializeState(context) {
  }
  /** Updates selected state members and marks the composite layer to need rerender */
  setState(updateObject) {
    super.setState(updateObject);
    this.setNeedsUpdate();
  }
  /** called to augment the info object that is bubbled up from a sublayer
      override Layer.getPickingInfo() because decoding / setting uniform do
      not apply to a composite layer. */
  getPickingInfo({ info }) {
    const { object } = info;
    const isDataWrapped = object && object.__source && object.__source.parent && object.__source.parent.id === this.id;
    if (!isDataWrapped) {
      return info;
    }
    info.object = object.__source.object;
    info.index = object.__source.index;
    return info;
  }
  /**
   * Filters sub layers at draw time. Return true if the sub layer should be drawn.
   */
  filterSubLayer(context) {
    return true;
  }
  /** Returns true if sub layer needs to be rendered */
  shouldRenderSubLayer(subLayerId, data) {
    return data && data.length;
  }
  /** Returns sub layer class for a specific sublayer */
  getSubLayerClass(subLayerId, DefaultLayerClass) {
    const { _subLayerProps: overridingProps } = this.props;
    return overridingProps && overridingProps[subLayerId] && overridingProps[subLayerId].type || DefaultLayerClass;
  }
  /** When casting user data into another format to pass to sublayers,
      add reference to the original object and object index */
  getSubLayerRow(row, sourceObject, sourceObjectIndex) {
    row.__source = {
      parent: this,
      object: sourceObject,
      index: sourceObjectIndex
    };
    return row;
  }
  /** Some composite layers cast user data into another format before passing to sublayers
    We need to unwrap them before calling the accessor so that they see the original data
    objects */
  getSubLayerAccessor(accessor) {
    if (typeof accessor === "function") {
      const objectInfo = {
        index: -1,
        // @ts-ignore accessing resolved data
        data: this.props.data,
        target: []
      };
      return (x3, i4) => {
        if (x3 && x3.__source) {
          objectInfo.index = x3.__source.index;
          return accessor(x3.__source.object, objectInfo);
        }
        return accessor(x3, i4);
      };
    }
    return accessor;
  }
  /** Returns sub layer props for a specific sublayer */
  // eslint-disable-next-line complexity
  getSubLayerProps(sublayerProps = {}) {
    var _a3;
    const { opacity, pickable, visible, parameters, getPolygonOffset, highlightedObjectIndex, autoHighlight, highlightColor, coordinateSystem, coordinateOrigin, wrapLongitude, positionFormat, modelMatrix, extensions, fetch: fetch2, operation, _subLayerProps: overridingProps } = this.props;
    const newProps = {
      id: "",
      updateTriggers: {},
      opacity,
      pickable,
      visible,
      parameters,
      getPolygonOffset,
      highlightedObjectIndex,
      autoHighlight,
      highlightColor,
      coordinateSystem,
      coordinateOrigin,
      wrapLongitude,
      positionFormat,
      modelMatrix,
      extensions,
      fetch: fetch2,
      operation
    };
    const overridingSublayerProps = overridingProps && sublayerProps.id && overridingProps[sublayerProps.id];
    const overridingSublayerTriggers = overridingSublayerProps && overridingSublayerProps.updateTriggers;
    const sublayerId = sublayerProps.id || "sublayer";
    if (overridingSublayerProps) {
      const propTypes = this.props[PROP_TYPES_SYMBOL];
      const subLayerPropTypes = sublayerProps.type ? sublayerProps.type._propTypes : {};
      for (const key in overridingSublayerProps) {
        const propType = subLayerPropTypes[key] || propTypes[key];
        if (propType && propType.type === "accessor") {
          overridingSublayerProps[key] = this.getSubLayerAccessor(overridingSublayerProps[key]);
        }
      }
    }
    Object.assign(
      newProps,
      sublayerProps,
      // experimental feature that allows users to override sublayer props via parent layer prop
      overridingSublayerProps
    );
    newProps.id = `${this.props.id}-${sublayerId}`;
    newProps.updateTriggers = {
      all: (_a3 = this.props.updateTriggers) == null ? void 0 : _a3.all,
      ...sublayerProps.updateTriggers,
      ...overridingSublayerTriggers
    };
    for (const extension of extensions) {
      const passThroughProps = extension.getSubLayerProps.call(this, extension);
      if (passThroughProps) {
        Object.assign(newProps, passThroughProps, {
          updateTriggers: Object.assign(newProps.updateTriggers, passThroughProps.updateTriggers)
        });
      }
    }
    return newProps;
  }
  /** Update sub layers to highlight the hovered object */
  _updateAutoHighlight(info) {
    for (const layer of this.getSubLayers()) {
      layer.updateAutoHighlight(info);
    }
  }
  /** Override base Layer method */
  _getAttributeManager() {
    return null;
  }
  /** (Internal) Called after an update to rerender sub layers */
  _postUpdate(updateParams, forceUpdate) {
    let subLayers = this.internalState.subLayers;
    const shouldUpdate = !subLayers || this.needsUpdate();
    if (shouldUpdate) {
      const subLayersList = this.renderLayers();
      subLayers = flatten(subLayersList, Boolean);
      this.internalState.subLayers = subLayers;
    }
    debug(TRACE_RENDER_LAYERS2, this, shouldUpdate, subLayers);
    for (const layer of subLayers) {
      layer.parent = this;
    }
  }
};
CompositeLayer.layerName = "CompositeLayer";

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/viewports/globe-viewport.js
var DEGREES_TO_RADIANS6 = Math.PI / 180;
var RADIANS_TO_DEGREES3 = 180 / Math.PI;
var EARTH_RADIUS = 6370972;
var GLOBE_RADIUS = 256;
function getDistanceScales2() {
  const unitsPerMeter2 = GLOBE_RADIUS / EARTH_RADIUS;
  const unitsPerDegree = Math.PI / 180 * GLOBE_RADIUS;
  return {
    unitsPerMeter: [unitsPerMeter2, unitsPerMeter2, unitsPerMeter2],
    unitsPerMeter2: [0, 0, 0],
    metersPerUnit: [1 / unitsPerMeter2, 1 / unitsPerMeter2, 1 / unitsPerMeter2],
    unitsPerDegree: [unitsPerDegree, unitsPerDegree, unitsPerMeter2],
    unitsPerDegree2: [0, 0, 0],
    degreesPerUnit: [1 / unitsPerDegree, 1 / unitsPerDegree, 1 / unitsPerMeter2]
  };
}
var GlobeViewport = class extends viewport_default {
  constructor(opts = {}) {
    const {
      longitude = 0,
      zoom = 0,
      // Matches Maplibre defaults
      // https://github.com/maplibre/maplibre-gl-js/blob/f8ab4b48d59ab8fe7b068b102538793bbdd4c848/src/geo/projection/globe_transform.ts#L632-L633
      nearZMultiplier = 0.5,
      farZMultiplier = 1,
      resolution = 10
    } = opts;
    let { latitude = 0, height, altitude = 1.5, fovy } = opts;
    latitude = Math.max(Math.min(latitude, MAX_LATITUDE), -MAX_LATITUDE);
    height = height || 1;
    if (fovy) {
      altitude = fovyToAltitude(fovy);
    } else {
      fovy = altitudeToFovy(altitude);
    }
    const scaleAdjust = 1 / Math.PI / Math.cos(latitude * Math.PI / 180);
    const scale7 = Math.pow(2, zoom) * scaleAdjust;
    const nearZ = opts.nearZ ?? nearZMultiplier;
    const farZ = opts.farZ ?? (altitude + GLOBE_RADIUS * 2 * scale7 / height) * farZMultiplier;
    const viewMatrix2 = new Matrix4().lookAt({ eye: [0, -altitude, 0], up: [0, 0, 1] });
    viewMatrix2.rotateX(latitude * DEGREES_TO_RADIANS6);
    viewMatrix2.rotateZ(-longitude * DEGREES_TO_RADIANS6);
    viewMatrix2.scale(scale7 / height);
    super({
      ...opts,
      // x, y, width,
      height,
      // view matrix
      viewMatrix: viewMatrix2,
      longitude,
      latitude,
      zoom,
      // projection matrix parameters
      distanceScales: getDistanceScales2(),
      fovy,
      focalDistance: altitude,
      near: nearZ,
      far: farZ
    });
    this.scale = scale7;
    this.latitude = latitude;
    this.longitude = longitude;
    this.resolution = resolution;
  }
  get projectionMode() {
    return PROJECTION_MODE.GLOBE;
  }
  getDistanceScales() {
    return this.distanceScales;
  }
  getBounds(options = {}) {
    const unprojectOption = { targetZ: options.z || 0 };
    const left = this.unproject([0, this.height / 2], unprojectOption);
    const top = this.unproject([this.width / 2, 0], unprojectOption);
    const right = this.unproject([this.width, this.height / 2], unprojectOption);
    const bottom = this.unproject([this.width / 2, this.height], unprojectOption);
    if (right[0] < this.longitude)
      right[0] += 360;
    if (left[0] > this.longitude)
      left[0] -= 360;
    return [
      Math.min(left[0], right[0], top[0], bottom[0]),
      Math.min(left[1], right[1], top[1], bottom[1]),
      Math.max(left[0], right[0], top[0], bottom[0]),
      Math.max(left[1], right[1], top[1], bottom[1])
    ];
  }
  unproject(xyz, { topLeft = true, targetZ } = {}) {
    const [x3, y3, z3] = xyz;
    const y22 = topLeft ? y3 : this.height - y3;
    const { pixelUnprojectionMatrix } = this;
    let coord;
    if (Number.isFinite(z3)) {
      coord = transformVector2(pixelUnprojectionMatrix, [x3, y22, z3, 1]);
    } else {
      const coord0 = transformVector2(pixelUnprojectionMatrix, [x3, y22, -1, 1]);
      const coord1 = transformVector2(pixelUnprojectionMatrix, [x3, y22, 1, 1]);
      const lt2 = ((targetZ || 0) / EARTH_RADIUS + 1) * GLOBE_RADIUS;
      const lSqr = vec3_exports.sqrLen(vec3_exports.sub([], coord0, coord1));
      const l0Sqr = vec3_exports.sqrLen(coord0);
      const l1Sqr = vec3_exports.sqrLen(coord1);
      const sSqr = (4 * l0Sqr * l1Sqr - (lSqr - l0Sqr - l1Sqr) ** 2) / 16;
      const dSqr = 4 * sSqr / lSqr;
      const r0 = Math.sqrt(l0Sqr - dSqr);
      const dr = Math.sqrt(Math.max(0, lt2 * lt2 - dSqr));
      const t3 = (r0 - dr) / Math.sqrt(lSqr);
      coord = vec3_exports.lerp([], coord0, coord1, t3);
    }
    const [X2, Y2, Z2] = this.unprojectPosition(coord);
    if (Number.isFinite(z3)) {
      return [X2, Y2, Z2];
    }
    return Number.isFinite(targetZ) ? [X2, Y2, targetZ] : [X2, Y2];
  }
  projectPosition(xyz) {
    const [lng, lat, Z2 = 0] = xyz;
    const lambda = lng * DEGREES_TO_RADIANS6;
    const phi = lat * DEGREES_TO_RADIANS6;
    const cosPhi = Math.cos(phi);
    const D3 = (Z2 / EARTH_RADIUS + 1) * GLOBE_RADIUS;
    return [Math.sin(lambda) * cosPhi * D3, -Math.cos(lambda) * cosPhi * D3, Math.sin(phi) * D3];
  }
  unprojectPosition(xyz) {
    const [x3, y3, z3] = xyz;
    const D3 = vec3_exports.len(xyz);
    const phi = Math.asin(z3 / D3);
    const lambda = Math.atan2(x3, -y3);
    const lng = lambda * RADIANS_TO_DEGREES3;
    const lat = phi * RADIANS_TO_DEGREES3;
    const Z2 = (D3 / GLOBE_RADIUS - 1) * EARTH_RADIUS;
    return [lng, lat, Z2];
  }
  projectFlat(xyz) {
    return xyz;
  }
  unprojectFlat(xyz) {
    return xyz;
  }
  panByPosition(coords, pixel) {
    const fromPosition = this.unproject(pixel);
    return {
      longitude: coords[0] - fromPosition[0] + this.longitude,
      latitude: coords[1] - fromPosition[1] + this.latitude
    };
  }
};
function transformVector2(matrix, vector) {
  const result = vec4_exports.transformMat4([], vector, matrix);
  vec4_exports.scale(result, result, 1 / result[3]);
  return result;
}

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/viewports/orbit-viewport.js
var DEGREES_TO_RADIANS7 = Math.PI / 180;
function getViewMatrix2({ height, focalDistance, orbitAxis, rotationX, rotationOrbit, zoom }) {
  const up = orbitAxis === "Z" ? [0, 0, 1] : [0, 1, 0];
  const eye = orbitAxis === "Z" ? [0, -focalDistance, 0] : [0, 0, focalDistance];
  const viewMatrix2 = new Matrix4().lookAt({ eye, up });
  viewMatrix2.rotateX(rotationX * DEGREES_TO_RADIANS7);
  if (orbitAxis === "Z") {
    viewMatrix2.rotateZ(rotationOrbit * DEGREES_TO_RADIANS7);
  } else {
    viewMatrix2.rotateY(rotationOrbit * DEGREES_TO_RADIANS7);
  }
  const projectionScale = Math.pow(2, zoom) / height;
  viewMatrix2.scale(projectionScale);
  return viewMatrix2;
}
var OrbitViewport = class extends viewport_default {
  constructor(props) {
    const {
      height,
      projectionMatrix,
      fovy = 50,
      // For setting camera position
      orbitAxis = "Z",
      // Orbit axis with 360 degrees rotating freedom, can only be 'Y' or 'Z'
      target: target2 = [0, 0, 0],
      // Which point is camera looking at, default origin
      rotationX = 0,
      // Rotating angle around X axis
      rotationOrbit = 0,
      // Rotating angle around orbit axis
      zoom = 0
    } = props;
    const focalDistance = projectionMatrix ? projectionMatrix[5] / 2 : fovyToAltitude(fovy);
    super({
      ...props,
      // in case viewState contains longitude/latitude values,
      // make sure that the base Viewport class does not treat this as a geospatial viewport
      longitude: void 0,
      viewMatrix: getViewMatrix2({
        height: height || 1,
        focalDistance,
        orbitAxis,
        rotationX,
        rotationOrbit,
        zoom
      }),
      fovy,
      focalDistance,
      position: target2,
      zoom
    });
    this.projectedCenter = this.project(this.center);
  }
  unproject(xyz, { topLeft = true } = {}) {
    const [x3, y3, z3 = this.projectedCenter[2]] = xyz;
    const y22 = topLeft ? y3 : this.height - y3;
    const [X2, Y2, Z2] = pixelsToWorld([x3, y22, z3], this.pixelUnprojectionMatrix);
    return [X2, Y2, Z2];
  }
  panByPosition(coords, pixel) {
    const p0 = this.project(coords);
    const nextCenter = [
      this.width / 2 + p0[0] - pixel[0],
      this.height / 2 + p0[1] - pixel[1],
      this.projectedCenter[2]
    ];
    return {
      target: this.unproject(nextCenter)
    };
  }
};

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/viewports/orthographic-viewport.js
var viewMatrix = new Matrix4().lookAt({ eye: [0, 0, 1] });
function getProjectionMatrix2({ width, height, near, far, padding }) {
  let left = -width / 2;
  let right = width / 2;
  let bottom = -height / 2;
  let top = height / 2;
  if (padding) {
    const { left: l3 = 0, right: r3 = 0, top: t3 = 0, bottom: b2 = 0 } = padding;
    const offsetX = clamp((l3 + width - r3) / 2, 0, width) - width / 2;
    const offsetY = clamp((t3 + height - b2) / 2, 0, height) - height / 2;
    left -= offsetX;
    right -= offsetX;
    bottom += offsetY;
    top += offsetY;
  }
  return new Matrix4().ortho({
    left,
    right,
    bottom,
    top,
    near,
    far
  });
}
var OrthographicViewport = class extends viewport_default {
  constructor(props) {
    const { width, height, near = 0.1, far = 1e3, zoom = 0, target: target2 = [0, 0, 0], padding = null, flipY = true } = props;
    const zoomX = Array.isArray(zoom) ? zoom[0] : zoom;
    const zoomY = Array.isArray(zoom) ? zoom[1] : zoom;
    const zoom_ = Math.min(zoomX, zoomY);
    const scale7 = Math.pow(2, zoom_);
    let distanceScales;
    if (zoomX !== zoomY) {
      const scaleX2 = Math.pow(2, zoomX);
      const scaleY2 = Math.pow(2, zoomY);
      distanceScales = {
        unitsPerMeter: [scaleX2 / scale7, scaleY2 / scale7, 1],
        metersPerUnit: [scale7 / scaleX2, scale7 / scaleY2, 1]
      };
    }
    super({
      ...props,
      // in case viewState contains longitude/latitude values,
      // make sure that the base Viewport class does not treat this as a geospatial viewport
      longitude: void 0,
      position: target2,
      viewMatrix: viewMatrix.clone().scale([scale7, scale7 * (flipY ? -1 : 1), scale7]),
      projectionMatrix: getProjectionMatrix2({
        width: width || 1,
        height: height || 1,
        padding,
        near,
        far
      }),
      zoom: zoom_,
      distanceScales
    });
  }
  projectFlat([X2, Y2]) {
    const { unitsPerMeter: unitsPerMeter2 } = this.distanceScales;
    return [X2 * unitsPerMeter2[0], Y2 * unitsPerMeter2[1]];
  }
  unprojectFlat([x3, y3]) {
    const { metersPerUnit } = this.distanceScales;
    return [x3 * metersPerUnit[0], y3 * metersPerUnit[1]];
  }
  /* Needed by LinearInterpolator */
  panByPosition(coords, pixel) {
    const fromLocation = pixelsToWorld(pixel, this.pixelUnprojectionMatrix);
    const toLocation = this.projectFlat(coords);
    const translate3 = vec2_exports.add([], toLocation, vec2_exports.negate([], fromLocation));
    const newCenter = vec2_exports.add([], this.center, translate3);
    return { target: this.unprojectFlat(newCenter) };
  }
};

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/viewports/first-person-viewport.js
var FirstPersonViewport = class extends viewport_default {
  constructor(props) {
    const { longitude, latitude, modelMatrix, bearing = 0, pitch = 0, up = [0, 0, 1] } = props;
    const spherical = new SphericalCoordinates({
      bearing,
      // Avoid "pixel project matrix not invertible" error
      pitch: pitch === -90 ? 1e-4 : 90 + pitch
    });
    const dir = spherical.toVector3().normalize();
    const center = modelMatrix ? new Matrix4(modelMatrix).transformAsVector(dir) : dir;
    const zoom = Number.isFinite(latitude) ? getMeterZoom({ latitude }) : 0;
    const scale7 = Math.pow(2, zoom);
    const viewMatrix2 = new Matrix4().lookAt({ eye: [0, 0, 0], center, up }).scale(scale7);
    super({
      ...props,
      zoom,
      viewMatrix: viewMatrix2
    });
    this.latitude = latitude;
    this.longitude = longitude;
  }
};

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/controllers/first-person-controller.js
var MOVEMENT_SPEED = 20;
var PAN_SPEED = 500;
var FirstPersonState = class _FirstPersonState extends ViewState {
  constructor(options) {
    const {
      /* Viewport arguments */
      width,
      // Width of viewport
      height,
      // Height of viewport
      // Position and orientation
      position = [0, 0, 0],
      // typically in meters from anchor point
      bearing = 0,
      // Rotation around y axis
      pitch = 0,
      // Rotation around x axis
      // Geospatial anchor
      longitude = null,
      latitude = null,
      maxPitch = 90,
      minPitch = -90,
      // Model state when the rotate operation first started
      startRotatePos,
      startBearing,
      startPitch,
      startZoomPosition,
      startPanPos,
      startPanPosition
    } = options;
    super({
      width,
      height,
      position,
      bearing,
      pitch,
      longitude,
      latitude,
      maxPitch,
      minPitch
    }, {
      startRotatePos,
      startBearing,
      startPitch,
      startZoomPosition,
      startPanPos,
      startPanPosition
    });
    this.makeViewport = options.makeViewport;
  }
  /* Public API */
  /**
   * Start panning
   * @param {[Number, Number]} pos - position on screen where the pointer grabs
   */
  panStart({ pos }) {
    const { position } = this.getViewportProps();
    return this._getUpdatedState({
      startPanPos: pos,
      startPanPosition: position
    });
  }
  /**
   * Pan
   * @param {[Number, Number]} pos - position on screen where the pointer is
   */
  pan({ pos }) {
    if (!pos) {
      return this;
    }
    const { startPanPos = [0, 0], startPanPosition = [0, 0] } = this.getState();
    const { width, height, bearing, pitch } = this.getViewportProps();
    const deltaScaleX = PAN_SPEED * (pos[0] - startPanPos[0]) / width;
    const deltaScaleY = PAN_SPEED * (pos[1] - startPanPos[1]) / height;
    const up = new SphericalCoordinates({ bearing, pitch });
    const forward = new SphericalCoordinates({ bearing, pitch: -90 });
    const yDirection = up.toVector3().normalize();
    const xDirection = forward.toVector3().cross(yDirection).normalize();
    return this._getUpdatedState({
      position: new Vector3(startPanPosition).add(xDirection.scale(deltaScaleX)).add(yDirection.scale(deltaScaleY))
    });
  }
  /**
   * End panning
   * Must call if `panStart()` was called
   */
  panEnd() {
    return this._getUpdatedState({
      startPanPos: null,
      startPanPosition: null
    });
  }
  /**
   * Start rotating
   * @param {[Number, Number]} pos - position on screen where the pointer grabs
   */
  rotateStart({ pos }) {
    return this._getUpdatedState({
      startRotatePos: pos,
      startBearing: this.getViewportProps().bearing,
      startPitch: this.getViewportProps().pitch
    });
  }
  /**
   * Rotate
   * @param {[Number, Number]} pos - position on screen where the pointer is
   */
  rotate({ pos, deltaAngleX = 0, deltaAngleY = 0 }) {
    const { startRotatePos, startBearing, startPitch } = this.getState();
    const { width, height } = this.getViewportProps();
    if (!startRotatePos || startBearing === void 0 || startPitch === void 0) {
      return this;
    }
    let newRotation;
    if (pos) {
      const deltaScaleX = (pos[0] - startRotatePos[0]) / width;
      const deltaScaleY = (pos[1] - startRotatePos[1]) / height;
      newRotation = {
        bearing: startBearing - deltaScaleX * 180,
        pitch: startPitch - deltaScaleY * 90
      };
    } else {
      newRotation = {
        bearing: startBearing - deltaAngleX,
        pitch: startPitch - deltaAngleY
      };
    }
    return this._getUpdatedState(newRotation);
  }
  /**
   * End rotating
   * Must call if `rotateStart()` was called
   */
  rotateEnd() {
    return this._getUpdatedState({
      startRotatePos: null,
      startBearing: null,
      startPitch: null
    });
  }
  /**
   * Start zooming
   * @param {[Number, Number]} pos - position on screen where the pointer grabs
   */
  zoomStart() {
    return this._getUpdatedState({
      startZoomPosition: this.getViewportProps().position
    });
  }
  /**
   * Zoom
   * @param {[Number, Number]} pos - position on screen where the current center is
   * @param {[Number, Number]} startPos - the center position at
   *   the start of the operation. Must be supplied of `zoomStart()` was not called
   * @param {Number} scale - a number between [0, 1] specifying the accumulated
   *   relative scale.
   */
  zoom({ pos, scale: scale7 }) {
    const viewportProps = this.getViewportProps();
    const startZoomPosition = this.getState().startZoomPosition || viewportProps.position;
    const viewport = this.makeViewport(viewportProps);
    const { projectionMatrix, width } = viewport;
    const fovxRadians = 2 * Math.atan(1 / projectionMatrix[0]);
    const angle3 = fovxRadians * (pos[0] / width - 0.5);
    const direction = this.getDirection(true);
    return this._move(direction.rotateZ({ radians: -angle3 }), Math.log2(scale7) * MOVEMENT_SPEED, startZoomPosition);
  }
  /**
   * End zooming
   * Must call if `zoomStart()` was called
   */
  zoomEnd() {
    return this._getUpdatedState({
      startZoomPosition: null
    });
  }
  moveLeft(speed = MOVEMENT_SPEED) {
    const direction = this.getDirection(true);
    return this._move(direction.rotateZ({ radians: Math.PI / 2 }), speed);
  }
  moveRight(speed = MOVEMENT_SPEED) {
    const direction = this.getDirection(true);
    return this._move(direction.rotateZ({ radians: -Math.PI / 2 }), speed);
  }
  // forward
  moveUp(speed = MOVEMENT_SPEED) {
    const direction = this.getDirection(true);
    return this._move(direction, speed);
  }
  // backward
  moveDown(speed = MOVEMENT_SPEED) {
    const direction = this.getDirection(true);
    return this._move(direction.negate(), speed);
  }
  rotateLeft(speed = 15) {
    return this._getUpdatedState({
      bearing: this.getViewportProps().bearing - speed
    });
  }
  rotateRight(speed = 15) {
    return this._getUpdatedState({
      bearing: this.getViewportProps().bearing + speed
    });
  }
  rotateUp(speed = 10) {
    return this._getUpdatedState({
      pitch: this.getViewportProps().pitch + speed
    });
  }
  rotateDown(speed = 10) {
    return this._getUpdatedState({
      pitch: this.getViewportProps().pitch - speed
    });
  }
  zoomIn(speed = MOVEMENT_SPEED) {
    return this._move(new Vector3(0, 0, 1), speed);
  }
  zoomOut(speed = MOVEMENT_SPEED) {
    return this._move(new Vector3(0, 0, -1), speed);
  }
  // shortest path between two view states
  shortestPathFrom(viewState) {
    const fromProps = viewState.getViewportProps();
    const props = { ...this.getViewportProps() };
    const { bearing, longitude } = props;
    if (Math.abs(bearing - fromProps.bearing) > 180) {
      props.bearing = bearing < 0 ? bearing + 360 : bearing - 360;
    }
    if (longitude !== null && fromProps.longitude !== null && Math.abs(longitude - fromProps.longitude) > 180) {
      props.longitude = longitude < 0 ? longitude + 360 : longitude - 360;
    }
    return props;
  }
  /* Private methods */
  _move(direction, speed, fromPosition = this.getViewportProps().position) {
    const delta = direction.scale(speed);
    return this._getUpdatedState({
      position: new Vector3(fromPosition).add(delta)
    });
  }
  getDirection(use2D = false) {
    const spherical = new SphericalCoordinates({
      bearing: this.getViewportProps().bearing,
      pitch: use2D ? 90 : 90 + this.getViewportProps().pitch
    });
    const direction = spherical.toVector3().normalize();
    return direction;
  }
  _getUpdatedState(newProps) {
    return new _FirstPersonState({
      makeViewport: this.makeViewport,
      ...this.getViewportProps(),
      ...this.getState(),
      ...newProps
    });
  }
  // Apply any constraints (mathematical or defined by _viewportProps) to map state
  applyConstraints(props) {
    const { pitch, maxPitch, minPitch, longitude, bearing } = props;
    props.pitch = clamp(pitch, minPitch, maxPitch);
    if (longitude !== null && (longitude < -180 || longitude > 180)) {
      props.longitude = mod2(longitude + 180, 360) - 180;
    }
    if (bearing < -180 || bearing > 180) {
      props.bearing = mod2(bearing + 180, 360) - 180;
    }
    return props;
  }
};
var FirstPersonController = class extends Controller {
  constructor() {
    super(...arguments);
    this.ControllerState = FirstPersonState;
    this.transition = {
      transitionDuration: 300,
      transitionInterpolator: new LinearInterpolator(["position", "pitch", "bearing"])
    };
  }
};

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/views/first-person-view.js
var FirstPersonView = class extends View {
  constructor(props = {}) {
    super(props);
  }
  getViewportType() {
    return FirstPersonViewport;
  }
  get ControllerType() {
    return FirstPersonController;
  }
};
FirstPersonView.displayName = "FirstPersonView";

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/controllers/orbit-controller.js
var OrbitState = class extends ViewState {
  constructor(options) {
    const {
      /* Viewport arguments */
      width,
      // Width of viewport
      height,
      // Height of viewport
      rotationX = 0,
      // Rotation around x axis
      rotationOrbit = 0,
      // Rotation around orbit axis
      target: target2 = [0, 0, 0],
      zoom = 0,
      /* Viewport constraints */
      minRotationX = -90,
      maxRotationX = 90,
      minZoom = -Infinity,
      maxZoom = Infinity,
      /** Interaction states, required to calculate change during transform */
      // Model state when the pan operation first started
      startPanPosition,
      // Model state when the rotate operation first started
      startRotatePos,
      startRotationX,
      startRotationOrbit,
      // Model state when the zoom operation first started
      startZoomPosition,
      startZoom
    } = options;
    super({
      width,
      height,
      rotationX,
      rotationOrbit,
      target: target2,
      zoom,
      minRotationX,
      maxRotationX,
      minZoom,
      maxZoom
    }, {
      startPanPosition,
      startRotatePos,
      startRotationX,
      startRotationOrbit,
      startZoomPosition,
      startZoom
    });
    this.makeViewport = options.makeViewport;
  }
  /**
   * Start panning
   * @param {[Number, Number]} pos - position on screen where the pointer grabs
   */
  panStart({ pos }) {
    return this._getUpdatedState({
      startPanPosition: this._unproject(pos)
    });
  }
  /**
   * Pan
   * @param {[Number, Number]} pos - position on screen where the pointer is
   */
  pan({ pos, startPosition }) {
    const startPanPosition = this.getState().startPanPosition || startPosition;
    if (!startPanPosition) {
      return this;
    }
    const viewport = this.makeViewport(this.getViewportProps());
    const newProps = viewport.panByPosition(startPanPosition, pos);
    return this._getUpdatedState(newProps);
  }
  /**
   * End panning
   * Must call if `panStart()` was called
   */
  panEnd() {
    return this._getUpdatedState({
      startPanPosition: null
    });
  }
  /**
   * Start rotating
   * @param {[Number, Number]} pos - position on screen where the pointer grabs
   */
  rotateStart({ pos }) {
    return this._getUpdatedState({
      startRotatePos: pos,
      startRotationX: this.getViewportProps().rotationX,
      startRotationOrbit: this.getViewportProps().rotationOrbit
    });
  }
  /**
   * Rotate
   * @param {[Number, Number]} pos - position on screen where the pointer is
   */
  rotate({ pos, deltaAngleX = 0, deltaAngleY = 0 }) {
    const { startRotatePos, startRotationX, startRotationOrbit } = this.getState();
    const { width, height } = this.getViewportProps();
    if (!startRotatePos || startRotationX === void 0 || startRotationOrbit === void 0) {
      return this;
    }
    let newRotation;
    if (pos) {
      let deltaScaleX = (pos[0] - startRotatePos[0]) / width;
      const deltaScaleY = (pos[1] - startRotatePos[1]) / height;
      if (startRotationX < -90 || startRotationX > 90) {
        deltaScaleX *= -1;
      }
      newRotation = {
        rotationX: startRotationX + deltaScaleY * 180,
        rotationOrbit: startRotationOrbit + deltaScaleX * 180
      };
    } else {
      newRotation = {
        rotationX: startRotationX + deltaAngleY,
        rotationOrbit: startRotationOrbit + deltaAngleX
      };
    }
    return this._getUpdatedState(newRotation);
  }
  /**
   * End rotating
   * Must call if `rotateStart()` was called
   */
  rotateEnd() {
    return this._getUpdatedState({
      startRotationX: null,
      startRotationOrbit: null
    });
  }
  // shortest path between two view states
  shortestPathFrom(viewState) {
    const fromProps = viewState.getViewportProps();
    const props = { ...this.getViewportProps() };
    const { rotationOrbit } = props;
    if (Math.abs(rotationOrbit - fromProps.rotationOrbit) > 180) {
      props.rotationOrbit = rotationOrbit < 0 ? rotationOrbit + 360 : rotationOrbit - 360;
    }
    return props;
  }
  /**
   * Start zooming
   * @param {[Number, Number]} pos - position on screen where the pointer grabs
   */
  zoomStart({ pos }) {
    return this._getUpdatedState({
      startZoomPosition: this._unproject(pos),
      startZoom: this.getViewportProps().zoom
    });
  }
  /**
   * Zoom
   * @param {[Number, Number]} pos - position on screen where the current target is
   * @param {[Number, Number]} startPos - the target position at
   *   the start of the operation. Must be supplied of `zoomStart()` was not called
   * @param {Number} scale - a number between [0, 1] specifying the accumulated
   *   relative scale.
   */
  zoom({ pos, startPos, scale: scale7 }) {
    let { startZoom, startZoomPosition } = this.getState();
    if (!startZoomPosition) {
      startZoom = this.getViewportProps().zoom;
      startZoomPosition = this._unproject(startPos) || this._unproject(pos);
    }
    if (!startZoomPosition) {
      return this;
    }
    const newZoom = this._calculateNewZoom({ scale: scale7, startZoom });
    const zoomedViewport = this.makeViewport({ ...this.getViewportProps(), zoom: newZoom });
    return this._getUpdatedState({
      zoom: newZoom,
      ...zoomedViewport.panByPosition(startZoomPosition, pos)
    });
  }
  /**
   * End zooming
   * Must call if `zoomStart()` was called
   */
  zoomEnd() {
    return this._getUpdatedState({
      startZoomPosition: null,
      startZoom: null
    });
  }
  zoomIn(speed = 2) {
    return this._getUpdatedState({
      zoom: this._calculateNewZoom({ scale: speed })
    });
  }
  zoomOut(speed = 2) {
    return this._getUpdatedState({
      zoom: this._calculateNewZoom({ scale: 1 / speed })
    });
  }
  moveLeft(speed = 50) {
    return this._panFromCenter([-speed, 0]);
  }
  moveRight(speed = 50) {
    return this._panFromCenter([speed, 0]);
  }
  moveUp(speed = 50) {
    return this._panFromCenter([0, -speed]);
  }
  moveDown(speed = 50) {
    return this._panFromCenter([0, speed]);
  }
  rotateLeft(speed = 15) {
    return this._getUpdatedState({
      rotationOrbit: this.getViewportProps().rotationOrbit - speed
    });
  }
  rotateRight(speed = 15) {
    return this._getUpdatedState({
      rotationOrbit: this.getViewportProps().rotationOrbit + speed
    });
  }
  rotateUp(speed = 10) {
    return this._getUpdatedState({
      rotationX: this.getViewportProps().rotationX - speed
    });
  }
  rotateDown(speed = 10) {
    return this._getUpdatedState({
      rotationX: this.getViewportProps().rotationX + speed
    });
  }
  /* Private methods */
  _unproject(pos) {
    const viewport = this.makeViewport(this.getViewportProps());
    return pos && viewport.unproject(pos);
  }
  // Calculates new zoom
  _calculateNewZoom({ scale: scale7, startZoom }) {
    const { maxZoom, minZoom } = this.getViewportProps();
    if (startZoom === void 0) {
      startZoom = this.getViewportProps().zoom;
    }
    const zoom = startZoom + Math.log2(scale7);
    return clamp(zoom, minZoom, maxZoom);
  }
  _panFromCenter(offset) {
    const { width, height, target: target2 } = this.getViewportProps();
    return this.pan({
      startPosition: target2,
      pos: [width / 2 + offset[0], height / 2 + offset[1]]
    });
  }
  _getUpdatedState(newProps) {
    return new this.constructor({
      makeViewport: this.makeViewport,
      ...this.getViewportProps(),
      ...this.getState(),
      ...newProps
    });
  }
  // Apply any constraints (mathematical or defined by _viewportProps) to map state
  applyConstraints(props) {
    const { maxZoom, minZoom, zoom, maxRotationX, minRotationX, rotationOrbit } = props;
    props.zoom = Array.isArray(zoom) ? [clamp(zoom[0], minZoom, maxZoom), clamp(zoom[1], minZoom, maxZoom)] : clamp(zoom, minZoom, maxZoom);
    props.rotationX = clamp(props.rotationX, minRotationX, maxRotationX);
    if (rotationOrbit < -180 || rotationOrbit > 180) {
      props.rotationOrbit = mod2(rotationOrbit + 180, 360) - 180;
    }
    return props;
  }
};
var OrbitController = class extends Controller {
  constructor() {
    super(...arguments);
    this.ControllerState = OrbitState;
    this.transition = {
      transitionDuration: 300,
      transitionInterpolator: new LinearInterpolator({
        transitionProps: {
          compare: ["target", "zoom", "rotationX", "rotationOrbit"],
          required: ["target", "zoom"]
        }
      })
    };
  }
};

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/views/orbit-view.js
var OrbitView = class extends View {
  constructor(props = {}) {
    super(props);
    this.props.orbitAxis = props.orbitAxis || "Z";
  }
  getViewportType() {
    return OrbitViewport;
  }
  get ControllerType() {
    return OrbitController;
  }
};
OrbitView.displayName = "OrbitView";

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/controllers/orthographic-controller.js
var OrthographicState = class extends OrbitState {
  constructor(props) {
    super(props);
    this.zoomAxis = props.zoomAxis || "all";
  }
  _calculateNewZoom({ scale: scale7, startZoom }) {
    const { maxZoom, minZoom } = this.getViewportProps();
    if (startZoom === void 0) {
      startZoom = this.getViewportProps().zoom;
    }
    let deltaZoom = Math.log2(scale7);
    if (Array.isArray(startZoom)) {
      let [newZoomX, newZoomY] = startZoom;
      switch (this.zoomAxis) {
        case "X":
          newZoomX = clamp(newZoomX + deltaZoom, minZoom, maxZoom);
          break;
        case "Y":
          newZoomY = clamp(newZoomY + deltaZoom, minZoom, maxZoom);
          break;
        default:
          let z3 = Math.min(newZoomX + deltaZoom, newZoomY + deltaZoom);
          if (z3 < minZoom) {
            deltaZoom += minZoom - z3;
          }
          z3 = Math.max(newZoomX + deltaZoom, newZoomY + deltaZoom);
          if (z3 > maxZoom) {
            deltaZoom += maxZoom - z3;
          }
          newZoomX += deltaZoom;
          newZoomY += deltaZoom;
      }
      return [newZoomX, newZoomY];
    }
    return clamp(startZoom + deltaZoom, minZoom, maxZoom);
  }
};
var OrthographicController = class extends Controller {
  constructor() {
    super(...arguments);
    this.ControllerState = OrthographicState;
    this.transition = {
      transitionDuration: 300,
      transitionInterpolator: new LinearInterpolator(["target", "zoom"])
    };
    this.dragMode = "pan";
  }
  _onPanRotate() {
    return false;
  }
};

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/views/orthographic-view.js
var OrthographicView = class extends View {
  constructor(props = {}) {
    super(props);
  }
  getViewportType() {
    return OrthographicViewport;
  }
  get ControllerType() {
    return OrthographicController;
  }
};
OrthographicView.displayName = "OrthographicView";

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/controllers/globe-controller.js
var GlobeState = class extends MapState {
  // Apply any constraints (mathematical or defined by _viewportProps) to map state
  applyConstraints(props) {
    const { maxZoom, minZoom, zoom } = props;
    props.zoom = clamp(zoom, minZoom, maxZoom);
    const { longitude, latitude } = props;
    if (longitude < -180 || longitude > 180) {
      props.longitude = mod2(longitude + 180, 360) - 180;
    }
    props.latitude = clamp(latitude, -MAX_LATITUDE, MAX_LATITUDE);
    return props;
  }
};
var GlobeController = class extends Controller {
  constructor() {
    super(...arguments);
    this.ControllerState = GlobeState;
    this.transition = {
      transitionDuration: 300,
      transitionInterpolator: new LinearInterpolator(["longitude", "latitude", "zoom"])
    };
    this.dragMode = "pan";
  }
  setProps(props) {
    super.setProps(props);
    this.dragRotate = false;
    this.touchRotate = false;
  }
};

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/views/globe-view.js
var GlobeView = class extends View {
  constructor(props = {}) {
    super(props);
  }
  getViewportType(viewState) {
    return viewState.zoom > 12 ? web_mercator_viewport_default : GlobeViewport;
  }
  get ControllerType() {
    return GlobeController;
  }
};
GlobeView.displayName = "GlobeView";

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/lib/layer-extension.js
var LayerExtension = class {
  static get componentName() {
    return Object.prototype.hasOwnProperty.call(this, "extensionName") ? this.extensionName : "";
  }
  constructor(opts) {
    if (opts) {
      this.opts = opts;
    }
  }
  /** Returns true if two extensions are equivalent */
  equals(extension) {
    if (this === extension) {
      return true;
    }
    return this.constructor === extension.constructor && deepEqual2(this.opts, extension.opts, 1);
  }
  /** Only called if attached to a primitive layer */
  getShaders(extension) {
    return null;
  }
  /** Only called if attached to a CompositeLayer */
  getSubLayerProps(extension) {
    const { defaultProps: defaultProps3 } = extension.constructor;
    const newProps = {
      updateTriggers: {}
    };
    for (const key in defaultProps3) {
      if (key in this.props) {
        const propDef = defaultProps3[key];
        const propValue = this.props[key];
        newProps[key] = propValue;
        if (propDef && propDef.type === "accessor") {
          newProps.updateTriggers[key] = this.props.updateTriggers[key];
          if (typeof propValue === "function") {
            newProps[key] = this.getSubLayerAccessor(propValue);
          }
        }
      }
    }
    return newProps;
  }
  /* eslint-disable @typescript-eslint/no-empty-function */
  initializeState(context, extension) {
  }
  updateState(params, extension) {
  }
  onNeedsRedraw(extension) {
  }
  getNeedsPickingBuffer(extension) {
    return false;
  }
  draw(params, extension) {
  }
  finalizeState(context, extension) {
  }
};
LayerExtension.defaultProps = {};
LayerExtension.extensionName = "LayerExtension";

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/transitions/fly-to-interpolator.js
var LINEARLY_INTERPOLATED_PROPS = {
  bearing: 0,
  pitch: 0,
  position: [0, 0, 0]
};
var DEFAULT_OPTS2 = {
  speed: 1.2,
  curve: 1.414
};
var FlyToInterpolator = class extends TransitionInterpolator {
  constructor(opts = {}) {
    super({
      compare: ["longitude", "latitude", "zoom", "bearing", "pitch", "position"],
      extract: ["width", "height", "longitude", "latitude", "zoom", "bearing", "pitch", "position"],
      required: ["width", "height", "latitude", "longitude", "zoom"]
    });
    this.opts = { ...DEFAULT_OPTS2, ...opts };
  }
  interpolateProps(startProps, endProps, t3) {
    const viewport = flyToViewport(startProps, endProps, t3, this.opts);
    for (const key in LINEARLY_INTERPOLATED_PROPS) {
      viewport[key] = lerp(startProps[key] || LINEARLY_INTERPOLATED_PROPS[key], endProps[key] || LINEARLY_INTERPOLATED_PROPS[key], t3);
    }
    return viewport;
  }
  // computes the transition duration
  getDuration(startProps, endProps) {
    let { transitionDuration } = endProps;
    if (transitionDuration === "auto") {
      transitionDuration = getFlyToDuration(startProps, endProps, this.opts);
    }
    return transitionDuration;
  }
};

// ../../../.yarn/berry/cache/@deck.gl-core-npm-9.1.14-900b742fd6-10c0.zip/node_modules/@deck.gl/core/dist/utils/apply-styles.js
function applyStyles(element, style) {
  if (style) {
    Object.entries(style).map(([key, value]) => {
      if (key.startsWith("--")) {
        element.style.setProperty(key, value);
      } else {
        element.style[key] = value;
      }
    });
  }
}
function removeStyles(element, style) {
  if (style) {
    Object.keys(style).map((key) => {
      if (key.startsWith("--")) {
        element.style.removeProperty(key);
      } else {
        element.style[key] = "";
      }
    });
  }
}

// .yarn/__virtual__/@deck.gl-react-virtual-e01d66b29a/4/.yarn/berry/cache/@deck.gl-react-npm-9.1.14-4f5993c079-10c0.zip/node_modules/@deck.gl/react/dist/utils/use-isomorphic-layout-effect.js
var import_react = __toESM(require_react(), 1);
var useIsomorphicLayoutEffect = typeof window !== "undefined" ? import_react.useLayoutEffect : import_react.useEffect;
var use_isomorphic_layout_effect_default = useIsomorphicLayoutEffect;

// .yarn/__virtual__/@deck.gl-react-virtual-e01d66b29a/4/.yarn/berry/cache/@deck.gl-react-npm-9.1.14-4f5993c079-10c0.zip/node_modules/@deck.gl/react/dist/utils/extract-jsx-layers.js
var React = __toESM(require_react(), 1);
var import_react3 = __toESM(require_react(), 1);

// .yarn/__virtual__/@deck.gl-react-virtual-e01d66b29a/4/.yarn/berry/cache/@deck.gl-react-npm-9.1.14-4f5993c079-10c0.zip/node_modules/@deck.gl/react/dist/utils/inherits-from.js
function inheritsFrom(Type2, ParentType) {
  while (Type2) {
    if (Type2 === ParentType) {
      return true;
    }
    Type2 = Object.getPrototypeOf(Type2);
  }
  return false;
}

// .yarn/__virtual__/@deck.gl-react-virtual-e01d66b29a/4/.yarn/berry/cache/@deck.gl-react-npm-9.1.14-4f5993c079-10c0.zip/node_modules/@deck.gl/react/dist/utils/evaluate-children.js
var import_react2 = __toESM(require_react(), 1);
var MAP_STYLE = { position: "absolute", zIndex: -1 };
function evaluateChildren(children, childProps) {
  if (typeof children === "function") {
    return children(childProps);
  }
  if (Array.isArray(children)) {
    return children.map((child) => evaluateChildren(child, childProps));
  }
  if (isComponent(children)) {
    if (isReactMap(children)) {
      childProps.style = MAP_STYLE;
      return (0, import_react2.cloneElement)(children, childProps);
    }
    if (needsDeckGLViewProps(children)) {
      return (0, import_react2.cloneElement)(children, childProps);
    }
  }
  return children;
}
function isComponent(child) {
  return child && typeof child === "object" && "type" in child || false;
}
function isReactMap(child) {
  var _a3;
  return (_a3 = child.props) == null ? void 0 : _a3.mapStyle;
}
function needsDeckGLViewProps(child) {
  const componentClass = child.type;
  return componentClass && componentClass.deckGLViewProps;
}

// .yarn/__virtual__/@deck.gl-react-virtual-e01d66b29a/4/.yarn/berry/cache/@deck.gl-react-npm-9.1.14-4f5993c079-10c0.zip/node_modules/@deck.gl/react/dist/utils/extract-jsx-layers.js
function wrapInView(node) {
  if (typeof node === "function") {
    return (0, import_react3.createElement)(View, {}, node);
  }
  if (Array.isArray(node)) {
    return node.map(wrapInView);
  }
  if (isComponent(node)) {
    if (node.type === React.Fragment) {
      return wrapInView(node.props.children);
    }
    if (inheritsFrom(node.type, View)) {
      return node;
    }
  }
  return node;
}
function extractJSXLayers({ children, layers = [], views = null }) {
  const reactChildren = [];
  const jsxLayers = [];
  const jsxViews = {};
  React.Children.forEach(wrapInView(children), (reactElement) => {
    if (isComponent(reactElement)) {
      const ElementType = reactElement.type;
      if (inheritsFrom(ElementType, layer_default)) {
        const layer = createLayer(ElementType, reactElement.props);
        jsxLayers.push(layer);
      } else {
        reactChildren.push(reactElement);
      }
      if (inheritsFrom(ElementType, View) && ElementType !== View && reactElement.props.id) {
        const view = new ElementType(reactElement.props);
        jsxViews[view.id] = view;
      }
    } else if (reactElement) {
      reactChildren.push(reactElement);
    }
  });
  if (Object.keys(jsxViews).length > 0) {
    if (Array.isArray(views)) {
      views.forEach((view) => {
        jsxViews[view.id] = view;
      });
    } else if (views) {
      jsxViews[views.id] = views;
    }
    views = Object.values(jsxViews);
  }
  layers = jsxLayers.length > 0 ? [...jsxLayers, ...layers] : layers;
  return { layers, children: reactChildren, views };
}
function createLayer(LayerType, reactProps) {
  const props = {};
  const defaultProps3 = LayerType.defaultProps || {};
  for (const key in reactProps) {
    if (defaultProps3[key] !== reactProps[key]) {
      props[key] = reactProps[key];
    }
  }
  return new LayerType(props);
}

// .yarn/__virtual__/@deck.gl-react-virtual-e01d66b29a/4/.yarn/berry/cache/@deck.gl-react-npm-9.1.14-4f5993c079-10c0.zip/node_modules/@deck.gl/react/dist/utils/position-children-under-views.js
var import_react5 = __toESM(require_react(), 1);

// .yarn/__virtual__/@deck.gl-react-virtual-e01d66b29a/4/.yarn/berry/cache/@deck.gl-react-npm-9.1.14-4f5993c079-10c0.zip/node_modules/@deck.gl/react/dist/utils/deckgl-context.js
var import_react4 = __toESM(require_react(), 1);
var DeckGlContext = (0, import_react4.createContext)();

// .yarn/__virtual__/@deck.gl-react-virtual-e01d66b29a/4/.yarn/berry/cache/@deck.gl-react-npm-9.1.14-4f5993c079-10c0.zip/node_modules/@deck.gl/react/dist/utils/position-children-under-views.js
function positionChildrenUnderViews({ children, deck, ContextProvider = DeckGlContext.Provider }) {
  const { viewManager } = deck || {};
  if (!viewManager || !viewManager.views.length) {
    return [];
  }
  const views = {};
  const defaultViewId = viewManager.views[0].id;
  for (const child of children) {
    let viewId = defaultViewId;
    let viewChildren = child;
    if (isComponent(child) && inheritsFrom(child.type, View)) {
      viewId = child.props.id || defaultViewId;
      viewChildren = child.props.children;
    }
    const viewport = viewManager.getViewport(viewId);
    const viewState = viewManager.getViewState(viewId);
    if (viewport) {
      viewState.padding = viewport.padding;
      const { x: x3, y: y3, width, height } = viewport;
      viewChildren = evaluateChildren(viewChildren, {
        x: x3,
        y: y3,
        width,
        height,
        viewport,
        viewState
      });
      if (!views[viewId]) {
        views[viewId] = {
          viewport,
          children: []
        };
      }
      views[viewId].children.push(viewChildren);
    }
  }
  return Object.keys(views).map((viewId) => {
    const { viewport, children: viewChildren } = views[viewId];
    const { x: x3, y: y3, width, height } = viewport;
    const style = {
      position: "absolute",
      left: x3,
      top: y3,
      width,
      height
    };
    const key = `view-${viewId}`;
    const viewElement = (0, import_react5.createElement)("div", { key, id: key, style }, ...viewChildren);
    const contextValue = {
      deck,
      viewport,
      // @ts-expect-error accessing protected property
      container: deck.canvas.offsetParent,
      // @ts-expect-error accessing protected property
      eventManager: deck.eventManager,
      onViewStateChange: (params) => {
        params.viewId = viewId;
        deck._onViewStateChange(params);
      },
      widgets: []
    };
    const providerKey = `view-${viewId}-context`;
    return (0, import_react5.createElement)(ContextProvider, { key: providerKey, value: contextValue }, viewElement);
  });
}

// .yarn/__virtual__/@deck.gl-react-virtual-e01d66b29a/4/.yarn/berry/cache/@deck.gl-react-npm-9.1.14-4f5993c079-10c0.zip/node_modules/@deck.gl/react/dist/utils/extract-styles.js
var CANVAS_ONLY_STYLES = {
  mixBlendMode: null
};
function extractStyles({ width, height, style }) {
  const containerStyle = {
    position: "absolute",
    zIndex: 0,
    left: 0,
    top: 0,
    width,
    height
  };
  const canvasStyle = {
    left: 0,
    top: 0
  };
  if (style) {
    for (const key in style) {
      if (key in CANVAS_ONLY_STYLES) {
        canvasStyle[key] = style[key];
      } else {
        containerStyle[key] = style[key];
      }
    }
  }
  return { containerStyle, canvasStyle };
}

// .yarn/__virtual__/@deck.gl-react-virtual-e01d66b29a/4/.yarn/berry/cache/@deck.gl-react-npm-9.1.14-4f5993c079-10c0.zip/node_modules/@deck.gl/react/dist/deckgl.js
function getRefHandles(thisRef) {
  return {
    get deck() {
      return thisRef.deck;
    },
    // The following method can only be called after ref is available, by which point deck is defined in useEffect
    pickObject: (opts) => thisRef.deck.pickObject(opts),
    pickMultipleObjects: (opts) => thisRef.deck.pickMultipleObjects(opts),
    pickObjects: (opts) => thisRef.deck.pickObjects(opts)
  };
}
function redrawDeck(thisRef) {
  if (thisRef.redrawReason) {
    thisRef.deck._drawLayers(thisRef.redrawReason);
    thisRef.redrawReason = null;
  }
}
function createDeckInstance(thisRef, DeckClass, props) {
  var _a3, _b, _c;
  const deck = new DeckClass({
    ...props,
    // The Deck's animation loop is independent from React's render cycle, causing potential
    // synchronization issues. We provide this custom render function to make sure that React
    // and Deck update on the same schedule.
    // TODO(ibgreen) - Hack to enable WebGPU as it needs to render quickly to avoid CanvasContext texture from going stale
    _customRender: ((_c = (_b = (_a3 = props.deviceProps) == null ? void 0 : _a3.adapters) == null ? void 0 : _b[0]) == null ? void 0 : _c.type) === "webgpu" ? void 0 : (redrawReason) => {
      thisRef.redrawReason = redrawReason;
      const viewports = deck.getViewports();
      if (thisRef.lastRenderedViewports !== viewports) {
        thisRef.forceUpdate();
      } else {
        redrawDeck(thisRef);
      }
    }
  });
  return deck;
}
function DeckGLWithRef(props, ref) {
  const [version2, setVersion] = (0, import_react6.useState)(0);
  const _thisRef = (0, import_react6.useRef)({
    control: null,
    version: version2,
    forceUpdate: () => setVersion((v3) => v3 + 1)
  });
  const thisRef = _thisRef.current;
  const containerRef = (0, import_react6.useRef)(null);
  const canvasRef = (0, import_react6.useRef)(null);
  const jsxProps = (0, import_react6.useMemo)(() => extractJSXLayers(props), [props.layers, props.views, props.children]);
  let inRender = true;
  const handleViewStateChange = (params) => {
    var _a3;
    if (inRender && props.viewState) {
      thisRef.viewStateUpdateRequested = params;
      return null;
    }
    thisRef.viewStateUpdateRequested = null;
    return (_a3 = props.onViewStateChange) == null ? void 0 : _a3.call(props, params);
  };
  const handleInteractionStateChange = (params) => {
    var _a3;
    if (inRender) {
      thisRef.interactionStateUpdateRequested = params;
    } else {
      thisRef.interactionStateUpdateRequested = null;
      (_a3 = props.onInteractionStateChange) == null ? void 0 : _a3.call(props, params);
    }
  };
  const deckProps = (0, import_react6.useMemo)(() => {
    const forwardProps = {
      widgets: [],
      ...props,
      // Override user styling props. We will set the canvas style in render()
      style: null,
      width: "100%",
      height: "100%",
      parent: containerRef.current,
      canvas: canvasRef.current,
      layers: jsxProps.layers,
      views: jsxProps.views,
      onViewStateChange: handleViewStateChange,
      onInteractionStateChange: handleInteractionStateChange
    };
    delete forwardProps._customRender;
    if (thisRef.deck) {
      thisRef.deck.setProps(forwardProps);
    }
    return forwardProps;
  }, [props]);
  (0, import_react6.useEffect)(() => {
    const DeckClass = props.Deck || deck_default;
    thisRef.deck = createDeckInstance(thisRef, DeckClass, {
      ...deckProps,
      parent: containerRef.current,
      canvas: canvasRef.current
    });
    return () => {
      var _a3;
      return (_a3 = thisRef.deck) == null ? void 0 : _a3.finalize();
    };
  }, []);
  use_isomorphic_layout_effect_default(() => {
    redrawDeck(thisRef);
    const { viewStateUpdateRequested, interactionStateUpdateRequested } = thisRef;
    if (viewStateUpdateRequested) {
      handleViewStateChange(viewStateUpdateRequested);
    }
    if (interactionStateUpdateRequested) {
      handleInteractionStateChange(interactionStateUpdateRequested);
    }
  });
  (0, import_react6.useImperativeHandle)(ref, () => getRefHandles(thisRef), []);
  const currentViewports = thisRef.deck && thisRef.deck.isInitialized ? thisRef.deck.getViewports() : void 0;
  const { ContextProvider, width = "100%", height = "100%", id, style } = props;
  const { containerStyle, canvasStyle } = (0, import_react6.useMemo)(() => extractStyles({ width, height, style }), [width, height, style]);
  if (!thisRef.viewStateUpdateRequested && thisRef.lastRenderedViewports === currentViewports || // case 2
  thisRef.version !== version2) {
    thisRef.lastRenderedViewports = currentViewports;
    thisRef.version = version2;
    const childrenUnderViews = positionChildrenUnderViews({
      children: jsxProps.children,
      deck: thisRef.deck,
      ContextProvider
    });
    const canvas2 = (0, import_react6.createElement)("canvas", {
      key: "canvas",
      id: id || "deckgl-overlay",
      ref: canvasRef,
      style: canvasStyle
    });
    thisRef.control = (0, import_react6.createElement)("div", { id: `${id || "deckgl"}-wrapper`, ref: containerRef, style: containerStyle }, [canvas2, childrenUnderViews]);
  }
  inRender = false;
  return thisRef.control;
}
var DeckGL = React2.forwardRef(DeckGLWithRef);
var deckgl_default = DeckGL;

// ../../../.yarn/berry/cache/preact-npm-10.27.1-1ad8af53de-10c0.zip/node_modules/preact/dist/preact.module.js
var n2;
var l2;
var u2;
var t2;
var i2;
var r2;
var o2;
var e3;
var f2;
var c2;
var s2;
var a2;
var h2;
var p2 = {};
var v2 = [];
var y2 = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;
var w2 = Array.isArray;
function d2(n3, l3) {
  for (var u4 in l3) n3[u4] = l3[u4];
  return n3;
}
function g2(n3) {
  n3 && n3.parentNode && n3.parentNode.removeChild(n3);
}
function _2(l3, u4, t3) {
  var i4, r3, o3, e4 = {};
  for (o3 in u4) "key" == o3 ? i4 = u4[o3] : "ref" == o3 ? r3 = u4[o3] : e4[o3] = u4[o3];
  if (arguments.length > 2 && (e4.children = arguments.length > 3 ? n2.call(arguments, 2) : t3), "function" == typeof l3 && null != l3.defaultProps) for (o3 in l3.defaultProps) void 0 === e4[o3] && (e4[o3] = l3.defaultProps[o3]);
  return m2(l3, e4, i4, r3, null);
}
function m2(n3, t3, i4, r3, o3) {
  var e4 = { type: n3, props: t3, key: i4, ref: r3, __k: null, __: null, __b: 0, __e: null, __c: null, constructor: void 0, __v: null == o3 ? ++u2 : o3, __i: -1, __u: 0 };
  return null == o3 && null != l2.vnode && l2.vnode(e4), e4;
}
function k2(n3) {
  return n3.children;
}
function x2(n3, l3) {
  this.props = n3, this.context = l3;
}
function S2(n3, l3) {
  if (null == l3) return n3.__ ? S2(n3.__, n3.__i + 1) : null;
  for (var u4; l3 < n3.__k.length; l3++) if (null != (u4 = n3.__k[l3]) && null != u4.__e) return u4.__e;
  return "function" == typeof n3.type ? S2(n3) : null;
}
function C2(n3) {
  var l3, u4;
  if (null != (n3 = n3.__) && null != n3.__c) {
    for (n3.__e = n3.__c.base = null, l3 = 0; l3 < n3.__k.length; l3++) if (null != (u4 = n3.__k[l3]) && null != u4.__e) {
      n3.__e = n3.__c.base = u4.__e;
      break;
    }
    return C2(n3);
  }
}
function M2(n3) {
  (!n3.__d && (n3.__d = true) && i2.push(n3) && !$2.__r++ || r2 != l2.debounceRendering) && ((r2 = l2.debounceRendering) || o2)($2);
}
function $2() {
  for (var n3, u4, t3, r3, o3, f4, c3, s3 = 1; i2.length; ) i2.length > s3 && i2.sort(e3), n3 = i2.shift(), s3 = i2.length, n3.__d && (t3 = void 0, o3 = (r3 = (u4 = n3).__v).__e, f4 = [], c3 = [], u4.__P && ((t3 = d2({}, r3)).__v = r3.__v + 1, l2.vnode && l2.vnode(t3), O2(u4.__P, t3, r3, u4.__n, u4.__P.namespaceURI, 32 & r3.__u ? [o3] : null, f4, null == o3 ? S2(r3) : o3, !!(32 & r3.__u), c3), t3.__v = r3.__v, t3.__.__k[t3.__i] = t3, N2(f4, t3, c3), t3.__e != o3 && C2(t3)));
  $2.__r = 0;
}
function I2(n3, l3, u4, t3, i4, r3, o3, e4, f4, c3, s3) {
  var a3, h3, y3, w3, d3, g3, _3, m3 = t3 && t3.__k || v2, b2 = l3.length;
  for (f4 = P2(u4, l3, m3, f4, b2), a3 = 0; a3 < b2; a3++) null != (y3 = u4.__k[a3]) && (h3 = -1 == y3.__i ? p2 : m3[y3.__i] || p2, y3.__i = a3, g3 = O2(n3, y3, h3, i4, r3, o3, e4, f4, c3, s3), w3 = y3.__e, y3.ref && h3.ref != y3.ref && (h3.ref && B2(h3.ref, null, y3), s3.push(y3.ref, y3.__c || w3, y3)), null == d3 && null != w3 && (d3 = w3), (_3 = !!(4 & y3.__u)) || h3.__k === y3.__k ? f4 = A2(y3, f4, n3, _3) : "function" == typeof y3.type && void 0 !== g3 ? f4 = g3 : w3 && (f4 = w3.nextSibling), y3.__u &= -7);
  return u4.__e = d3, f4;
}
function P2(n3, l3, u4, t3, i4) {
  var r3, o3, e4, f4, c3, s3 = u4.length, a3 = s3, h3 = 0;
  for (n3.__k = new Array(i4), r3 = 0; r3 < i4; r3++) null != (o3 = l3[r3]) && "boolean" != typeof o3 && "function" != typeof o3 ? (f4 = r3 + h3, (o3 = n3.__k[r3] = "string" == typeof o3 || "number" == typeof o3 || "bigint" == typeof o3 || o3.constructor == String ? m2(null, o3, null, null, null) : w2(o3) ? m2(k2, { children: o3 }, null, null, null) : null == o3.constructor && o3.__b > 0 ? m2(o3.type, o3.props, o3.key, o3.ref ? o3.ref : null, o3.__v) : o3).__ = n3, o3.__b = n3.__b + 1, e4 = null, -1 != (c3 = o3.__i = L2(o3, u4, f4, a3)) && (a3--, (e4 = u4[c3]) && (e4.__u |= 2)), null == e4 || null == e4.__v ? (-1 == c3 && (i4 > s3 ? h3-- : i4 < s3 && h3++), "function" != typeof o3.type && (o3.__u |= 4)) : c3 != f4 && (c3 == f4 - 1 ? h3-- : c3 == f4 + 1 ? h3++ : (c3 > f4 ? h3-- : h3++, o3.__u |= 4))) : n3.__k[r3] = null;
  if (a3) for (r3 = 0; r3 < s3; r3++) null != (e4 = u4[r3]) && 0 == (2 & e4.__u) && (e4.__e == t3 && (t3 = S2(e4)), D2(e4, e4));
  return t3;
}
function A2(n3, l3, u4, t3) {
  var i4, r3;
  if ("function" == typeof n3.type) {
    for (i4 = n3.__k, r3 = 0; i4 && r3 < i4.length; r3++) i4[r3] && (i4[r3].__ = n3, l3 = A2(i4[r3], l3, u4, t3));
    return l3;
  }
  n3.__e != l3 && (t3 && (l3 && n3.type && !l3.parentNode && (l3 = S2(n3)), u4.insertBefore(n3.__e, l3 || null)), l3 = n3.__e);
  do {
    l3 = l3 && l3.nextSibling;
  } while (null != l3 && 8 == l3.nodeType);
  return l3;
}
function L2(n3, l3, u4, t3) {
  var i4, r3, o3, e4 = n3.key, f4 = n3.type, c3 = l3[u4], s3 = null != c3 && 0 == (2 & c3.__u);
  if (null === c3 && null == n3.key || s3 && e4 == c3.key && f4 == c3.type) return u4;
  if (t3 > (s3 ? 1 : 0)) {
    for (i4 = u4 - 1, r3 = u4 + 1; i4 >= 0 || r3 < l3.length; ) if (null != (c3 = l3[o3 = i4 >= 0 ? i4-- : r3++]) && 0 == (2 & c3.__u) && e4 == c3.key && f4 == c3.type) return o3;
  }
  return -1;
}
function T2(n3, l3, u4) {
  "-" == l3[0] ? n3.setProperty(l3, null == u4 ? "" : u4) : n3[l3] = null == u4 ? "" : "number" != typeof u4 || y2.test(l3) ? u4 : u4 + "px";
}
function j2(n3, l3, u4, t3, i4) {
  var r3, o3;
  n: if ("style" == l3) if ("string" == typeof u4) n3.style.cssText = u4;
  else {
    if ("string" == typeof t3 && (n3.style.cssText = t3 = ""), t3) for (l3 in t3) u4 && l3 in u4 || T2(n3.style, l3, "");
    if (u4) for (l3 in u4) t3 && u4[l3] == t3[l3] || T2(n3.style, l3, u4[l3]);
  }
  else if ("o" == l3[0] && "n" == l3[1]) r3 = l3 != (l3 = l3.replace(f2, "$1")), o3 = l3.toLowerCase(), l3 = o3 in n3 || "onFocusOut" == l3 || "onFocusIn" == l3 ? o3.slice(2) : l3.slice(2), n3.l || (n3.l = {}), n3.l[l3 + r3] = u4, u4 ? t3 ? u4.u = t3.u : (u4.u = c2, n3.addEventListener(l3, r3 ? a2 : s2, r3)) : n3.removeEventListener(l3, r3 ? a2 : s2, r3);
  else {
    if ("http://www.w3.org/2000/svg" == i4) l3 = l3.replace(/xlink(H|:h)/, "h").replace(/sName$/, "s");
    else if ("width" != l3 && "height" != l3 && "href" != l3 && "list" != l3 && "form" != l3 && "tabIndex" != l3 && "download" != l3 && "rowSpan" != l3 && "colSpan" != l3 && "role" != l3 && "popover" != l3 && l3 in n3) try {
      n3[l3] = null == u4 ? "" : u4;
      break n;
    } catch (n4) {
    }
    "function" == typeof u4 || (null == u4 || false === u4 && "-" != l3[4] ? n3.removeAttribute(l3) : n3.setAttribute(l3, "popover" == l3 && 1 == u4 ? "" : u4));
  }
}
function F2(n3) {
  return function(u4) {
    if (this.l) {
      var t3 = this.l[u4.type + n3];
      if (null == u4.t) u4.t = c2++;
      else if (u4.t < t3.u) return;
      return t3(l2.event ? l2.event(u4) : u4);
    }
  };
}
function O2(n3, u4, t3, i4, r3, o3, e4, f4, c3, s3) {
  var a3, h3, p3, v3, y3, _3, m3, b2, S3, C3, M3, $3, P3, A3, H2, L3, T3, j3 = u4.type;
  if (null != u4.constructor) return null;
  128 & t3.__u && (c3 = !!(32 & t3.__u), o3 = [f4 = u4.__e = t3.__e]), (a3 = l2.__b) && a3(u4);
  n: if ("function" == typeof j3) try {
    if (b2 = u4.props, S3 = "prototype" in j3 && j3.prototype.render, C3 = (a3 = j3.contextType) && i4[a3.__c], M3 = a3 ? C3 ? C3.props.value : a3.__ : i4, t3.__c ? m3 = (h3 = u4.__c = t3.__c).__ = h3.__E : (S3 ? u4.__c = h3 = new j3(b2, M3) : (u4.__c = h3 = new x2(b2, M3), h3.constructor = j3, h3.render = E2), C3 && C3.sub(h3), h3.props = b2, h3.state || (h3.state = {}), h3.context = M3, h3.__n = i4, p3 = h3.__d = true, h3.__h = [], h3._sb = []), S3 && null == h3.__s && (h3.__s = h3.state), S3 && null != j3.getDerivedStateFromProps && (h3.__s == h3.state && (h3.__s = d2({}, h3.__s)), d2(h3.__s, j3.getDerivedStateFromProps(b2, h3.__s))), v3 = h3.props, y3 = h3.state, h3.__v = u4, p3) S3 && null == j3.getDerivedStateFromProps && null != h3.componentWillMount && h3.componentWillMount(), S3 && null != h3.componentDidMount && h3.__h.push(h3.componentDidMount);
    else {
      if (S3 && null == j3.getDerivedStateFromProps && b2 !== v3 && null != h3.componentWillReceiveProps && h3.componentWillReceiveProps(b2, M3), !h3.__e && null != h3.shouldComponentUpdate && false === h3.shouldComponentUpdate(b2, h3.__s, M3) || u4.__v == t3.__v) {
        for (u4.__v != t3.__v && (h3.props = b2, h3.state = h3.__s, h3.__d = false), u4.__e = t3.__e, u4.__k = t3.__k, u4.__k.some(function(n4) {
          n4 && (n4.__ = u4);
        }), $3 = 0; $3 < h3._sb.length; $3++) h3.__h.push(h3._sb[$3]);
        h3._sb = [], h3.__h.length && e4.push(h3);
        break n;
      }
      null != h3.componentWillUpdate && h3.componentWillUpdate(b2, h3.__s, M3), S3 && null != h3.componentDidUpdate && h3.__h.push(function() {
        h3.componentDidUpdate(v3, y3, _3);
      });
    }
    if (h3.context = M3, h3.props = b2, h3.__P = n3, h3.__e = false, P3 = l2.__r, A3 = 0, S3) {
      for (h3.state = h3.__s, h3.__d = false, P3 && P3(u4), a3 = h3.render(h3.props, h3.state, h3.context), H2 = 0; H2 < h3._sb.length; H2++) h3.__h.push(h3._sb[H2]);
      h3._sb = [];
    } else do {
      h3.__d = false, P3 && P3(u4), a3 = h3.render(h3.props, h3.state, h3.context), h3.state = h3.__s;
    } while (h3.__d && ++A3 < 25);
    h3.state = h3.__s, null != h3.getChildContext && (i4 = d2(d2({}, i4), h3.getChildContext())), S3 && !p3 && null != h3.getSnapshotBeforeUpdate && (_3 = h3.getSnapshotBeforeUpdate(v3, y3)), L3 = a3, null != a3 && a3.type === k2 && null == a3.key && (L3 = V2(a3.props.children)), f4 = I2(n3, w2(L3) ? L3 : [L3], u4, t3, i4, r3, o3, e4, f4, c3, s3), h3.base = u4.__e, u4.__u &= -161, h3.__h.length && e4.push(h3), m3 && (h3.__E = h3.__ = null);
  } catch (n4) {
    if (u4.__v = null, c3 || null != o3) if (n4.then) {
      for (u4.__u |= c3 ? 160 : 128; f4 && 8 == f4.nodeType && f4.nextSibling; ) f4 = f4.nextSibling;
      o3[o3.indexOf(f4)] = null, u4.__e = f4;
    } else {
      for (T3 = o3.length; T3--; ) g2(o3[T3]);
      z2(u4);
    }
    else u4.__e = t3.__e, u4.__k = t3.__k, n4.then || z2(u4);
    l2.__e(n4, u4, t3);
  }
  else null == o3 && u4.__v == t3.__v ? (u4.__k = t3.__k, u4.__e = t3.__e) : f4 = u4.__e = q2(t3.__e, u4, t3, i4, r3, o3, e4, c3, s3);
  return (a3 = l2.diffed) && a3(u4), 128 & u4.__u ? void 0 : f4;
}
function z2(n3) {
  n3 && n3.__c && (n3.__c.__e = true), n3 && n3.__k && n3.__k.forEach(z2);
}
function N2(n3, u4, t3) {
  for (var i4 = 0; i4 < t3.length; i4++) B2(t3[i4], t3[++i4], t3[++i4]);
  l2.__c && l2.__c(u4, n3), n3.some(function(u5) {
    try {
      n3 = u5.__h, u5.__h = [], n3.some(function(n4) {
        n4.call(u5);
      });
    } catch (n4) {
      l2.__e(n4, u5.__v);
    }
  });
}
function V2(n3) {
  return "object" != typeof n3 || null == n3 || n3.__b && n3.__b > 0 ? n3 : w2(n3) ? n3.map(V2) : d2({}, n3);
}
function q2(u4, t3, i4, r3, o3, e4, f4, c3, s3) {
  var a3, h3, v3, y3, d3, _3, m3, b2 = i4.props, k3 = t3.props, x3 = t3.type;
  if ("svg" == x3 ? o3 = "http://www.w3.org/2000/svg" : "math" == x3 ? o3 = "http://www.w3.org/1998/Math/MathML" : o3 || (o3 = "http://www.w3.org/1999/xhtml"), null != e4) {
    for (a3 = 0; a3 < e4.length; a3++) if ((d3 = e4[a3]) && "setAttribute" in d3 == !!x3 && (x3 ? d3.localName == x3 : 3 == d3.nodeType)) {
      u4 = d3, e4[a3] = null;
      break;
    }
  }
  if (null == u4) {
    if (null == x3) return document.createTextNode(k3);
    u4 = document.createElementNS(o3, x3, k3.is && k3), c3 && (l2.__m && l2.__m(t3, e4), c3 = false), e4 = null;
  }
  if (null == x3) b2 === k3 || c3 && u4.data == k3 || (u4.data = k3);
  else {
    if (e4 = e4 && n2.call(u4.childNodes), b2 = i4.props || p2, !c3 && null != e4) for (b2 = {}, a3 = 0; a3 < u4.attributes.length; a3++) b2[(d3 = u4.attributes[a3]).name] = d3.value;
    for (a3 in b2) if (d3 = b2[a3], "children" == a3) ;
    else if ("dangerouslySetInnerHTML" == a3) v3 = d3;
    else if (!(a3 in k3)) {
      if ("value" == a3 && "defaultValue" in k3 || "checked" == a3 && "defaultChecked" in k3) continue;
      j2(u4, a3, null, d3, o3);
    }
    for (a3 in k3) d3 = k3[a3], "children" == a3 ? y3 = d3 : "dangerouslySetInnerHTML" == a3 ? h3 = d3 : "value" == a3 ? _3 = d3 : "checked" == a3 ? m3 = d3 : c3 && "function" != typeof d3 || b2[a3] === d3 || j2(u4, a3, d3, b2[a3], o3);
    if (h3) c3 || v3 && (h3.__html == v3.__html || h3.__html == u4.innerHTML) || (u4.innerHTML = h3.__html), t3.__k = [];
    else if (v3 && (u4.innerHTML = ""), I2("template" == t3.type ? u4.content : u4, w2(y3) ? y3 : [y3], t3, i4, r3, "foreignObject" == x3 ? "http://www.w3.org/1999/xhtml" : o3, e4, f4, e4 ? e4[0] : i4.__k && S2(i4, 0), c3, s3), null != e4) for (a3 = e4.length; a3--; ) g2(e4[a3]);
    c3 || (a3 = "value", "progress" == x3 && null == _3 ? u4.removeAttribute("value") : null != _3 && (_3 !== u4[a3] || "progress" == x3 && !_3 || "option" == x3 && _3 != b2[a3]) && j2(u4, a3, _3, b2[a3], o3), a3 = "checked", null != m3 && m3 != u4[a3] && j2(u4, a3, m3, b2[a3], o3));
  }
  return u4;
}
function B2(n3, u4, t3) {
  try {
    if ("function" == typeof n3) {
      var i4 = "function" == typeof n3.__u;
      i4 && n3.__u(), i4 && null == u4 || (n3.__u = n3(u4));
    } else n3.current = u4;
  } catch (n4) {
    l2.__e(n4, t3);
  }
}
function D2(n3, u4, t3) {
  var i4, r3;
  if (l2.unmount && l2.unmount(n3), (i4 = n3.ref) && (i4.current && i4.current != n3.__e || B2(i4, null, u4)), null != (i4 = n3.__c)) {
    if (i4.componentWillUnmount) try {
      i4.componentWillUnmount();
    } catch (n4) {
      l2.__e(n4, u4);
    }
    i4.base = i4.__P = null;
  }
  if (i4 = n3.__k) for (r3 = 0; r3 < i4.length; r3++) i4[r3] && D2(i4[r3], u4, t3 || "function" != typeof n3.type);
  t3 || g2(n3.__e), n3.__c = n3.__ = n3.__e = void 0;
}
function E2(n3, l3, u4) {
  return this.constructor(n3, u4);
}
function G2(u4, t3, i4) {
  var r3, o3, e4, f4;
  t3 == document && (t3 = document.documentElement), l2.__ && l2.__(u4, t3), o3 = (r3 = "function" == typeof i4) ? null : i4 && i4.__k || t3.__k, e4 = [], f4 = [], O2(t3, u4 = (!r3 && i4 || t3).__k = _2(k2, null, [u4]), o3 || p2, p2, t3.namespaceURI, !r3 && i4 ? [i4] : o3 ? null : t3.firstChild ? n2.call(t3.childNodes) : null, e4, !r3 && i4 ? i4 : o3 ? o3.__e : t3.firstChild, r3, f4), N2(e4, u4, f4);
}
n2 = v2.slice, l2 = { __e: function(n3, l3, u4, t3) {
  for (var i4, r3, o3; l3 = l3.__; ) if ((i4 = l3.__c) && !i4.__) try {
    if ((r3 = i4.constructor) && null != r3.getDerivedStateFromError && (i4.setState(r3.getDerivedStateFromError(n3)), o3 = i4.__d), null != i4.componentDidCatch && (i4.componentDidCatch(n3, t3 || {}), o3 = i4.__d), o3) return i4.__E = i4;
  } catch (l4) {
    n3 = l4;
  }
  throw n3;
} }, u2 = 0, t2 = function(n3) {
  return null != n3 && null == n3.constructor;
}, x2.prototype.setState = function(n3, l3) {
  var u4;
  u4 = null != this.__s && this.__s != this.state ? this.__s : this.__s = d2({}, this.state), "function" == typeof n3 && (n3 = n3(d2({}, u4), this.props)), n3 && d2(u4, n3), null != n3 && this.__v && (l3 && this._sb.push(l3), M2(this));
}, x2.prototype.forceUpdate = function(n3) {
  this.__v && (this.__e = true, n3 && this.__h.push(n3), M2(this));
}, x2.prototype.render = k2, i2 = [], o2 = "function" == typeof Promise ? Promise.prototype.then.bind(Promise.resolve()) : setTimeout, e3 = function(n3, l3) {
  return n3.__v.__b - l3.__v.__b;
}, $2.__r = 0, f2 = /(PointerCapture)$|Capture$/i, c2 = 0, s2 = F2(false), a2 = F2(true), h2 = 0;

// ../../../.yarn/berry/cache/preact-npm-10.27.1-1ad8af53de-10c0.zip/node_modules/preact/jsx-runtime/dist/jsxRuntime.module.js
var f3 = 0;
var i3 = Array.isArray;
function u3(e4, t3, n3, o3, i4, u4) {
  t3 || (t3 = {});
  var a3, c3, p3 = t3;
  if ("ref" in p3) for (c3 in p3 = {}, t3) "ref" == c3 ? a3 = t3[c3] : p3[c3] = t3[c3];
  var l3 = { type: e4, props: p3, key: n3, ref: a3, __k: null, __: null, __b: 0, __e: null, __c: null, constructor: void 0, __v: --f3, __i: -1, __u: 0, __source: i4, __self: u4 };
  if ("function" == typeof e4 && (a3 = e4.defaultProps)) for (c3 in a3) void 0 === p3[c3] && (p3[c3] = a3[c3]);
  return l2.vnode && l2.vnode(l3), l3;
}

// .yarn/__virtual__/@deck.gl-widgets-virtual-b8a0196a2e/4/.yarn/berry/cache/@deck.gl-widgets-npm-9.1.14-d4c2911b85-10c0.zip/node_modules/@deck.gl/widgets/dist/components.js
var IconButton = (props) => {
  const { className, label, onClick } = props;
  return u3("div", { className: "deck-widget-button", children: u3("button", { className: `deck-widget-icon-button ${className}`, type: "button", onClick, title: label, children: u3("div", { className: "deck-widget-icon" }) }) });
};
var ButtonGroup = (props) => {
  const { children, orientation } = props;
  return u3("div", { className: `deck-widget-button-group ${orientation}`, children });
};
var GroupedIconButton = (props) => {
  const { className, label, onClick } = props;
  return u3("button", { className: `deck-widget-icon-button ${className}`, type: "button", onClick, title: label, children: u3("div", { className: "deck-widget-icon" }) });
};

// .yarn/__virtual__/@deck.gl-widgets-virtual-b8a0196a2e/4/.yarn/berry/cache/@deck.gl-widgets-npm-9.1.14-d4c2911b85-10c0.zip/node_modules/@deck.gl/widgets/dist/fullscreen-widget.js
var FullscreenWidget = class {
  constructor(props) {
    this.id = "fullscreen";
    this.placement = "top-left";
    this.fullscreen = false;
    this.id = props.id ?? this.id;
    this.placement = props.placement ?? this.placement;
    this.props = {
      ...props,
      enterLabel: props.enterLabel ?? "Enter Fullscreen",
      exitLabel: props.exitLabel ?? "Exit Fullscreen",
      style: props.style ?? {}
    };
  }
  onAdd({ deck }) {
    const { style, className } = this.props;
    const el = document.createElement("div");
    el.classList.add("deck-widget", "deck-widget-fullscreen");
    if (className)
      el.classList.add(className);
    applyStyles(el, style);
    this.deck = deck;
    this.element = el;
    this.update();
    document.addEventListener("fullscreenchange", this.onFullscreenChange.bind(this));
    return el;
  }
  onRemove() {
    this.deck = void 0;
    this.element = void 0;
    document.removeEventListener("fullscreenchange", this.onFullscreenChange.bind(this));
  }
  update() {
    const { enterLabel, exitLabel } = this.props;
    const element = this.element;
    if (!element) {
      return;
    }
    const ui = u3(IconButton, { onClick: this.handleClick.bind(this), label: this.fullscreen ? exitLabel : enterLabel, className: this.fullscreen ? "deck-widget-fullscreen-exit" : "deck-widget-fullscreen-enter" });
    G2(ui, element);
  }
  setProps(props) {
    this.placement = props.placement ?? this.placement;
    const oldProps = this.props;
    const el = this.element;
    if (el) {
      if (oldProps.className !== props.className) {
        if (oldProps.className)
          el.classList.remove(oldProps.className);
        if (props.className)
          el.classList.add(props.className);
      }
      if (!deepEqual2(oldProps.style, props.style, 1)) {
        removeStyles(el, oldProps.style);
        applyStyles(el, props.style);
      }
    }
    Object.assign(this.props, props);
    this.update();
  }
  getContainer() {
    var _a3, _b;
    return this.props.container || ((_b = (_a3 = this.deck) == null ? void 0 : _a3.getCanvas()) == null ? void 0 : _b.parentElement);
  }
  onFullscreenChange() {
    const prevFullscreen = this.fullscreen;
    const fullscreen = document.fullscreenElement === this.getContainer();
    if (prevFullscreen !== fullscreen) {
      this.fullscreen = !this.fullscreen;
    }
    this.update();
  }
  async handleClick() {
    if (this.fullscreen) {
      await this.exitFullscreen();
    } else {
      await this.requestFullscreen();
    }
    this.update();
  }
  async requestFullscreen() {
    const container = this.getContainer();
    if (container == null ? void 0 : container.requestFullscreen) {
      await container.requestFullscreen({ navigationUI: "hide" });
    } else {
      this.togglePseudoFullscreen();
    }
  }
  async exitFullscreen() {
    if (document.exitFullscreen) {
      await document.exitFullscreen();
    } else {
      this.togglePseudoFullscreen();
    }
  }
  togglePseudoFullscreen() {
    var _a3;
    (_a3 = this.getContainer()) == null ? void 0 : _a3.classList.toggle("deck-pseudo-fullscreen");
  }
};

// .yarn/__virtual__/@deck.gl-widgets-virtual-b8a0196a2e/4/.yarn/berry/cache/@deck.gl-widgets-npm-9.1.14-d4c2911b85-10c0.zip/node_modules/@deck.gl/widgets/dist/compass-widget.js
var CompassWidget = class {
  constructor(props) {
    this.id = "compass";
    this.placement = "top-left";
    this.viewId = null;
    this.viewports = {};
    this.id = props.id ?? this.id;
    this.viewId = props.viewId ?? this.viewId;
    this.placement = props.placement ?? this.placement;
    this.props = {
      ...props,
      transitionDuration: props.transitionDuration ?? 200,
      label: props.label ?? "Reset Compass",
      style: props.style ?? {}
    };
  }
  setProps(props) {
    this.placement = props.placement ?? this.placement;
    this.viewId = props.viewId ?? this.viewId;
    const oldProps = this.props;
    const el = this.element;
    if (el) {
      if (oldProps.className !== props.className) {
        if (oldProps.className)
          el.classList.remove(oldProps.className);
        if (props.className)
          el.classList.add(props.className);
      }
      if (!deepEqual2(oldProps.style, props.style, 1)) {
        removeStyles(el, oldProps.style);
        applyStyles(el, props.style);
      }
    }
    Object.assign(this.props, props);
    this.update();
  }
  onViewportChange(viewport) {
    if (!viewport.equals(this.viewports[viewport.id])) {
      this.viewports[viewport.id] = viewport;
      this.update();
    }
  }
  onAdd({ deck }) {
    const { style, className } = this.props;
    const element = document.createElement("div");
    element.classList.add("deck-widget", "deck-widget-compass");
    if (className)
      element.classList.add(className);
    applyStyles(element, style);
    this.deck = deck;
    this.element = element;
    this.update();
    return element;
  }
  getRotation(viewport) {
    if (viewport instanceof web_mercator_viewport_default) {
      return [-viewport.bearing, viewport.pitch];
    } else if (viewport instanceof GlobeViewport) {
      return [0, Math.max(-80, Math.min(80, viewport.latitude))];
    }
    return [0, 0];
  }
  update() {
    var _a3;
    const viewId = this.viewId || ((_a3 = Object.values(this.viewports)[0]) == null ? void 0 : _a3.id) || "default-view";
    const viewport = this.viewports[viewId];
    const [rz, rx] = this.getRotation(viewport);
    const element = this.element;
    if (!element) {
      return;
    }
    const ui = u3("div", { className: "deck-widget-button", style: { perspective: 100 }, children: u3("button", { type: "button", onClick: () => {
      for (const viewport2 of Object.values(this.viewports)) {
        this.handleCompassReset(viewport2);
      }
    }, title: this.props.label, style: { transform: `rotateX(${rx}deg)` }, children: u3("svg", { fill: "none", width: "100%", height: "100%", viewBox: "0 0 26 26", children: u3("g", { transform: `rotate(${rz},13,13)`, children: [u3("path", { d: "M10 13.0001L12.9999 5L15.9997 13.0001H10Z", fill: "var(--icon-compass-north-color, #F05C44)" }), u3("path", { d: "M16.0002 12.9999L13.0004 21L10.0005 12.9999H16.0002Z", fill: "var(--icon-compass-south-color, #C2C2CC)" })] }) }) }) });
    G2(ui, element);
  }
  onRemove() {
    this.deck = void 0;
    this.element = void 0;
  }
  handleCompassReset(viewport) {
    const viewId = this.viewId || viewport.id || "default-view";
    if (viewport instanceof web_mercator_viewport_default) {
      const nextViewState = {
        ...viewport,
        bearing: 0,
        ...this.getRotation(viewport)[0] === 0 ? { pitch: 0 } : {},
        transitionDuration: this.props.transitionDuration,
        transitionInterpolator: new FlyToInterpolator()
      };
      this.deck._onViewStateChange({ viewId, viewState: nextViewState, interactionState: {} });
    }
  }
};

// .yarn/__virtual__/@deck.gl-widgets-virtual-b8a0196a2e/4/.yarn/berry/cache/@deck.gl-widgets-npm-9.1.14-d4c2911b85-10c0.zip/node_modules/@deck.gl/widgets/dist/zoom-widget.js
var ZoomWidget = class _ZoomWidget {
  constructor(props = {}) {
    this.id = "zoom";
    this.placement = "top-left";
    this.viewId = null;
    this.viewports = {};
    this.id = props.id ?? this.id;
    this.viewId = props.viewId ?? this.viewId;
    this.placement = props.placement ?? this.placement;
    this.props = {
      ..._ZoomWidget.defaultProps,
      ...props
    };
  }
  onAdd({ deck }) {
    const { style, className } = this.props;
    const element = document.createElement("div");
    element.classList.add("deck-widget", "deck-widget-zoom");
    if (className)
      element.classList.add(className);
    applyStyles(element, style);
    this.deck = deck;
    this.element = element;
    this.update();
    return element;
  }
  onRemove() {
    this.deck = void 0;
    this.element = void 0;
  }
  setProps(props) {
    this.placement = props.placement ?? this.placement;
    this.viewId = props.viewId ?? this.viewId;
    const oldProps = this.props;
    const el = this.element;
    if (el) {
      if (oldProps.className !== props.className) {
        if (oldProps.className)
          el.classList.remove(oldProps.className);
        if (props.className)
          el.classList.add(props.className);
      }
      if (!deepEqual2(oldProps.style, props.style, 1)) {
        removeStyles(el, oldProps.style);
        applyStyles(el, props.style);
      }
    }
    Object.assign(this.props, props);
    this.update();
  }
  onViewportChange(viewport) {
    this.viewports[viewport.id] = viewport;
  }
  handleZoom(viewport, nextZoom) {
    const viewId = this.viewId || (viewport == null ? void 0 : viewport.id) || "default-view";
    const nextViewState = {
      ...viewport,
      zoom: nextZoom
    };
    if (this.props.transitionDuration > 0) {
      nextViewState.transitionDuration = this.props.transitionDuration;
      nextViewState.transitionInterpolator = "latitude" in nextViewState ? new FlyToInterpolator() : new LinearInterpolator();
    }
    this.setViewState(viewId, nextViewState);
  }
  handleZoomIn() {
    for (const viewport of Object.values(this.viewports)) {
      this.handleZoom(viewport, viewport.zoom + 1);
    }
  }
  handleZoomOut() {
    for (const viewport of Object.values(this.viewports)) {
      this.handleZoom(viewport, viewport.zoom - 1);
    }
  }
  /**
   * @todo - move to deck or widget manager
   */
  setViewState(viewId, viewState) {
    this.deck._onViewStateChange({ viewId, viewState, interactionState: {} });
  }
  update() {
    const element = this.element;
    if (!element) {
      return;
    }
    const ui = u3(ButtonGroup, { orientation: this.props.orientation, children: [u3(GroupedIconButton, { onClick: () => this.handleZoomIn(), label: this.props.zoomInLabel, className: "deck-widget-zoom-in" }), u3(GroupedIconButton, { onClick: () => this.handleZoomOut(), label: this.props.zoomOutLabel, className: "deck-widget-zoom-out" })] });
    G2(ui, element);
  }
};
ZoomWidget.defaultProps = {
  id: "zoom-widget",
  style: {},
  placement: "top-left",
  className: void 0,
  orientation: "vertical",
  transitionDuration: 200,
  zoomInLabel: "Zoom In",
  zoomOutLabel: "Zoom Out",
  viewId: void 0
};

// .yarn/__virtual__/@deck.gl-widgets-virtual-b8a0196a2e/4/.yarn/berry/cache/@deck.gl-widgets-npm-9.1.14-d4c2911b85-10c0.zip/node_modules/@deck.gl/widgets/dist/widget-impl.js
var WidgetImpl = class {
  constructor(props) {
    this.id = props.id || "widget";
    this.props = props;
  }
  onAdd({ deck }) {
    this.deck = deck;
    const { style, className } = this.props;
    const el = this._createRootElement({
      widgetClassName: this.className,
      className,
      style
    });
    this.element = el;
    this.onRenderHTML();
    return this.element;
  }
  onRemove() {
    this.deck = void 0;
    this.element = void 0;
  }
  setProps(props) {
    const oldProps = this.props;
    const el = this.element;
    if (el) {
      if (oldProps.className !== props.className) {
        if (oldProps.className)
          el.classList.remove(oldProps.className);
        if (props.className)
          el.classList.add(props.className);
      }
      if (!deepEqual2(oldProps.style, props.style, 1)) {
        removeStyles(el, oldProps.style);
        applyStyles(el, props.style);
      }
    }
    Object.assign(this.props, props);
    this.onRenderHTML();
  }
  _createRootElement(props) {
    const { widgetClassName, className, style } = props;
    const element = document.createElement("div");
    ["deck-widget", widgetClassName, className].filter((cls) => typeof cls === "string" && cls.length > 0).forEach((className2) => element.classList.add(className2));
    applyStyles(element, style);
    return element;
  }
};
WidgetImpl.defaultProps = {
  id: "widget",
  style: {},
  className: ""
};

// .yarn/__virtual__/@deck.gl-widgets-virtual-b8a0196a2e/4/.yarn/berry/cache/@deck.gl-widgets-npm-9.1.14-d4c2911b85-10c0.zip/node_modules/@deck.gl/widgets/dist/screenshot-widget.js
var ScreenshotWidget = class _ScreenshotWidget extends WidgetImpl {
  constructor(props = {}) {
    super({ ..._ScreenshotWidget.defaultProps, ...props });
    this.className = "deck-widget-screenshot";
    this.placement = "top-left";
    this.placement = props.placement ?? this.placement;
  }
  setProps(props) {
    this.placement = props.placement ?? this.placement;
    super.setProps(props);
  }
  onRenderHTML() {
    const element = this.element;
    if (!element)
      return;
    G2(u3(IconButton, { className: "deck-widget-camera", label: this.props.label, onClick: this.handleClick.bind(this) }), element);
  }
  handleClick() {
    if (this.props.onCapture) {
      this.props.onCapture(this);
      return;
    }
    const dataURL = this.captureScreenToDataURL(this.props.imageFormat);
    if (dataURL) {
      this.downloadDataURL(dataURL, this.props.filename);
    }
  }
  /** @note only captures canvas contents, not HTML DOM or CSS styles */
  captureScreenToDataURL(imageFormat) {
    var _a3;
    const canvas2 = (_a3 = this.deck) == null ? void 0 : _a3.getCanvas();
    return canvas2 == null ? void 0 : canvas2.toDataURL(imageFormat);
  }
  /** Download a data URL */
  downloadDataURL(dataURL, filename2) {
    const link = document.createElement("a");
    link.href = dataURL;
    link.download = filename2;
    link.click();
  }
};
ScreenshotWidget.defaultProps = {
  ...WidgetImpl.defaultProps,
  id: "screenshot",
  placement: "top-left",
  label: "Screenshot",
  filename: "screenshot.png",
  imageFormat: "image/png",
  onCapture: void 0
};

// .yarn/__virtual__/@deck.gl-widgets-virtual-b8a0196a2e/4/.yarn/berry/cache/@deck.gl-widgets-npm-9.1.14-d4c2911b85-10c0.zip/node_modules/@deck.gl/widgets/dist/reset-view-widget.js
var ResetViewWidget = class _ResetViewWidget extends WidgetImpl {
  constructor(props = {}) {
    super({ ..._ResetViewWidget.defaultProps, ...props });
    this.className = "deck-widget-reset-view";
    this.placement = "top-left";
    this.placement = props.placement ?? this.placement;
  }
  setProps(props) {
    this.placement = props.placement ?? this.placement;
    super.setProps(props);
  }
  onRenderHTML() {
    const element = this.element;
    if (!element)
      return;
    G2(u3(IconButton, { className: "deck-widget-reset-focus", label: this.props.label, onClick: this.handleClick.bind(this) }), element);
  }
  handleClick() {
    var _a3;
    const initialViewState = this.props.initialViewState || ((_a3 = this.deck) == null ? void 0 : _a3.props.initialViewState);
    this.setViewState(initialViewState);
  }
  setViewState(viewState) {
    const viewId = this.props.viewId || (viewState == null ? void 0 : viewState.id) || "default-view";
    const nextViewState = {
      ...viewState
      // only works for geospatial?
      // transitionDuration: this.props.transitionDuration,
      // transitionInterpolator: new FlyToInterpolator()
    };
    this.deck._onViewStateChange({ viewId, viewState: nextViewState, interactionState: {} });
  }
};
ResetViewWidget.defaultProps = {
  ...WidgetImpl.defaultProps,
  id: "reset-view",
  placement: "top-left",
  label: "Reset View",
  initialViewState: void 0,
  viewId: void 0
};

// .yarn/__virtual__/@deck.gl-react-virtual-e01d66b29a/4/.yarn/berry/cache/@deck.gl-react-npm-9.1.14-4f5993c079-10c0.zip/node_modules/@deck.gl/react/dist/utils/use-widget.js
var import_react7 = __toESM(require_react(), 1);
function useWidget(WidgetClass, props) {
  const context = (0, import_react7.useContext)(DeckGlContext);
  const { widgets, deck } = context;
  (0, import_react7.useEffect)(() => {
    const internalWidgets = deck == null ? void 0 : deck.props.widgets;
    if ((widgets == null ? void 0 : widgets.length) && (internalWidgets == null ? void 0 : internalWidgets.length) && !deepEqual2(internalWidgets, widgets, 1)) {
      log_default.warn('"widgets" prop will be ignored because React widgets are in use.')();
    }
    return () => {
      const index = widgets == null ? void 0 : widgets.indexOf(widget);
      if (index && index !== -1) {
        widgets == null ? void 0 : widgets.splice(index, 1);
        deck == null ? void 0 : deck.setProps({ widgets });
      }
    };
  }, []);
  const widget = (0, import_react7.useMemo)(() => new WidgetClass(props), [WidgetClass]);
  widgets == null ? void 0 : widgets.push(widget);
  widget.setProps(props);
  (0, import_react7.useEffect)(() => {
    deck == null ? void 0 : deck.setProps({ widgets });
  }, [widgets]);
  return widget;
}

// .yarn/__virtual__/@deck.gl-react-virtual-e01d66b29a/4/.yarn/berry/cache/@deck.gl-react-npm-9.1.14-4f5993c079-10c0.zip/node_modules/@deck.gl/react/dist/widgets/compass-widget.js
var CompassWidget2 = (props = {}) => {
  useWidget(CompassWidget, props);
  return null;
};

// .yarn/__virtual__/@deck.gl-react-virtual-e01d66b29a/4/.yarn/berry/cache/@deck.gl-react-npm-9.1.14-4f5993c079-10c0.zip/node_modules/@deck.gl/react/dist/widgets/fullscreen-widget.js
var FullscreenWidget2 = (props = {}) => {
  useWidget(FullscreenWidget, props);
  return null;
};

// .yarn/__virtual__/@deck.gl-react-virtual-e01d66b29a/4/.yarn/berry/cache/@deck.gl-react-npm-9.1.14-4f5993c079-10c0.zip/node_modules/@deck.gl/react/dist/widgets/zoom-widget.js
var ZoomWidget2 = (props = {}) => {
  useWidget(ZoomWidget, props);
  return null;
};
export {
  CompassWidget2 as CompassWidget,
  deckgl_default as DeckGL,
  FullscreenWidget2 as FullscreenWidget,
  ZoomWidget2 as ZoomWidget,
  deckgl_default as default,
  useWidget
};
//# sourceMappingURL=@deck__gl_react.js.map
